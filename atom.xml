<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lucky845的博客</title>
  
  <subtitle>lucky845的博客</subtitle>
  <link href="https://lucky845.github.io/atom.xml" rel="self"/>
  
  <link href="https://lucky845.github.io/"/>
  <updated>2025-02-25T12:19:56.535Z</updated>
  <id>https://lucky845.github.io/</id>
  
  <author>
    <name>lucky845</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Redis】发布/订阅（Pub/Sub）机制详解</title>
    <link href="https://lucky845.github.io/archives/b55fa582.html"/>
    <id>https://lucky845.github.io/archives/b55fa582.html</id>
    <published>2025-02-25T10:00:00.000Z</published>
    <updated>2025-02-25T12:19:56.535Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>Redis 提供了一种强大的消息传递机制，称为发布/订阅（Pub/Sub）。这种机制允许消息的发送者（发布者）和接收者（订阅者）之间进行解耦，使得系统的各个部分可以独立地进行通信。本文将介绍 Redis 的发布/订阅机制及其使用方法。</p><h2 id="1-发布-订阅的基本概念"><a href="#1-发布-订阅的基本概念" class="headerlink" title="1. 发布/订阅的基本概念"></a>1. 发布/订阅的基本概念</h2><p>在 Redis 中，发布/订阅机制的基本概念如下：</p><ul><li><strong>发布者</strong>：发送消息的客户端。</li><li><strong>订阅者</strong>：接收消息的客户端。</li><li><strong>频道</strong>：消息的传递通道，发布者将消息发送到特定的频道，订阅者通过订阅频道来接收消息。</li></ul><h2 id="2-Redis-发布-订阅的基本操作"><a href="#2-Redis-发布-订阅的基本操作" class="headerlink" title="2. Redis 发布/订阅的基本操作"></a>2. Redis 发布/订阅的基本操作</h2><h3 id="2-1-订阅频道"><a href="#2-1-订阅频道" class="headerlink" title="2.1 订阅频道"></a>2.1 订阅频道</h3><p>使用 <code>SUBSCRIBE</code> 命令订阅一个或多个频道：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">SUBSCRIBE channel1 channel2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2-发布消息"><a href="#2-2-发布消息" class="headerlink" title="2.2 发布消息"></a>2.2 发布消息</h3><p>使用 <code>PUBLISH</code> 命令向指定频道发布消息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PUBLISH channel1 <span class="token string">"Hello, Redis!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3-取消订阅"><a href="#2-3-取消订阅" class="headerlink" title="2.3 取消订阅"></a>2.3 取消订阅</h3><p>使用 <code>UNSUBSCRIBE</code> 命令取消对频道的订阅：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">UNSUBSCRIBE channel1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-4-示例代码"><a href="#2-4-示例代码" class="headerlink" title="2.4 示例代码"></a>2.4 示例代码</h3><p>以下是一个使用 Redis 发布/订阅的示例：</p><h4 id="发布者代码"><a href="#发布者代码" class="headerlink" title="发布者代码"></a>发布者代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisPublisher</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 发布消息</span>        jedis<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">"channel1"</span><span class="token punctuation">,</span> <span class="token string">"Hello, Redis!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 关闭连接</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="订阅者代码"><a href="#订阅者代码" class="headerlink" title="订阅者代码"></a>订阅者代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">JedisPubSub</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisSubscriber</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建一个 JedisPubSub 对象</span>        <span class="token class-name">JedisPubSub</span> jedisPubSub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPubSub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> channel<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Received message: "</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">" from channel: "</span> <span class="token operator">+</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment">// 订阅频道</span>        jedis<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>jedisPubSub<span class="token punctuation">,</span> <span class="token string">"channel1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 关闭连接</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-使用场景"><a href="#3-使用场景" class="headerlink" title="3. 使用场景"></a>3. 使用场景</h2><p>Redis 的发布/订阅机制适用于以下场景：</p><ol><li><strong>实时消息推送</strong>：如聊天应用、实时通知等。</li><li><strong>事件驱动架构</strong>：通过事件通知系统的其他部分进行处理。</li><li><strong>日志收集</strong>：将日志信息发布到特定频道，供多个订阅者处理。</li></ol><h2 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a>4. 注意事项</h2><ol><li><strong>消息丢失</strong>：Redis 的发布/订阅机制不保证消息的持久性，消息在发送后如果没有被订阅者接收，将会丢失。</li><li><strong>性能考虑</strong>：在高并发场景下，发布/订阅可能会对 Redis 性能产生影响，需合理设计。</li><li><strong>频道命名</strong>：频道的命名应具有一定的语义，以便于管理和维护。</li></ol><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>Redis 的发布/订阅机制提供了一种简单而有效的消息传递方式，能够实现系统各部分之间的解耦。通过使用 Redis 的发布/订阅功能，开发者可以轻松实现实时消息推送和事件驱动架构。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://redis.io/documentation">Redis 官方文档</a></li><li><a href="https://redis.io/topics/pubsub">Redis 发布/订阅机制</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解-Redis-的发布-订阅机制。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解-Redis-的发布-订阅机制。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解 Redis 的发布/订阅机制。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解 Redis 的发布/订阅机制。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;Redis 提供了一种强大的消息传递机制，称为发布/订阅（Pub/Sub）。这种机制允许消息的发送者（发布者）和接收者（订阅</summary>
      
    
    
    
    <category term="数据库" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/"/>
    
    
    <category term="数据库" scheme="https://lucky845.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis" scheme="https://lucky845.github.io/tags/Redis/"/>
    
    <category term="发布/订阅" scheme="https://lucky845.github.io/tags/%E5%8F%91%E5%B8%83-%E8%AE%A2%E9%98%85/"/>
    
    <category term="消息队列" scheme="https://lucky845.github.io/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>【Redis】事务机制详解</title>
    <link href="https://lucky845.github.io/archives/b55fa582.html"/>
    <id>https://lucky845.github.io/archives/b55fa582.html</id>
    <published>2025-02-25T09:00:00.000Z</published>
    <updated>2025-02-25T12:14:36.804Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在数据库操作中，事务是确保数据一致性和完整性的重要机制。Redis 作为一个高性能的内存数据库，也提供了事务机制。虽然 Redis 的事务与传统关系型数据库的事务有所不同，但它仍然能够保证一组操作的原子性。本文将介绍 Redis 的事务机制及其使用方法。</p><h2 id="1-Redis-事务的基本概念"><a href="#1-Redis-事务的基本概念" class="headerlink" title="1. Redis 事务的基本概念"></a>1. Redis 事务的基本概念</h2><p>Redis 事务是通过 <code>MULTI</code>、<code>EXEC</code>、<code>DISCARD</code> 和 <code>WATCH</code> 命令来实现的。事务中的命令会被排队执行，直到调用 <code>EXEC</code> 命令时才会被执行。Redis 事务的特点包括：</p><ul><li><strong>原子性</strong>：事务中的所有命令要么全部执行成功，要么全部不执行。</li><li><strong>不支持回滚</strong>：一旦事务中的命令被执行，就无法回滚。</li><li><strong>命令排队</strong>：在事务执行之前，所有命令会被排队，直到 <code>EXEC</code> 被调用。</li></ul><h2 id="2-Redis-事务的基本操作"><a href="#2-Redis-事务的基本操作" class="headerlink" title="2. Redis 事务的基本操作"></a>2. Redis 事务的基本操作</h2><h3 id="2-1-开始事务"><a href="#2-1-开始事务" class="headerlink" title="2.1 开始事务"></a>2.1 开始事务</h3><p>使用 <code>MULTI</code> 命令开始一个事务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">MULTI<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2-添加命令到事务"><a href="#2-2-添加命令到事务" class="headerlink" title="2.2 添加命令到事务"></a>2.2 添加命令到事务</h3><p>在事务中添加命令，命令会被排队而不立即执行。例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">SET key1 value1SET key2 value2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-3-执行事务"><a href="#2-3-执行事务" class="headerlink" title="2.3 执行事务"></a>2.3 执行事务</h3><p>使用 <code>EXEC</code> 命令执行事务中的所有命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">EXEC<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-4-取消事务"><a href="#2-4-取消事务" class="headerlink" title="2.4 取消事务"></a>2.4 取消事务</h3><p>如果需要取消事务，可以使用 <code>DISCARD</code> 命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">DISCARD<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-5-示例代码"><a href="#2-5-示例代码" class="headerlink" title="2.5 示例代码"></a>2.5 示例代码</h3><p>以下是一个使用 Redis 事务的示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisTransactionExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 开始事务</span>        jedis<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 添加命令到事务</span>        jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 执行事务</span>        jedis<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 关闭连接</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-使用-WATCH-命令实现乐观锁"><a href="#3-使用-WATCH-命令实现乐观锁" class="headerlink" title="3. 使用 WATCH 命令实现乐观锁"></a>3. 使用 WATCH 命令实现乐观锁</h2><p>Redis 还提供了 <code>WATCH</code> 命令，用于实现乐观锁。在执行事务之前，可以使用 <code>WATCH</code> 命令监视一个或多个键。如果在事务执行之前被监视的键被修改，事务将不会执行。</p><h3 id="3-1-示例代码"><a href="#3-1-示例代码" class="headerlink" title="3.1 示例代码"></a>3.1 示例代码</h3><p>以下是一个使用 <code>WATCH</code> 命令的示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisWatchExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 监视键</span>        jedis<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 开始事务</span>        jedis<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 添加命令到事务</span>        jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 执行事务</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务执行失败，key1 被修改"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务执行成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment">// 关闭连接</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a>4. 注意事项</h2><ol><li><strong>不支持回滚</strong>：Redis 事务一旦执行，无法回滚，因此在设计时要谨慎。</li><li><strong>性能考虑</strong>：虽然 Redis 事务提供了原子性，但在高并发场景下，使用 <code>WATCH</code> 可能会影响性能。</li><li><strong>命令排队</strong>：在事务中，所有命令会被排队，直到 <code>EXEC</code> 被调用，因此要注意命令的顺序。</li></ol><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>Redis 提供了简单而有效的事务机制，能够保证一组操作的原子性。通过使用 <code>MULTI</code>、<code>EXEC</code> 和 <code>WATCH</code> 命令，开发者可以在 Redis 中实现复杂的业务逻辑。合理使用 Redis 事务可以提高数据的一致性和完整性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://redis.io/documentation">Redis 官方文档</a></li><li><a href="https://redis.io/topics/transactions">Redis 事务机制</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解-Redis-的事务机制。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解-Redis-的事务机制。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解 Redis 的事务机制。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解 Redis 的事务机制。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;在数据库操作中，事务是确保数据一致性和完整性的重要机制。Redis 作为一个高性能的内存数据库，也提供了事务机制。虽然 Re</summary>
      
    
    
    
    <category term="数据库" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/"/>
    
    
    <category term="数据库" scheme="https://lucky845.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis" scheme="https://lucky845.github.io/tags/Redis/"/>
    
    <category term="事务" scheme="https://lucky845.github.io/tags/%E4%BA%8B%E5%8A%A1/"/>
    
    <category term="数据一致性" scheme="https://lucky845.github.io/tags/%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>【Redis】持久化方式详解</title>
    <link href="https://lucky845.github.io/archives/b55fa581.html"/>
    <id>https://lucky845.github.io/archives/b55fa581.html</id>
    <published>2025-02-25T08:00:00.000Z</published>
    <updated>2025-02-25T12:03:52.664Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>Redis 是一个高性能的内存数据库，广泛用于缓存和数据存储。虽然 Redis 的数据存储在内存中，但在某些情况下，我们需要将数据持久化到磁盘，以防止数据丢失。Redis 提供了多种持久化方式，本文将详细介绍 Redis 的持久化机制及其优缺点。</p><h2 id="1-Redis-的持久化方式"><a href="#1-Redis-的持久化方式" class="headerlink" title="1. Redis 的持久化方式"></a>1. Redis 的持久化方式</h2><p>Redis 主要提供两种持久化方式：RDB（快照）和 AOF（追加文件）。这两种方式可以单独使用，也可以结合使用。</p><h3 id="1-1-RDB（Redis-DataBase）"><a href="#1-1-RDB（Redis-DataBase）" class="headerlink" title="1.1 RDB（Redis DataBase）"></a>1.1 RDB（Redis DataBase）</h3><p>RDB 是 Redis 的默认持久化方式，它通过在指定的时间间隔内生成数据的快照来实现持久化。RDB 文件是一个二进制文件，包含了 Redis 数据库的完整数据。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li><strong>性能高</strong>：RDB 在生成快照时，Redis 可以继续处理其他请求，因此对性能影响较小。</li><li><strong>数据恢复快</strong>：RDB 文件是一个完整的快照，恢复数据时只需加载这个文件即可。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li><strong>数据丢失风险</strong>：如果 Redis 在快照生成之间崩溃，可能会丢失最近的写入数据。</li><li><strong>持久化时间长</strong>：在数据量较大时，生成 RDB 文件可能需要较长时间，期间会影响性能。</li></ul><h4 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h4><p>在 <code>redis.conf</code> 配置文件中，可以通过以下配置来设置 RDB 的持久化策略：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">save 900 1   # 900秒内至少有1个key发生变化save 300 10  # 300秒内至少有10个key发生变化save 60 10000 # 60秒内至少有10000个key发生变化<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-2-AOF（Append-Only-File）"><a href="#1-2-AOF（Append-Only-File）" class="headerlink" title="1.2 AOF（Append Only File）"></a>1.2 AOF（Append Only File）</h3><p>AOF 是 Redis 的另一种持久化方式，它通过记录每个写操作来实现持久化。每当执行写命令时，Redis 会将该命令追加到 AOF 文件中。</p><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul><li><strong>数据安全性高</strong>：AOF 可以配置为每次写操作后立即同步到磁盘，最大限度地减少数据丢失。</li><li><strong>可读性强</strong>：AOF 文件是一个文本文件，可以通过简单的文本编辑器查看和修改。</li></ul><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul><li><strong>性能开销大</strong>：由于每次写操作都需要追加到 AOF 文件，可能会对性能产生影响。</li><li><strong>文件体积大</strong>：AOF 文件可能会随着时间的推移而变得非常大，影响加载速度。</li></ul><h4 id="配置示例-1"><a href="#配置示例-1" class="headerlink" title="配置示例"></a>配置示例</h4><p>在 <code>redis.conf</code> 配置文件中，可以通过以下配置来设置 AOF 的持久化策略：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">appendonly yesappendfsync always   # 每次写操作后立即同步appendfsync everysec # 每秒同步一次appendfsync no      # 不同步，依赖操作系统<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-RDB-和-AOF-的结合使用"><a href="#2-RDB-和-AOF-的结合使用" class="headerlink" title="2. RDB 和 AOF 的结合使用"></a>2. RDB 和 AOF 的结合使用</h2><p>Redis 允许同时使用 RDB 和 AOF 持久化方式。这样可以在享受 RDB 快照性能的同时，利用 AOF 的高数据安全性。Redis 会在启动时优先加载 AOF 文件，如果 AOF 文件损坏，则会加载 RDB 文件。</p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>Redis 提供了灵活的持久化机制，用户可以根据业务需求选择合适的持久化方式。RDB 适合对性能要求较高的场景，而 AOF 则适合对数据安全性要求较高的场景。结合使用 RDB 和 AOF，可以在性能和数据安全性之间取得平衡。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://redis.io/documentation">Redis 官方文档</a></li><li><a href="https://redis.io/topics/persistence">Redis 持久化机制</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解-Redis-的持久化方式。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解-Redis-的持久化方式。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解 Redis 的持久化方式。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解 Redis 的持久化方式。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;Redis 是一个高性能的内存数据库，广泛用于缓存和数据存储。虽然 Redis 的数据存储在内存中，但在某些情况下，我们需要</summary>
      
    
    
    
    <category term="数据库" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/"/>
    
    
    <category term="数据库" scheme="https://lucky845.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis" scheme="https://lucky845.github.io/tags/Redis/"/>
    
    <category term="持久化" scheme="https://lucky845.github.io/tags/%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
    <category term="数据存储" scheme="https://lucky845.github.io/tags/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>【Spring Boot】使用 AOP 实现分布式锁注解</title>
    <link href="https://lucky845.github.io/archives/b55fa582.html"/>
    <id>https://lucky845.github.io/archives/b55fa582.html</id>
    <published>2025-02-25T07:00:00.000Z</published>
    <updated>2025-02-25T11:54:04.848Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在分布式系统中，使用分布式锁可以有效地防止多个服务实例同时访问共享资源。为了简化分布式锁的使用，我们可以通过自定义注解和 AOP（面向切面编程）来实现分布式锁的功能。本文将介绍如何使用 AOP 实现分布式锁注解。</p><h2 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h2><p>确保在 <code>pom.xml</code> 中添加 Redis 和 AOP 的相关依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-创建分布式锁注解"><a href="#2-创建分布式锁注解" class="headerlink" title="2. 创建分布式锁注解"></a>2. 创建分布式锁注解</h2><p>首先，我们需要定义一个自定义注解 <code>@RedisLock</code>，用于标记需要加锁的方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">RedisLock</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 锁的键</span>    <span class="token keyword">long</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 锁的超时时间</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-实现-AOP-切面"><a href="#3-实现-AOP-切面" class="headerlink" title="3. 实现 AOP 切面"></a>3. 实现 AOP 切面</h2><p>接下来，我们需要创建一个 AOP 切面，用于处理带有 <code>@RedisLock</code> 注解的方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">ProceedingJoinPoint</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Around</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Aspect</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">StringRedisTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisLockAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"@annotation(redisLock)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">RedisLock</span> redisLock<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> key <span class="token operator">=</span> redisLock<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 锁的过期时间</span>        <span class="token keyword">long</span> timeout <span class="token operator">=</span> redisLock<span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 尝试获取锁</span>        <span class="token class-name">Boolean</span> success <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>success <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> success<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment">// 执行目标方法</span>                <span class="token keyword">return</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token comment">// 释放锁</span>                <span class="token class-name">String</span> currentValue <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"获取锁失败，任务正在被其他实例执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-使用分布式锁注解"><a href="#4-使用分布式锁注解" class="headerlink" title="4. 使用分布式锁注解"></a>4. 使用分布式锁注解</h2><p>现在，我们可以在需要加锁的方法上使用 <code>@RedisLock</code> 注解。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RedisLock</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">"lock:myTask"</span><span class="token punctuation">,</span> timeout <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">performTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 执行需要加锁的业务逻辑</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行任务..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 模拟任务执行</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5. 注意事项"></a>5. 注意事项</h2><ol><li><strong>锁的过期时间</strong>：在获取锁时设置合理的过期时间，防止因业务逻辑执行时间过长而导致锁失效。</li><li><strong>锁的唯一性</strong>：确保锁的键具有唯一性，以避免不同业务逻辑之间的锁冲突。</li><li><strong>异常处理</strong>：在释放锁时，确保只有持有锁的客户端才能释放锁，避免误释放。</li><li><strong>可重入锁</strong>：如果需要支持可重入锁，可以在 <code>RedisLockAspect</code> 中维护锁的计数器。</li></ol><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>通过使用 AOP 和自定义注解，我们可以轻松实现分布式锁的功能，简化锁的使用。合理的锁机制可以提高系统的稳定性和数据一致性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://redis.io/documentation">Redis Documentation</a></li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/">Spring Boot Documentation</a></li><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#aop">Spring AOP Documentation</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和实现使用-AOP-的分布式锁注解。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和实现使用-AOP-的分布式锁注解。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和实现使用 AOP 的分布式锁注解。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和实现使用 AOP 的分布式锁注解。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;在分布式系统中，使用分布式锁可以有效地防止多个服务实例同时访问共享资源。为了简化分布式锁的使用，我们可以通过自定义注解和 A</summary>
      
    
    
    
    <category term="Java" scheme="https://lucky845.github.io/categories/Java/"/>
    
    <category term="Spring" scheme="https://lucky845.github.io/categories/Java/Spring/"/>
    
    
    <category term="Java" scheme="https://lucky845.github.io/tags/Java/"/>
    
    <category term="Redis" scheme="https://lucky845.github.io/tags/Redis/"/>
    
    <category term="Spring Boot" scheme="https://lucky845.github.io/tags/Spring-Boot/"/>
    
    <category term="AOP" scheme="https://lucky845.github.io/tags/AOP/"/>
    
    <category term="分布式锁" scheme="https://lucky845.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>【Spring Boot】使用 Redis 实现分布式锁</title>
    <link href="https://lucky845.github.io/archives/b55fa581.html"/>
    <id>https://lucky845.github.io/archives/b55fa581.html</id>
    <published>2025-02-25T06:00:00.000Z</published>
    <updated>2025-02-25T11:50:30.601Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在分布式系统中，多个服务实例可能会同时访问共享资源，这可能导致数据不一致或资源竞争的问题。为了解决这个问题，我们可以使用分布式锁来确保同一时间只有一个实例可以访问共享资源。Redis 是一个高性能的内存数据库，常被用作实现分布式锁的工具。本文将介绍如何使用 Redis 实现分布式锁。</p><h2 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h2><p>首先，确保在 <code>pom.xml</code> 中添加 Redis 的相关依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-Redis-分布式锁的基本原理"><a href="#2-Redis-分布式锁的基本原理" class="headerlink" title="2. Redis 分布式锁的基本原理"></a>2. Redis 分布式锁的基本原理</h2><p>Redis 分布式锁的基本原理是使用 Redis 的 <code>SETNX</code> 命令（SET if Not eXists）来实现锁的获取。具体步骤如下：</p><ol><li>客户端尝试在 Redis 中设置一个锁的键（如 <code>lock:key</code>），并设置一个过期时间。</li><li>如果设置成功，表示获取锁成功；如果设置失败，表示锁已被其他客户端持有。</li><li>客户端在完成操作后，删除锁的键，释放锁。</li></ol><h2 id="3-实现分布式锁"><a href="#3-实现分布式锁" class="headerlink" title="3. 实现分布式锁"></a>3. 实现分布式锁</h2><h3 id="3-1-创建-RedisLock-类"><a href="#3-1-创建-RedisLock-类" class="headerlink" title="3.1 创建 RedisLock 类"></a>3.1 创建 RedisLock 类</h3><p>我们可以创建一个 <code>RedisLock</code> 类来封装分布式锁的逻辑：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">StringRedisTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisLock</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> redisTemplate<span class="token punctuation">;</span>    <span class="token comment">// 获取锁</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Boolean</span> success <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> success <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> success<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 释放锁</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> currentValue <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-使用分布式锁"><a href="#3-2-使用分布式锁" class="headerlink" title="3.2 使用分布式锁"></a>3.2 使用分布式锁</h3><p>在需要使用分布式锁的业务逻辑中，我们可以使用 <code>RedisLock</code> 类来获取和释放锁。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RedisLock</span> redisLock<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">performTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> lockKey <span class="token operator">=</span> <span class="token string">"lock:myTask"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> lockValue <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 锁的过期时间</span>        <span class="token keyword">long</span> timeout <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 锁的超时时间</span>        <span class="token comment">// 尝试获取锁</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>redisLock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> lockValue<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment">// 执行需要加锁的业务逻辑</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行任务..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 模拟任务执行</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token comment">// 释放锁</span>                redisLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> lockValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取锁失败，任务正在被其他实例执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a>4. 注意事项</h2><ol><li><strong>锁的过期时间</strong>：在获取锁时设置合理的过期时间，防止因业务逻辑执行时间过长而导致锁失效。</li><li><strong>锁的唯一性</strong>：确保锁的键具有唯一性，以避免不同业务逻辑之间的锁冲突。</li><li><strong>异常处理</strong>：在释放锁时，确保只有持有锁的客户端才能释放锁，避免误释放。</li><li><strong>可重入锁</strong>：如果需要支持可重入锁，可以在 <code>RedisLock</code> 中维护锁的计数器。</li></ol><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>通过使用 Redis，我们可以轻松实现分布式锁，确保在分布式系统中对共享资源的安全访问。合理的锁机制可以提高系统的稳定性和数据一致性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://redis.io/documentation">Redis Documentation</a></li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/">Spring Boot Documentation</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和实现-Redis-分布式锁。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和实现-Redis-分布式锁。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和实现 Redis 分布式锁。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和实现 Redis 分布式锁。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;在分布式系统中，多个服务实例可能会同时访问共享资源，这可能导致数据不一致或资源竞争的问题。为了解决这个问题，我们可以使用分布</summary>
      
    
    
    
    <category term="Java" scheme="https://lucky845.github.io/categories/Java/"/>
    
    <category term="Spring" scheme="https://lucky845.github.io/categories/Java/Spring/"/>
    
    
    <category term="Java" scheme="https://lucky845.github.io/tags/Java/"/>
    
    <category term="Redis" scheme="https://lucky845.github.io/tags/Redis/"/>
    
    <category term="Spring Boot" scheme="https://lucky845.github.io/tags/Spring-Boot/"/>
    
    <category term="分布式锁" scheme="https://lucky845.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>【Spring Boot】使用 Redis 实现限流操作</title>
    <link href="https://lucky845.github.io/archives/b55fa583.html"/>
    <id>https://lucky845.github.io/archives/b55fa583.html</id>
    <published>2025-02-25T06:00:00.000Z</published>
    <updated>2025-02-25T11:47:19.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在高并发的场景下，限流是一种有效的保护措施，可以防止系统过载。Redis 作为一个高性能的内存数据库，常被用作限流的存储方案。本文将介绍如何使用 Redis 实现限流操作，并结合 AOP 和注解来简化限流逻辑的实现。</p><h2 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h2><p>首先，确保在 <code>pom.xml</code> 中添加 Redis 和 AOP 的相关依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-配置-Redis"><a href="#2-配置-Redis" class="headerlink" title="2. 配置 Redis"></a>2. 配置 Redis</h2><p>在 <code>application.yml</code> 中配置 Redis 连接信息：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-创建限流注解"><a href="#3-创建限流注解" class="headerlink" title="3. 创建限流注解"></a>3. 创建限流注解</h2><p>我们将创建一个自定义注解 <code>@RateLimit</code>，用于标记需要限流的方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">RateLimit</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment">// 限流的 key</span>    <span class="token keyword">int</span> <span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">5</span><span class="token punctuation">;</span>   <span class="token comment">// 限流的次数</span>    <span class="token keyword">int</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">60</span><span class="token punctuation">;</span> <span class="token comment">// 限流的时间窗口（秒）</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-实现限流逻辑"><a href="#4-实现限流逻辑" class="headerlink" title="4. 实现限流逻辑"></a>4. 实现限流逻辑</h2><p>接下来，我们将使用 AOP 来实现限流逻辑。创建一个切面类 <code>RateLimitAspect</code>，在其中实现限流的具体逻辑。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">ProceedingJoinPoint</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Around</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Aspect</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RateLimitAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"@annotation(rateLimit)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">limit</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">RateLimit</span> rateLimit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> key <span class="token operator">=</span> rateLimit<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> limit <span class="token operator">=</span> rateLimit<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> timeout <span class="token operator">=</span> rateLimit<span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用 Redis 计数器</span>        <span class="token class-name">Integer</span> count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 如果没有记录，初始化为 1</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 如果计数未超过限制，增加计数</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// 超过限制，抛出异常或返回错误信息</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"请求过于频繁，请稍后再试。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 继续执行目标方法</span>        <span class="token keyword">return</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-使用限流注解"><a href="#5-使用限流注解" class="headerlink" title="5. 使用限流注解"></a>5. 使用限流注解</h2><p>现在，我们可以在需要限流的方法上使用 <code>@RateLimit</code> 注解。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@RateLimit</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">"testRateLimit"</span><span class="token punctuation">,</span> limit <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> timeout <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"请求成功！"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，<code>/test</code> 接口每分钟最多允许 5 次请求。</p><h2 id="6-测试限流功能"><a href="#6-测试限流功能" class="headerlink" title="6. 测试限流功能"></a>6. 测试限流功能</h2><p>启动 Spring Boot 应用程序，并使用 Postman 或其他工具对 <code>/test</code> 接口进行多次请求。您将看到在超过限制后，返回的错误信息。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过使用 Redis 和 AOP，我们可以轻松实现限流操作。自定义注解和切面使得限流逻辑的实现变得简单而优雅。合理的限流策略可以有效保护系统，防止过载。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/">Spring Boot Documentation</a></li><li><a href="https://redis.io/documentation">Redis Documentation</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和实现使用-Redis-的限流操作。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和实现使用-Redis-的限流操作。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和实现使用 Redis 的限流操作。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和实现使用 Redis 的限流操作。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;在高并发的场景下，限流是一种有效的保护措施，可以防止系统过载。Redis 作为一个高性能的内存数据库，常被用作限流的存储方案</summary>
      
    
    
    
    <category term="Java" scheme="https://lucky845.github.io/categories/Java/"/>
    
    <category term="Spring" scheme="https://lucky845.github.io/categories/Java/Spring/"/>
    
    
    <category term="Java" scheme="https://lucky845.github.io/tags/Java/"/>
    
    <category term="Redis" scheme="https://lucky845.github.io/tags/Redis/"/>
    
    <category term="Spring Boot" scheme="https://lucky845.github.io/tags/Spring-Boot/"/>
    
    <category term="AOP" scheme="https://lucky845.github.io/tags/AOP/"/>
    
    <category term="限流" scheme="https://lucky845.github.io/tags/%E9%99%90%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>【Linux】如何编写一个部署 Spring Boot 程序的 Shell 脚本</title>
    <link href="https://lucky845.github.io/archives/b55fa582.html"/>
    <id>https://lucky845.github.io/archives/b55fa582.html</id>
    <published>2025-02-25T05:00:00.000Z</published>
    <updated>2025-02-25T11:46:38.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在 Linux 环境中，部署 Spring Boot 应用程序时，通常需要一个 Shell 脚本来简化部署、启动、停止和重启等操作。本文将介绍如何编写一个满足以下特性的 Shell 脚本：</p><ul><li>关闭终端后，Java 进程不会退出。</li><li>提供部署、启动、停止、重启三种常见操作。</li><li>每次部署时，均备份当前的程序包（可通过参数关闭备份）。</li></ul><h2 id="1-脚本结构"><a href="#1-脚本结构" class="headerlink" title="1. 脚本结构"></a>1. 脚本结构</h2><p>以下是一个简单的 Shell 脚本示例，包含了上述特性。您可以根据需要进行修改。</p><h3 id="1-1-创建脚本文件"><a href="#1-1-创建脚本文件" class="headerlink" title="1.1 创建脚本文件"></a>1.1 创建脚本文件</h3><p>在您的 Linux 服务器上，创建一个名为 <code>deploy.sh</code> 的文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> deploy.sh<span class="token function">chmod</span> +x deploy.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-2-编写脚本内容"><a href="#1-2-编写脚本内容" class="headerlink" title="1.2 编写脚本内容"></a>1.2 编写脚本内容</h3><p>将以下内容复制到 <code>deploy.sh</code> 文件中：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 配置参数</span><span class="token assign-left variable">APP_NAME</span><span class="token operator">=</span><span class="token string">"your-spring-boot-app"</span>  <span class="token comment"># 应用名称</span><span class="token assign-left variable">JAR_PATH</span><span class="token operator">=</span><span class="token string">"/path/to/your/app.jar"</span>   <span class="token comment"># JAR 文件路径</span><span class="token assign-left variable">BACKUP_DIR</span><span class="token operator">=</span><span class="token string">"/path/to/backup"</span>       <span class="token comment"># 备份目录</span><span class="token assign-left variable">PID_FILE</span><span class="token operator">=</span><span class="token string">"/tmp/<span class="token variable">${APP_NAME}</span>.pid"</span>    <span class="token comment"># PID 文件路径</span><span class="token comment"># 函数：备份当前程序包</span><span class="token function-name function">backup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-d</span> <span class="token string">"<span class="token variable">$BACKUP_DIR</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token string">"<span class="token variable">$BACKUP_DIR</span>"</span>    <span class="token keyword">fi</span>    <span class="token function">cp</span> <span class="token string">"<span class="token variable">$JAR_PATH</span>"</span> <span class="token string">"<span class="token variable">$BACKUP_DIR</span>/<span class="token variable">${APP_NAME}</span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%Y%m%d%H%M%S<span class="token variable">)</span></span>.jar"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"备份完成: <span class="token variable">$BACKUP_DIR</span>"</span><span class="token punctuation">}</span><span class="token comment"># 函数：启动应用</span><span class="token function-name function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">$PID_FILE</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$APP_NAME</span> 已在运行 (PID: <span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> $PID_FILE<span class="token variable">)</span></span>)"</span>        <span class="token builtin class-name">return</span>    <span class="token keyword">fi</span>    <span class="token function">nohup</span> <span class="token function">java</span> <span class="token parameter variable">-jar</span> <span class="token string">"<span class="token variable">$JAR_PATH</span>"</span> <span class="token operator">&gt;</span> /dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$!</span> <span class="token operator">&gt;</span> <span class="token string">"<span class="token variable">$PID_FILE</span>"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$APP_NAME</span> 启动成功 (PID: <span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> $PID_FILE<span class="token variable">)</span></span>)"</span><span class="token punctuation">}</span><span class="token comment"># 函数：停止应用</span><span class="token function-name function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">$PID_FILE</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$APP_NAME</span> 未在运行"</span>        <span class="token builtin class-name">return</span>    <span class="token keyword">fi</span>    <span class="token function">kill</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> <span class="token string">"<span class="token variable">$PID_FILE</span>"</span><span class="token variable">)</span></span>    <span class="token function">rm</span> <span class="token string">"<span class="token variable">$PID_FILE</span>"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$APP_NAME</span> 停止成功"</span><span class="token punctuation">}</span><span class="token comment"># 函数：重启应用</span><span class="token function-name function">restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    stop    start<span class="token punctuation">}</span><span class="token comment"># 函数：显示帮助信息</span><span class="token function-name function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">echo</span> <span class="token string">"用法: <span class="token variable">$0</span> [deploy|start|stop|restart] [--no-backup]"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"  deploy: 部署应用并备份当前程序包"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"  start: 启动应用"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"  stop: 停止应用"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"  restart: 重启应用"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"  --no-backup: 部署时不备份当前程序包"</span><span class="token punctuation">}</span><span class="token comment"># 解析参数</span><span class="token keyword">case</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token keyword">in</span>    deploy<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$2</span>"</span> <span class="token operator">!=</span> <span class="token string">"--no-backup"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>            backup        <span class="token keyword">fi</span>        start        <span class="token punctuation">;</span><span class="token punctuation">;</span>    start<span class="token punctuation">)</span>        start        <span class="token punctuation">;</span><span class="token punctuation">;</span>    stop<span class="token punctuation">)</span>        stop        <span class="token punctuation">;</span><span class="token punctuation">;</span>    restart<span class="token punctuation">)</span>        restart        <span class="token punctuation">;</span><span class="token punctuation">;</span>    *<span class="token punctuation">)</span>        <span class="token builtin class-name">help</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-脚本功能说明"><a href="#2-脚本功能说明" class="headerlink" title="2. 脚本功能说明"></a>2. 脚本功能说明</h2><ul><li><strong>备份功能</strong>：在部署时，脚本会将当前的 JAR 文件备份到指定的备份目录。可以通过 <code>--no-backup</code> 参数来关闭备份功能。</li><li><strong>启动功能</strong>：使用 <code>nohup</code> 命令启动 Java 进程，确保即使关闭终端，进程仍然在后台运行。进程的 PID 会被写入到指定的 PID 文件中。</li><li><strong>停止功能</strong>：通过读取 PID 文件来停止正在运行的 Java 进程，并删除 PID 文件。</li><li><strong>重启功能</strong>：先停止应用，再启动应用。</li><li><strong>帮助信息</strong>：提供使用说明，帮助用户了解如何使用脚本。</li></ul><h2 id="3-使用示例"><a href="#3-使用示例" class="headerlink" title="3. 使用示例"></a>3. 使用示例</h2><ul><li>部署并备份当前程序包：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./deploy.sh deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>部署但不备份当前程序包：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./deploy.sh deploy --no-backup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>启动应用：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./deploy.sh start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>停止应用：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./deploy.sh stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>重启应用：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./deploy.sh restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过编写一个简单的 Shell 脚本，您可以轻松地在 Linux 环境中部署和管理 Spring Boot 应用程序。该脚本提供了优雅的启动、停止和重启功能，并支持备份当前程序包，帮助您更好地管理应用的生命周期。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/">Spring Boot Documentation</a></li><li><a href="https://tldp.org/LDP/Bash-Beginners-Guide/html/">Bash Scripting Guide</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和实现-Linux-环境下的-Spring-Boot-应用部署。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和实现-Linux-环境下的-Spring-Boot-应用部署。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和实现 Linux 环境下的 Spring Boot 应用部署。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和实现 Linux 环境下的 Spring Boot 应用部署。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;在 Linux 环境中，部署 Spring Boot 应用程序时，通常需要一个 Shell 脚本来简化部署、启动、停止和重启</summary>
      
    
    
    
    <category term="Java" scheme="https://lucky845.github.io/categories/Java/"/>
    
    <category term="Spring" scheme="https://lucky845.github.io/categories/Java/Spring/"/>
    
    
    <category term="Java" scheme="https://lucky845.github.io/tags/Java/"/>
    
    <category term="Spring Boot" scheme="https://lucky845.github.io/tags/Spring-Boot/"/>
    
    <category term="Shell 脚本" scheme="https://lucky845.github.io/tags/Shell-%E8%84%9A%E6%9C%AC/"/>
    
    <category term="部署" scheme="https://lucky845.github.io/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>【Spring Boot】如何在 Logback 中配置彩色输出</title>
    <link href="https://lucky845.github.io/archives/b55fa581.html"/>
    <id>https://lucky845.github.io/archives/b55fa581.html</id>
    <published>2025-02-25T04:00:00.000Z</published>
    <updated>2025-02-25T11:46:38.082Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在开发和调试过程中，日志输出的可读性至关重要。使用彩色输出可以帮助开发者快速识别不同级别的日志信息（如 DEBUG、INFO、WARN、ERROR），从而提高调试效率。Logback 是 Spring Boot 默认的日志框架，支持通过配置实现彩色输出。本文将介绍如何在 Logback 中配置彩色输出。</p><h2 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h2><p>如果您使用的是 Spring Boot，Logback 已经作为默认依赖包含在内。如果您需要在其他项目中使用 Logback，请确保在 <code>pom.xml</code> 中添加以下依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 请根据需要选择版本 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-配置-Logback"><a href="#2-配置-Logback" class="headerlink" title="2. 配置 Logback"></a>2. 配置 Logback</h2><p>Logback 的配置文件通常是 <code>logback.xml</code> 或 <code>logback-spring.xml</code>。在该文件中，我们可以定义日志格式和输出方式。</p><h3 id="2-1-创建-logback-spring-xml"><a href="#2-1-创建-logback-spring-xml" class="headerlink" title="2.1 创建 logback-spring.xml"></a>2.1 创建 <code>logback-spring.xml</code></h3><p>在 <code>src/main/resources</code> 目录下创建 <code>logback-spring.xml</code> 文件，并添加以下内容：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>outputPatternAsHeader</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>outputPatternAsHeader</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-配置彩色输出"><a href="#2-2-配置彩色输出" class="headerlink" title="2.2 配置彩色输出"></a>2.2 配置彩色输出</h3><p>要实现彩色输出，可以使用 ANSI 转义码。Logback 提供了 <code>ch.qos.logback.core.pattern.color</code> 包中的类来实现彩色输出。以下是一个示例配置：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>                %d{yyyy-MM-dd HH:mm:ss} [%thread] %highlight(%-5level) %logger{36} - %msg%n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>outputPatternAsHeader</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>outputPatternAsHeader</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个配置中，<code>%highlight</code> 用于为日志级别添加颜色。Logback 会根据日志级别自动选择颜色：</p><ul><li>DEBUG：青色</li><li>INFO：绿色</li><li>WARN：黄色</li><li>ERROR：红色</li></ul><h2 id="3-运行应用程序"><a href="#3-运行应用程序" class="headerlink" title="3. 运行应用程序"></a>3. 运行应用程序</h2><p>完成配置后，运行您的 Spring Boot 应用程序，您将看到控制台输出的日志信息带有颜色。不同级别的日志将以不同的颜色显示，便于快速识别。</p><h2 id="4-自定义颜色"><a href="#4-自定义颜色" class="headerlink" title="4. 自定义颜色"></a>4. 自定义颜色</h2><p>如果您希望自定义颜色，可以使用 ANSI 转义码。例如，以下配置将 INFO 级别的日志设置为蓝色：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>                %d{yyyy-MM-dd HH:mm:ss} [%thread] %cyan(%-5level) %logger{36} - %msg%n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>outputPatternAsHeader</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>outputPatternAsHeader</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，<code>%cyan</code> 用于将日志级别的颜色设置为青色。</p><h2 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5. 注意事项"></a>5. 注意事项</h2><ul><li>确保您的终端或控制台支持 ANSI 转义码。大多数现代终端（如 Linux、macOS 的终端和 Windows 的 PowerShell）都支持。</li><li>如果您在 IDE 中运行应用程序，确保 IDE 的控制台支持 ANSI 颜色输出。某些 IDE 可能需要额外的插件或设置。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过配置 Logback，您可以轻松实现彩色输出，提高日志的可读性。使用 ANSI 转义码和 Logback 提供的功能，您可以根据需要自定义日志的颜色和格式。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://logback.qos.ch/documentation.html">Logback Documentation</a></li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-logging">Spring Boot Logging</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和实现-Logback-中的彩色输出配置。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和实现-Logback-中的彩色输出配置。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和实现 Logback 中的彩色输出配置。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和实现 Logback 中的彩色输出配置。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;在开发和调试过程中，日志输出的可读性至关重要。使用彩色输出可以帮助开发者快速识别不同级别的日志信息（如 DEBUG、INFO</summary>
      
    
    
    
    <category term="Java" scheme="https://lucky845.github.io/categories/Java/"/>
    
    <category term="Spring" scheme="https://lucky845.github.io/categories/Java/Spring/"/>
    
    
    <category term="Java" scheme="https://lucky845.github.io/tags/Java/"/>
    
    <category term="Spring Boot" scheme="https://lucky845.github.io/tags/Spring-Boot/"/>
    
    <category term="Logback" scheme="https://lucky845.github.io/tags/Logback/"/>
    
    <category term="日志配置" scheme="https://lucky845.github.io/tags/%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>【Spring Boot】如何处理 YAML 或 Properties 的解析异常 MalformedInputException</title>
    <link href="https://lucky845.github.io/archives/b55fa580.html"/>
    <id>https://lucky845.github.io/archives/b55fa580.html</id>
    <published>2025-02-25T03:00:00.000Z</published>
    <updated>2025-02-25T11:46:38.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在 Spring Boot 应用中，配置文件通常使用 YAML 或 Properties 格式来定义应用的各种参数。然而，在解析这些配置文件时，可能会遇到 <code>MalformedInputException</code> 异常。这种异常通常是由于文件编码不正确或文件内容格式不符合预期导致的。本文将介绍如何识别和解决 YAML 或 Properties 的解析异常 <code>MalformedInputException</code>。</p><h2 id="1-异常原因"><a href="#1-异常原因" class="headerlink" title="1. 异常原因"></a>1. 异常原因</h2><h3 id="1-1-文件编码问题"><a href="#1-1-文件编码问题" class="headerlink" title="1.1 文件编码问题"></a>1.1 文件编码问题</h3><p><code>MalformedInputException</code> 通常是由于文件的编码格式与 Spring Boot 期望的编码格式不匹配。Spring Boot 默认使用 UTF-8 编码来解析配置文件。如果配置文件使用了其他编码（如 ISO-8859-1），则可能导致解析失败。</p><h3 id="1-2-格式错误"><a href="#1-2-格式错误" class="headerlink" title="1.2 格式错误"></a>1.2 格式错误</h3><p>YAML 和 Properties 文件的格式要求严格，任何格式错误（如缺少冒号、缩进不正确等）都可能导致解析异常。</p><h2 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2. 解决方案"></a>2. 解决方案</h2><h3 id="2-1-确保文件编码为-UTF-8"><a href="#2-1-确保文件编码为-UTF-8" class="headerlink" title="2.1 确保文件编码为 UTF-8"></a>2.1 确保文件编码为 UTF-8</h3><p>确保您的 YAML 或 Properties 文件使用 UTF-8 编码。可以使用文本编辑器（如 VSCode、Notepad++）检查和更改文件编码。</p><h4 id="在-VSCode-中更改编码"><a href="#在-VSCode-中更改编码" class="headerlink" title="在 VSCode 中更改编码"></a>在 VSCode 中更改编码</h4><ol><li>打开文件。</li><li>点击右下角的编码格式（如 “UTF-8”）。</li><li>选择 “Reopen with Encoding” 并选择 “UTF-8”。</li></ol><h4 id="在-Notepad-中更改编码"><a href="#在-Notepad-中更改编码" class="headerlink" title="在 Notepad++ 中更改编码"></a>在 Notepad++ 中更改编码</h4><ol><li>打开文件。</li><li>点击菜单 “编码”。</li><li>选择 “转换为 UTF-8 编码”。</li></ol><h3 id="2-2-检查文件格式"><a href="#2-2-检查文件格式" class="headerlink" title="2.2 检查文件格式"></a>2.2 检查文件格式</h3><p>仔细检查 YAML 或 Properties 文件的格式，确保符合规范。以下是一些常见的格式问题：</p><h4 id="YAML-格式示例"><a href="#YAML-格式示例" class="headerlink" title="YAML 格式示例"></a>YAML 格式示例</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 正确的 YAML 格式</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>  <span class="token key atrule">address</span><span class="token punctuation">:</span> 127.0.0.1<span class="token comment"># 错误的 YAML 格式（缺少冒号）</span>server  port 8080<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Properties-格式示例"><a href="#Properties-格式示例" class="headerlink" title="Properties 格式示例"></a>Properties 格式示例</h4><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 正确的 Properties 格式</span><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8080</span><span class="token key attr-name">server.address</span><span class="token punctuation">=</span><span class="token value attr-value">127.0.0.1</span><span class="token comment"># 错误的 Properties 格式（缺少等号）</span><span class="token key attr-name">server.port</span> <span class="token value attr-value">8080</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-使用-Spring-Boot-的配置验证"><a href="#2-3-使用-Spring-Boot-的配置验证" class="headerlink" title="2.3 使用 Spring Boot 的配置验证"></a>2.3 使用 Spring Boot 的配置验证</h3><p>Spring Boot 提供了配置验证的功能，可以在启动时检查配置文件的有效性。可以通过添加 <code>spring-boot-starter-validation</code> 依赖来启用此功能。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后在配置类中使用 <code>@Validated</code> 注解进行验证。</p><h3 id="2-4-捕获异常并提供友好的错误信息"><a href="#2-4-捕获异常并提供友好的错误信息" class="headerlink" title="2.4 捕获异常并提供友好的错误信息"></a>2.4 捕获异常并提供友好的错误信息</h3><p>在应用启动时，可以捕获 <code>MalformedInputException</code> 异常，并提供友好的错误信息，帮助开发者快速定位问题。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ResourcePropertySource</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MyApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MalformedInputException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"配置文件解析错误: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 其他处理逻辑</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-最佳实践建议"><a href="#3-最佳实践建议" class="headerlink" title="3. 最佳实践建议"></a>3. 最佳实践建议</h2><ol><li><p><strong>使用统一的编码格式</strong>：确保所有配置文件使用 UTF-8 编码，避免编码不一致导致的问题。</p></li><li><p><strong>定期审查配置文件</strong>：定期检查和更新配置文件，确保格式正确且符合规范。</p></li><li><p><strong>使用 IDE 的语法检查</strong>：使用 IDE 的语法检查功能，及时发现配置文件中的格式错误。</p></li><li><p><strong>编写单元测试</strong>：为配置文件编写单元测试，确保在修改配置时不会引入新的问题。</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过确保文件编码为 UTF-8、检查文件格式、使用 Spring Boot 的配置验证以及捕获异常，我们可以有效地处理 YAML 或 Properties 的解析异常 <code>MalformedInputException</code>。合理的配置管理和异常处理可以提高应用程序的稳定性和可维护性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config">Spring Boot - External Configuration</a></li><li><a href="https://yaml.org/spec/1.2/spec.html">YAML Syntax</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和解决-Spring-Boot-中的配置解析异常。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和解决-Spring-Boot-中的配置解析异常。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和解决 Spring Boot 中的配置解析异常。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和解决 Spring Boot 中的配置解析异常。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;在 Spring Boot 应用中，配置文件通常使用 YAML 或 Properties 格式来定义应用的各种参数。然而，在</summary>
      
    
    
    
    <category term="Java" scheme="https://lucky845.github.io/categories/Java/"/>
    
    <category term="Spring" scheme="https://lucky845.github.io/categories/Java/Spring/"/>
    
    
    <category term="Java" scheme="https://lucky845.github.io/tags/Java/"/>
    
    <category term="Spring Boot" scheme="https://lucky845.github.io/tags/Spring-Boot/"/>
    
    <category term="异常处理" scheme="https://lucky845.github.io/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
    <category term="配置解析" scheme="https://lucky845.github.io/tags/%E9%85%8D%E7%BD%AE%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>【Spring Boot】如何优雅地停止服务</title>
    <link href="https://lucky845.github.io/archives/b55fa579.html"/>
    <id>https://lucky845.github.io/archives/b55fa579.html</id>
    <published>2025-02-25T02:00:00.000Z</published>
    <updated>2025-02-25T11:46:38.082Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在生产环境中，优雅地停止服务是确保系统稳定性和数据一致性的关键。Spring Boot 提供了多种方式来实现优雅停机，确保在关闭服务时能够完成正在进行的请求、释放资源并进行必要的清理。本文将介绍如何在 Spring Boot 中优雅地停止服务。</p><h2 id="1-使用-PreDestroy-注解"><a href="#1-使用-PreDestroy-注解" class="headerlink" title="1. 使用 @PreDestroy 注解"></a>1. 使用 <code>@PreDestroy</code> 注解</h2><p>在 Spring 中，可以使用 <code>@PreDestroy</code> 注解标记一个方法，该方法会在 Bean 被销毁之前执行。可以在这个方法中添加清理逻辑。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PreDestroy</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>    <span class="token comment">// 其他业务逻辑</span>    <span class="token annotation punctuation">@PreDestroy</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务正在停止，执行清理操作..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 释放资源、保存状态等</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，当 Spring Boot 应用关闭时，<code>cleanup</code> 方法会被调用，执行必要的清理操作。</p><h2 id="2-使用-ApplicationListener-监听-ContextClosedEvent"><a href="#2-使用-ApplicationListener-监听-ContextClosedEvent" class="headerlink" title="2. 使用 ApplicationListener 监听 ContextClosedEvent"></a>2. 使用 <code>ApplicationListener</code> 监听 <code>ContextClosedEvent</code></h2><p>可以通过实现 <code>ApplicationListener</code> 接口来监听 Spring 应用上下文关闭事件，从而执行自定义的停机逻辑。</p><h3 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationListener</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ContextClosedEvent</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShutdownListener</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ContextClosedEvent</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">ContextClosedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"应用上下文正在关闭，执行停机逻辑..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行清理操作</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，当 Spring 应用上下文关闭时，<code>onApplicationEvent</code> 方法会被调用，执行自定义的停机逻辑。</p><h2 id="3-配置优雅停机"><a href="#3-配置优雅停机" class="headerlink" title="3. 配置优雅停机"></a>3. 配置优雅停机</h2><p>Spring Boot 2.3 及以上版本提供了内置的优雅停机支持。可以通过配置文件来启用优雅停机。</p><h3 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h3><p>在 <code>application.yml</code> 中添加以下配置：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">lifecycle</span><span class="token punctuation">:</span>    <span class="token key atrule">timeout-per-shutdown-phase</span><span class="token punctuation">:</span> 30s <span class="token comment"># 设置每个停机阶段的超时时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="处理请求的超时"><a href="#处理请求的超时" class="headerlink" title="处理请求的超时"></a>处理请求的超时</h3><p>可以通过设置 <code>server.shutdown</code> 属性来控制服务的停机行为：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">shutdown</span><span class="token punctuation">:</span> graceful<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当设置为 <code>graceful</code> 时，Spring Boot 会在接收到关闭请求后，等待正在处理的请求完成。</p><h2 id="4-自定义停机逻辑"><a href="#4-自定义停机逻辑" class="headerlink" title="4. 自定义停机逻辑"></a>4. 自定义停机逻辑</h2><p>如果需要更复杂的停机逻辑，可以使用 <code>SmartLifecycle</code> 接口。实现该接口的 Bean 可以控制其启动和停止的顺序。</p><h3 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SmartLifecycle</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLifecycleComponent</span> <span class="token keyword">implements</span> <span class="token class-name">SmartLifecycle</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> running <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        running <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务启动..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务正在停止..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行清理操作</span>        running <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> running<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 返回停机的优先级</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAutoStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        callback<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 停止后执行回调</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，<code>MyLifecycleComponent</code> 实现了 <code>SmartLifecycle</code> 接口，提供了自定义的启动和停止逻辑。</p><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li><p><strong>确保清理资源</strong>：在停机时，确保释放所有占用的资源，如数据库连接、线程池等。</p></li><li><p><strong>记录停机日志</strong>：在停机过程中记录日志，以便后续排查问题。</p></li><li><p><strong>测试停机逻辑</strong>：在开发和测试环境中充分测试停机逻辑，确保在生产环境中能够正常工作。</p></li><li><p><strong>监控停机状态</strong>：使用监控工具监控服务的停机状态，确保服务能够优雅地停止。</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过使用 <code>@PreDestroy</code> 注解、监听 <code>ContextClosedEvent</code>、配置优雅停机和自定义停机逻辑，我们可以在 Spring Boot 中优雅地停止服务，确保系统的稳定性和数据的一致性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-graceful-shutdown">Spring Boot - Graceful Shutdown</a></li><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#context-functionality-lifecycle">Spring Framework - Lifecycle</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和实现-Spring-Boot-中的优雅停机。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和实现-Spring-Boot-中的优雅停机。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和实现 Spring Boot 中的优雅停机。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和实现 Spring Boot 中的优雅停机。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;在生产环境中，优雅地停止服务是确保系统稳定性和数据一致性的关键。Spring Boot 提供了多种方式来实现优雅停机，确保在</summary>
      
    
    
    
    <category term="Java" scheme="https://lucky845.github.io/categories/Java/"/>
    
    <category term="Spring" scheme="https://lucky845.github.io/categories/Java/Spring/"/>
    
    
    <category term="Java" scheme="https://lucky845.github.io/tags/Java/"/>
    
    <category term="Spring Boot" scheme="https://lucky845.github.io/tags/Spring-Boot/"/>
    
    <category term="服务停止" scheme="https://lucky845.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%81%9C%E6%AD%A2/"/>
    
    <category term="优雅停机" scheme="https://lucky845.github.io/tags/%E4%BC%98%E9%9B%85%E5%81%9C%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>【Spring Boot】如何处理同名 Bean 对象多次注册导致的启动失败问题</title>
    <link href="https://lucky845.github.io/archives/b55fa578.html"/>
    <id>https://lucky845.github.io/archives/b55fa578.html</id>
    <published>2025-02-25T01:00:00.000Z</published>
    <updated>2025-02-25T11:46:38.082Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在 Spring Boot 应用中，Bean 的注册是通过依赖注入实现的。然而，当多个 Bean 使用相同的名称或类型进行注册时，Spring 容器会抛出 <code>BeanDefinitionStoreException</code> 异常，导致应用启动失败。这种情况通常发生在以下几种场景中：</p><ol><li><strong>同名 Bean</strong>：在不同的配置类中定义了同名的 Bean。</li><li><strong>自动装配冲突</strong>：使用 <code>@ComponentScan</code> 扫描到多个同名的组件。</li><li><strong>条件装配</strong>：使用条件注解（如 <code>@Conditional</code>）导致同名 Bean 的注册。</li></ol><p>本文将介绍如何识别和解决同名 Bean 对象多次注册导致的启动失败问题。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1-使用-Primary-注解"><a href="#1-使用-Primary-注解" class="headerlink" title="1. 使用 @Primary 注解"></a>1. 使用 <code>@Primary</code> 注解</h3><p>如果有多个同名 Bean，但希望优先使用其中一个，可以使用 <code>@Primary</code> 注解标记优先使用的 Bean。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Primary</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Primary</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServiceImpl1</span> <span class="token keyword">implements</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>    <span class="token comment">// 实现代码</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServiceImpl2</span> <span class="token keyword">implements</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>    <span class="token comment">// 实现代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，<code>MyServiceImpl1</code> 被标记为优先使用的 Bean，当需要注入 <code>MyService</code> 时，Spring 会优先选择 <code>MyServiceImpl1</code>。</p><h3 id="2-使用-Qualifier-注解"><a href="#2-使用-Qualifier-注解" class="headerlink" title="2. 使用 @Qualifier 注解"></a>2. 使用 <code>@Qualifier</code> 注解</h3><p>如果需要在注入时明确指定使用哪个 Bean，可以使用 <code>@Qualifier</code> 注解。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Qualifier</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MyService</span> myService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token class-name">MyController</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"myServiceImpl2"</span><span class="token punctuation">)</span> <span class="token class-name">MyService</span> myService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>myService <span class="token operator">=</span> myService<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，<code>@Qualifier</code> 注解指定了要注入的 Bean 名称，确保注入的是 <code>MyServiceImpl2</code>。</p><h3 id="3-检查-Bean-定义"><a href="#3-检查-Bean-定义" class="headerlink" title="3. 检查 Bean 定义"></a>3. 检查 Bean 定义</h3><p>确保在不同的配置类中没有重复定义同名的 Bean。可以通过以下方式检查：</p><ul><li><strong>使用不同的 Bean 名称</strong>：在定义 Bean 时，使用不同的名称。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"service1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">MyService</span> <span class="token function">myService1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyServiceImpl1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"service2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">MyService</span> <span class="token function">myService2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyServiceImpl2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>使用条件注解</strong>：使用条件注解（如 <code>@ConditionalOnMissingBean</code>）来避免重复注册。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span></span><span class="token class-name">ConditionalOnMissingBean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">MyService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">MyService</span> <span class="token function">myService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyServiceImpl1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-使用-ComponentScan-的-exclude-属性"><a href="#4-使用-ComponentScan-的-exclude-属性" class="headerlink" title="4. 使用 @ComponentScan 的 exclude 属性"></a>4. 使用 <code>@ComponentScan</code> 的 <code>exclude</code> 属性</h3><p>如果使用 <code>@ComponentScan</code> 扫描到多个同名组件，可以使用 <code>exclude</code> 属性排除不需要的 Bean。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ComponentScan</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.example"</span><span class="token punctuation">,</span> excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ComponentScan.Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">ASSIGNABLE_TYPE</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token class-name">MyServiceImpl2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>    <span class="token comment">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-通过配置文件控制-Bean-注册"><a href="#5-通过配置文件控制-Bean-注册" class="headerlink" title="5. 通过配置文件控制 Bean 注册"></a>5. 通过配置文件控制 Bean 注册</h3><p>在某些情况下，可以通过配置文件来控制 Bean 的注册。例如，使用 <code>@ConditionalOnProperty</code> 注解根据配置文件中的属性来决定是否注册某个 Bean。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span></span><span class="token class-name">ConditionalOnProperty</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"my.service.enabled"</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">MyService</span> <span class="token function">myService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyServiceImpl1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li><p><strong>保持 Bean 名称唯一</strong>：在定义 Bean 时，确保名称唯一，避免同名冲突。</p></li><li><p><strong>使用接口</strong>：通过接口来解耦 Bean 之间的依赖关系，减少直接依赖。</p></li><li><p><strong>定期审查配置</strong>：定期审查 Bean 的定义和配置，确保没有重复的 Bean 注册。</p></li><li><p><strong>使用条件注解</strong>：合理使用条件注解，避免不必要的 Bean 注册。</p></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>如何检测同名 Bean？</strong></p><ul><li>Spring 启动时会抛出 <code>BeanDefinitionStoreException</code> 异常，通常表示存在同名 Bean。</li></ul></li><li><p><strong>如何处理复杂的 Bean 注册？</strong></p><ul><li>对于复杂的 Bean 注册，考虑使用配置类和条件注解来管理 Bean 的创建。</li></ul></li><li><p><strong>使用 <code>@Primary</code> 和 <code>@Qualifier</code> 的最佳实践是什么？</strong></p><ul><li>使用 <code>@Primary</code> 标记优先使用的 Bean，使用 <code>@Qualifier</code> 指定具体的 Bean，确保代码的可读性和可维护性。</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上方法，我们可以有效地解决 Spring Boot 中同名 Bean 对象多次注册导致的启动失败问题。合理的设计和使用 Spring 提供的功能，可以提高应用程序的稳定性和可维护性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-definition">Spring Framework - Bean Definition</a></li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/">Spring Boot Reference Documentation</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和解决-Spring-Boot-中的同名-Bean-注册问题。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和解决-Spring-Boot-中的同名-Bean-注册问题。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和解决 Spring Boot 中的同名 Bean 注册问题。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和解决 Spring Boot 中的同名 Bean 注册问题。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;在 Spring Boot 应用中，Bean 的注册是通过依赖注入实现的。然而，当多个 Bean 使用相同的名称或类型进行注</summary>
      
    
    
    
    <category term="Java" scheme="https://lucky845.github.io/categories/Java/"/>
    
    <category term="Spring" scheme="https://lucky845.github.io/categories/Java/Spring/"/>
    
    
    <category term="Java" scheme="https://lucky845.github.io/tags/Java/"/>
    
    <category term="Spring Boot" scheme="https://lucky845.github.io/tags/Spring-Boot/"/>
    
    <category term="Bean 注册" scheme="https://lucky845.github.io/tags/Bean-%E6%B3%A8%E5%86%8C/"/>
    
    <category term="启动失败" scheme="https://lucky845.github.io/tags/%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/"/>
    
  </entry>
  
  <entry>
    <title>【Spring Boot】如何统一给配置项属性值加密</title>
    <link href="https://lucky845.github.io/archives/b55fa577.html"/>
    <id>https://lucky845.github.io/archives/b55fa577.html</id>
    <published>2025-02-25T00:00:00.000Z</published>
    <updated>2025-02-25T11:46:38.082Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在开发应用程序时，保护敏感信息（如数据库密码、API 密钥等）是非常重要的。Spring Boot 提供了多种方式来加密和解密配置项属性值，以确保这些敏感信息不会被泄露。本文将介绍如何在 Spring Boot 中统一给配置项属性值加密。</p><h2 id="1-使用-Spring-Cloud-Config"><a href="#1-使用-Spring-Cloud-Config" class="headerlink" title="1. 使用 Spring Cloud Config"></a>1. 使用 Spring Cloud Config</h2><p>Spring Cloud Config 提供了集中式的配置管理功能，可以将配置项存储在 Git、文件系统或其他存储中，并支持加密和解密。以下是使用 Spring Cloud Config 进行配置加密的步骤。</p><h3 id="1-1-添加依赖"><a href="#1-1-添加依赖" class="headerlink" title="1.1 添加依赖"></a>1.1 添加依赖</h3><p>在 <code>pom.xml</code> 中添加 Spring Cloud Config 相关依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-配置加密密钥"><a href="#1-2-配置加密密钥" class="headerlink" title="1.2 配置加密密钥"></a>1.2 配置加密密钥</h3><p>在 <code>application.yml</code> 或 <code>application.properties</code> 中配置加密密钥：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">server</span><span class="token punctuation">:</span>        <span class="token key atrule">encrypt</span><span class="token punctuation">:</span>          <span class="token key atrule">key</span><span class="token punctuation">:</span> your<span class="token punctuation">-</span>encryption<span class="token punctuation">-</span>key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-加密配置项"><a href="#1-3-加密配置项" class="headerlink" title="1.3 加密配置项"></a>1.3 加密配置项</h3><p>使用 Spring Cloud Config 提供的加密工具加密配置项。例如，使用以下命令加密数据库密码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST http://localhost:8888/encrypt <span class="token parameter variable">-d</span> <span class="token string">'your-database-password'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回的加密字符串可以放入配置文件中：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">database</span><span class="token punctuation">:</span>  <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">'{cipher}encrypted-password'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-4-解密配置项"><a href="#1-4-解密配置项" class="headerlink" title="1.4 解密配置项"></a>1.4 解密配置项</h3><p>在应用程序中，Spring Cloud Config 会自动解密配置项。只需使用 <code>@Value</code> 注解获取配置项即可：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${database.password}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token comment">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-使用-Jasypt-加密"><a href="#2-使用-Jasypt-加密" class="headerlink" title="2. 使用 Jasypt 加密"></a>2. 使用 Jasypt 加密</h2><p>如果不使用 Spring Cloud Config，可以使用 Jasypt（Java Simplified Encryption）库来加密和解密配置项。</p><h3 id="2-1-添加依赖"><a href="#2-1-添加依赖" class="headerlink" title="2.1 添加依赖"></a>2.1 添加依赖</h3><p>在 <code>pom.xml</code> 中添加 Jasypt 依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.ulisesbocchio<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jasypt-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-配置加密密钥"><a href="#2-2-配置加密密钥" class="headerlink" title="2.2 配置加密密钥"></a>2.2 配置加密密钥</h3><p>在 <code>application.yml</code> 或 <code>application.properties</code> 中配置 Jasypt 密钥：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">jasypt</span><span class="token punctuation">:</span>  <span class="token key atrule">encryptor</span><span class="token punctuation">:</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> your<span class="token punctuation">-</span>encryption<span class="token punctuation">-</span>key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-3-加密配置项"><a href="#2-3-加密配置项" class="headerlink" title="2.3 加密配置项"></a>2.3 加密配置项</h3><p>使用 Jasypt 提供的命令行工具加密配置项。例如，使用以下命令加密数据库密码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-cp</span> jasypt-1.9.3.jar org.jasypt.intf.cli.JasyptPBEStringEncryptionCLI <span class="token assign-left variable">input</span><span class="token operator">=</span><span class="token string">"your-database-password"</span> <span class="token assign-left variable">password</span><span class="token operator">=</span><span class="token string">"your-encryption-key"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回的加密字符串可以放入配置文件中：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">database</span><span class="token punctuation">:</span>  <span class="token key atrule">password</span><span class="token punctuation">:</span> ENC(encrypted<span class="token punctuation">-</span>password)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-4-解密配置项"><a href="#2-4-解密配置项" class="headerlink" title="2.4 解密配置项"></a>2.4 解密配置项</h3><p>在应用程序中，Jasypt 会自动解密配置项。只需使用 <code>@Value</code> 注解获取配置项即可：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${database.password}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token comment">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-自定义加密逻辑"><a href="#3-自定义加密逻辑" class="headerlink" title="3. 自定义加密逻辑"></a>3. 自定义加密逻辑</h2><p>如果需要更复杂的加密逻辑，可以实现自定义的 <code>PropertySource</code> 或使用 <code>@ConfigurationProperties</code> 结合自定义的加密和解密方法。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"secure"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecureProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token class-name">String</span> encrypted<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 自定义解密逻辑</span>        <span class="token keyword">return</span> decryptedValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li><p><strong>使用环境变量</strong>：将加密密钥存储在环境变量中，而不是硬编码在配置文件中。</p></li><li><p><strong>定期更换密钥</strong>：定期更换加密密钥，以提高安全性。</p></li><li><p><strong>审计和监控</strong>：对敏感信息的访问进行审计和监控，确保没有未授权的访问。</p></li><li><p><strong>使用安全的加密算法</strong>：选择安全的加密算法和密钥长度，确保数据的安全性。</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过使用 Spring Cloud Config 或 Jasypt，我们可以在 Spring Boot 中统一给配置项属性值加密，确保敏感信息的安全性。合理的设计和使用加密机制，可以提高应用程序的安全性和可维护性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://cloud.spring.io/spring-cloud-config/">Spring Cloud Config</a></li><li><a href="http://www.jasypt.org/">Jasypt</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和实现-Spring-Boot-中的配置项加密。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和实现-Spring-Boot-中的配置项加密。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和实现 Spring Boot 中的配置项加密。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和实现 Spring Boot 中的配置项加密。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;在开发应用程序时，保护敏感信息（如数据库密码、API 密钥等）是非常重要的。Spring Boot 提供了多种方式来加密和解</summary>
      
    
    
    
    <category term="Java" scheme="https://lucky845.github.io/categories/Java/"/>
    
    <category term="Spring" scheme="https://lucky845.github.io/categories/Java/Spring/"/>
    
    
    <category term="Java" scheme="https://lucky845.github.io/tags/Java/"/>
    
    <category term="Spring Boot" scheme="https://lucky845.github.io/tags/Spring-Boot/"/>
    
    <category term="配置加密" scheme="https://lucky845.github.io/tags/%E9%85%8D%E7%BD%AE%E5%8A%A0%E5%AF%86/"/>
    
    <category term="属性安全" scheme="https://lucky845.github.io/tags/%E5%B1%9E%E6%80%A7%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>【Spring Boot】如何在所有 Web 请求的前后执行自定义代码</title>
    <link href="https://lucky845.github.io/archives/b55fa576.html"/>
    <id>https://lucky845.github.io/archives/b55fa576.html</id>
    <published>2025-02-24T23:00:00.000Z</published>
    <updated>2025-02-25T11:46:38.177Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在开发 Web 应用时，常常需要在请求处理的前后执行一些自定义代码，例如记录日志、身份验证、性能监控等。Spring Boot 提供了两种主要机制来实现这一点：<strong>拦截器</strong>（Interceptor）和 <strong>过滤器</strong>（Filter）。本文将介绍如何使用这两种机制在所有 Web 请求的前后执行自定义代码。</p><h2 id="1-使用拦截器"><a href="#1-使用拦截器" class="headerlink" title="1. 使用拦截器"></a>1. 使用拦截器</h2><h3 id="1-1-创建拦截器"><a href="#1-1-创建拦截器" class="headerlink" title="1.1 创建拦截器"></a>1.1 创建拦截器</h3><p>拦截器是 Spring MVC 提供的一种机制，可以在请求处理之前和之后执行自定义逻辑。首先，我们需要实现 <code>HandlerInterceptor</code> 接口。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">HandlerInterceptor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求前处理: "</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 返回 true 继续处理请求，返回 false 中断请求</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求后处理: "</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-注册拦截器"><a href="#1-2-注册拦截器" class="headerlink" title="1.2 注册拦截器"></a>1.2 注册拦截器</h3><p>接下来，我们需要在 Spring Boot 中注册这个拦截器。可以通过实现 <code>WebMvcConfigurer</code> 接口来完成。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">InterceptorRegistry</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebMvcConfigurer</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">CustomInterceptor</span> customInterceptor<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>customInterceptor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拦截所有请求</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-使用案例"><a href="#1-3-使用案例" class="headerlink" title="1.3 使用案例"></a>1.3 使用案例</h3><p>在这个例子中，<code>CustomInterceptor</code> 会在每个请求处理之前打印请求的 URI，并在请求完成后打印相同的信息。可以根据需要在 <code>preHandle</code> 和 <code>afterCompletion</code> 方法中添加更多的自定义逻辑。</p><h2 id="2-使用过滤器"><a href="#2-使用过滤器" class="headerlink" title="2. 使用过滤器"></a>2. 使用过滤器</h2><h3 id="2-1-创建过滤器"><a href="#2-1-创建过滤器" class="headerlink" title="2.1 创建过滤器"></a>2.1 创建过滤器</h3><p>过滤器是 Servlet 规范的一部分，可以在请求和响应的整个生命周期中执行自定义逻辑。首先，我们需要实现 <code>Filter</code> 接口。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">Filter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">FilterChain</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">FilterConfig</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求前处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 继续处理请求</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求后处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>        <span class="token comment">// 初始化代码</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 清理代码</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-注册过滤器"><a href="#2-2-注册过滤器" class="headerlink" title="2.2 注册过滤器"></a>2.2 注册过滤器</h3><p>接下来，我们需要在 Spring Boot 中注册这个过滤器。可以通过实现 <code>FilterRegistrationBean</code> 来完成。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">FilterRegistrationBean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">FilterRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CustomFilter</span><span class="token punctuation">&gt;</span></span> <span class="token function">loggingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">FilterRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CustomFilter</span><span class="token punctuation">&gt;</span></span> registrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registrationBean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registrationBean<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拦截所有请求</span>        <span class="token keyword">return</span> registrationBean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-使用案例"><a href="#2-3-使用案例" class="headerlink" title="2.3 使用案例"></a>2.3 使用案例</h3><p>在这个例子中，<code>CustomFilter</code> 会在每个请求处理之前和之后打印日志。与拦截器不同，过滤器可以处理请求和响应的整个生命周期，适合用于跨域处理、日志记录等场景。</p><h2 id="3-拦截器与过滤器的区别"><a href="#3-拦截器与过滤器的区别" class="headerlink" title="3. 拦截器与过滤器的区别"></a>3. 拦截器与过滤器的区别</h2><table><thead><tr><th>特性</th><th>拦截器</th><th>过滤器</th></tr></thead><tbody><tr><td>适用范围</td><td>Spring MVC</td><td>Servlet</td></tr><tr><td>处理请求</td><td>在 Controller 之前和之后</td><td>在请求和响应的整个生命周期</td></tr><tr><td>访问 Spring 上下文</td><td>可以访问</td><td>不能直接访问</td></tr><tr><td>适用场景</td><td>业务逻辑处理、权限控制</td><td>日志记录、性能监控、跨域处理</td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过使用拦截器和过滤器，我们可以在 Spring Boot 应用中轻松地在所有 Web 请求的前后执行自定义代码。根据具体需求选择合适的机制，可以提高应用的灵活性和可维护性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-interceptors">Spring Boot - Interceptors</a></li><li><a href="https://docs.oracle.com/javaee/7/api/javax/servlet/Filter.html">Servlet Filters</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和实现-Spring-Boot-中的请求前后处理。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和实现-Spring-Boot-中的请求前后处理。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和实现 Spring Boot 中的请求前后处理。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和实现 Spring Boot 中的请求前后处理。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;在开发 Web 应用时，常常需要在请求处理的前后执行一些自定义代码，例如记录日志、身份验证、性能监控等。Spring Boo</summary>
      
    
    
    
    <category term="Java" scheme="https://lucky845.github.io/categories/Java/"/>
    
    <category term="Spring" scheme="https://lucky845.github.io/categories/Java/Spring/"/>
    
    
    <category term="Java" scheme="https://lucky845.github.io/tags/Java/"/>
    
    <category term="Spring Boot" scheme="https://lucky845.github.io/tags/Spring-Boot/"/>
    
    <category term="拦截器" scheme="https://lucky845.github.io/tags/%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    
    <category term="过滤器" scheme="https://lucky845.github.io/tags/%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>【Spring Boot】如何解决 Bean 装配过程中的循环依赖</title>
    <link href="https://lucky845.github.io/archives/b55fa575.html"/>
    <id>https://lucky845.github.io/archives/b55fa575.html</id>
    <published>2025-02-24T22:00:00.000Z</published>
    <updated>2025-02-25T11:46:38.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在 Spring Boot 中，Bean 的装配是通过依赖注入实现的。然而，当两个或多个 Bean 互相依赖时，就会出现循环依赖的问题。这种情况会导致 Spring 容器无法正确创建 Bean，从而抛出 <code>BeanCurrentlyInCreationException</code> 异常。本文将介绍如何识别和解决 Spring Boot 中的循环依赖问题。</p><h2 id="循环依赖的类型"><a href="#循环依赖的类型" class="headerlink" title="循环依赖的类型"></a>循环依赖的类型</h2><p>在 Spring 中，循环依赖主要有两种类型：</p><ol><li><strong>构造器循环依赖</strong>：两个或多个 Bean 通过构造器相互依赖。</li><li><strong>属性循环依赖</strong>：两个或多个 Bean 通过 setter 方法相互依赖。</li></ol><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><h3 id="1-构造器循环依赖示例"><a href="#1-构造器循环依赖示例" class="headerlink" title="1. 构造器循环依赖示例"></a>1. 构造器循环依赖示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">B</span> b<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token class-name">B</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">A</span> a<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token class-name">A</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，<code>A</code> 和 <code>B</code> 互相依赖，导致构造器循环依赖。</p><h3 id="2-属性循环依赖示例"><a href="#2-属性循环依赖示例" class="headerlink" title="2. 属性循环依赖示例"></a>2. 属性循环依赖示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">D</span> d<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">C</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，<code>C</code> 和 <code>D</code> 通过属性注入互相依赖，导致属性循环依赖。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1-使用-Lazy-注解"><a href="#1-使用-Lazy-注解" class="headerlink" title="1. 使用 @Lazy 注解"></a>1. 使用 <code>@Lazy</code> 注解</h3><p>使用 <code>@Lazy</code> 注解可以延迟 Bean 的初始化，从而解决循环依赖问题。可以在构造器或属性上使用 <code>@Lazy</code> 注解。</p><h4 id="构造器循环依赖解决方案"><a href="#构造器循环依赖解决方案" class="headerlink" title="构造器循环依赖解决方案"></a>构造器循环依赖解决方案</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Lazy</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">B</span> b<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Lazy</span> <span class="token class-name">B</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">A</span> a<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Lazy</span> <span class="token class-name">A</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="属性循环依赖解决方案"><a href="#属性循环依赖解决方案" class="headerlink" title="属性循环依赖解决方案"></a>属性循环依赖解决方案</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Lazy</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Lazy</span>    <span class="token keyword">private</span> <span class="token class-name">D</span> d<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Lazy</span>    <span class="token keyword">private</span> <span class="token class-name">C</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-使用-Setter-注入"><a href="#2-使用-Setter-注入" class="headerlink" title="2. 使用 Setter 注入"></a>2. 使用 Setter 注入</h3><p>将构造器注入改为 setter 注入，可以避免构造器循环依赖的问题。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">B</span> b<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setB</span><span class="token punctuation">(</span><span class="token class-name">B</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">A</span> a<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setA</span><span class="token punctuation">(</span><span class="token class-name">A</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-重构代码"><a href="#3-重构代码" class="headerlink" title="3. 重构代码"></a>3. 重构代码</h3><p>在某些情况下，循环依赖可能表明代码设计不合理。考虑重构代码以消除循环依赖。例如，可以将某些逻辑提取到新的服务类中，减少 Bean 之间的直接依赖。</p><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li><p><strong>避免循环依赖</strong>：在设计 Bean 时，尽量避免循环依赖的情况，保持 Bean 之间的清晰关系。</p></li><li><p><strong>使用接口</strong>：通过接口来解耦 Bean 之间的依赖关系，减少直接依赖。</p></li><li><p><strong>使用 <code>@Lazy</code> 注解</strong>：在确实需要的情况下，使用 <code>@Lazy</code> 注解来解决循环依赖。</p></li><li><p><strong>重构代码</strong>：如果发现循环依赖，考虑重构代码以改善设计。</p></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>如何检测循环依赖？</strong></p><ul><li>Spring 启动时会抛出 <code>BeanCurrentlyInCreationException</code> 异常，通常表示存在循环依赖。</li></ul></li><li><p><strong>如何处理复杂的循环依赖？</strong></p><ul><li>对于复杂的循环依赖，考虑使用设计模式（如观察者模式）来解耦。</li></ul></li><li><p><strong>使用 <code>@Lazy</code> 注解会影响性能吗？</strong></p><ul><li>使用 <code>@Lazy</code> 注解会导致 Bean 的初始化延迟，可能会影响性能，但在解决循环依赖时是一个有效的解决方案。</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上方法，我们可以有效地解决 Spring Boot 中的 Bean 装配过程中的循环依赖问题。合理的设计和使用 Spring 提供的功能，可以提高应用程序的稳定性和可维护性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-circular-references">Spring Framework - Circular References</a></li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/">Spring Boot Reference Documentation</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和解决-Spring-Boot-中的循环依赖问题。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和解决-Spring-Boot-中的循环依赖问题。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和解决 Spring Boot 中的循环依赖问题。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和解决 Spring Boot 中的循环依赖问题。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;在 Spring Boot 中，Bean 的装配是通过依赖注入实现的。然而，当两个或多个 Bean 互相依赖时，就会出现循环</summary>
      
    
    
    
    <category term="Java" scheme="https://lucky845.github.io/categories/Java/"/>
    
    <category term="Spring" scheme="https://lucky845.github.io/categories/Java/Spring/"/>
    
    
    <category term="Java" scheme="https://lucky845.github.io/tags/Java/"/>
    
    <category term="Spring Boot" scheme="https://lucky845.github.io/tags/Spring-Boot/"/>
    
    <category term="Bean 装配" scheme="https://lucky845.github.io/tags/Bean-%E8%A3%85%E9%85%8D/"/>
    
    <category term="循环依赖" scheme="https://lucky845.github.io/tags/%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/"/>
    
  </entry>
  
  <entry>
    <title>【Spring Boot】如何在程序启动完毕后自动执行任务</title>
    <link href="https://lucky845.github.io/archives/b55fa574.html"/>
    <id>https://lucky845.github.io/archives/b55fa574.html</id>
    <published>2025-02-24T21:00:00.000Z</published>
    <updated>2025-02-25T11:46:38.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在实际开发中，我们经常需要在应用程序启动完成后执行一些初始化任务，比如加载缓存、初始化数据、建立连接等。Spring Boot 提供了多种方式来实现这个需求。本文将介绍几种在程序启动完毕后自动执行任务的方法。</p><h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><h3 id="1-使用-PostConstruct-注解"><a href="#1-使用-PostConstruct-注解" class="headerlink" title="1. 使用 @PostConstruct 注解"></a>1. 使用 <code>@PostConstruct</code> 注解</h3><p>这是最简单的方式，但要注意的是 <code>@PostConstruct</code> 方法会在 Spring Bean 初始化时执行，而不是在整个应用程序启动完成后执行：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostConstruct</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitTask</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"应用程序正在初始化..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行初始化任务</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-实现-CommandLineRunner-接口"><a href="#2-实现-CommandLineRunner-接口" class="headerlink" title="2. 实现 CommandLineRunner 接口"></a>2. 实现 <code>CommandLineRunner</code> 接口</h3><p><code>CommandLineRunner</code> 接口的 <code>run</code> 方法会在应用程序启动完成后执行：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">CommandLineRunner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StartupRunner</span> <span class="token keyword">implements</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"应用程序已启动完成，开始执行任务..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行你的任务</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-实现-ApplicationRunner-接口"><a href="#3-实现-ApplicationRunner-接口" class="headerlink" title="3. 实现 ApplicationRunner 接口"></a>3. 实现 <code>ApplicationRunner</code> 接口</h3><p><code>ApplicationRunner</code> 接口与 <code>CommandLineRunner</code> 类似，但提供了更好的参数封装：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">ApplicationArguments</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">ApplicationRunner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StartupTask</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"应用程序已启动完成，开始执行任务..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行你的任务</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-使用-ApplicationListener"><a href="#4-使用-ApplicationListener" class="headerlink" title="4. 使用 ApplicationListener"></a>4. 使用 <code>ApplicationListener</code></h3><p>监听 <code>ApplicationReadyEvent</code> 事件来执行任务：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ApplicationReadyEvent</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationListener</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StartupListener</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApplicationReadyEvent</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">ApplicationReadyEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"应用程序已就绪，开始执行任务..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行你的任务</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-使用-EventListener-注解"><a href="#5-使用-EventListener-注解" class="headerlink" title="5. 使用 @EventListener 注解"></a>5. 使用 <code>@EventListener</code> 注解</h3><p>这是一种更简洁的方式来监听应用程序事件：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ApplicationReadyEvent</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">EventListener</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StartupEventListener</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@EventListener</span><span class="token punctuation">(</span><span class="token class-name">ApplicationReadyEvent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"应用程序已就绪，开始执行任务..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行你的任务</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="执行顺序和最佳实践"><a href="#执行顺序和最佳实践" class="headerlink" title="执行顺序和最佳实践"></a>执行顺序和最佳实践</h2><p>不同方式的执行顺序如下：</p><ol><li><code>@PostConstruct</code></li><li><code>CommandLineRunner</code> / <code>ApplicationRunner</code></li><li><code>ApplicationReadyEvent</code> 监听器</li></ol><h3 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h3><ol><li><p><strong>选择合适的时机</strong></p><ul><li>使用 <code>@PostConstruct</code> 执行 Bean 级别的初始化</li><li>使用 <code>ApplicationReadyEvent</code> 执行应用级别的任务</li></ul></li><li><p><strong>异步处理</strong></p><ul><li>对于耗时任务，考虑使用异步执行：</li></ul></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncStartupTask</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Async</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 异步执行耗时任务</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>错误处理</strong><ul><li>添加适当的错误处理机制：</li></ul></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StartupTask</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">StartupTask</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 执行任务</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"启动任务执行失败"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 根据需要决定是否需要终止应用</span>            <span class="token comment">// System.exit(1);</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><strong>如何控制多个任务的执行顺序？</strong><ul><li>使用 <code>@Order</code> 注解指定执行顺序：</li></ul></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstTask</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 首先执行的任务</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecondTask</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 随后执行的任务</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>如何处理启动任务失败？</strong><ul><li>可以通过异常处理来决定是否继续启动：</li></ul></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CriticalStartupTask</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 执行关键任务</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 关键任务失败，终止应用</span>            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Spring Boot 提供了多种方式来实现程序启动后的任务执行，可以根据具体需求选择合适的实现方式：</p><ul><li>简单的 Bean 初始化用 <code>@PostConstruct</code></li><li>应用级别的任务用 <code>ApplicationRunner</code> 或 <code>CommandLineRunner</code></li><li>需要更细粒度控制的场景用事件监听</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-application-events-and-listeners">Spring Boot Application Events</a></li><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#context-functionality-events">Spring Framework Events</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和实现-Spring-Boot-中的启动任务。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和实现-Spring-Boot-中的启动任务。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和实现 Spring Boot 中的启动任务。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和实现 Spring Boot 中的启动任务。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;在实际开发中，我们经常需要在应用程序启动完成后执行一些初始化任务，比如加载缓存、初始化数据、建立连接等。Spring Boo</summary>
      
    
    
    
    <category term="Java" scheme="https://lucky845.github.io/categories/Java/"/>
    
    <category term="Spring" scheme="https://lucky845.github.io/categories/Java/Spring/"/>
    
    
    <category term="Java" scheme="https://lucky845.github.io/tags/Java/"/>
    
    <category term="Spring Boot" scheme="https://lucky845.github.io/tags/Spring-Boot/"/>
    
    <category term="启动任务" scheme="https://lucky845.github.io/tags/%E5%90%AF%E5%8A%A8%E4%BB%BB%E5%8A%A1/"/>
    
    <category term="生命周期" scheme="https://lucky845.github.io/tags/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>【Spring Boot】如何进行级联校验多层级的参数对象</title>
    <link href="https://lucky845.github.io/archives/b55fa573.html"/>
    <id>https://lucky845.github.io/archives/b55fa573.html</id>
    <published>2025-02-24T20:00:00.000Z</published>
    <updated>2025-02-25T11:46:38.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在开发 RESTful API 时，常常需要处理复杂的请求体，其中可能包含多层级的参数对象。为了确保数据的有效性和安全性，Spring Boot 提供了级联校验的功能，可以对嵌套对象进行校验。本文将介绍如何在 Spring Boot 中实现级联校验多层级的参数对象。</p><h2 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h2><p>确保在 <code>pom.xml</code> 中添加了 <code>spring-boot-starter-validation</code> 依赖（如果之前已经添加过，可以跳过这一步）：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="级联校验示例"><a href="#级联校验示例" class="headerlink" title="级联校验示例"></a>级联校验示例</h2><h3 id="1-定义嵌套对象"><a href="#1-定义嵌套对象" class="headerlink" title="1. 定义嵌套对象"></a>1. 定义嵌套对象</h3><p>首先，我们定义一个嵌套对象，例如 <code>Address</code> 和 <code>User</code> 类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">NotBlank</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"地址不能为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> street<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"城市不能为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>    <span class="token comment">// getters and setters</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span></span><span class="token class-name">Valid</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">Email</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">NotBlank</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"用户名不能为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Email</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"邮箱格式不正确"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Valid</span> <span class="token comment">// 级联校验</span>    <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>    <span class="token comment">// getters and setters</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-控制器示例"><a href="#2-控制器示例" class="headerlink" title="2. 控制器示例"></a>2. 控制器示例</h3><p>在控制器中，我们可以使用 <code>@Valid</code> 注解来对 <code>User</code> 对象进行校验，Spring 会自动校验嵌套的 <code>Address</code> 对象：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">ResponseEntity</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Validated</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/users"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@PostMapping</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 处理用户创建逻辑</span>        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token string">"用户创建成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-全局异常处理"><a href="#3-全局异常处理" class="headerlink" title="3. 全局异常处理"></a>3. 全局异常处理</h3><p>为了处理校验失败时的异常，我们可以使用全局异常处理器，和之前的参数校验示例相同：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpStatus</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">ResponseEntity</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span></span><span class="token class-name">MethodArgumentNotValidException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ControllerAdvice</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ExceptionHandler</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleValidationExceptions</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> errors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ex<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFieldErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>error <span class="token operator">-&gt;</span>             errors<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> error<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>errors<span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="级联校验的最佳实践"><a href="#级联校验的最佳实践" class="headerlink" title="级联校验的最佳实践"></a>级联校验的最佳实践</h2><ol><li><p><strong>使用 <code>@Valid</code> 注解</strong>：在嵌套对象的字段上使用 <code>@Valid</code> 注解，以启用级联校验。</p></li><li><p><strong>清晰的错误信息</strong>：确保每个字段都有明确的错误信息，帮助前端开发人员快速定位问题。</p></li><li><p><strong>全局异常处理</strong>：使用 <code>@ControllerAdvice</code> 进行全局异常处理，集中管理异常响应。</p></li><li><p><strong>文档记录</strong>：在 API 文档中记录参数校验规则，确保前后端一致。</p></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>如何自定义级联校验的错误信息？</strong></p><ul><li>可以在嵌套对象的字段上使用自定义的校验注解，并提供自定义的错误信息。</li></ul></li><li><p><strong>如何处理复杂的嵌套对象？</strong></p><ul><li>对于更复杂的嵌套对象，可以继续使用 <code>@Valid</code> 注解进行多层级的校验。</li></ul></li><li><p><strong>如何进行国际化的错误信息？</strong></p><ul><li>可以使用 <code>MessageSource</code> 来实现国际化的错误信息。</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上方法，我们可以在 Spring Boot 中有效地进行级联校验多层级的参数对象，确保 API 的数据有效性和安全性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-validation">Spring Boot Validation</a></li><li><a href="https://beanvalidation.org/">Java Bean Validation</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和实现-Spring-Boot-中的级联校验。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和实现-Spring-Boot-中的级联校验。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和实现 Spring Boot 中的级联校验。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和实现 Spring Boot 中的级联校验。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;在开发 RESTful API 时，常常需要处理复杂的请求体，其中可能包含多层级的参数对象。为了确保数据的有效性和安全性，S</summary>
      
    
    
    
    <category term="Java" scheme="https://lucky845.github.io/categories/Java/"/>
    
    <category term="Spring" scheme="https://lucky845.github.io/categories/Java/Spring/"/>
    
    
    <category term="Java" scheme="https://lucky845.github.io/tags/Java/"/>
    
    <category term="Spring Boot" scheme="https://lucky845.github.io/tags/Spring-Boot/"/>
    
    <category term="参数校验" scheme="https://lucky845.github.io/tags/%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/"/>
    
    <category term="级联校验" scheme="https://lucky845.github.io/tags/%E7%BA%A7%E8%81%94%E6%A0%A1%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>【Spring Boot】如何进行 Body、Query、Path Variable 类型的参数校验</title>
    <link href="https://lucky845.github.io/archives/b55fa572.html"/>
    <id>https://lucky845.github.io/archives/b55fa572.html</id>
    <published>2025-02-24T19:00:00.000Z</published>
    <updated>2025-02-25T11:46:38.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在开发 RESTful API 时，参数校验是确保数据有效性和安全性的重要环节。Spring Boot 提供了强大的参数校验功能，可以对请求中的 Body、Query 和 Path Variable 类型的参数进行校验。本文将介绍如何在 Spring Boot 中实现这些参数的校验。</p><h2 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h2><p>首先，确保在 <code>pom.xml</code> 中添加了 <code>spring-boot-starter-validation</code> 依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-Body-参数校验"><a href="#1-Body-参数校验" class="headerlink" title="1. Body 参数校验"></a>1. Body 参数校验</h2><p>对于请求体中的参数校验，我们可以使用 <code>@Valid</code> 注解结合 Java Bean Validation API（如 Hibernate Validator）来实现。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">Email</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">NotBlank</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">Size</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDTO</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"用户名不能为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Email</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"邮箱格式不正确"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"密码长度不能少于6位"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token comment">// getters and setters</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="控制器示例"><a href="#控制器示例" class="headerlink" title="控制器示例"></a>控制器示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">ResponseEntity</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Validated</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/users"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@PostMapping</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">UserDTO</span> userDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 处理用户创建逻辑</span>        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token string">"用户创建成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-Query-参数校验"><a href="#2-Query-参数校验" class="headerlink" title="2. Query 参数校验"></a>2. Query 参数校验</h2><p>对于查询参数的校验，可以直接在控制器方法的参数上使用校验注解。</p><h3 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">Min</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">NotNull</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/products"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getProducts</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@RequestParam</span> <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"页码不能为空"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"页码必须大于0"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> page<span class="token punctuation">,</span>            <span class="token annotation punctuation">@RequestParam</span> <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"每页数量不能为空"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"每页数量必须大于0"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 处理获取产品逻辑</span>        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>productService<span class="token punctuation">.</span><span class="token function">getProducts</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Path-Variable-校验"><a href="#3-Path-Variable-校验" class="headerlink" title="3. Path Variable 校验"></a>3. Path Variable 校验</h2><p>对于路径变量的校验，方法与查询参数类似，可以在路径变量上使用校验注解。</p><h3 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">Min</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">NotNull</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/orders"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span> <span class="token function">getOrder</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@PathVariable</span> <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"订单ID不能为空"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"订单ID必须大于0"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 处理获取订单逻辑</span>        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>orderService<span class="token punctuation">.</span><span class="token function">getOrderById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-全局异常处理"><a href="#4-全局异常处理" class="headerlink" title="4. 全局异常处理"></a>4. 全局异常处理</h2><p>为了处理校验失败时的异常，我们可以使用全局异常处理器。</p><h3 id="示例代码-3"><a href="#示例代码-3" class="headerlink" title="示例代码"></a>示例代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpStatus</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">ResponseEntity</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span></span><span class="token class-name">MethodArgumentNotValidException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ControllerAdvice</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ExceptionHandler</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleValidationExceptions</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> errors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ex<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFieldErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>error <span class="token operator">-&gt;</span>             errors<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> error<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>errors<span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li><p><strong>使用注解进行校验</strong>：利用 Java Bean Validation 提供的注解进行参数校验，保持代码简洁。</p></li><li><p><strong>全局异常处理</strong>：使用 <code>@ControllerAdvice</code> 进行全局异常处理，集中管理异常响应。</p></li><li><p><strong>清晰的错误信息</strong>：提供清晰的错误信息，帮助前端开发人员快速定位问题。</p></li><li><p><strong>文档记录</strong>：在 API 文档中记录参数校验规则，确保前后端一致。</p></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>如何自定义校验注解？</strong></p><ul><li>可以通过实现 <code>ConstraintValidator</code> 接口来自定义校验逻辑。</li></ul></li><li><p><strong>如何处理复杂的校验逻辑？</strong></p><ul><li>可以使用组合注解或自定义注解来处理复杂的校验需求。</li></ul></li><li><p><strong>如何进行国际化的错误信息？</strong></p><ul><li>可以使用 <code>MessageSource</code> 来实现国际化的错误信息。</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上方法，我们可以在 Spring Boot 中有效地进行 Body、Query 和 Path Variable 类型的参数校验，确保 API 的数据有效性和安全性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-validation">Spring Boot Validation</a></li><li><a href="https://beanvalidation.org/">Java Bean Validation</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和实现-Spring-Boot-中的参数校验。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和实现-Spring-Boot-中的参数校验。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和实现 Spring Boot 中的参数校验。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和实现 Spring Boot 中的参数校验。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;在开发 RESTful API 时，参数校验是确保数据有效性和安全性的重要环节。Spring Boot 提供了强大的参数校验</summary>
      
    
    
    
    <category term="Java" scheme="https://lucky845.github.io/categories/Java/"/>
    
    <category term="Spring" scheme="https://lucky845.github.io/categories/Java/Spring/"/>
    
    
    <category term="Java" scheme="https://lucky845.github.io/tags/Java/"/>
    
    <category term="Spring Boot" scheme="https://lucky845.github.io/tags/Spring-Boot/"/>
    
    <category term="参数校验" scheme="https://lucky845.github.io/tags/%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/"/>
    
    <category term="数据验证" scheme="https://lucky845.github.io/tags/%E6%95%B0%E6%8D%AE%E9%AA%8C%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>【Spring Boot】如何阻止某个第三方组件的自动装配</title>
    <link href="https://lucky845.github.io/archives/b55fa571.html"/>
    <id>https://lucky845.github.io/archives/b55fa571.html</id>
    <published>2025-02-24T18:00:00.000Z</published>
    <updated>2025-02-25T11:46:38.082Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在 Spring Boot 中，自动装配是一个非常强大的特性，它可以根据类路径中的依赖自动配置 Spring 应用的 Bean。然而，在某些情况下，我们可能不希望某个第三方组件被自动装配，例如因为我们需要使用自定义的配置或实现。本文将介绍几种在 Spring Boot 中阻止某个第三方组件自动装配的方法。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1-使用-EnableAutoConfiguration-exclude"><a href="#1-使用-EnableAutoConfiguration-exclude" class="headerlink" title="1. 使用 @EnableAutoConfiguration(exclude = ...)"></a>1. 使用 <code>@EnableAutoConfiguration(exclude = ...)</code></h3><p>在主应用类上使用 <code>@EnableAutoConfiguration</code> 注解的 <code>exclude</code> 属性，可以指定要排除的自动装配类。例如，如果我们想要排除 <code>DataSourceAutoConfiguration</code>，可以这样做：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span><span class="token class-name">DataSourceAutoConfiguration</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MyApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-使用-ConditionalOnMissingBean"><a href="#2-使用-ConditionalOnMissingBean" class="headerlink" title="2. 使用 @ConditionalOnMissingBean"></a>2. 使用 <code>@ConditionalOnMissingBean</code></h3><p>如果你在自定义配置中使用了某个 Bean，并且希望阻止自动装配的 Bean，可以在自定义 Bean 上使用 <code>@ConditionalOnMissingBean</code> 注解。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span></span><span class="token class-name">ConditionalOnMissingBean</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">MyService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">MyService</span> <span class="token function">myService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，如果 <code>MyService</code> 已经被自动装配，则不会再创建自定义的 <code>MyService</code> Bean。</p><h3 id="3-使用-spring-autoconfigure-exclude-属性"><a href="#3-使用-spring-autoconfigure-exclude-属性" class="headerlink" title="3. 使用 spring.autoconfigure.exclude 属性"></a>3. 使用 <code>spring.autoconfigure.exclude</code> 属性</h3><p>在 <code>application.properties</code> 或 <code>application.yml</code> 文件中，可以使用 <code>spring.autoconfigure.exclude</code> 属性来排除自动装配的类。例如：</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">spring.autoconfigure.exclude</span><span class="token punctuation">=</span><span class="token value attr-value">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者在 <code>application.yml</code> 中：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">autoconfigure</span><span class="token punctuation">:</span>    <span class="token key atrule">exclude</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-自定义条件注解"><a href="#4-自定义条件注解" class="headerlink" title="4. 自定义条件注解"></a>4. 自定义条件注解</h3><p>如果需要更复杂的条件，可以创建自定义的条件注解，并在自动装配的 Bean 上使用。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Conditional</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span><span class="token class-name">MyCustomCondition</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-使用-Profile-注解"><a href="#5-使用-Profile-注解" class="headerlink" title="5. 使用 @Profile 注解"></a>5. 使用 <code>@Profile</code> 注解</h3><p>如果某个 Bean 只在特定的环境中需要，可以使用 <code>@Profile</code> 注解来控制 Bean 的创建。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Profile</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DevOnlyService</span> <span class="token punctuation">{</span>    <span class="token comment">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在生产环境中，<code>DevOnlyService</code> 将不会被创建。</p><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li><p><strong>明确依赖关系</strong>：在使用第三方组件时，确保了解其自动装配的内容，以便在需要时进行排除。</p></li><li><p><strong>使用自定义配置</strong>：在需要自定义 Bean 的情况下，使用自定义配置类来替代自动装配的 Bean。</p></li><li><p><strong>保持配置简洁</strong>：尽量避免过多的排除配置，以保持项目的可维护性。</p></li><li><p><strong>文档记录</strong>：在项目文档中记录排除的自动装配类，以便团队成员了解项目的配置。</p></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>如何知道哪些自动装配类被加载？</strong></p><ul><li>可以在启动日志中查看 Spring Boot 的自动装配报告，使用 <code>--debug</code> 参数启动应用。</li></ul></li><li><p><strong>如何排除多个自动装配类？</strong></p><ul><li>在 <code>@EnableAutoConfiguration</code> 中使用 <code>exclude</code> 属性时，可以传入多个类，例如：<code>exclude = {Class1.class, Class2.class}</code>。</li></ul></li><li><p><strong>如何处理依赖冲突？</strong></p><ul><li>确保使用兼容的版本，必要时可以排除某些依赖。</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上方法，我们可以有效地阻止某个第三方组件的自动装配，确保 Spring Boot 应用的灵活性和可控性。合理使用自动装配特性，可以提高开发效率，同时避免不必要的配置冲突。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.auto-configuration">Spring Boot Auto-Configuration</a></li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html">Spring Boot Configuration Properties</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和解决-Spring-Boot-中的自动装配问题。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和解决-Spring-Boot-中的自动装配问题。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和解决 Spring Boot 中的自动装配问题。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和解决 Spring Boot 中的自动装配问题。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;在 Spring Boot 中，自动装配是一个非常强大的特性，它可以根据类路径中的依赖自动配置 Spring 应用的 Bea</summary>
      
    
    
    
    <category term="Java" scheme="https://lucky845.github.io/categories/Java/"/>
    
    <category term="Spring" scheme="https://lucky845.github.io/categories/Java/Spring/"/>
    
    
    <category term="Java" scheme="https://lucky845.github.io/tags/Java/"/>
    
    <category term="Spring Boot" scheme="https://lucky845.github.io/tags/Spring-Boot/"/>
    
    <category term="配置管理" scheme="https://lucky845.github.io/tags/%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/"/>
    
    <category term="自动装配" scheme="https://lucky845.github.io/tags/%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>【Spring】如何解决同一实例内部方法调用时部分事务失效的问题</title>
    <link href="https://lucky845.github.io/archives/b55fa570.html"/>
    <id>https://lucky845.github.io/archives/b55fa570.html</id>
    <published>2025-02-24T17:00:00.000Z</published>
    <updated>2025-02-25T11:46:38.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在 Spring 应用中，事务管理是确保数据一致性的重要机制。然而，当我们在同一实例内部方法调用时，可能会遇到事务失效的问题。这是因为 Spring 的事务管理是基于 AOP（面向切面编程）实现的，只有通过代理对象调用的方法才能被事务管理器拦截。</p><h2 id="问题示例"><a href="#问题示例" class="headerlink" title="问题示例"></a>问题示例</h2><p>考虑以下示例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 保存用户</span>        userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用内部方法</span>        <span class="token function">sendWelcomeEmail</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendWelcomeEmail</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 发送欢迎邮件</span>        emailService<span class="token punctuation">.</span><span class="token function">sendEmail</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，<code>createUser</code> 方法被标记为 <code>@Transactional</code>，但当它内部调用 <code>sendWelcomeEmail</code> 方法时，事务不会被应用到 <code>sendWelcomeEmail</code> 方法中。这可能导致在 <code>sendWelcomeEmail</code> 方法中发生异常时，<code>createUser</code> 方法的事务不会回滚。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1-使用代理对象"><a href="#1-使用代理对象" class="headerlink" title="1. 使用代理对象"></a>1. 使用代理对象</h3><p>为了确保事务能够正常工作，我们可以将内部方法提取到另一个服务中，确保通过代理对象调用。示例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">EmailService</span> emailService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 保存用户</span>        userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用外部服务</span>        emailService<span class="token punctuation">.</span><span class="token function">sendWelcomeEmail</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-使用-Transactional-注解在外部方法"><a href="#2-使用-Transactional-注解在外部方法" class="headerlink" title="2. 使用 @Transactional 注解在外部方法"></a>2. 使用 <code>@Transactional</code> 注解在外部方法</h3><p>如果不想将方法提取到另一个服务中，可以考虑将 <code>@Transactional</code> 注解放在外部方法上，确保事务能够正常工作：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">EmailService</span> emailService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 保存用户</span>        userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用内部方法</span>        <span class="token function">sendWelcomeEmail</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">REQUIRES_NEW</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendWelcomeEmail</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 发送欢迎邮件</span>        emailService<span class="token punctuation">.</span><span class="token function">sendEmail</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-使用-AOP-代理"><a href="#3-使用-AOP-代理" class="headerlink" title="3. 使用 AOP 代理"></a>3. 使用 AOP 代理</h3><p>如果需要在同一类中调用方法并保持事务，可以使用 AOP 代理。确保在 Spring 配置中启用 AOP：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>    <span class="token comment">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在调用方法时，使用 <code>ApplicationContext</code> 获取代理对象：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 保存用户</span>        userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 通过代理对象调用</span>        <span class="token class-name">UserService</span> proxy <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">sendWelcomeEmail</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendWelcomeEmail</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 发送欢迎邮件</span>        emailService<span class="token punctuation">.</span><span class="token function">sendEmail</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li><p><strong>避免同一实例内部方法调用</strong>：尽量避免在同一实例中直接调用带有事务的方法，使用外部服务或代理对象。</p></li><li><p><strong>合理使用事务传播行为</strong>：根据业务需求选择合适的事务传播行为，如 <code>REQUIRES_NEW</code>。</p></li><li><p><strong>清晰的事务边界</strong>：确保每个事务的边界清晰，避免不必要的嵌套事务。</p></li><li><p><strong>日志记录</strong>：在事务处理过程中，记录关键信息，便于后续排查。</p></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>如何调试事务失效的问题？</strong></p><ul><li>可以通过日志记录事务的开始和结束，检查事务是否被正确提交或回滚。</li></ul></li><li><p><strong>如何处理嵌套事务？</strong></p><ul><li>使用合适的事务传播行为，确保嵌套事务的处理符合业务需求。</li></ul></li><li><p><strong>如何确保数据一致性？</strong></p><ul><li>在设计业务逻辑时，确保事务的边界和数据的一致性。</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上方法，我们可以有效解决同一实例内部方法调用时部分事务失效的问题，确保 Spring 应用中的数据一致性和事务管理的有效性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/data-access.html#transaction">Spring Transaction Management</a></li><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#aop">Spring AOP Documentation</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和解决同一实例内部方法调用时的事务失效问题。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和解决同一实例内部方法调用时的事务失效问题。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和解决同一实例内部方法调用时的事务失效问题。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和解决同一实例内部方法调用时的事务失效问题。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;在 Spring 应用中，事务管理是确保数据一致性的重要机制。然而，当我们在同一实例内部方法调用时，可能会遇到事务失效的问题</summary>
      
    
    
    
    <category term="Java" scheme="https://lucky845.github.io/categories/Java/"/>
    
    <category term="Spring" scheme="https://lucky845.github.io/categories/Java/Spring/"/>
    
    
    <category term="Java" scheme="https://lucky845.github.io/tags/Java/"/>
    
    <category term="Spring" scheme="https://lucky845.github.io/tags/Spring/"/>
    
    <category term="事务管理" scheme="https://lucky845.github.io/tags/%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86/"/>
    
    <category term="AOP" scheme="https://lucky845.github.io/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>【Spring Cloud Gateway】如何配置全局异常处理</title>
    <link href="https://lucky845.github.io/archives/b55fa569.html"/>
    <id>https://lucky845.github.io/archives/b55fa569.html</id>
    <published>2025-02-24T16:00:00.000Z</published>
    <updated>2025-02-25T11:46:38.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在使用 Spring Cloud Gateway 作为 API 网关时，处理请求和响应的异常是非常重要的。良好的异常处理机制可以提高系统的健壮性，并为前端提供清晰的错误信息。与 Spring Boot 中的全局异常处理类似，Spring Cloud Gateway 也提供了全局异常处理的能力。</p><h2 id="关联内容"><a href="#关联内容" class="headerlink" title="关联内容"></a>关联内容</h2><p>在之前的文章中，我们讨论了如何在 Spring Boot 中实现全局统一异常处理，使用 <code>@ControllerAdvice</code> 和 <code>@ExceptionHandler</code> 注解来处理各种类型的异常。本文将基于这些概念，介绍如何在 Spring Cloud Gateway 中实现类似的功能。</p><h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><h3 id="1-定义统一响应结构"><a href="#1-定义统一响应结构" class="headerlink" title="1. 定义统一响应结构"></a>1. 定义统一响应结构</h3><p>首先，我们需要定义一个统一的响应结构，类似于之前的实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"success"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-创建全局异常处理器"><a href="#2-创建全局异常处理器" class="headerlink" title="2. 创建全局异常处理器"></a>2. 创建全局异常处理器</h3><p>在 Spring Cloud Gateway 中，我们可以通过实现 <code>GlobalFilter</code> 接口来处理全局异常。以下是一个示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">GatewayFilter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span><span class="token class-name">AbstractGatewayFilterFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpStatus</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerWebExchange</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Mono</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandlerFilter</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractGatewayFilterFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GlobalExceptionHandlerFilter<span class="token punctuation">.</span>Config</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">GlobalExceptionHandlerFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Config</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">GatewayFilter</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Config</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> chain<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onErrorResume</span><span class="token punctuation">(</span>throwable <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token comment">// 处理异常</span>                <span class="token keyword">return</span> <span class="token function">handleException</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleException</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 根据异常类型返回不同的响应</span>        <span class="token class-name">HttpStatus</span> status <span class="token operator">=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">INTERNAL_SERVER_ERROR</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">"系统繁忙，请稍后重试"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>throwable <span class="token keyword">instanceof</span> <span class="token class-name">BusinessException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            status <span class="token operator">=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">;</span>            message <span class="token operator">=</span> throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>throwable <span class="token keyword">instanceof</span> <span class="token class-name">HttpRequestMethodNotSupportedException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            status <span class="token operator">=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">METHOD_NOT_ALLOWED</span><span class="token punctuation">;</span>            message <span class="token operator">=</span> <span class="token string">"请求方法不支持"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 构建响应</span>        exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>        exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeWith</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bufferFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsBytes</span><span class="token punctuation">(</span><span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token punctuation">{</span>        <span class="token comment">// 配置类</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-注册全局过滤器"><a href="#3-注册全局过滤器" class="headerlink" title="3. 注册全局过滤器"></a>3. 注册全局过滤器</h3><p>在 Spring Cloud Gateway 中，您需要将全局过滤器注册到应用程序中。可以在主应用类中使用 <code>@Bean</code> 注解进行注册：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GatewayApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">GatewayApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">GlobalExceptionHandlerFilter</span> <span class="token function">globalExceptionHandlerFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">GlobalExceptionHandlerFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-使用示例"><a href="#4-使用示例" class="headerlink" title="4. 使用示例"></a>4. 使用示例</h3><p>在 Gateway 中配置路由时，可以直接使用全局异常处理器：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> user<span class="token punctuation">-</span>service          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8081</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/api/user/<span class="token important">**</span>          <span class="token key atrule">filters</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> GlobalExceptionHandlerFilter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li><p><strong>统一错误码规范</strong></p><ul><li>建立统一的错误码体系，确保前后端一致。</li></ul></li><li><p><strong>日志记录</strong></p><ul><li>记录异常信息，便于后续排查。</li></ul></li><li><p><strong>性能考虑</strong></p><ul><li>在异常处理过程中，避免进行重量级操作。</li></ul></li><li><p><strong>友好性</strong></p><ul><li>提供清晰的错误提示，支持国际化。</li></ul></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>如何处理嵌套异常？</strong></p><ul><li>可以在 <code>handleException</code> 方法中对异常进行递归处理，获取根异常。</li></ul></li><li><p><strong>如何实现错误信息国际化？</strong></p><ul><li>可以使用 <code>MessageSource</code> 来获取国际化的错误信息。</li></ul></li><li><p><strong>如何处理异步请求的异常？</strong></p><ul><li>在异步请求中，确保异常处理逻辑能够捕获到异常。</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过实现全局统一异常处理，我们可以在 Spring Cloud Gateway 中有效地处理各种异常，提供友好的错误提示，并提高系统的健壮性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://spring.io/projects/spring-cloud-gateway">Spring Cloud Gateway Documentation</a></li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-error-handling">Spring Boot Exception Handling</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和实现-Spring-Cloud-Gateway-的全局异常处理。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和实现-Spring-Cloud-Gateway-的全局异常处理。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和实现 Spring Cloud Gateway 的全局异常处理。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和实现 Spring Cloud Gateway 的全局异常处理。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;在使用 Spring Cloud Gateway 作为 API 网关时，处理请求和响应的异常是非常重要的。良好的异常处理机制</summary>
      
    
    
    
    <category term="Java" scheme="https://lucky845.github.io/categories/Java/"/>
    
    <category term="Spring" scheme="https://lucky845.github.io/categories/Java/Spring/"/>
    
    
    <category term="Java" scheme="https://lucky845.github.io/tags/Java/"/>
    
    <category term="异常处理" scheme="https://lucky845.github.io/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
    <category term="Spring Cloud" scheme="https://lucky845.github.io/tags/Spring-Cloud/"/>
    
    <category term="Gateway" scheme="https://lucky845.github.io/tags/Gateway/"/>
    
  </entry>
  
</feed>
