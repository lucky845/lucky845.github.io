<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lucky845的博客</title>
  
  <subtitle>lucky845的博客</subtitle>
  <link href="https://lucky845.github.io/atom.xml" rel="self"/>
  
  <link href="https://lucky845.github.io/"/>
  <updated>2025-03-04T11:32:55.203Z</updated>
  <id>https://lucky845.github.io/</id>
  
  <author>
    <name>lucky845</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Java】Java泛型与通配符详解</title>
    <link href="https://lucky845.github.io/archives/9f8e706f.html"/>
    <id>https://lucky845.github.io/archives/9f8e706f.html</id>
    <published>2025-03-04T04:00:00.000Z</published>
    <updated>2025-03-04T11:32:55.203Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java泛型与通配符详解"><a href="#Java泛型与通配符详解" class="headerlink" title="Java泛型与通配符详解"></a>Java泛型与通配符详解</h1><p>在Java编程中，泛型是一个强大的特性，它提供了编译时类型安全检查机制，允许程序员定义类型安全的数据结构。本文将深入探讨Java泛型的概念、用法以及通配符的使用方式。</p><h2 id="泛型基础"><a href="#泛型基础" class="headerlink" title="泛型基础"></a>泛型基础</h2><h3 id="什么是泛型？"><a href="#什么是泛型？" class="headerlink" title="什么是泛型？"></a>什么是泛型？</h3><p>泛型是Java 5引入的一个重要特性，它允许在定义类、接口和方法时使用类型参数。通过泛型，我们可以：</p><ol><li>实现类型安全的集合</li><li>消除类型转换</li><li>实现通用算法</li></ol><h3 id="泛型类的定义"><a href="#泛型类的定义" class="headerlink" title="泛型类的定义"></a>泛型类的定义</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">T</span> content<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">T</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringBox<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"Hello Generics"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> content <span class="token operator">=</span> stringBox<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 无需类型转换</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><h3 id="定义泛型方法"><a href="#定义泛型方法" class="headerlink" title="定义泛型方法"></a>定义泛型方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Util</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">T</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">findMax</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>array <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> array<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token class-name">T</span> max <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                max <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Generator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token class-name">T</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 实现泛型接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NumberGenerator</span> <span class="token keyword">implements</span> <span class="token class-name">Generator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> current <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> current<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><h3 id="上界通配符（extends）"><a href="#上界通配符（extends）" class="headerlink" title="上界通配符（extends）"></a>上界通配符（extends）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processNumbers</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Number</span> number <span class="token operator">:</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>number<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="下界通配符（super）"><a href="#下界通配符（super）" class="headerlink" title="下界通配符（super）"></a>下界通配符（super）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addNumbers</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// list.add("3"); // 编译错误</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="无界通配符"><a href="#无界通配符" class="headerlink" title="无界通配符"></a>无界通配符</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> item <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h2><p>泛型信息在编译后会被擦除，这是Java泛型的一个重要特性：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> intBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在运行时，两者的类型是相同的</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringBox<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> intBox<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类型擦除的影响"><a href="#类型擦除的影响" class="headerlink" title="类型擦除的影响"></a>类型擦除的影响</h3><ol><li>不能创建泛型数组</li><li>不能用基本类型实例化泛型类</li><li>不能捕获泛型类型的异常</li></ol><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="1-优先使用泛型集合"><a href="#1-优先使用泛型集合" class="headerlink" title="1. 优先使用泛型集合"></a>1. 优先使用泛型集合</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 推荐</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不推荐</span><span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 原始类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-合理使用通配符"><a href="#2-合理使用通配符" class="headerlink" title="2. 合理使用通配符"></a>2. 合理使用通配符</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 如果需要从集合中读取，使用 extends</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readOnly</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Number</span> first <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 如果需要向集合中写入，使用 super</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeOnly</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-泛型方法的类型推断"><a href="#3-泛型方法的类型推断" class="headerlink" title="3. 泛型方法的类型推断"></a>3. 泛型方法的类型推断</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 使用类型推断</span><span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> pair <span class="token operator">=</span> <span class="token class-name">Pair</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 无需显式指定类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常见问题与解决方案"><a href="#常见问题与解决方案" class="headerlink" title="常见问题与解决方案"></a>常见问题与解决方案</h2><h3 id="1-泛型数组问题"><a href="#1-泛型数组问题" class="headerlink" title="1. 泛型数组问题"></a>1. 泛型数组问题</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 不能直接创建泛型数组</span><span class="token comment">// T[] array = new T[10]; // 编译错误</span><span class="token comment">// 解决方案</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericArray</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">;</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">T</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-类型安全的异构容器"><a href="#2-类型安全的异构容器" class="headerlink" title="2. 类型安全的异构容器"></a>2. 类型安全的异构容器</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TypeSafeMap</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">,</span> <span class="token class-name">T</span> instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> instance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> type<span class="token punctuation">.</span><span class="token function">cast</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Java泛型是一个强大的特性，它提供了编译时类型安全性，使代码更加健壮和可维护。通过合理使用泛型和通配符，我们可以编写更加灵活和类型安全的代码。虽然有一些限制（如类型擦除），但通过遵循最佳实践和正确的使用模式，我们可以充分发挥泛型的优势。</p><hr><p>希望这篇文章能帮助您更好地理解和使用Java泛型与通配符。如果您有任何问题，欢迎在评论区讨论！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java泛型与通配符详解&quot;&gt;&lt;a href=&quot;#Java泛型与通配符详解&quot; class=&quot;headerlink&quot; title=&quot;Java泛型与通配符详解&quot;&gt;&lt;/a&gt;Java泛型与通配符详解&lt;/h1&gt;&lt;p&gt;在Java编程中，泛型是一个强大的特性，它提供了编译时类型安</summary>
      
    
    
    
    <category term="Java" scheme="https://lucky845.github.io/categories/Java/"/>
    
    <category term="技术笔记" scheme="https://lucky845.github.io/categories/Java/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Java基础" scheme="https://lucky845.github.io/categories/Java/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://lucky845.github.io/tags/Java/"/>
    
    <category term="泛型" scheme="https://lucky845.github.io/tags/%E6%B3%9B%E5%9E%8B/"/>
    
    <category term="通配符" scheme="https://lucky845.github.io/tags/%E9%80%9A%E9%85%8D%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title>【Java】Java序列化机制详解</title>
    <link href="https://lucky845.github.io/archives/8f9e706f.html"/>
    <id>https://lucky845.github.io/archives/8f9e706f.html</id>
    <published>2025-03-04T03:00:00.000Z</published>
    <updated>2025-03-04T11:32:22.537Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java序列化机制详解"><a href="#Java序列化机制详解" class="headerlink" title="Java序列化机制详解"></a>Java序列化机制详解</h1><p>在Java应用开发中，序列化是一个非常重要的概念。它允许我们将对象转换为字节流，以便于存储或传输，同时也支持将字节流反序列化回对象。本文将全面介绍Java序列化机制的原理、实现方式以及最佳实践。</p><h2 id="什么是序列化？"><a href="#什么是序列化？" class="headerlink" title="什么是序列化？"></a>什么是序列化？</h2><p>序列化是将对象的状态信息转换为可存储或传输的形式的过程。在Java中，这个过程将对象转换为字节序列。反序列化则是其逆过程，即将字节序列恢复为对象的过程。</p><h3 id="序列化的用途"><a href="#序列化的用途" class="headerlink" title="序列化的用途"></a>序列化的用途</h3><ol><li>持久化对象状态</li><li>网络传输</li><li>深克隆</li><li>分布式系统中的数据传输</li></ol><h2 id="Java序列化的实现"><a href="#Java序列化的实现" class="headerlink" title="Java序列化的实现"></a>Java序列化的实现</h2><h3 id="1-基本实现"><a href="#1-基本实现" class="headerlink" title="1. 基本实现"></a>1. 基本实现</h3><p>要使一个类可序列化，需要实现<code>Serializable</code>接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span> <span class="token comment">// transient字段不会被序列化</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token comment">// 构造器、getter和setter</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-序列化和反序列化操作"><a href="#2-序列化和反序列化操作" class="headerlink" title="2. 序列化和反序列化操作"></a>2. 序列化和反序列化操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 序列化</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"user.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 反序列化</span><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"user.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义序列化"><a href="#自定义序列化" class="headerlink" title="自定义序列化"></a>自定义序列化</h2><h3 id="1-实现writeObject和readObject方法"><a href="#1-实现writeObject和readObject方法" class="headerlink" title="1. 实现writeObject和readObject方法"></a>1. 实现writeObject和readObject方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomUser</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token class-name">ObjectOutputStream</span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        out<span class="token punctuation">.</span><span class="token function">defaultWriteObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 自定义加密处理</span>        out<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token function">encrypt</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span><span class="token class-name">ObjectInputStream</span> in<span class="token punctuation">)</span>             <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        in<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 自定义解密处理</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>in<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 加密解密方法实现</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-使用Externalizable接口"><a href="#2-使用Externalizable接口" class="headerlink" title="2. 使用Externalizable接口"></a>2. 使用Externalizable接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExternalizableUser</span> <span class="token keyword">implements</span> <span class="token class-name">Externalizable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeExternal</span><span class="token punctuation">(</span><span class="token class-name">ObjectOutput</span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        out<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readExternal</span><span class="token punctuation">(</span><span class="token class-name">ObjectInput</span> in<span class="token punctuation">)</span>             <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        username <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> in<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        age <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="序列化注意事项"><a href="#序列化注意事项" class="headerlink" title="序列化注意事项"></a>序列化注意事项</h2><h3 id="1-serialVersionUID的作用"><a href="#1-serialVersionUID的作用" class="headerlink" title="1. serialVersionUID的作用"></a>1. serialVersionUID的作用</h3><p>serialVersionUID用于版本控制，确保序列化和反序列化的类版本一致：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VersionedUser</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token comment">// 显式定义serialVersionUID</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token comment">// 如果添加新字段，旧版本的序列化数据仍然可以反序列化</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-安全性考虑"><a href="#2-安全性考虑" class="headerlink" title="2. 安全性考虑"></a>2. 安全性考虑</h3><ol><li>敏感字段使用transient关键字</li><li>实现自定义的序列化方法进行加密</li><li>注意反序列化漏洞的防范</li></ol><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="1-使用缓冲流提升性能"><a href="#1-使用缓冲流提升性能" class="headerlink" title="1. 使用缓冲流提升性能"></a>1. 使用缓冲流提升性能</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">optimizedSerialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"data.ser"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-选择合适的序列化方式"><a href="#2-选择合适的序列化方式" class="headerlink" title="2. 选择合适的序列化方式"></a>2. 选择合适的序列化方式</h3><ol><li>Java原生序列化：适用于简单对象的持久化</li><li>JSON序列化：适用于跨平台数据交换</li><li>Protocol Buffers：适用于高性能场景</li></ol><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li>合理使用transient关键字</li><li>显式声明serialVersionUID</li><li>注意序列化安全性</li><li>考虑使用JSON等替代方案</li><li>进行性能测试和优化</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Java序列化机制为对象持久化和传输提供了便利的解决方案。通过合理使用序列化特性，结合安全性考虑和性能优化，我们可以在实际项目中更好地应用这一机制。选择合适的序列化方式，并遵循最佳实践，将帮助我们构建更可靠的应用系统。</p><hr><p>希望这篇文章能帮助您更好地理解和使用Java序列化机制。如果您有任何问题，欢迎在评论区讨论！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java序列化机制详解&quot;&gt;&lt;a href=&quot;#Java序列化机制详解&quot; class=&quot;headerlink&quot; title=&quot;Java序列化机制详解&quot;&gt;&lt;/a&gt;Java序列化机制详解&lt;/h1&gt;&lt;p&gt;在Java应用开发中，序列化是一个非常重要的概念。它允许我们将对象转</summary>
      
    
    
    
    <category term="Java" scheme="https://lucky845.github.io/categories/Java/"/>
    
    <category term="技术笔记" scheme="https://lucky845.github.io/categories/Java/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Java基础" scheme="https://lucky845.github.io/categories/Java/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://lucky845.github.io/tags/Java/"/>
    
    <category term="性能优化" scheme="https://lucky845.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="序列化" scheme="https://lucky845.github.io/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Java反射机制详解：原理、实践与最佳实践</title>
    <link href="https://lucky845.github.io/archives/8f9e705f.html"/>
    <id>https://lucky845.github.io/archives/8f9e705f.html</id>
    <published>2025-03-04T02:00:00.000Z</published>
    <updated>2025-03-04T11:32:42.105Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>Java反射机制是Java语言的一个强大特性，它允许程序在运行时检查和操作类、接口、字段和方法。本文将深入探讨Java反射机制的原理、用法以及最佳实践，帮助您更好地理解和使用这一重要特性。</p><h2 id="什么是反射？"><a href="#什么是反射？" class="headerlink" title="什么是反射？"></a>什么是反射？</h2><p>反射（Reflection）是Java提供的一种机制，允许程序在运行时：</p><ul><li>获取任何类的内部信息</li><li>操作类的属性和方法</li><li>动态创建对象</li><li>调用对象的方法</li></ul><p>这种动态获取信息以及动态调用对象方法的功能称为Java语言的反射机制。</p><h2 id="Class对象的获取"><a href="#Class对象的获取" class="headerlink" title="Class对象的获取"></a>Class对象的获取</h2><p>在Java中，每个类都有一个对应的Class对象，获取Class对象的方式主要有三种：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 1. 通过类名.class获取</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment">// 2. 通过对象的getClass()方法获取</span><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3. 通过Class.forName()方法获取</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz3 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反射的核心API"><a href="#反射的核心API" class="headerlink" title="反射的核心API"></a>反射的核心API</h2><h3 id="1-构造方法的操作"><a href="#1-构造方法的操作" class="headerlink" title="1. 构造方法的操作"></a>1. 构造方法的操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectionDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 获取构造方法</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 获取所有public构造方法</span>        <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructors <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 获取指定参数类型的构造方法</span>        <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> constructor <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 创建对象</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"Hello Reflection"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-成员变量的操作"><a href="#2-成员变量的操作" class="headerlink" title="2. 成员变量的操作"></a>2. 成员变量的操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FieldDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>                <span class="token comment">// 获取所有public字段</span>        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 获取所有字段（包括private）</span>        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredFields <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 获取指定字段</span>        <span class="token class-name">Field</span> nameField <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 设置private字段可访问</span>        nameField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 创建实例并设置字段值</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nameField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-方法的操作"><a href="#3-方法的操作" class="headerlink" title="3. 方法的操作"></a>3. 方法的操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>                <span class="token comment">// 获取所有public方法</span>        <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 获取所有方法（包括private）</span>        <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> declaredMethods <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 获取指定方法</span>        <span class="token class-name">Method</span> method <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"setName"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 设置private方法可访问</span>        method<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 调用方法</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反射的实际应用"><a href="#反射的实际应用" class="headerlink" title="反射的实际应用"></a>反射的实际应用</h2><h3 id="1-框架开发中的应用"><a href="#1-框架开发中的应用" class="headerlink" title="1. 框架开发中的应用"></a>1. 框架开发中的应用</h3><p>反射机制在很多Java框架中都得到了广泛应用，例如：</p><ul><li>Spring框架：通过反射实现依赖注入</li><li>ORM框架：通过反射将数据库记录映射到Java对象</li><li>单元测试框架：通过反射调用带有特定注解的方法</li></ul><h3 id="2-动态代理"><a href="#2-动态代理" class="headerlink" title="2. 动态代理"></a>2. 动态代理</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"保存用户信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">UserService</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">UserService</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>            target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span>proxy1<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args1<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始事务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"提交事务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>                proxy<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反射的优缺点"><a href="#反射的优缺点" class="headerlink" title="反射的优缺点"></a>反射的优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>提高了程序的灵活性和扩展性</li><li>允许程序创建和控制任何类的对象</li><li>支持动态编程</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>性能开销：反射调用比直接调用方法慢</li><li>安全限制：反射可能会破坏封装性</li><li>代码可读性降低</li></ol><h2 id="性能优化建议"><a href="#性能优化建议" class="headerlink" title="性能优化建议"></a>性能优化建议</h2><ol><li>缓存Class对象和Method对象</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token constant">CLASS</span> <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Method</span> <span class="token constant">METHOD</span> <span class="token operator">=</span> <span class="token constant">CLASS</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"setName"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>适当使用setAccessible</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 批量设置可访问</span>method<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>避免在循环中使用反射</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 不推荐</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Method</span> method <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"setName"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"name"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 推荐</span><span class="token class-name">Method</span> method <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"setName"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"name"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>异常处理</li></ol><ul><li>处理ClassNotFoundException</li><li>处理NoSuchMethodException</li><li>处理IllegalAccessException</li><li>处理InvocationTargetException</li></ul><ol start="2"><li>安全性考虑</li></ol><ul><li>谨慎使用setAccessible(true)</li><li>注意反射对封装的破坏</li></ul><ol start="3"><li>性能考虑</li></ol><ul><li>合理使用反射</li><li>缓存反射对象</li><li>避免过度使用</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Java反射机制是一个强大的特性，它为我们提供了在运行时检查和操作类与对象的能力。虽然反射可能会带来一些性能开销，但通过合理使用和优化，我们可以在保证性能的同时享受反射带来的灵活性和扩展性。在实际开发中，我们应该根据具体需求来决定是否使用反射，并注意遵循最佳实践。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《Java核心技术》</li><li>Java官方文档</li><li>Spring Framework源码</li><li>《Effective Java》第三版</li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解Java的反射机制。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解Java的反射机制。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解Java的反射机制。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解Java的反射机制。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;Java反射机制是Java语言的一个强大特性，它允许程序在运行时检查和操作类、接口、字段和方法。本文将深入探讨Java反射机制的原理、用法以</summary>
      
    
    
    
    <category term="技术笔记" scheme="https://lucky845.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Java" scheme="https://lucky845.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/Java/"/>
    
    <category term="Java基础" scheme="https://lucky845.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/Java/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://lucky845.github.io/tags/Java/"/>
    
    <category term="反射" scheme="https://lucky845.github.io/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>【Java】Java synchronized 性能优化全面解析</title>
    <link href="https://lucky845.github.io/archives/e55fb501.html"/>
    <id>https://lucky845.github.io/archives/e55fb501.html</id>
    <published>2025-03-03T06:30:00.000Z</published>
    <updated>2025-03-04T11:32:31.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-synchronized-性能优化全面解析"><a href="#Java-synchronized-性能优化全面解析" class="headerlink" title="Java synchronized 性能优化全面解析"></a>Java synchronized 性能优化全面解析</h1><p>在Java并发编程中，synchronized 是最基础也是最重要的同步机制之一。虽然它使用方便，但在高并发场景下可能会成为性能瓶颈。本文将深入分析 synchronized 的实现原理，并介绍各种优化手段。</p><h2 id="synchronized-的实现原理"><a href="#synchronized-的实现原理" class="headerlink" title="synchronized 的实现原理"></a>synchronized 的实现原理</h2><h3 id="对象头与-Mark-Word"><a href="#对象头与-Mark-Word" class="headerlink" title="对象头与 Mark Word"></a>对象头与 Mark Word</h3><p>synchronized 的实现依赖于对象头中的 Mark Word。在64位JVM中，Mark Word 占用8个字节，其存储内容会随着锁的状态变化而改变：</p><ul><li>无锁状态：存储对象的 hashCode、分代年龄等</li><li>偏向锁：记录持有锁的线程ID</li><li>轻量级锁：指向线程栈中 Lock Record 的指针</li><li>重量级锁：指向互斥量（重量级锁）的指针</li></ul><h3 id="锁的升级过程"><a href="#锁的升级过程" class="headerlink" title="锁的升级过程"></a>锁的升级过程</h3><h4 id="1-偏向锁"><a href="#1-偏向锁" class="headerlink" title="1. 偏向锁"></a>1. 偏向锁</h4><p>偏向锁是针对于一个线程多次获取同一个锁的情况。当一个线程访问同步块时，会在对象头中记录线程ID，下次该线程进入时可以直接获取锁，而无需进行CAS操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BiasedLockExample</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">biasedLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 同步块</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-轻量级锁"><a href="#2-轻量级锁" class="headerlink" title="2. 轻量级锁"></a>2. 轻量级锁</h4><p>当有其他线程尝试获取偏向锁时，偏向锁就会升级为轻量级锁。轻量级锁采用CAS操作来获取锁，适用于线程交替执行同步块的场景。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LightweightLockExample</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 线程1的操作</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 线程2的操作</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-重量级锁"><a href="#3-重量级锁" class="headerlink" title="3. 重量级锁"></a>3. 重量级锁</h4><p>当轻量级锁的CAS操作失败次数超过阈值时，锁会升级为重量级锁。重量级锁会导致线程阻塞和唤醒，涉及到操作系统的用户态和内核态切换，性能开销较大。</p><h2 id="synchronized-性能优化策略"><a href="#synchronized-性能优化策略" class="headerlink" title="synchronized 性能优化策略"></a>synchronized 性能优化策略</h2><h3 id="1-减小锁粒度"><a href="#1-减小锁粒度" class="headerlink" title="1. 减小锁粒度"></a>1. 减小锁粒度</h3><p>将大对象锁拆分成小对象锁，减少锁竞争。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 优化前</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CoarseSync</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">addToList1</span><span class="token punctuation">(</span><span class="token class-name">String</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">addToList2</span><span class="token punctuation">(</span><span class="token class-name">String</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 优化后</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FineSync</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> lock1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> lock2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addToList1</span><span class="token punctuation">(</span><span class="token class-name">String</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>lock1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addToList2</span><span class="token punctuation">(</span><span class="token class-name">String</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>lock2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-锁消除"><a href="#2-锁消除" class="headerlink" title="2. 锁消除"></a>2. 锁消除</h3><p>JVM的逃逸分析可以判断同步块中的对象是否只能被一个线程访问，如果是，则可以消除锁。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockElimination</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">concatString</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span> <span class="token class-name">String</span> s2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// StringBuffer的append方法是同步的</span>        <span class="token comment">// 但是sb对象不会被其他线程访问</span>        <span class="token comment">// JVM会自动消除锁</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-锁粗化"><a href="#3-锁粗化" class="headerlink" title="3. 锁粗化"></a>3. 锁粗化</h3><p>如果一系列连续的同步操作都对同一个对象反复加锁和解锁，频繁的加锁操作会导致性能损耗。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 优化前</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockCoarsening</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 操作1</span>            <span class="token punctuation">}</span>            <span class="token keyword">synchronized</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 操作2</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 优化后</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockCoarseningOptimized</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 操作1</span>                <span class="token comment">// 操作2</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-适时使用其他锁"><a href="#4-适时使用其他锁" class="headerlink" title="4. 适时使用其他锁"></a>4. 适时使用其他锁</h3><p>在某些场景下，可以考虑使用其他锁机制来替代 synchronized：</p><ul><li>ReentrantLock：可以实现公平锁、可中断锁</li><li>ReadWriteLock：读多写少场景的优选</li><li>StampedLock：JDK 8 引入的新锁，在读多写少场景下性能更优</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockAlternative</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantReadWriteLock</span> rwLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Lock</span> readLock <span class="token operator">=</span> rwLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Lock</span> writeLock <span class="token operator">=</span> rwLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        readLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            readLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        writeLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            writeLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h2><p>下面是一个简单的性能测试，比较不同场景下的锁性能：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LockPerformanceTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">THREAD_COUNT</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">LOOP_COUNT</span> <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span>        <span class="token comment">// 粗粒度锁</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testCoarseLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CoarseSync</span> coarse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CoarseSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Thread</span><span class="token punctuation">[</span><span class="token punctuation">]</span> threads <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">[</span><span class="token constant">THREAD_COUNT</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">THREAD_COUNT</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token constant">LOOP_COUNT</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    coarse<span class="token punctuation">.</span><span class="token function">addToList1</span><span class="token punctuation">(</span><span class="token string">"item"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    coarse<span class="token punctuation">.</span><span class="token function">addToList2</span><span class="token punctuation">(</span><span class="token string">"item"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment">// 等待所有线程完成</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t <span class="token operator">:</span> threads<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Coarse lock time: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000000</span> <span class="token operator">+</span> <span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 细粒度锁</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testFineLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">FineSync</span> fine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FineSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Thread</span><span class="token punctuation">[</span><span class="token punctuation">]</span> threads <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">[</span><span class="token constant">THREAD_COUNT</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">THREAD_COUNT</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token constant">LOOP_COUNT</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    fine<span class="token punctuation">.</span><span class="token function">addToList1</span><span class="token punctuation">(</span><span class="token string">"item"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    fine<span class="token punctuation">.</span><span class="token function">addToList2</span><span class="token punctuation">(</span><span class="token string">"item"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment">// 等待所有线程完成</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t <span class="token operator">:</span> threads<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Fine lock time: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000000</span> <span class="token operator">+</span> <span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">testCoarseLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">testFineLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在10个线程同时执行10万次操作的测试中，细粒度锁的性能通常比粗粒度锁提升40%以上。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>要提高 synchronized 的性能，可以从以下几个方面入手：</p><ol><li>理解锁升级机制，合理利用偏向锁和轻量级锁</li><li>减小锁粒度，避免锁竞争</li><li>利用JVM的锁优化（锁消除、锁粗化）</li><li>根据场景选择合适的锁机制</li></ol><p>在实际应用中，应该根据具体场景和性能需求，选择合适的优化策略。同时要注意，过度优化可能会导致代码复杂度增加，应该在性能和可维护性之间找到平衡点。</p><hr><p>希望这篇文章能帮助您解决synchronized性能优化问题。如果您有任何问题，欢迎在评论区讨论！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-synchronized-性能优化全面解析&quot;&gt;&lt;a href=&quot;#Java-synchronized-性能优化全面解析&quot; class=&quot;headerlink&quot; title=&quot;Java synchronized 性能优化全面解析&quot;&gt;&lt;/a&gt;Java syn</summary>
      
    
    
    
    <category term="Java" scheme="https://lucky845.github.io/categories/Java/"/>
    
    <category term="技术笔记" scheme="https://lucky845.github.io/categories/Java/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Java基础" scheme="https://lucky845.github.io/categories/Java/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://lucky845.github.io/tags/Java/"/>
    
    <category term="性能优化" scheme="https://lucky845.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="并发编程" scheme="https://lucky845.github.io/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【MySQL】百万级数据快速对比与批量插入实践</title>
    <link href="https://lucky845.github.io/archives/b55fa57f.html"/>
    <id>https://lucky845.github.io/archives/b55fa57f.html</id>
    <published>2025-03-03T03:00:00.000Z</published>
    <updated>2025-03-03T01:40:39.821Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在实际业务中，我们经常会遇到需要对比和同步大量数据的场景，比如：</p><ol><li>数据迁移和同步</li><li>系统对账</li><li>数据一致性校验</li><li>历史数据清洗</li></ol><p>当数据量达到百万级别时，如何高效地完成数据对比和插入就成为一个重要的技术挑战。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1-数据预处理"><a href="#1-数据预处理" class="headerlink" title="1. 数据预处理"></a>1. 数据预处理</h3><p>在进行大规模数据对比前，首先要做好数据预处理：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 1. 数据分组</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataPartitioner</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Data</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Data</span><span class="token punctuation">&gt;</span></span> dataList<span class="token punctuation">,</span> <span class="token keyword">int</span> batchSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span>dataList<span class="token punctuation">,</span> batchSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 2. 数据排序</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSorter</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Data</span><span class="token punctuation">&gt;</span></span> dataList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        dataList<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparing</span><span class="token punctuation">(</span><span class="token class-name">Data</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-高效的数据对比策略"><a href="#2-高效的数据对比策略" class="headerlink" title="2. 高效的数据对比策略"></a>2. 高效的数据对比策略</h3><h4 id="2-1-Hash对比"><a href="#2-1-Hash对比" class="headerlink" title="2.1 Hash对比"></a>2.1 Hash对比</h4><p>使用Hash对比可以快速发现数据差异：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashComparator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Data</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">compareByHash</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Data</span><span class="token punctuation">&gt;</span></span> sourceList<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Data</span><span class="token punctuation">&gt;</span></span> targetList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 构建源数据的Hash映射</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Data</span><span class="token punctuation">&gt;</span></span> sourceMap <span class="token operator">=</span> sourceList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">calculateHash</span><span class="token punctuation">,</span> data <span class="token operator">-&gt;</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 构建目标数据的Hash映射</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Data</span><span class="token punctuation">&gt;</span></span> targetMap <span class="token operator">=</span> targetList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">calculateHash</span><span class="token punctuation">,</span> data <span class="token operator">-&gt;</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 找出差异数据</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Data</span><span class="token punctuation">&gt;</span></span> insertList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Data</span><span class="token punctuation">&gt;</span></span> updateList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                targetMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> targetData<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">Data</span> sourceData <span class="token operator">=</span> sourceMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sourceData <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                insertList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>targetData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sourceData<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>targetData<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                updateList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>targetData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"insert"</span><span class="token punctuation">,</span> insertList<span class="token punctuation">,</span> <span class="token string">"update"</span><span class="token punctuation">,</span> updateList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">calculateHash</span><span class="token punctuation">(</span><span class="token class-name">Data</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 根据业务字段计算Hash</span>        <span class="token keyword">return</span> <span class="token class-name">DigestUtils</span><span class="token punctuation">.</span><span class="token function">md5Hex</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-分片对比"><a href="#2-2-分片对比" class="headerlink" title="2.2 分片对比"></a>2.2 分片对比</h4><p>对于超大数据量，可以采用分片对比策略：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShardingComparator</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">SHARD_SIZE</span> <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span> <span class="token comment">// 每片10万条</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">compareBySharding</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Data</span><span class="token punctuation">&gt;</span></span> sourceList<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Data</span><span class="token punctuation">&gt;</span></span> targetList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 1. 数据分片</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Data</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> sourceShards <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span>sourceList<span class="token punctuation">,</span> <span class="token constant">SHARD_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Data</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> targetShards <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span>targetList<span class="token punctuation">,</span> <span class="token constant">SHARD_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 2. 并行对比各分片数据</span>        <span class="token class-name">ExecutorService</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CountDownLatch</span> latch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span>sourceShards<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sourceShards<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> shardIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>            executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token function">compareShardData</span><span class="token punctuation">(</span>sourceShards<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>shardIndex<span class="token punctuation">)</span><span class="token punctuation">,</span>                                    targetShards<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>shardIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                latch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-高效的数据插入方法"><a href="#3-高效的数据插入方法" class="headerlink" title="3. 高效的数据插入方法"></a>3. 高效的数据插入方法</h3><h4 id="3-1-批量插入"><a href="#3-1-批量插入" class="headerlink" title="3.1 批量插入"></a>3.1 批量插入</h4><p>使用批量插入可以显著提升插入性能：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BatchInserter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">BATCH_SIZE</span> <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">batchInsert</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Data</span><span class="token punctuation">&gt;</span></span> dataList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 1. 数据分批</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Data</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> batches <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span>dataList<span class="token punctuation">,</span> <span class="token constant">BATCH_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 2. 构建批量插入SQL</span>        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"INSERT INTO table_name (id, name, value) VALUES (?, ?, ?)"</span><span class="token punctuation">;</span>                <span class="token comment">// 3. 执行批量插入</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">batchUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BatchPreparedStatementSetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValues</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> ps<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>                <span class="token class-name">Data</span> data <span class="token operator">=</span> dataList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                ps<span class="token punctuation">.</span><span class="token function">setLong</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getBatchSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> dataList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-多线程并行插入"><a href="#3-2-多线程并行插入" class="headerlink" title="3.2 多线程并行插入"></a>3.2 多线程并行插入</h4><p>结合线程池实现并行插入：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParallelInserter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">THREAD_COUNT</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">BATCH_SIZE</span> <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parallelInsert</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Data</span><span class="token punctuation">&gt;</span></span> dataList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 1. 数据分片</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Data</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> shards <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span>dataList<span class="token punctuation">,</span> dataList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token constant">THREAD_COUNT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 2. 创建线程池</span>        <span class="token class-name">ExecutorService</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token constant">THREAD_COUNT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CountDownLatch</span> latch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span>shards<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 3. 并行插入</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Data</span><span class="token punctuation">&gt;</span></span> shard <span class="token operator">:</span> shards<span class="token punctuation">)</span> <span class="token punctuation">{</span>            executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token function">batchInsert</span><span class="token punctuation">(</span>shard<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                latch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="性能优化建议"><a href="#性能优化建议" class="headerlink" title="性能优化建议"></a>性能优化建议</h2><h3 id="1-数据库优化"><a href="#1-数据库优化" class="headerlink" title="1. 数据库优化"></a>1. 数据库优化</h3><ol><li><p><strong>索引优化</strong></p><ul><li>创建合适的索引</li><li>避免过多索引</li><li>定期维护索引</li></ul></li><li><p><strong>配置优化</strong></p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 批量插入相关配置</span><span class="token key attr-name">innodb_buffer_pool_size</span><span class="token punctuation">=</span><span class="token value attr-value">4G</span><span class="token key attr-name">innodb_flush_log_at_trx_commit</span><span class="token punctuation">=</span><span class="token value attr-value">2</span><span class="token key attr-name">innodb_flush_method</span><span class="token punctuation">=</span><span class="token value attr-value">O_DIRECT</span><span class="token key attr-name">innodb_log_file_size</span><span class="token punctuation">=</span><span class="token value attr-value">1G</span><span class="token comment"># 并发相关配置</span><span class="token key attr-name">max_connections</span><span class="token punctuation">=</span><span class="token value attr-value">1000</span><span class="token key attr-name">innodb_thread_concurrency</span><span class="token punctuation">=</span><span class="token value attr-value">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="2-应用层优化"><a href="#2-应用层优化" class="headerlink" title="2. 应用层优化"></a>2. 应用层优化</h3><ol><li><p><strong>内存管理</strong></p><ul><li>合理设置JVM参数</li><li>避免频繁GC</li><li>使用内存映射文件处理超大数据</li></ul></li><li><p><strong>并发控制</strong></p><ul><li>合理设置线程池大小</li><li>使用分片策略控制单次处理数据量</li><li>实现失败重试机制</li></ul></li></ol><h2 id="性能测试对比"><a href="#性能测试对比" class="headerlink" title="性能测试对比"></a>性能测试对比</h2><p>以下是不同方案处理100万条数据的性能对比：</p><table><thead><tr><th>处理方式</th><th>数据对比耗时</th><th>数据插入耗时</th><th>内存消耗</th></tr></thead><tbody><tr><td>普通处理</td><td>15s</td><td>180s</td><td>2G</td></tr><tr><td>Hash对比+批量插入</td><td>8s</td><td>45s</td><td>1.5G</td></tr><tr><td>分片+并行处理</td><td>4s</td><td>20s</td><td>1G</td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在处理百万级数据对比和插入时，关键点在于：</p><ol><li>合理的数据预处理和分片策略</li><li>高效的对比算法（Hash对比/分片对比）</li><li>批量处理和并行化</li><li>数据库和应用层的优化配置</li></ol><p>通过合理运用这些策略，可以将百万级数据的处理性能提升5-10倍。同时，要注意在实际应用中根据具体场景和硬件条件来调整参数配置，达到最优的处理效果。</p><hr><p>希望这篇文章能帮助您更好地解决百万级数据快速对比与批量插入的问题。如果您有任何问题，欢迎在评论区讨论！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;在实际业务中，我们经常会遇到需要对比和同步大量数据的场景，比如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;数据迁移和同步&lt;/li&gt;
&lt;li</summary>
      
    
    
    
    <category term="数据库" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MySQL" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
    <category term="数据库" scheme="https://lucky845.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="性能优化" scheme="https://lucky845.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="MySQL" scheme="https://lucky845.github.io/tags/MySQL/"/>
    
    <category term="批量处理" scheme="https://lucky845.github.io/tags/%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>【Java】电商高峰期线程池爆满优化实践</title>
    <link href="https://lucky845.github.io/archives/e55fb502.html"/>
    <id>https://lucky845.github.io/archives/e55fb502.html</id>
    <published>2025-03-03T02:30:00.000Z</published>
    <updated>2025-03-03T08:06:18.784Z</updated>
    
    <content type="html"><![CDATA[<h1 id="电商高峰期线程池爆满优化实践"><a href="#电商高峰期线程池爆满优化实践" class="headerlink" title="电商高峰期线程池爆满优化实践"></a>电商高峰期线程池爆满优化实践</h1><h2 id="1-问题背景"><a href="#1-问题背景" class="headerlink" title="1. 问题背景"></a>1. 问题背景</h2><p>在电商系统中，尤其是在双十一、618等大促期间，系统面临的并发压力陡增，经常会出现线程池爆满的情况。这不仅会导致系统响应变慢，严重时还可能引发连锁反应，造成整个系统的崩溃。本文将深入分析线程池爆满的原因，并提供一系列实用的优化方案。</p><h2 id="2-线程池爆满原因分析"><a href="#2-线程池爆满原因分析" class="headerlink" title="2. 线程池爆满原因分析"></a>2. 线程池爆满原因分析</h2><h3 id="2-1-常见症状"><a href="#2-1-常见症状" class="headerlink" title="2.1 常见症状"></a>2.1 常见症状</h3><ul><li>系统响应时间急剧增加</li><li>任务队列持续积压</li><li>频繁出现任务拒绝异常</li><li>CPU 使用率居高不下</li><li>内存占用持续升高</li></ul><h3 id="2-2-根本原因"><a href="#2-2-根本原因" class="headerlink" title="2.2 根本原因"></a>2.2 根本原因</h3><ol><li><p><strong>参数配置不合理</strong></p><ul><li>核心线程数设置过小</li><li>最大线程数限制过严</li><li>任务队列容量不足</li></ul></li><li><p><strong>任务处理效率低下</strong></p><ul><li>单个任务执行时间过长</li><li>存在资源争用</li><li>数据库、Redis等外部依赖响应慢</li></ul></li><li><p><strong>任务分配不均衡</strong></p><ul><li>核心业务与非核心业务混用同一线程池</li><li>没有根据任务特性分池处理</li></ul></li></ol><h2 id="3-优化方案"><a href="#3-优化方案" class="headerlink" title="3. 优化方案"></a>3. 优化方案</h2><h3 id="3-1-线程池参数优化"><a href="#3-1-线程池参数优化" class="headerlink" title="3.1 线程池参数优化"></a>3.1 线程池参数优化</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span> <span class="token function">createThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>            <span class="token comment">// 核心线程数</span>            <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span>            <span class="token comment">// 最大线程数</span>            <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span>            <span class="token comment">// 线程存活时间</span>            <span class="token number">60L</span><span class="token punctuation">,</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>            <span class="token comment">// 工作队列</span>            <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment">// 线程工厂</span>            <span class="token keyword">new</span> <span class="token class-name">ThreadFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNameFormat</span><span class="token punctuation">(</span><span class="token string">"order-process-%d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment">// 拒绝策略</span>            <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数调优建议：</p><ul><li>核心线程数 = CPU核心数 * (1 + 平均等待时间/平均工作时间)</li><li>最大线程数 = 核心线程数 * (1 + 业务峰值系数)</li><li>队列容量 = 核心线程数 * 并发任务提交率 * 平均任务处理时间</li></ul><h3 id="3-2-任务优先级管理"><a href="#3-2-任务优先级管理" class="headerlink" title="3.2 任务优先级管理"></a>3.2 任务优先级管理</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PriorityThreadPool</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span> <span class="token function">createPriorityThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>            <span class="token number">10</span><span class="token punctuation">,</span>            <span class="token number">20</span><span class="token punctuation">,</span>            <span class="token number">60L</span><span class="token punctuation">,</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>            <span class="token comment">// 使用优先级队列</span>            <span class="token keyword">new</span> <span class="token class-name">PriorityBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">ThreadFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNameFormat</span><span class="token punctuation">(</span><span class="token string">"priority-pool-%d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 优先级任务包装类</span><span class="token keyword">class</span> <span class="token class-name">PriorityTask</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">,</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PriorityTask</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> priority<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Runnable</span> task<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">PriorityTask</span><span class="token punctuation">(</span><span class="token keyword">int</span> priority<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>priority <span class="token operator">=</span> priority<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>task <span class="token operator">=</span> task<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">PriorityTask</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>priority<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>priority<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-任务分类与隔离"><a href="#3-3-任务分类与隔离" class="headerlink" title="3.3 任务分类与隔离"></a>3.3 任务分类与隔离</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolManager</span> <span class="token punctuation">{</span>    <span class="token comment">// 订单处理线程池</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ThreadPoolExecutor</span> orderPool<span class="token punctuation">;</span>    <span class="token comment">// 库存查询线程池</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ThreadPoolExecutor</span> inventoryPool<span class="token punctuation">;</span>    <span class="token comment">// 消息推送线程池</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ThreadPoolExecutor</span> notificationPool<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadPoolManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">60L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>inventoryPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">60L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>notificationPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">60L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 根据任务类型选择对应的线程池</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">submitTask</span><span class="token punctuation">(</span><span class="token class-name">TaskType</span> type<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token constant">ORDER</span><span class="token operator">:</span>                orderPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token constant">INVENTORY</span><span class="token operator">:</span>                inventoryPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token constant">NOTIFICATION</span><span class="token operator">:</span>                notificationPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Unknown task type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-动态线程池"><a href="#3-4-动态线程池" class="headerlink" title="3.4 动态线程池"></a>3.4 动态线程池</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicThreadPool</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ThreadPoolExecutor</span> executor<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ScheduledExecutorService</span> monitor<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">DynamicThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>            <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">60L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>monitor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 定期监控并调整线程池参数</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>monitor<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">adjustThreadPool</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">adjustThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> currentLoad <span class="token operator">=</span> <span class="token function">getSystemLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 根据系统负载动态调整参数</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentLoad <span class="token operator">&gt;</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 高负载时增加线程数</span>            <span class="token keyword">int</span> newMaxSize <span class="token operator">=</span> executor<span class="token punctuation">.</span><span class="token function">getMaximumPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>            executor<span class="token punctuation">.</span><span class="token function">setMaximumPoolSize</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>newMaxSize<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>currentLoad <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 低负载时减少线程数</span>            <span class="token keyword">int</span> newMaxSize <span class="token operator">=</span> executor<span class="token punctuation">.</span><span class="token function">getMaximumPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            executor<span class="token punctuation">.</span><span class="token function">setMaximumPoolSize</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>newMaxSize<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getSystemLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 获取系统当前负载的逻辑</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-监控与告警"><a href="#4-监控与告警" class="headerlink" title="4. 监控与告警"></a>4. 监控与告警</h2><h3 id="4-1-关键指标"><a href="#4-1-关键指标" class="headerlink" title="4.1 关键指标"></a>4.1 关键指标</h3><ul><li>活跃线程数</li><li>队列深度</li><li>任务执行时间</li><li>任务拒绝次数</li><li>线程池使用率</li></ul><h3 id="4-2-监控实现"><a href="#4-2-监控实现" class="headerlink" title="4.2 监控实现"></a>4.2 监控实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolMonitor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ThreadPoolExecutor</span> threadPool<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MetricsRegistry</span> metrics<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadPoolMonitor</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span> threadPool<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>threadPool <span class="token operator">=</span> threadPool<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>metrics <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MetricsRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">startMonitoring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startMonitoring</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ScheduledExecutorService</span> scheduler <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scheduler<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">// 记录线程池指标</span>            metrics<span class="token punctuation">.</span><span class="token function">gauge</span><span class="token punctuation">(</span><span class="token string">"thread.pool.active.count"</span><span class="token punctuation">,</span> threadPool<span class="token punctuation">.</span><span class="token function">getActiveCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            metrics<span class="token punctuation">.</span><span class="token function">gauge</span><span class="token punctuation">(</span><span class="token string">"thread.pool.queue.size"</span><span class="token punctuation">,</span> threadPool<span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            metrics<span class="token punctuation">.</span><span class="token function">gauge</span><span class="token punctuation">(</span><span class="token string">"thread.pool.completed.tasks"</span><span class="token punctuation">,</span> threadPool<span class="token punctuation">.</span><span class="token function">getCompletedTaskCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-最佳实践建议"><a href="#5-最佳实践建议" class="headerlink" title="5. 最佳实践建议"></a>5. 最佳实践建议</h2><ol><li><p><strong>合理配置线程池参数</strong></p><ul><li>根据业务特性和机器配置确定核心参数</li><li>预留足够的处理能力冗余</li><li>设置合适的拒绝策略</li></ul></li><li><p><strong>实施任务分类处理</strong></p><ul><li>按照任务类型分别使用不同的线程池</li><li>为核心业务配置独立的线程池</li><li>避免非核心任务影响核心业务</li></ul></li><li><p><strong>优化任务执行效率</strong></p><ul><li>异步化非必要的同步操作</li><li>优化单个任务的执行逻辑</li><li>合理使用批量处理</li></ul></li><li><p><strong>做好监控和预警</strong></p><ul><li>实时监控线程池状态</li><li>设置合理的告警阈值</li><li>建立应急处理机制</li></ul></li></ol><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>线程池爆满是电商高峰期常见的性能问题，通过合理的参数配置、任务优先级管理、分类隔离等手段，可以有效提高系统的并发处理能力。同时，建立完善的监控体系，能够帮助我们及时发现和解决问题，确保系统的稳定运行。</p><p>在实际应用中，需要根据具体的业务场景和系统特点，选择合适的优化方案，并在生产环境中进行充分的压测验证。通过持续的优化和改进，才能构建出高性能、高可用的电商系统。</p><hr><p>希望这篇文章能帮助您解决电商高峰期线程池爆满优化问题。如果您有任何问题，欢迎在评论区讨论！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;电商高峰期线程池爆满优化实践&quot;&gt;&lt;a href=&quot;#电商高峰期线程池爆满优化实践&quot; class=&quot;headerlink&quot; title=&quot;电商高峰期线程池爆满优化实践&quot;&gt;&lt;/a&gt;电商高峰期线程池爆满优化实践&lt;/h1&gt;&lt;h2 id=&quot;1-问题背景&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="Java" scheme="https://lucky845.github.io/categories/Java/"/>
    
    <category term="线程池" scheme="https://lucky845.github.io/categories/Java/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
    
    <category term="Java" scheme="https://lucky845.github.io/tags/Java/"/>
    
    <category term="线程池" scheme="https://lucky845.github.io/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
    <category term="性能优化" scheme="https://lucky845.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>【MySQL】深分页性能问题分析与优化方案</title>
    <link href="https://lucky845.github.io/archives/b55fa58f.html"/>
    <id>https://lucky845.github.io/archives/b55fa58f.html</id>
    <published>2025-03-03T02:00:00.000Z</published>
    <updated>2025-03-03T01:36:52.305Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>MySQL中的深分页查询是一个常见的性能问题。当我们使用<code>LIMIT offset, size</code>进行分页查询时，随着offset的增大，查询性能会急剧下降。本文将深入分析这个问题的原因，并提供多种优化方案。</p><h2 id="为什么深分页会慢？"><a href="#为什么深分页会慢？" class="headerlink" title="为什么深分页会慢？"></a>为什么深分页会慢？</h2><h3 id="1-原理分析"><a href="#1-原理分析" class="headerlink" title="1. 原理分析"></a>1. 原理分析</h3><p>以最常见的分页查询为例：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id <span class="token keyword">LIMIT</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个查询实际上需要MySQL做以下工作：</p><ol><li>从数据表中读取10020条记录</li><li>抛弃前10000条记录</li><li>只返回最后20条记录</li></ol><p>这就导致了以下问题：</p><ul><li>需要读取大量无用数据</li><li>消耗大量内存来存储中间结果</li><li>增加了数据库的负载</li></ul><h3 id="2-性能测试数据"><a href="#2-性能测试数据" class="headerlink" title="2. 性能测试数据"></a>2. 性能测试数据</h3><p>假设有一个100万条记录的用户表，每页20条记录，分别测试不同页码的查询时间：</p><table><thead><tr><th>页码</th><th>offset</th><th>查询时间</th></tr></thead><tbody><tr><td>1</td><td>0</td><td>0.003s</td></tr><tr><td>100</td><td>2000</td><td>0.021s</td></tr><tr><td>1000</td><td>20000</td><td>0.187s</td></tr><tr><td>5000</td><td>100000</td><td>0.892s</td></tr></tbody></table><p>可以看到，随着页码的增加，查询时间呈指数级增长。</p><h2 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h2><h3 id="1-延迟关联优化"><a href="#1-延迟关联优化" class="headerlink" title="1. 延迟关联优化"></a>1. 延迟关联优化</h3><p>这是一种通过减少读取数据量来优化的方案。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> a<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span> users a <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">(</span>    <span class="token keyword">SELECT</span> id     <span class="token keyword">FROM</span> users     <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id     <span class="token keyword">LIMIT</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> b <span class="token keyword">ON</span> a<span class="token punctuation">.</span>id <span class="token operator">=</span> b<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：</p><ul><li>减少了数据读取量</li><li>降低了内存消耗</li></ul><p>缺点：</p><ul><li>需要额外的关联操作</li><li>对于offset很大的情况仍然不够理想</li></ul><h3 id="2-游标分页（推荐）"><a href="#2-游标分页（推荐）" class="headerlink" title="2. 游标分页（推荐）"></a>2. 游标分页（推荐）</h3><p>使用上次查询的最后一条记录作为游标，避免使用offset。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 第一页</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> id <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id <span class="token keyword">LIMIT</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">-- 下一页（假设上一页最后一条记录的id是1234）</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> id <span class="token operator">&gt;</span> <span class="token number">1234</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id <span class="token keyword">LIMIT</span> <span class="token number">20</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点：</p><ul><li>性能稳定，不受页码影响</li><li>实现简单</li></ul><p>缺点：</p><ul><li>不能跳页</li><li>要求有连续的主键或索引字段</li></ul><h3 id="3-Elasticsearch方案"><a href="#3-Elasticsearch方案" class="headerlink" title="3. Elasticsearch方案"></a>3. Elasticsearch方案</h3><p>对于需要深分页的场景，可以考虑使用Elasticsearch来替代MySQL。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /users/_search<span class="token punctuation">{</span>  <span class="token property">"from"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>  <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"asc"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Elasticsearch通过分片机制和内部优化，能够更好地处理深分页问题。</p><p>优点：</p><ul><li>性能更好</li><li>支持复杂的搜索需求</li></ul><p>缺点：</p><ul><li>需要额外维护ES集群</li><li>有一定的实时性损失</li></ul><h3 id="4-业务优化建议"><a href="#4-业务优化建议" class="headerlink" title="4. 业务优化建议"></a>4. 业务优化建议</h3><p>除了技术优化，还可以从业务层面进行改进：</p><ol><li><p><strong>限制最大页数</strong></p><ul><li>设置合理的分页上限，如最多显示100页</li><li>提供更精确的搜索条件</li></ul></li><li><p><strong>采用虚拟滚动</strong></p><ul><li>前端使用虚拟滚动技术</li><li>按需加载数据，避免一次性请求大量数据</li></ul></li><li><p><strong>分页场景优化</strong></p><ul><li>对于列表页，考虑只展示最近的数据</li><li>提供搜索功能来精确定位数据</li></ul></li></ol><h2 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h2><p>以下是各种优化方案的性能对比（100万条数据，每页20条）：</p><table><thead><tr><th>方案</th><th>第1页</th><th>第1000页</th><th>第5000页</th></tr></thead><tbody><tr><td>普通分页</td><td>0.003s</td><td>0.187s</td><td>0.892s</td></tr><tr><td>延迟关联</td><td>0.005s</td><td>0.092s</td><td>0.456s</td></tr><tr><td>游标分页</td><td>0.003s</td><td>0.004s</td><td>0.004s</td></tr><tr><td>ES分页</td><td>0.002s</td><td>0.003s</td><td>0.003s</td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>深分页性能问题是MySQL中的一个常见挑战。针对不同的场景，我们可以选择不同的优化方案：</p><ol><li>对于简单的列表分页，使用游标分页是最佳选择</li><li>需要跳页功能时，可以考虑延迟关联方案</li><li>对于搜索引擎类的场景，推荐使用Elasticsearch</li></ol><p>同时，建议从业务层面进行优化，合理控制分页需求，这样才能获得最好的性能和用户体验。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>MySQL官方文档：<a href="https://dev.mysql.com/doc/refman/8.0/en/optimization-indexes.html">Optimization and Indexes</a></li><li>Elasticsearch指南：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/paginate-search-results.html">Pagination</a></li></ol><hr><p>希望这篇文章能帮助您更好地解决MySQL深分页的问题。如果您有任何问题，欢迎在评论区讨论！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;MySQL中的深分页查询是一个常见的性能问题。当我们使用&lt;code&gt;LIMIT offset, size&lt;/code&gt;进行分</summary>
      
    
    
    
    <category term="数据库" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MySQL" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
    <category term="数据库" scheme="https://lucky845.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="性能优化" scheme="https://lucky845.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="MySQL" scheme="https://lucky845.github.io/tags/MySQL/"/>
    
    <category term="分页查询" scheme="https://lucky845.github.io/tags/%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/"/>
    
  </entry>
  
  <entry>
    <title>【Java】Sentinel规则持久化到Nacos配置中心完全指南</title>
    <link href="https://lucky845.github.io/archives/d7a9c124.html"/>
    <id>https://lucky845.github.io/archives/d7a9c124.html</id>
    <published>2025-03-02T04:00:00.000Z</published>
    <updated>2025-03-02T10:53:09.690Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Sentinel 是阿里巴巴开源的面向分布式服务架构的流量控制组件，而 Nacos 则是一个动态服务发现、配置管理和服务管理平台。将 Sentinel 的规则配置持久化到 Nacos 中，可以实现规则的统一管理和动态更新。本文将详细介绍如何实现这一集成方案。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>在开始之前，请确保您的环境满足以下要求：</p><ul><li>JDK 1.8 或更高版本</li><li>Maven 3.x</li><li>Nacos Server（推荐 2.x 版本）</li><li>Spring Boot（推荐 2.x 版本）</li><li>Spring Cloud Alibaba（对应版本）</li></ul><h2 id="Maven-依赖配置"><a href="#Maven-依赖配置" class="headerlink" title="Maven 依赖配置"></a>Maven 依赖配置</h2><p>在 <code>pom.xml</code> 中添加必要的依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud-alibaba.version</span><span class="token punctuation">&gt;</span></span>2.2.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud-alibaba.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-boot.version</span><span class="token punctuation">&gt;</span></span>2.3.12.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-boot.version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- Spring Cloud Alibaba Sentinel --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- Sentinel 数据源 Nacos --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>sentinel-datasource-nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- Nacos Config --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring-cloud-alibaba.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置文件设置"><a href="#配置文件设置" class="headerlink" title="配置文件设置"></a>配置文件设置</h2><h3 id="1-bootstrap-yml-配置"><a href="#1-bootstrap-yml-配置" class="headerlink" title="1. bootstrap.yml 配置"></a>1. bootstrap.yml 配置</h3><p>在 <code>resources</code> 目录下创建 <code>bootstrap.yml</code> 文件：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> sentinel<span class="token punctuation">-</span>service  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>        <span class="token key atrule">username</span><span class="token punctuation">:</span> nacos  <span class="token comment"># 如果开启了认证</span>        <span class="token key atrule">password</span><span class="token punctuation">:</span> nacos  <span class="token comment"># 如果开启了认证</span>    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>      <span class="token key atrule">transport</span><span class="token punctuation">:</span>        <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span>      <span class="token key atrule">datasource</span><span class="token punctuation">:</span>        <span class="token comment"># 流控规则</span>        <span class="token key atrule">flow</span><span class="token punctuation">:</span>          <span class="token key atrule">nacos</span><span class="token punctuation">:</span>            <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.nacos.config.server<span class="token punctuation">-</span>addr<span class="token punctuation">}</span>            <span class="token key atrule">username</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.nacos.config.username<span class="token punctuation">}</span>            <span class="token key atrule">password</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.nacos.config.password<span class="token punctuation">}</span>            <span class="token key atrule">dataId</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span><span class="token punctuation">-</span>flow<span class="token punctuation">-</span>rules            <span class="token key atrule">groupId</span><span class="token punctuation">:</span> SENTINEL_GROUP            <span class="token key atrule">rule-type</span><span class="token punctuation">:</span> flow        <span class="token comment"># 降级规则</span>        <span class="token key atrule">degrade</span><span class="token punctuation">:</span>          <span class="token key atrule">nacos</span><span class="token punctuation">:</span>            <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.nacos.config.server<span class="token punctuation">-</span>addr<span class="token punctuation">}</span>            <span class="token key atrule">username</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.nacos.config.username<span class="token punctuation">}</span>            <span class="token key atrule">password</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.nacos.config.password<span class="token punctuation">}</span>            <span class="token key atrule">dataId</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span><span class="token punctuation">-</span>degrade<span class="token punctuation">-</span>rules            <span class="token key atrule">groupId</span><span class="token punctuation">:</span> SENTINEL_GROUP            <span class="token key atrule">rule-type</span><span class="token punctuation">:</span> degrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="规则配置"><a href="#规则配置" class="headerlink" title="规则配置"></a>规则配置</h2><h3 id="1-流控规则配置"><a href="#1-流控规则配置" class="headerlink" title="1. 流控规则配置"></a>1. 流控规则配置</h3><p>在 Nacos 控制台创建配置文件，Data ID 为 <code>sentinel-service-flow-rules</code>，Group 为 <code>SENTINEL_GROUP</code>，配置格式选择 JSON：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token property">"resource"</span><span class="token operator">:</span> <span class="token string">"/test"</span><span class="token punctuation">,</span>        <span class="token property">"limitApp"</span><span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>        <span class="token property">"grade"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"count"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>        <span class="token property">"strategy"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"controlBehavior"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"clusterMode"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明：</p><ul><li>resource：资源名称</li><li>limitApp：来源应用</li><li>grade：阈值类型，1表示QPS，0表示线程数</li><li>count：单机阈值</li><li>strategy：流控模式，0表示直接，1表示关联，2表示链路</li><li>controlBehavior：流控效果，0表示快速失败，1表示Warm Up，2表示排队等待</li><li>clusterMode：是否集群模式</li></ul><h3 id="2-降级规则配置"><a href="#2-降级规则配置" class="headerlink" title="2. 降级规则配置"></a>2. 降级规则配置</h3><p>创建配置文件，Data ID 为 <code>sentinel-service-degrade-rules</code>：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token property">"resource"</span><span class="token operator">:</span> <span class="token string">"/test"</span><span class="token punctuation">,</span>        <span class="token property">"grade"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"count"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>        <span class="token property">"timeWindow"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        <span class="token property">"minRequestAmount"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>        <span class="token property">"statIntervalMs"</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>        <span class="token property">"slowRatioThreshold"</span><span class="token operator">:</span> <span class="token number">0.5</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明：</p><ul><li>grade：降级策略，0表示RT，1表示异常比例，2表示异常数</li><li>count：阈值</li><li>timeWindow：时间窗口，单位为秒</li><li>minRequestAmount：最小请求数</li><li>statIntervalMs：统计时长</li><li>slowRatioThreshold：慢调用比例阈值</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="1-创建测试接口"><a href="#1-创建测试接口" class="headerlink" title="1. 创建测试接口"></a>1. 创建测试接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello Sentinel"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/degrade"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testDegrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token comment">// 模拟慢调用</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Test Degrade"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-自定义异常处理"><a href="#2-自定义异常处理" class="headerlink" title="2. 自定义异常处理"></a>2. 自定义异常处理</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SentinelConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">BlockExceptionHandler</span> handler <span class="token operator">=</span> <span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">R</span> r <span class="token operator">=</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token number">429</span><span class="token punctuation">,</span> <span class="token string">"请求被限流，请稍后重试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">429</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">WebCallbackManager</span><span class="token punctuation">.</span><span class="token function">setBlockHandler</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="1-规则配置建议"><a href="#1-规则配置建议" class="headerlink" title="1. 规则配置建议"></a>1. 规则配置建议</h3><ul><li>根据实际业务场景合理设置阈值</li><li>建议开启预热时间（Warm Up）</li><li>为不同环境（如开发、测试、生产）配置不同的规则组</li><li>定期检查和更新规则配置</li></ul><h3 id="2-性能优化"><a href="#2-性能优化" class="headerlink" title="2. 性能优化"></a>2. 性能优化</h3><ul><li>合理设置统计时长和最小请求数</li><li>避免过于频繁地变更规则</li><li>使用集群模式时注意网络延迟的影响</li></ul><h3 id="3-监控告警"><a href="#3-监控告警" class="headerlink" title="3. 监控告警"></a>3. 监控告警</h3><ul><li>配置 Sentinel 控制台告警</li><li>集成第三方监控系统（如 Prometheus）</li><li>设置合理的告警阈值和通知策略</li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-规则不生效"><a href="#1-规则不生效" class="headerlink" title="1. 规则不生效"></a>1. 规则不生效</h3><ul><li>检查 Nacos 配置是否正确</li><li>验证 JSON 格式是否合法</li><li>查看应用日志中是否有异常信息</li></ul><h3 id="2-控制台无法显示应用"><a href="#2-控制台无法显示应用" class="headerlink" title="2. 控制台无法显示应用"></a>2. 控制台无法显示应用</h3><ul><li>确认 Sentinel Dashboard 地址配置正确</li><li>检查网络连接是否正常</li><li>验证应用是否正常启动</li></ul><h3 id="3-规则持久化失败"><a href="#3-规则持久化失败" class="headerlink" title="3. 规则持久化失败"></a>3. 规则持久化失败</h3><ul><li>检查 Nacos 服务器状态</li><li>确认配置的 DataId 和 GroupId 是否正确</li><li>验证权限配置是否正确</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过将 Sentinel 规则持久化到 Nacos，我们可以实现规则的统一管理和动态更新。本文详细介绍了实现步骤、配置方法和最佳实践，希望能帮助您更好地使用 Sentinel 进行服务治理。在实际应用中，建议根据业务需求合理配置规则，并做好监控和告警工作。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://sentinelguard.io/zh-cn/docs/introduction.html">Sentinel 官方文档</a></li><li><a href="https://nacos.io/zh-cn/docs/what-is-nacos.html">Nacos 官方文档</a></li><li><a href="https://spring-cloud-alibaba-group.github.io/github-pages/hoxton/en-us/index.html">Spring Cloud Alibaba 官方文档</a></li></ul><hr><p>如果您在实践过程中遇到任何问题，欢迎在评论区讨论交流！</p>]]></content>
    
    
    <summary type="html">本文详细介绍如何在Java项目中实现Sentinel规则持久化到Nacos配置中心，包括环境准备、配置步骤、最佳实践等内容。</summary>
    
    
    
    <category term="Java开发" scheme="https://lucky845.github.io/categories/Java%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Java" scheme="https://lucky845.github.io/tags/Java/"/>
    
    <category term="Nacos" scheme="https://lucky845.github.io/tags/Nacos/"/>
    
    <category term="Sentinel" scheme="https://lucky845.github.io/tags/Sentinel/"/>
    
  </entry>
  
  <entry>
    <title>【Docker】Sentinel部署指南</title>
    <link href="https://lucky845.github.io/archives/d7a9c123.html"/>
    <id>https://lucky845.github.io/archives/d7a9c123.html</id>
    <published>2025-03-02T03:00:00.000Z</published>
    <updated>2025-03-02T10:47:33.626Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker部署Sentinel指南"><a href="#Docker部署Sentinel指南" class="headerlink" title="Docker部署Sentinel指南"></a>Docker部署Sentinel指南</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>Sentinel是阿里巴巴开源的面向分布式服务架构的流量控制组件，主要以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度来保护服务的稳定性。本文将详细介绍如何使用Docker部署Sentinel控制台，并进行相关配置。</p><h2 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2. 环境准备"></a>2. 环境准备</h2><p>在开始部署之前，请确保您的系统已经具备以下条件：</p><ul><li>Docker Engine (版本 20.10.0 或更高)</li><li>Docker Compose (可选，用于多容器部署)</li><li>至少 1GB 可用内存</li><li>可用的 8080 端口（Sentinel 控制台默认端口）</li></ul><h2 id="3-单机部署"><a href="#3-单机部署" class="headerlink" title="3. 单机部署"></a>3. 单机部署</h2><h3 id="3-1-拉取官方镜像"><a href="#3-1-拉取官方镜像" class="headerlink" title="3.1 拉取官方镜像"></a>3.1 拉取官方镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull bladex/sentinel-dashboard:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-创建配置文件"><a href="#3-2-创建配置文件" class="headerlink" title="3.2 创建配置文件"></a>3.2 创建配置文件</h3><p>创建 <code>sentinel-config</code> 目录用于存储配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/sentinel/conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-3-启动容器"><a href="#3-3-启动容器" class="headerlink" title="3.3 启动容器"></a>3.3 启动容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>    <span class="token parameter variable">--name</span> sentinel-dashboard <span class="token punctuation">\</span>    <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token punctuation">\</span>    <span class="token parameter variable">-v</span> /data/sentinel/conf:/root/logs <span class="token punctuation">\</span>    <span class="token parameter variable">--restart</span> always <span class="token punctuation">\</span>    bladex/sentinel-dashboard:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明：</p><ul><li><code>-p 8080:8080</code>: 映射容器的8080端口到主机</li><li><code>-v /data/sentinel/conf:/root/logs</code>: 挂载日志目录</li><li><code>--restart always</code>: 容器自动重启</li></ul><h3 id="3-4-访问控制台"><a href="#3-4-访问控制台" class="headerlink" title="3.4 访问控制台"></a>3.4 访问控制台</h3><p>启动成功后，通过浏览器访问：<code>http://localhost:8080</code></p><p>默认登录账号密码：</p><ul><li>用户名：sentinel</li><li>密码：sentinel</li></ul><h2 id="4-集群部署"><a href="#4-集群部署" class="headerlink" title="4. 集群部署"></a>4. 集群部署</h2><h3 id="4-1-创建docker-compose-yml"><a href="#4-1-创建docker-compose-yml" class="headerlink" title="4.1 创建docker-compose.yml"></a>4.1 创建docker-compose.yml</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">sentinel-dashboard1</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> bladex/sentinel<span class="token punctuation">-</span>dashboard<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> sentinel<span class="token punctuation">-</span>dashboard1    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"8080:8080"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /data/sentinel/conf1<span class="token punctuation">:</span>/root/logs    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> JAVA_OPTS="<span class="token punctuation">-</span>Dserver.port=8080 <span class="token punctuation">-</span>Dcsp.sentinel.dashboard.server=localhost<span class="token punctuation">:</span>8080"    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always  <span class="token key atrule">sentinel-dashboard2</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> bladex/sentinel<span class="token punctuation">-</span>dashboard<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> sentinel<span class="token punctuation">-</span>dashboard2    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"8081:8080"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /data/sentinel/conf2<span class="token punctuation">:</span>/root/logs    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> JAVA_OPTS="<span class="token punctuation">-</span>Dserver.port=8080 <span class="token punctuation">-</span>Dcsp.sentinel.dashboard.server=localhost<span class="token punctuation">:</span>8081"    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always  <span class="token key atrule">nginx</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> sentinel<span class="token punctuation">-</span>nginx    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"80:80"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /data/sentinel/nginx/conf.d<span class="token punctuation">:</span>/etc/nginx/conf.d    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> sentinel<span class="token punctuation">-</span>dashboard1      <span class="token punctuation">-</span> sentinel<span class="token punctuation">-</span>dashboard2    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-配置Nginx负载均衡"><a href="#4-2-配置Nginx负载均衡" class="headerlink" title="4.2 配置Nginx负载均衡"></a>4.2 配置Nginx负载均衡</h3><p>创建 <code>/data/sentinel/nginx/conf.d/sentinel.conf</code>：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">upstream</span> sentinel</span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">server</span> sentinel-dashboard1:8080</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server</span> sentinel-dashboard2:8080</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server_name</span> localhost</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">proxy_pass</span> http://sentinel</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-启动集群"><a href="#4-3-启动集群" class="headerlink" title="4.3 启动集群"></a>4.3 启动集群</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-配置优化"><a href="#5-配置优化" class="headerlink" title="5. 配置优化"></a>5. 配置优化</h2><h3 id="5-1-JVM参数调整"><a href="#5-1-JVM参数调整" class="headerlink" title="5.1 JVM参数调整"></a>5.1 JVM参数调整</h3><p>可以通过环境变量 <code>JAVA_OPTS</code> 调整JVM参数：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>    <span class="token parameter variable">--name</span> sentinel-dashboard <span class="token punctuation">\</span>    <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token punctuation">\</span>    <span class="token parameter variable">-e</span> <span class="token assign-left variable">JAVA_OPTS</span><span class="token operator">=</span><span class="token string">"-Xms256m -Xmx512m -Dserver.port=8080"</span> <span class="token punctuation">\</span>    bladex/sentinel-dashboard:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-持久化配置"><a href="#5-2-持久化配置" class="headerlink" title="5.2 持久化配置"></a>5.2 持久化配置</h3><p>添加以下环境变量开启持久化：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-e</span> <span class="token assign-left variable">JAVA_OPTS</span><span class="token operator">=</span><span class="token string">"-Dsentinel.dashboard.auth.username=admin \               -Dsentinel.dashboard.auth.password=admin123 \               -Dserver.servlet.session.timeout=7200"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="6-常见问题"><a href="#6-常见问题" class="headerlink" title="6. 常见问题"></a>6. 常见问题</h2><h3 id="6-1-访问控制台失败"><a href="#6-1-访问控制台失败" class="headerlink" title="6.1 访问控制台失败"></a>6.1 访问控制台失败</h3><ol><li>检查端口映射是否正确</li><li>确认防火墙设置</li><li>验证容器运行状态：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> logs sentinel-dashboard<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-2-客户端注册失败"><a href="#6-2-客户端注册失败" class="headerlink" title="6.2 客户端注册失败"></a>6.2 客户端注册失败</h3><ol><li>检查网络连通性</li><li>确认客户端配置是否正确</li><li>查看日志中的具体错误信息</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过Docker部署Sentinel可以大大简化安装和维护过程。本文详细介绍了单机版和集群版的部署方法，包括必要的配置和优化建议。在生产环境中，建议使用集群模式部署，并根据实际需求调整配置参数。</p><hr><p>希望这篇文章能帮助您更好地理解和使用Docker部署Sentinel。如果您有任何问题，欢迎在评论区讨论！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker部署Sentinel指南&quot;&gt;&lt;a href=&quot;#Docker部署Sentinel指南&quot; class=&quot;headerlink&quot; title=&quot;Docker部署Sentinel指南&quot;&gt;&lt;/a&gt;Docker部署Sentinel指南&lt;/h1&gt;&lt;h2 id=&quot;1</summary>
      
    
    
    
    <category term="Linux" scheme="https://lucky845.github.io/categories/Linux/"/>
    
    <category term="Docker" scheme="https://lucky845.github.io/categories/Linux/Docker/"/>
    
    
    <category term="Docker" scheme="https://lucky845.github.io/tags/Docker/"/>
    
    <category term="容器化" scheme="https://lucky845.github.io/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
    <category term="Sentinel" scheme="https://lucky845.github.io/tags/Sentinel/"/>
    
    <category term="微服务" scheme="https://lucky845.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>【Docker】 Docker部署Nacos（单机/集群）完全指南</title>
    <link href="https://lucky845.github.io/archives/e55fa612.html"/>
    <id>https://lucky845.github.io/archives/e55fa612.html</id>
    <published>2025-03-02T02:00:00.000Z</published>
    <updated>2025-03-02T10:49:28.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Nacos 是阿里巴巴开源的一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。本文将详细介绍如何使用 Docker 来部署 Nacos 的单机版和集群版。</p><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><p>在开始部署之前，请确保您的系统满足以下要求：</p><ul><li>Docker Engine (版本 20.10.0 或更高)</li><li>Docker Compose (可选，用于多容器部署)</li><li>至少 2GB 可用内存</li><li>可用存储空间 &gt;= 5GB</li></ul><h2 id="单机部署"><a href="#单机部署" class="headerlink" title="单机部署"></a>单机部署</h2><h3 id="1-创建必要目录"><a href="#1-创建必要目录" class="headerlink" title="1. 创建必要目录"></a>1. 创建必要目录</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建数据持久化目录</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/nacos/standalone/logs<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/nacos/standalone/data<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/nacos/standalone/conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-配置文件准备"><a href="#2-配置文件准备" class="headerlink" title="2. 配置文件准备"></a>2. 配置文件准备</h3><p>创建 <code>/data/nacos/standalone/conf/custom.properties</code> 配置文件：</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 数据持久化配置</span><span class="token key attr-name">nacos.core.auth.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token key attr-name">nacos.core.auth.server.identity.key</span><span class="token punctuation">=</span><span class="token value attr-value">serverIdentity</span><span class="token key attr-name">nacos.core.auth.server.identity.value</span><span class="token punctuation">=</span><span class="token value attr-value">security</span><span class="token comment"># JVM配置</span><span class="token key attr-name">JVM_XMS</span><span class="token punctuation">=</span><span class="token value attr-value">512m</span><span class="token key attr-name">JVM_XMX</span><span class="token punctuation">=</span><span class="token value attr-value">512m</span><span class="token key attr-name">JVM_XMN</span><span class="token punctuation">=</span><span class="token value attr-value">256m</span><span class="token comment"># 默认超时时间设置</span><span class="token key attr-name">nacos.core.protocol.raft.data.read_timeout_ms</span><span class="token punctuation">=</span><span class="token value attr-value">5000</span><span class="token key attr-name">nacos.core.protocol.raft.data.write_timeout_ms</span><span class="token punctuation">=</span><span class="token value attr-value">5000</span><span class="token comment"># 日志配置</span><span class="token key attr-name">nacos.core.auth.plugin.nacos.token.secret.key</span><span class="token punctuation">=</span><span class="token value attr-value">SecretKey012345678901234567890123456789012345678901234567890123456789</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-启动单机版Nacos"><a href="#3-启动单机版Nacos" class="headerlink" title="3. 启动单机版Nacos"></a>3. 启动单机版Nacos</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--name</span> nacos-standalone <span class="token punctuation">\</span>  <span class="token parameter variable">--restart</span> always <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">8848</span>:8848 <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">9848</span>:9848 <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /data/nacos/standalone/conf/custom.properties:/home/nacos/conf/application.properties <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /data/nacos/standalone/logs:/home/nacos/logs <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /data/nacos/standalone/data:/home/nacos/data <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token assign-left variable">MODE</span><span class="token operator">=</span>standalone <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token assign-left variable">SPRING_DATASOURCE_PLATFORM</span><span class="token operator">=</span>embedded <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token assign-left variable">NACOS_AUTH_ENABLE</span><span class="token operator">=</span>true <span class="token punctuation">\</span>  nacos/nacos-server:v2.2.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-验证部署"><a href="#4-验证部署" class="headerlink" title="4. 验证部署"></a>4. 验证部署</h3><p>访问Nacos控制台：<code>http://localhost:8848/nacos</code></p><p>默认账号密码：</p><ul><li>用户名：nacos</li><li>密码：nacos</li></ul><h2 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h2><h3 id="1-准备MySQL数据库"><a href="#1-准备MySQL数据库" class="headerlink" title="1. 准备MySQL数据库"></a>1. 准备MySQL数据库</h3><p>集群模式需要使用MySQL存储配置信息。首先创建数据库并导入初始化SQL：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> nacos_config <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_general_ci<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在创建好数据库后，执行Nacos官方提供的<a href="https://github.com/alibaba/nacos/blob/master/distribution/conf/mysql-schema.sql">数据库初始化脚本</a>。</p><h3 id="2-创建集群配置目录"><a href="#2-创建集群配置目录" class="headerlink" title="2. 创建集群配置目录"></a>2. 创建集群配置目录</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 为每个节点创建独立目录</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/nacos/cluster/node<span class="token punctuation">{</span><span class="token number">1,2</span>,3<span class="token punctuation">}</span>/<span class="token punctuation">{</span>conf,logs,data<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-配置集群节点"><a href="#3-配置集群节点" class="headerlink" title="3. 配置集群节点"></a>3. 配置集群节点</h3><p>创建 <code>/data/nacos/cluster/node1/conf/custom.properties</code> 配置文件（节点2和节点3类似）：</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 数据源配置</span><span class="token key attr-name">spring.datasource.platform</span><span class="token punctuation">=</span><span class="token value attr-value">mysql</span><span class="token key attr-name">db.num</span><span class="token punctuation">=</span><span class="token value attr-value">1</span><span class="token key attr-name">db.url.0</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://your-mysql-host:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span><span class="token key attr-name">db.user.0</span><span class="token punctuation">=</span><span class="token value attr-value">your_username</span><span class="token key attr-name">db.password.0</span><span class="token punctuation">=</span><span class="token value attr-value">your_password</span><span class="token comment"># 集群配置</span><span class="token key attr-name">nacos.core.auth.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span><span class="token key attr-name">nacos.core.auth.server.identity.key</span><span class="token punctuation">=</span><span class="token value attr-value">serverIdentity</span><span class="token key attr-name">nacos.core.auth.server.identity.value</span><span class="token punctuation">=</span><span class="token value attr-value">security</span><span class="token key attr-name">nacos.core.auth.plugin.nacos.token.secret.key</span><span class="token punctuation">=</span><span class="token value attr-value">SecretKey012345678901234567890123456789012345678901234567890123456789</span><span class="token comment"># 集群节点列表</span><span class="token key attr-name">nacos.member.list</span><span class="token punctuation">=</span><span class="token value attr-value">172.16.1.10:8848,172.16.1.11:8848,172.16.1.12:8848</span><span class="token comment"># JVM配置</span><span class="token key attr-name">JVM_XMS</span><span class="token punctuation">=</span><span class="token value attr-value">2g</span><span class="token key attr-name">JVM_XMX</span><span class="token punctuation">=</span><span class="token value attr-value">2g</span><span class="token key attr-name">JVM_XMN</span><span class="token punctuation">=</span><span class="token value attr-value">1g</span><span class="token comment"># 性能调优</span><span class="token key attr-name">nacos.core.protocol.raft.data.read_timeout_ms</span><span class="token punctuation">=</span><span class="token value attr-value">5000</span><span class="token key attr-name">nacos.core.protocol.raft.data.write_timeout_ms</span><span class="token punctuation">=</span><span class="token value attr-value">5000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-使用Docker-Compose启动集群"><a href="#4-使用Docker-Compose启动集群" class="headerlink" title="4. 使用Docker Compose启动集群"></a>4. 使用Docker Compose启动集群</h3><p>创建 <code>docker-compose.yml</code> 文件：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">nacos1</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> nacos/nacos<span class="token punctuation">-</span>server<span class="token punctuation">:</span>v2.2.3    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>cluster<span class="token punctuation">-</span><span class="token number">1</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token key atrule">nacos_net</span><span class="token punctuation">:</span>        <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> 172.16.1.10    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /data/nacos/cluster/node1/conf/custom.properties<span class="token punctuation">:</span>/home/nacos/conf/application.properties      <span class="token punctuation">-</span> /data/nacos/cluster/node1/logs<span class="token punctuation">:</span>/home/nacos/logs      <span class="token punctuation">-</span> /data/nacos/cluster/node1/data<span class="token punctuation">:</span>/home/nacos/data    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"8848:8848"</span>      <span class="token punctuation">-</span> <span class="token string">"9848:9848"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> MODE=cluster      <span class="token punctuation">-</span> NACOS_AUTH_ENABLE=true    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always  <span class="token key atrule">nacos2</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> nacos/nacos<span class="token punctuation">-</span>server<span class="token punctuation">:</span>v2.2.3    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>cluster<span class="token punctuation">-</span><span class="token number">2</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token key atrule">nacos_net</span><span class="token punctuation">:</span>        <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> 172.16.1.11    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /data/nacos/cluster/node2/conf/custom.properties<span class="token punctuation">:</span>/home/nacos/conf/application.properties      <span class="token punctuation">-</span> /data/nacos/cluster/node2/logs<span class="token punctuation">:</span>/home/nacos/logs      <span class="token punctuation">-</span> /data/nacos/cluster/node2/data<span class="token punctuation">:</span>/home/nacos/data    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"8849:8848"</span>      <span class="token punctuation">-</span> <span class="token string">"9849:9848"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> MODE=cluster      <span class="token punctuation">-</span> NACOS_AUTH_ENABLE=true    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always  <span class="token key atrule">nacos3</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> nacos/nacos<span class="token punctuation">-</span>server<span class="token punctuation">:</span>v2.2.3    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>cluster<span class="token punctuation">-</span><span class="token number">3</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token key atrule">nacos_net</span><span class="token punctuation">:</span>        <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> 172.16.1.12    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /data/nacos/cluster/node3/conf/custom.properties<span class="token punctuation">:</span>/home/nacos/conf/application.properties      <span class="token punctuation">-</span> /data/nacos/cluster/node3/logs<span class="token punctuation">:</span>/home/nacos/logs      <span class="token punctuation">-</span> /data/nacos/cluster/node3/data<span class="token punctuation">:</span>/home/nacos/data    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"8850:8848"</span>      <span class="token punctuation">-</span> <span class="token string">"9850:9848"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> MODE=cluster      <span class="token punctuation">-</span> NACOS_AUTH_ENABLE=true    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always<span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">nacos_net</span><span class="token punctuation">:</span>    <span class="token key atrule">driver</span><span class="token punctuation">:</span> bridge    <span class="token key atrule">ipam</span><span class="token punctuation">:</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">subnet</span><span class="token punctuation">:</span> 172.16.1.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动集群：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-配置负载均衡"><a href="#5-配置负载均衡" class="headerlink" title="5. 配置负载均衡"></a>5. 配置负载均衡</h3><p>为了实现高可用，建议在集群前面配置负载均衡。以下是使用Nginx的配置示例：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">upstream</span> nacos-cluster</span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">server</span> 172.16.1.10:8848</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server</span> 172.16.1.11:8848</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server</span> 172.16.1.12:8848</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server_name</span> nacos.example.com</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">proxy_pass</span> http://nacos-cluster</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="性能优化建议"><a href="#性能优化建议" class="headerlink" title="性能优化建议"></a>性能优化建议</h2><ol><li><p><strong>JVM参数调整</strong></p><ul><li>根据服务器内存大小适当调整JVM参数</li><li>建议开启G1垃圾收集器</li></ul></li><li><p><strong>数据库优化</strong></p><ul><li>使用高性能SSD存储</li><li>优化MySQL配置参数</li><li>定期清理历史配置</li></ul></li><li><p><strong>网络优化</strong></p><ul><li>确保集群节点间网络延迟低</li><li>适当调整超时时间</li></ul></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>启动失败</strong></p><ul><li>检查端口是否被占用</li><li>查看日志文件排查错误</li><li>确认配置文件格式正确</li></ul></li><li><p><strong>节点无法加入集群</strong></p><ul><li>检查网络连接</li><li>验证集群地址配置</li><li>确认MySQL连接正常</li></ul></li><li><p><strong>内存占用过高</strong></p><ul><li>调整JVM参数</li><li>检查是否存在内存泄漏</li><li>考虑增加节点数量</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过Docker部署Nacos可以大大简化安装和维护过程。本文详细介绍了单机版和集群版的部署方法，包括必要的配置和优化建议。在生产环境中，建议使用集群模式部署，并根据实际需求调整配置参数。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://nacos.io/zh-cn/docs/what-is-nacos.html">Nacos官方文档</a></li><li><a href="https://hub.docker.com/r/nacos/nacos-server">Docker Hub - Nacos</a></li><li><a href="https://github.com/alibaba/nacos">Nacos GitHub</a></li></ul><hr><p>希望这篇文章能帮助您更好地理解和部署Nacos。如果您有任何问题，欢迎在评论区讨论！</p>]]></content>
    
    
    <summary type="html">本文详细介绍如何使用Docker部署Nacos的单机版和集群版，包括环境准备、配置说明、性能优化等内容。</summary>
    
    
    
    <category term="Docker部署指南" scheme="https://lucky845.github.io/categories/Docker%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97/"/>
    
    
    <category term="Docker" scheme="https://lucky845.github.io/tags/Docker/"/>
    
    <category term="Nacos" scheme="https://lucky845.github.io/tags/Nacos/"/>
    
  </entry>
  
  <entry>
    <title>【Redis】缓存机制详解</title>
    <link href="https://lucky845.github.io/archives/b65fa590.html"/>
    <id>https://lucky845.github.io/archives/b65fa590.html</id>
    <published>2025-03-01T09:00:00.000Z</published>
    <updated>2025-03-01T10:45:13.880Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>Redis是一个高性能的内存数据库，被广泛用作缓存系统来提高应用程序的性能。在高并发的互联网应用中，数据库往往成为系统的瓶颈，而Redis作为缓存层可以有效减轻数据库的压力，提高系统的响应速度。本文将详细介绍Redis的缓存机制、工作原理以及最佳实践。</p><h2 id="1-Redis缓存的基本原理"><a href="#1-Redis缓存的基本原理" class="headerlink" title="1. Redis缓存的基本原理"></a>1. Redis缓存的基本原理</h2><h3 id="1-1-什么是缓存"><a href="#1-1-什么是缓存" class="headerlink" title="1.1 什么是缓存"></a>1.1 什么是缓存</h3><p>缓存是一种临时存储机制，它将频繁访问的数据存储在高速存储介质（通常是内存）中，以减少对低速存储介质（如磁盘）的访问，从而提高系统性能。</p><h3 id="1-2-Redis作为缓存的优势"><a href="#1-2-Redis作为缓存的优势" class="headerlink" title="1.2 Redis作为缓存的优势"></a>1.2 Redis作为缓存的优势</h3><ul><li><strong>高性能</strong>：Redis是基于内存的数据库，读写速度非常快，可以达到每秒数十万次的读写操作。</li><li><strong>丰富的数据结构</strong>：Redis支持字符串、哈希、列表、集合、有序集合等多种数据结构，可以满足不同场景的缓存需求。</li><li><strong>原子操作</strong>：Redis的操作都是原子性的，即使是复杂的操作也不会被中断。</li><li><strong>持久化</strong>：Redis支持数据持久化，可以将内存中的数据保存到磁盘中，防止数据丢失。</li><li><strong>主从复制</strong>：Redis支持主从复制，可以实现数据的备份和负载均衡。</li><li><strong>分布式</strong>：Redis支持分布式部署，可以构建高可用的缓存集群。</li></ul><h2 id="2-Redis缓存的工作原理"><a href="#2-Redis缓存的工作原理" class="headerlink" title="2. Redis缓存的工作原理"></a>2. Redis缓存的工作原理</h2><h3 id="2-1-缓存读取流程"><a href="#2-1-缓存读取流程" class="headerlink" title="2.1 缓存读取流程"></a>2.1 缓存读取流程</h3><ol><li>应用程序首先尝试从Redis缓存中读取数据。</li><li>如果缓存命中（Cache Hit），则直接返回缓存中的数据。</li><li>如果缓存未命中（Cache Miss），则从数据库中读取数据。</li><li>将从数据库读取的数据写入Redis缓存，并设置过期时间。</li><li>返回数据给应用程序。</li></ol><pre class="line-numbers language-none"><code class="language-none">应用程序 -&gt; 查询Redis缓存 -&gt; 缓存命中 -&gt; 返回数据                      ↓                  缓存未命中                      ↓                  查询数据库                      ↓                  写入Redis缓存                      ↓                  返回数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-缓存更新策略"><a href="#2-2-缓存更新策略" class="headerlink" title="2.2 缓存更新策略"></a>2.2 缓存更新策略</h3><p>在使用Redis缓存时，需要考虑缓存的更新策略，以保证缓存数据的一致性。常见的缓存更新策略有：</p><h4 id="2-2-1-Cache-Aside（旁路缓存）"><a href="#2-2-1-Cache-Aside（旁路缓存）" class="headerlink" title="2.2.1 Cache-Aside（旁路缓存）"></a>2.2.1 Cache-Aside（旁路缓存）</h4><p>这是最常用的缓存策略，由应用程序负责维护缓存和数据库的一致性。</p><ul><li><strong>读操作</strong>：先查缓存，缓存没有则查数据库，然后将结果写入缓存。</li><li><strong>写操作</strong>：先更新数据库，然后删除缓存（或更新缓存）。</li></ul><h4 id="2-2-2-Read-Through（读穿透）"><a href="#2-2-2-Read-Through（读穿透）" class="headerlink" title="2.2.2 Read-Through（读穿透）"></a>2.2.2 Read-Through（读穿透）</h4><p>应用程序只和缓存交互，由缓存负责与数据库交互。</p><ul><li><strong>读操作</strong>：应用程序从缓存读取数据，如果缓存未命中，则由缓存组件负责从数据库加载数据并更新缓存。</li><li><strong>写操作</strong>：通常需要配合Write-Through或Write-Behind策略。</li></ul><h4 id="2-2-3-Write-Through（写穿透）"><a href="#2-2-3-Write-Through（写穿透）" class="headerlink" title="2.2.3 Write-Through（写穿透）"></a>2.2.3 Write-Through（写穿透）</h4><p>应用程序先写缓存，缓存再同步写数据库。</p><ul><li><strong>写操作</strong>：应用程序更新缓存，缓存组件负责将数据同步写入数据库。</li></ul><h4 id="2-2-4-Write-Behind（异步写入）"><a href="#2-2-4-Write-Behind（异步写入）" class="headerlink" title="2.2.4 Write-Behind（异步写入）"></a>2.2.4 Write-Behind（异步写入）</h4><p>应用程序先写缓存，缓存再异步写数据库。</p><ul><li><strong>写操作</strong>：应用程序更新缓存，缓存组件异步将数据批量写入数据库。</li></ul><h3 id="2-3-缓存过期策略"><a href="#2-3-缓存过期策略" class="headerlink" title="2.3 缓存过期策略"></a>2.3 缓存过期策略</h3><p>Redis提供了多种缓存过期策略，可以根据需求设置键的过期时间：</p><ul><li><strong>EXPIRE key seconds</strong>：设置键在指定的秒数后过期。</li><li><strong>EXPIREAT key timestamp</strong>：设置键在指定的时间戳后过期。</li><li><strong>PEXPIRE key milliseconds</strong>：设置键在指定的毫秒数后过期。</li><li><strong>PEXPIREAT key milliseconds-timestamp</strong>：设置键在指定的毫秒时间戳后过期。</li></ul><p>当键过期后，Redis会自动删除这些键。Redis使用两种方式来删除过期的键：</p><ol><li><strong>惰性删除</strong>：当访问一个键时，Redis会检查该键是否过期，如果过期则删除。</li><li><strong>定期删除</strong>：Redis会定期随机检查一些键，删除其中过期的键。</li></ol><h2 id="3-Redis缓存的内存管理"><a href="#3-Redis缓存的内存管理" class="headerlink" title="3. Redis缓存的内存管理"></a>3. Redis缓存的内存管理</h2><h3 id="3-1-内存淘汰策略"><a href="#3-1-内存淘汰策略" class="headerlink" title="3.1 内存淘汰策略"></a>3.1 内存淘汰策略</h3><p>当Redis的内存使用达到上限时，会根据配置的内存淘汰策略来决定如何处理新的写入请求。Redis提供了以下几种内存淘汰策略：</p><ul><li><strong>noeviction</strong>：不淘汰任何数据，当内存不足时，新的写入请求会报错。</li><li><strong>allkeys-lru</strong>：从所有键中使用LRU算法淘汰最久未使用的键。</li><li><strong>volatile-lru</strong>：从设置了过期时间的键中使用LRU算法淘汰最久未使用的键。</li><li><strong>allkeys-random</strong>：从所有键中随机淘汰键。</li><li><strong>volatile-random</strong>：从设置了过期时间的键中随机淘汰键。</li><li><strong>volatile-ttl</strong>：从设置了过期时间的键中淘汰将要过期的键。</li><li><strong>allkeys-lfu</strong>（Redis 4.0+）：从所有键中使用LFU算法淘汰最少使用的键。</li><li><strong>volatile-lfu</strong>（Redis 4.0+）：从设置了过期时间的键中使用LFU算法淘汰最少使用的键。</li></ul><p>可以通过修改Redis配置文件中的<code>maxmemory-policy</code>参数来设置内存淘汰策略：</p><pre class="line-numbers language-none"><code class="language-none">maxmemory-policy allkeys-lru<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-内存优化"><a href="#3-2-内存优化" class="headerlink" title="3.2 内存优化"></a>3.2 内存优化</h3><p>为了更有效地使用Redis的内存，可以采取以下优化措施：</p><ul><li><strong>合理设置过期时间</strong>：根据数据的实际使用情况，为不同类型的数据设置合适的过期时间。</li><li><strong>使用压缩数据结构</strong>：Redis提供了一些压缩数据结构，如ziplist、intset等，可以减少内存使用。</li><li><strong>避免使用大键</strong>：大键会占用大量内存，并且在操作时可能会导致性能问题。</li><li><strong>定期清理过期键</strong>：可以使用SCAN命令定期扫描并删除过期的键。</li></ul><h2 id="4-Redis缓存的常见问题及解决方案"><a href="#4-Redis缓存的常见问题及解决方案" class="headerlink" title="4. Redis缓存的常见问题及解决方案"></a>4. Redis缓存的常见问题及解决方案</h2><h3 id="4-1-缓存穿透"><a href="#4-1-缓存穿透" class="headerlink" title="4.1 缓存穿透"></a>4.1 缓存穿透</h3><p><strong>问题</strong>：请求的数据在缓存和数据库中都不存在，导致每次请求都直接访问数据库。</p><p><strong>解决方案</strong>：</p><ul><li>使用布隆过滤器过滤不存在的键。</li><li>对空值进行缓存，并设置较短的过期时间。</li><li>接口层增加校验，过滤非法参数。</li></ul><h3 id="4-2-缓存击穿"><a href="#4-2-缓存击穿" class="headerlink" title="4.2 缓存击穿"></a>4.2 缓存击穿</h3><p><strong>问题</strong>：热点数据过期时，大量请求同时访问数据库，导致数据库压力骤增。</p><p><strong>解决方案</strong>：</p><ul><li>使用互斥锁，保证同一时间只有一个请求去查询数据库。</li><li>热点数据永不过期或延长过期时间。</li><li>使用二级缓存，当一级缓存过期时，先从二级缓存获取数据。</li></ul><h3 id="4-3-缓存雪崩"><a href="#4-3-缓存雪崩" class="headerlink" title="4.3 缓存雪崩"></a>4.3 缓存雪崩</h3><p><strong>问题</strong>：大量缓存同时过期或Redis服务器宕机，导致大量请求直接访问数据库。</p><p><strong>解决方案</strong>：</p><ul><li>为缓存设置随机过期时间，避免同时过期。</li><li>使用Redis集群，提高可用性。</li><li>设置熔断机制，当检测到缓存服务不可用时，暂停对数据库的访问。</li><li>使用本地缓存作为备用。</li></ul><h2 id="5-Redis缓存的最佳实践"><a href="#5-Redis缓存的最佳实践" class="headerlink" title="5. Redis缓存的最佳实践"></a>5. Redis缓存的最佳实践</h2><h3 id="5-1-合理设计键名"><a href="#5-1-合理设计键名" class="headerlink" title="5.1 合理设计键名"></a>5.1 合理设计键名</h3><ul><li>使用冒号（:）分隔不同部分的键名，如<code>user:1001:profile</code>。</li><li>避免使用过长的键名，键名越长，占用的内存越多。</li><li>使用统一的命名规范，便于管理和维护。</li></ul><h3 id="5-2-合理使用数据结构"><a href="#5-2-合理使用数据结构" class="headerlink" title="5.2 合理使用数据结构"></a>5.2 合理使用数据结构</h3><ul><li>根据实际需求选择合适的数据结构，避免使用不必要的复杂数据结构。</li><li>对于简单的键值对，使用字符串类型。</li><li>对于需要存储多个字段的对象，使用哈希类型。</li><li>对于需要保持顺序的列表，使用列表类型。</li><li>对于需要去重的集合，使用集合类型。</li><li>对于需要排序的集合，使用有序集合类型。</li></ul><h3 id="5-3-批量操作"><a href="#5-3-批量操作" class="headerlink" title="5.3 批量操作"></a>5.3 批量操作</h3><ul><li>使用批量命令（如MGET、MSET）代替多次单个命令，减少网络开销。</li><li>使用管道（Pipeline）或事务（Transaction）批量执行命令。</li></ul><h3 id="5-4-监控与维护"><a href="#5-4-监控与维护" class="headerlink" title="5.4 监控与维护"></a>5.4 监控与维护</h3><ul><li>定期监控Redis的内存使用情况、命中率等指标。</li><li>使用Redis提供的INFO命令查看服务器状态。</li><li>定期备份数据，防止数据丢失。</li><li>根据业务需求调整内存淘汰策略和过期时间。</li></ul><h2 id="6-Redis缓存与其他缓存系统的对比"><a href="#6-Redis缓存与其他缓存系统的对比" class="headerlink" title="6. Redis缓存与其他缓存系统的对比"></a>6. Redis缓存与其他缓存系统的对比</h2><h3 id="6-1-Redis-vs-Memcached"><a href="#6-1-Redis-vs-Memcached" class="headerlink" title="6.1 Redis vs Memcached"></a>6.1 Redis vs Memcached</h3><table><thead><tr><th>特性</th><th>Redis</th><th>Memcached</th></tr></thead><tbody><tr><td>数据结构</td><td>支持多种数据结构</td><td>仅支持字符串</td></tr><tr><td>持久化</td><td>支持RDB和AOF持久化</td><td>不支持持久化</td></tr><tr><td>主从复制</td><td>支持</td><td>不支持</td></tr><tr><td>分布式</td><td>原生支持集群模式</td><td>需要客户端实现</td></tr><tr><td>内存管理</td><td>支持多种内存淘汰策略</td><td>使用LRU算法</td></tr><tr><td>事务</td><td>支持</td><td>不支持</td></tr><tr><td>发布订阅</td><td>支持</td><td>不支持</td></tr></tbody></table><h3 id="6-2-Redis-vs-Ehcache"><a href="#6-2-Redis-vs-Ehcache" class="headerlink" title="6.2 Redis vs Ehcache"></a>6.2 Redis vs Ehcache</h3><table><thead><tr><th>特性</th><th>Redis</th><th>Ehcache</th></tr></thead><tbody><tr><td>部署方式</td><td>独立服务</td><td>嵌入式</td></tr><tr><td>数据存储</td><td>内存/磁盘</td><td>内存/磁盘</td></tr><tr><td>分布式</td><td>原生支持</td><td>需要额外配置</td></tr><tr><td>事务</td><td>支持</td><td>支持</td></tr><tr><td>性能</td><td>高</td><td>中</td></tr><tr><td>集成难度</td><td>中</td><td>低</td></tr></tbody></table><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h2><p>Redis作为一个高性能的内存数据库，其缓存机制在提高系统性能方面发挥着重要作用。通过合理设计缓存策略、选择适当的数据结构和内存淘汰策略，可以充分发挥Redis缓存的优势，提高系统的响应速度和并发能力。</p><p>在实际应用中，需要根据业务需求和系统特点，综合考虑缓存的一致性、可用性和性能，选择合适的缓存策略和配置参数，以达到最佳的缓存效果。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://redis.io/documentation">Redis 官方文档</a></li><li><a href="http://redisbook.com/">Redis 设计与实现</a></li><li><a href="https://coolshell.cn/articles/17416.html">缓存更新的套路</a></li></ul><hr><p>希望这篇文章能帮助您更好地理解 Redis 的缓存机制及其应用。如果您有任何问题，欢迎在评论区讨论！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;Redis是一个高性能的内存数据库，被广泛用作缓存系统来提高应用程序的性能。在高并发的互联网应用中，数据库往往成为系统的瓶颈</summary>
      
    
    
    
    <category term="数据库" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/"/>
    
    
    <category term="数据库" scheme="https://lucky845.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis" scheme="https://lucky845.github.io/tags/Redis/"/>
    
    <category term="缓存" scheme="https://lucky845.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
    <category term="性能优化" scheme="https://lucky845.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>【Redis】实战指南：从入门到精通</title>
    <link href="https://lucky845.github.io/archives/b65fa589.html"/>
    <id>https://lucky845.github.io/archives/b65fa589.html</id>
    <published>2025-03-01T09:00:00.000Z</published>
    <updated>2025-03-01T10:46:01.076Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>Redis 作为一个高性能的内存数据库，已经成为现代应用架构中不可或缺的组件。它不仅可以作为缓存层提升系统性能，还能作为消息队列、分布式锁等多种用途。然而，如何在实际项目中正确高效地使用 Redis，需要深入理解其特性并结合具体业务场景。本文将从实战角度出发，介绍 Redis 在各种场景下的应用方法和最佳实践。</p><h2 id="1-Redis-实战基础"><a href="#1-Redis-实战基础" class="headerlink" title="1. Redis 实战基础"></a>1. Redis 实战基础</h2><h3 id="1-1-环境搭建"><a href="#1-1-环境搭建" class="headerlink" title="1.1 环境搭建"></a>1.1 环境搭建</h3><p>在开始 Redis 实战之前，我们需要搭建一个可用的 Redis 环境。以下是几种常见的方式：</p><h4 id="Docker-方式（推荐）"><a href="#Docker-方式（推荐）" class="headerlink" title="Docker 方式（推荐）"></a>Docker 方式（推荐）</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 拉取 Redis 镜像</span><span class="token function">docker</span> pull redis:latest<span class="token comment"># 启动 Redis 容器</span><span class="token function">docker</span> run <span class="token parameter variable">--name</span> my-redis <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token parameter variable">-d</span> redis<span class="token comment"># 连接到 Redis</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> my-redis redis-cli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="直接安装"><a href="#直接安装" class="headerlink" title="直接安装"></a>直接安装</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Ubuntu/Debian</span><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> redis-server<span class="token comment"># CentOS/RHEL</span><span class="token function">sudo</span> yum <span class="token function">install</span> redis<span class="token comment"># macOS</span>brew <span class="token function">install</span> redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-连接-Redis"><a href="#1-2-连接-Redis" class="headerlink" title="1.2 连接 Redis"></a>1.2 连接 Redis</h3><p>在 Java 应用中，我们通常使用 Jedis、Lettuce 或 Redisson 客户端连接 Redis。以下是使用 Spring Boot 集成 Redis 的示例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- pom.xml --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># application.yml</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">10000</span>    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span>      <span class="token key atrule">pool</span><span class="token punctuation">:</span>        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">8</span>        <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">-1</span>        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">8</span>        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 设置key的序列化方式</span>        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置value的序列化方式</span>        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-缓存实战"><a href="#2-缓存实战" class="headerlink" title="2. 缓存实战"></a>2. 缓存实战</h2><h3 id="2-1-缓存设计模式"><a href="#2-1-缓存设计模式" class="headerlink" title="2.1 缓存设计模式"></a>2.1 缓存设计模式</h3><h4 id="缓存穿透防护"><a href="#缓存穿透防护" class="headerlink" title="缓存穿透防护"></a>缓存穿透防护</h4><p>缓存穿透是指查询一个不存在的数据，导致请求直接落到数据库上。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 从缓存获取</span>    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"user:"</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 缓存命中，直接返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 缓存未命中，查询数据库</span>    user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 防止缓存穿透：即使数据库中不存在该记录，也缓存空值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">NullValueObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 缓存查询结果</span>    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> user<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> user<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="缓存击穿防护"><a href="#缓存击穿防护" class="headerlink" title="缓存击穿防护"></a>缓存击穿防护</h4><p>缓存击穿是指热点数据过期时，大量请求同时打到数据库。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"user:"</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 使用分布式锁防止缓存击穿</span>    <span class="token class-name">String</span> lockKey <span class="token operator">=</span> <span class="token string">"lock:user:"</span> <span class="token operator">+</span> id<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> locked <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>locked<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 双重检查，防止其他线程已经缓存了数据</span>            user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> user<span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        <span class="token comment">// 查询数据库</span>            user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> user<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">NullValueObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// 未获取到锁，短暂休眠后重试</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">getUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment">// 释放锁</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="缓存雪崩防护"><a href="#缓存雪崩防护" class="headerlink" title="缓存雪崩防护"></a>缓存雪崩防护</h4><p>缓存雪崩是指大量缓存同时过期，导致请求全部落到数据库。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 设置随机过期时间，避免同时过期</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setWithRandomExpire</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 基础过期时间30分钟</span>    <span class="token keyword">int</span> baseTime <span class="token operator">=</span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">;</span>    <span class="token comment">// 随机增加0~5分钟的过期时间</span>    <span class="token keyword">int</span> randomTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> baseTime <span class="token operator">+</span> randomTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-缓存预热"><a href="#2-2-缓存预热" class="headerlink" title="2.2 缓存预热"></a>2.2 缓存预热</h3><p>系统启动时，提前加载热点数据到缓存中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CachePreheater</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ProductService</span> productService<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 系统启动时预热缓存</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"开始预热商品缓存..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">&gt;</span></span> hotProducts <span class="token operator">=</span> productService<span class="token punctuation">.</span><span class="token function">findHotProducts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Product</span> product <span class="token operator">:</span> hotProducts<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"product:"</span> <span class="token operator">+</span> product<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> product<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">HOURS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"商品缓存预热完成，共预热{}个商品"</span><span class="token punctuation">,</span> hotProducts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-分布式锁实战"><a href="#3-分布式锁实战" class="headerlink" title="3. 分布式锁实战"></a>3. 分布式锁实战</h2><h3 id="3-1-基于-Redis-的分布式锁实现"><a href="#3-1-基于-Redis-的分布式锁实现" class="headerlink" title="3.1 基于 Redis 的分布式锁实现"></a>3.1 基于 Redis 的分布式锁实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisDistributedLock</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> lockKey<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> lockValue<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> expireTime<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">RedisDistributedLock</span><span class="token punctuation">(</span><span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">,</span> <span class="token class-name">String</span> lockKey<span class="token punctuation">,</span> <span class="token keyword">long</span> expireTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate <span class="token operator">=</span> redisTemplate<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lockKey <span class="token operator">=</span> lockKey<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lockValue <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>expireTime <span class="token operator">=</span> expireTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> lockValue<span class="token punctuation">,</span> expireTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 使用Lua脚本保证原子性操作</span>        <span class="token class-name">String</span> script <span class="token operator">=</span> <span class="token string">"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end"</span><span class="token punctuation">;</span>        <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> redisScript <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>script<span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Long</span> result <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>redisScript<span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">,</span> lockValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> result <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-分布式锁的实际应用"><a href="#3-2-分布式锁的实际应用" class="headerlink" title="3.2 分布式锁的实际应用"></a>3.2 分布式锁的实际应用</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token class-name">Long</span> userId<span class="token punctuation">,</span> <span class="token class-name">Long</span> productId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建分布式锁</span>        <span class="token class-name">String</span> lockKey <span class="token operator">=</span> <span class="token string">"lock:product:"</span> <span class="token operator">+</span> productId<span class="token punctuation">;</span>        <span class="token class-name">RedisDistributedLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisDistributedLock</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">,</span> lockKey<span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 尝试获取锁</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 检查库存</span>                <span class="token keyword">int</span> stock <span class="token operator">=</span> <span class="token function">getProductStock</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>stock <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                                <span class="token comment">// 扣减库存</span>                <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token function">reduceStock</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 创建订单</span>                    <span class="token function">createOrderRecord</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> productId<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">// 获取锁失败，提示用户稍后重试</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment">// 释放锁</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment">// 其他方法...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-消息队列实战"><a href="#4-消息队列实战" class="headerlink" title="4. 消息队列实战"></a>4. 消息队列实战</h2><h3 id="4-1-基于-Redis-List-实现简单消息队列"><a href="#4-1-基于-Redis-List-实现简单消息队列" class="headerlink" title="4.1 基于 Redis List 实现简单消息队列"></a>4.1 基于 Redis List 实现简单消息队列</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 生产者</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span><span class="token string">"message:queue"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 消费者</span><span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedRate <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> message <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftPop</span><span class="token punctuation">(</span><span class="token string">"message:queue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>message <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 处理消息</span>        <span class="token function">processMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-基于-Redis-Pub-Sub-实现消息广播"><a href="#4-2-基于-Redis-Pub-Sub-实现消息广播" class="headerlink" title="4.2 基于 Redis Pub/Sub 实现消息广播"></a>4.2 基于 Redis Pub/Sub 实现消息广播</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 配置Redis消息监听器</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisMessageConfig</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisMessageListenerContainer</span> <span class="token function">container</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RedisMessageListenerContainer</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisMessageListenerContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> container<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MessageListenerAdapter</span> <span class="token function">messageListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MessageListenerAdapter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedisMessageSubscriber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ChannelTopic</span> <span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ChannelTopic</span><span class="token punctuation">(</span><span class="token string">"messageChannel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RedisMessageListenerContainer</span> <span class="token function">redisContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RedisMessageListenerContainer</span> container <span class="token operator">=</span> <span class="token function">container</span><span class="token punctuation">(</span><span class="token function">redisConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">addMessageListener</span><span class="token punctuation">(</span><span class="token function">messageListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> container<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 消息订阅者</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisMessageSubscriber</span> <span class="token keyword">implements</span> <span class="token class-name">MessageListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> receivedMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收到消息: "</span> <span class="token operator">+</span> receivedMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 处理消息</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 消息发布者</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisMessagePublisher</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ChannelTopic</span> topic<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">publish</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>topic<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-排行榜实战"><a href="#5-排行榜实战" class="headerlink" title="5. 排行榜实战"></a>5. 排行榜实战</h2><h3 id="5-1-基于-Sorted-Set-实现实时排行榜"><a href="#5-1-基于-Sorted-Set-实现实时排行榜" class="headerlink" title="5.1 基于 Sorted Set 实现实时排行榜"></a>5.1 基于 Sorted Set 实现实时排行榜</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LeaderboardService</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">LEADERBOARD_KEY</span> <span class="token operator">=</span> <span class="token string">"leaderboard:scores"</span><span class="token punctuation">;</span>        <span class="token comment">// 更新用户分数</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateScore</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">,</span> <span class="token keyword">double</span> score<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token constant">LEADERBOARD_KEY</span><span class="token punctuation">,</span> userId<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 增加用户分数</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">incrementScore</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">,</span> <span class="token keyword">double</span> increment<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">incrementScore</span><span class="token punctuation">(</span><span class="token constant">LEADERBOARD_KEY</span><span class="token punctuation">,</span> userId<span class="token punctuation">,</span> increment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 获取用户排名（从0开始）</span>    <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">getUserRank</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverseRank</span><span class="token punctuation">(</span><span class="token constant">LEADERBOARD_KEY</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 获取用户分数</span>    <span class="token keyword">public</span> <span class="token class-name">Double</span> <span class="token function">getUserScore</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">score</span><span class="token punctuation">(</span><span class="token constant">LEADERBOARD_KEY</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 获取前N名用户</span>    <span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">getTopN</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverseRange</span><span class="token punctuation">(</span><span class="token constant">LEADERBOARD_KEY</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 获取用户分数和排名</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">getUserScoreAndRank</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Double</span> score <span class="token operator">=</span> <span class="token function">getUserScore</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Long</span> rank <span class="token operator">=</span> <span class="token function">getUserRank</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>                result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userId"</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"score"</span><span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"rank"</span><span class="token punctuation">,</span> rank <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> rank <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>## <span class="token number">6.</span> 限流器实战### <span class="token number">6.1</span> 基于<span class="token class-name">Redis</span>的限流器实现```java<span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RateLimiter</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">;</span>        <span class="token comment">/**     * 简单的计数器限流     * @param key 限流key     * @param limit 限制次数     * @param period 时间窗口（秒）     * @return 是否允许访问     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAllowed</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">,</span> <span class="token keyword">int</span> period<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> countKey <span class="token operator">=</span> <span class="token string">"ratelimit:"</span> <span class="token operator">+</span> key<span class="token punctuation">;</span>                <span class="token class-name">Long</span> count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>countKey<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 设置过期时间</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>countKey<span class="token punctuation">,</span> period<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">return</span> count <span class="token operator">&lt;=</span> limit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">/**     * 滑动窗口限流     * @param key 限流key     * @param limit 限制次数     * @param window 时间窗口（秒）     * @return 是否允许访问     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAllowedByWindow</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">,</span> <span class="token keyword">int</span> window<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> windowKey <span class="token operator">=</span> <span class="token string">"ratelimit:sliding:"</span> <span class="token operator">+</span> key<span class="token punctuation">;</span>        <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 移除时间窗口之前的数据</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeRangeByScore</span><span class="token punctuation">(</span>            windowKey<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> now <span class="token operator">-</span> window <span class="token operator">*</span> <span class="token number">1000</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 获取当前窗口的请求数</span>        <span class="token class-name">Long</span> count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">zCard</span><span class="token punctuation">(</span>windowKey<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 添加当前请求</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>windowKey<span class="token punctuation">,</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 设置过期时间</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>windowKey<span class="token punctuation">,</span> window <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-限流器的使用示例"><a href="#6-2-限流器的使用示例" class="headerlink" title="6.2 限流器的使用示例"></a>6.2 限流器的使用示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiController</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RateLimiter</span> rateLimiter<span class="token punctuation">;</span>        <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/api/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"api:"</span> <span class="token operator">+</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">currentRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSessionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rateLimiter<span class="token punctuation">.</span><span class="token function">isAllowed</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"访问过于频繁，请稍后再试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment">// 业务逻辑</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-地理位置服务实战"><a href="#7-地理位置服务实战" class="headerlink" title="7. 地理位置服务实战"></a>7. 地理位置服务实战</h2><h3 id="7-1-基于Redis-GEO实现位置服务"><a href="#7-1-基于Redis-GEO实现位置服务" class="headerlink" title="7.1 基于Redis GEO实现位置服务"></a>7.1 基于Redis GEO实现位置服务</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocationService</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">GEO_KEY</span> <span class="token operator">=</span> <span class="token string">"locations"</span><span class="token punctuation">;</span>        <span class="token comment">// 添加位置信息</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addLocation</span><span class="token punctuation">(</span><span class="token class-name">String</span> memberId<span class="token punctuation">,</span> <span class="token keyword">double</span> longitude<span class="token punctuation">,</span> <span class="token keyword">double</span> latitude<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForGeo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token constant">GEO_KEY</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>longitude<span class="token punctuation">,</span> latitude<span class="token punctuation">)</span><span class="token punctuation">,</span> memberId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 获取位置信息</span>    <span class="token keyword">public</span> <span class="token class-name">Point</span> <span class="token function">getLocation</span><span class="token punctuation">(</span><span class="token class-name">String</span> memberId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">&gt;</span></span> points <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForGeo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token constant">GEO_KEY</span><span class="token punctuation">,</span> memberId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> points <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>points<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> points<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 计算两点之间的距离（单位：米）</span>    <span class="token keyword">public</span> <span class="token class-name">Double</span> <span class="token function">getDistance</span><span class="token punctuation">(</span><span class="token class-name">String</span> member1<span class="token punctuation">,</span> <span class="token class-name">String</span> member2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Distance</span> distance <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForGeo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distance</span><span class="token punctuation">(</span><span class="token constant">GEO_KEY</span><span class="token punctuation">,</span> member1<span class="token punctuation">,</span> member2<span class="token punctuation">,</span> <span class="token class-name">Metrics</span><span class="token punctuation">.</span><span class="token constant">METERS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> distance <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> distance<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 查找指定范围内的位置</span>    <span class="token keyword">public</span> <span class="token class-name">GeoResults</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RedisGeoCommands<span class="token punctuation">.</span>GeoLocation</span><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">findNearby</span><span class="token punctuation">(</span>            <span class="token keyword">double</span> longitude<span class="token punctuation">,</span>            <span class="token keyword">double</span> latitude<span class="token punctuation">,</span>            <span class="token keyword">double</span> radius<span class="token punctuation">,</span>    <span class="token comment">// 单位：米</span>            <span class="token keyword">int</span> limit    <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Circle</span> circle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>longitude<span class="token punctuation">,</span> latitude<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Distance</span><span class="token punctuation">(</span>radius<span class="token punctuation">,</span> <span class="token class-name">Metrics</span><span class="token punctuation">.</span><span class="token constant">METERS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RedisGeoCommands<span class="token punctuation">.</span>GeoRadiusCommandArgs</span> args <span class="token operator">=</span> <span class="token class-name">RedisGeoCommands<span class="token punctuation">.</span>GeoRadiusCommandArgs</span>                <span class="token punctuation">.</span><span class="token function">newGeoRadiusArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">includeDistance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">includeCoordinates</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sortAscending</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForGeo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">radius</span><span class="token punctuation">(</span><span class="token constant">GEO_KEY</span><span class="token punctuation">,</span> circle<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-地理位置服务的使用示例"><a href="#7-2-地理位置服务的使用示例" class="headerlink" title="7.2 地理位置服务的使用示例"></a>7.2 地理位置服务的使用示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/location"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocationController</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">LocationService</span> locationService<span class="token punctuation">;</span>        <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addLocation</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">LocationDTO</span> dto<span class="token punctuation">)</span> <span class="token punctuation">{</span>        locationService<span class="token punctuation">.</span><span class="token function">addLocation</span><span class="token punctuation">(</span>dto<span class="token punctuation">.</span><span class="token function">getMemberId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dto<span class="token punctuation">.</span><span class="token function">getLongitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dto<span class="token punctuation">.</span><span class="token function">getLatitude</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/nearby"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">findNearby</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@RequestParam</span> <span class="token keyword">double</span> longitude<span class="token punctuation">,</span>            <span class="token annotation punctuation">@RequestParam</span> <span class="token keyword">double</span> latitude<span class="token punctuation">,</span>            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>defaultValue <span class="token operator">=</span> <span class="token string">"1000"</span><span class="token punctuation">)</span> <span class="token keyword">double</span> radius    <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">GeoResults</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RedisGeoCommands<span class="token punctuation">.</span>GeoLocation</span><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> results <span class="token operator">=</span>                 locationService<span class="token punctuation">.</span><span class="token function">findNearby</span><span class="token punctuation">(</span>longitude<span class="token punctuation">,</span> latitude<span class="token punctuation">,</span> radius<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">GeoResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RedisGeoCommands<span class="token punctuation">.</span>GeoLocation</span><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">:</span> results<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> location <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            location<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"memberId"</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            location<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"distance"</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">getDistance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            location<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"coordinates"</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">return</span> response<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍了Redis在实际项目中的多种应用场景，包括缓存、分布式锁、消息队列、排行榜、限流器和地理位置服务等。通过这些实战示例，我们可以看到Redis不仅仅是一个简单的缓存系统，而是一个功能强大的数据存储解决方案。在实际使用中，需要根据具体的业务场景选择合适的数据结构和实现方式，同时注意性能优化和数据一致性等问题。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://redis.io/documentation">Redis 官方文档</a></li><li><a href="http://redisbook.com/">Redis 设计与实现</a></li><li><a href="https://docs.spring.io/spring-data/redis/docs/current/reference/html/">Spring Data Redis 官方文档</a></li><li><a href="https://redislabs.com/redis-in-action/">Redis 实战（Redis in Action）</a></li><li><a href="https://redis.io/topics/cluster-tutorial">Redis 最佳实践</a></li></ul><hr><p>希望这篇文章能帮助您更好地理解和应用Redis的各项功能。如果您有任何问题或建议，欢迎在评论区与我交流！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;Redis 作为一个高性能的内存数据库，已经成为现代应用架构中不可或缺的组件。它不仅可以作为缓存层提升系统性能，还能作为消息</summary>
      
    
    
    
    <category term="数据库" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/"/>
    
    
    <category term="数据库" scheme="https://lucky845.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis" scheme="https://lucky845.github.io/tags/Redis/"/>
    
    <category term="缓存" scheme="https://lucky845.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
    <category term="性能优化" scheme="https://lucky845.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="实战" scheme="https://lucky845.github.io/tags/%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>【Redis】过期删除与内存淘汰策略详解</title>
    <link href="https://lucky845.github.io/archives/b55fa587.html"/>
    <id>https://lucky845.github.io/archives/b55fa587.html</id>
    <published>2025-03-01T08:00:00.000Z</published>
    <updated>2025-03-01T10:00:37.838Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>Redis 作为一个内存数据库，其数据都存储在内存中，这就带来了两个关键问题：一是如何处理设置了过期时间的键，二是当内存不足时如何进行数据淘汰。本文将详细介绍 Redis 的过期删除策略和内存淘汰机制，帮助您更好地管理 Redis 内存资源。</p><h2 id="1-Redis-的过期删除策略"><a href="#1-Redis-的过期删除策略" class="headerlink" title="1. Redis 的过期删除策略"></a>1. Redis 的过期删除策略</h2><p>Redis 中可以通过 <code>EXPIRE</code>、<code>EXPIREAT</code>、<code>PEXPIRE</code>、<code>PEXPIREAT</code> 等命令为键设置过期时间。当键过期后，Redis 需要将其从内存中删除。Redis 采用了三种过期删除策略的组合来处理过期键。</p><h3 id="1-1-定时删除（Time-Based-Deletion）"><a href="#1-1-定时删除（Time-Based-Deletion）" class="headerlink" title="1.1 定时删除（Time Based Deletion）"></a>1.1 定时删除（Time Based Deletion）</h3><p>定时删除是指在设置键的过期时间时，创建一个定时器，当时间到达时，立即删除该键。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li><strong>内存友好</strong>：过期键会被立即删除，释放内存空间。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li><strong>CPU 开销大</strong>：需要维护大量的定时器，对 CPU 资源消耗较大。</li><li><strong>实现复杂</strong>：需要一个独立的定时器，且难以高效实现。</li></ul><p>由于上述缺点，Redis 实际上并未完全采用定时删除策略。</p><h3 id="1-2-惰性删除（Lazy-Deletion）"><a href="#1-2-惰性删除（Lazy-Deletion）" class="headerlink" title="1.2 惰性删除（Lazy Deletion）"></a>1.2 惰性删除（Lazy Deletion）</h3><p>惰性删除是指只有当客户端尝试访问一个键时，才会检查该键是否过期，如果过期则删除。</p><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul><li><strong>CPU 友好</strong>：只在必要时才检查和删除过期键，减少了 CPU 开销。</li></ul><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul><li><strong>内存不友好</strong>：如果过期键长时间未被访问，会一直占用内存空间。</li></ul><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><p>在 Redis 中，惰性删除策略通过在读写操作前检查键的过期时间来实现：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// Redis 源码中的伪代码</span><span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">expired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> key<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-定期删除（Periodic-Deletion）"><a href="#1-3-定期删除（Periodic-Deletion）" class="headerlink" title="1.3 定期删除（Periodic Deletion）"></a>1.3 定期删除（Periodic Deletion）</h3><p>定期删除是指 Redis 定期随机抽样一部分键，检查其是否过期，如果过期则删除。</p><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ul><li><strong>平衡 CPU 和内存</strong>：通过控制删除操作的频率和执行时间，在 CPU 和内存之间取得平衡。</li></ul><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><ul><li><strong>不能保证及时删除所有过期键</strong>：由于是随机抽样，可能会有部分过期键未被检查到。</li></ul><h4 id="实现方式-1"><a href="#实现方式-1" class="headerlink" title="实现方式"></a>实现方式</h4><p>Redis 的定期删除策略在 <code>serverCron()</code> 函数中实现，默认每 100ms 执行一次，每次最多删除 20 个过期键。</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># redis.conf 中的相关配置hz 10  # 默认值为 10，表示每秒执行 10 次 serverCron()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-Redis-的内存淘汰策略"><a href="#2-Redis-的内存淘汰策略" class="headerlink" title="2. Redis 的内存淘汰策略"></a>2. Redis 的内存淘汰策略</h2><p>当 Redis 的内存使用达到上限时，需要通过内存淘汰策略来释放空间。Redis 提供了多种内存淘汰策略，可以通过 <code>maxmemory-policy</code> 配置项来设置。</p><h3 id="2-1-不淘汰（noeviction）"><a href="#2-1-不淘汰（noeviction）" class="headerlink" title="2.1 不淘汰（noeviction）"></a>2.1 不淘汰（noeviction）</h3><p>当内存不足时，新写入操作会报错，不会删除任何现有数据。</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">maxmemory-policy noeviction<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>适用场景：对数据完整性要求极高，不允许丢失任何数据的场景。</p><h3 id="2-2-淘汰所有键中的最近最少使用（allkeys-lru）"><a href="#2-2-淘汰所有键中的最近最少使用（allkeys-lru）" class="headerlink" title="2.2 淘汰所有键中的最近最少使用（allkeys-lru）"></a>2.2 淘汰所有键中的最近最少使用（allkeys-lru）</h3><p>当内存不足时，从所有键中选择最近最少使用的键进行淘汰。</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">maxmemory-policy allkeys-lru<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>适用场景：缓存场景，希望保留热点数据。</p><h3 id="2-3-淘汰所有键中的最少使用（allkeys-lfu）"><a href="#2-3-淘汰所有键中的最少使用（allkeys-lfu）" class="headerlink" title="2.3 淘汰所有键中的最少使用（allkeys-lfu）"></a>2.3 淘汰所有键中的最少使用（allkeys-lfu）</h3><p>当内存不足时，从所有键中选择使用频率最低的键进行淘汰。</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">maxmemory-policy allkeys-lfu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>适用场景：访问频率差异明显的缓存场景。</p><h3 id="2-4-淘汰所有键中的随机键（allkeys-random）"><a href="#2-4-淘汰所有键中的随机键（allkeys-random）" class="headerlink" title="2.4 淘汰所有键中的随机键（allkeys-random）"></a>2.4 淘汰所有键中的随机键（allkeys-random）</h3><p>当内存不足时，随机选择键进行淘汰。</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">maxmemory-policy allkeys-random<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>适用场景：所有键访问概率相同的场景。</p><h3 id="2-5-淘汰设置了过期时间的键中的最近最少使用（volatile-lru）"><a href="#2-5-淘汰设置了过期时间的键中的最近最少使用（volatile-lru）" class="headerlink" title="2.5 淘汰设置了过期时间的键中的最近最少使用（volatile-lru）"></a>2.5 淘汰设置了过期时间的键中的最近最少使用（volatile-lru）</h3><p>当内存不足时，从设置了过期时间的键中选择最近最少使用的键进行淘汰。</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">maxmemory-policy volatile-lru<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>适用场景：希望只淘汰设置了过期时间的键，且希望保留热点数据。</p><h3 id="2-6-淘汰设置了过期时间的键中的最少使用（volatile-lfu）"><a href="#2-6-淘汰设置了过期时间的键中的最少使用（volatile-lfu）" class="headerlink" title="2.6 淘汰设置了过期时间的键中的最少使用（volatile-lfu）"></a>2.6 淘汰设置了过期时间的键中的最少使用（volatile-lfu）</h3><p>当内存不足时，从设置了过期时间的键中选择使用频率最低的键进行淘汰。</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">maxmemory-policy volatile-lfu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>适用场景：希望只淘汰设置了过期时间的键，且访问频率差异明显。</p><h3 id="2-7-淘汰设置了过期时间的键中的随机键（volatile-random）"><a href="#2-7-淘汰设置了过期时间的键中的随机键（volatile-random）" class="headerlink" title="2.7 淘汰设置了过期时间的键中的随机键（volatile-random）"></a>2.7 淘汰设置了过期时间的键中的随机键（volatile-random）</h3><p>当内存不足时，从设置了过期时间的键中随机选择键进行淘汰。</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">maxmemory-policy volatile-random<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>适用场景：希望只淘汰设置了过期时间的键，且所有键访问概率相同。</p><h3 id="2-8-淘汰快要过期的键（volatile-ttl）"><a href="#2-8-淘汰快要过期的键（volatile-ttl）" class="headerlink" title="2.8 淘汰快要过期的键（volatile-ttl）"></a>2.8 淘汰快要过期的键（volatile-ttl）</h3><p>当内存不足时，从设置了过期时间的键中选择剩余生存时间（TTL）最短的键进行淘汰。</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">maxmemory-policy volatile-ttl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>适用场景：希望优先保留生存时间较长的键。</p><h2 id="3-内存管理最佳实践"><a href="#3-内存管理最佳实践" class="headerlink" title="3. 内存管理最佳实践"></a>3. 内存管理最佳实践</h2><h3 id="3-1-设置合理的内存上限"><a href="#3-1-设置合理的内存上限" class="headerlink" title="3.1 设置合理的内存上限"></a>3.1 设置合理的内存上限</h3><p>根据服务器内存情况，为 Redis 设置合理的内存上限，避免 Redis 占用过多系统资源。</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># 设置 Redis 最大内存为 2GBmaxmemory 2gb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-2-选择合适的内存淘汰策略"><a href="#3-2-选择合适的内存淘汰策略" class="headerlink" title="3.2 选择合适的内存淘汰策略"></a>3.2 选择合适的内存淘汰策略</h3><p>根据业务需求选择合适的内存淘汰策略：</p><ul><li>对于纯缓存场景，推荐使用 <code>allkeys-lru</code> 或 <code>allkeys-lfu</code>。</li><li>对于既有缓存又有持久化数据的场景，推荐使用 <code>volatile-lru</code> 或 <code>volatile-lfu</code>。</li><li>对于数据完整性要求高的场景，可以使用 <code>noeviction</code>，但需要确保有足够的内存。</li></ul><h3 id="3-3-合理设置键的过期时间"><a href="#3-3-合理设置键的过期时间" class="headerlink" title="3.3 合理设置键的过期时间"></a>3.3 合理设置键的过期时间</h3><p>为键设置合理的过期时间，避免无用数据长期占用内存：</p><pre class="line-numbers language-redis" data-language="redis"><code class="language-redis">SET key value EX 3600  # 设置键的过期时间为 1 小时<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-4-监控内存使用情况"><a href="#3-4-监控内存使用情况" class="headerlink" title="3.4 监控内存使用情况"></a>3.4 监控内存使用情况</h3><p>定期监控 Redis 的内存使用情况，及时调整配置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 Redis CLI 查看内存使用情况</span>redis-cli info memory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-5-使用-Redis-内存分析工具"><a href="#3-5-使用-Redis-内存分析工具" class="headerlink" title="3.5 使用 Redis 内存分析工具"></a>3.5 使用 Redis 内存分析工具</h3><p>使用 Redis 提供的内存分析工具，如 <code>MEMORY USAGE</code> 命令和 <code>redis-memory-analyzer</code>，分析内存使用情况：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看某个键的内存使用情况</span>redis-cli memory usage key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>Redis 通过过期删除策略（惰性删除和定期删除的组合）和内存淘汰策略来管理内存资源。合理配置这些策略，可以在保证数据可用性的同时，有效利用内存资源。在实际应用中，应根据业务需求选择合适的策略，并定期监控内存使用情况，及时调整配置。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://redis.io/documentation">Redis 官方文档</a></li><li><a href="https://redis.io/topics/memory-optimization">Redis 内存优化</a></li><li><a href="https://redis.io/topics/config">Redis 配置</a></li></ul><hr><p>希望这篇文章能帮助您更好地理解 Redis 的过期删除与内存淘汰机制。如果您有任何问题，欢迎在评论区讨论！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;Redis 作为一个内存数据库，其数据都存储在内存中，这就带来了两个关键问题：一是如何处理设置了过期时间的键，二是当内存不足</summary>
      
    
    
    
    <category term="数据库" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/"/>
    
    
    <category term="数据库" scheme="https://lucky845.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis" scheme="https://lucky845.github.io/tags/Redis/"/>
    
    <category term="缓存" scheme="https://lucky845.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
    <category term="内存管理" scheme="https://lucky845.github.io/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>【Redis】线程模型详解：从单线程到多线程的演进</title>
    <link href="https://lucky845.github.io/archives/b55fa587.html"/>
    <id>https://lucky845.github.io/archives/b55fa587.html</id>
    <published>2025-03-01T07:00:00.000Z</published>
    <updated>2025-03-01T09:58:09.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>Redis 作为一个高性能的内存数据库，其线程模型设计一直是开发者关注的焦点。从最初的单线程设计到 Redis 6.0 引入多线程，这一演进过程体现了 Redis 在性能优化和架构设计上的深思熟虑。本文将详细介绍 Redis 的线程模型，解析其设计原理和演进历程。</p><h2 id="1-Redis-是单线程的吗？"><a href="#1-Redis-是单线程的吗？" class="headerlink" title="1. Redis 是单线程的吗？"></a>1. Redis 是单线程的吗？</h2><h3 id="1-1-常见误解"><a href="#1-1-常见误解" class="headerlink" title="1.1 常见误解"></a>1.1 常见误解</h3><p>很多人认为 Redis 是单线程的，这种说法并不完全准确。实际上：</p><ul><li>Redis 的核心网络模型在 6.0 版本之前采用单线程模式</li><li>Redis 的其他功能（如持久化、集群数据同步等）一直是多线程的</li><li>Redis 6.0 之后引入了多线程来处理网络 I/O</li></ul><h3 id="1-2-真实的线程模型"><a href="#1-2-真实的线程模型" class="headerlink" title="1.2 真实的线程模型"></a>1.2 真实的线程模型</h3><p>在 Redis 6.0 之前：</p><ul><li>主线程：处理网络 I/O 和命令执行</li><li>后台线程：处理 RDB 持久化、AOF 重写、异步删除等任务</li></ul><h2 id="2-Redis-单线程模式详解"><a href="#2-Redis-单线程模式详解" class="headerlink" title="2. Redis 单线程模式详解"></a>2. Redis 单线程模式详解</h2><h3 id="2-1-设计原理"><a href="#2-1-设计原理" class="headerlink" title="2.1 设计原理"></a>2.1 设计原理</h3><p>Redis 早期采用单线程模型主要基于以下设计原则：</p><ul><li><strong>简单性</strong>：单线程模型更容易维护，不需要考虑复杂的线程同步问题</li><li><strong>避免竞争</strong>：没有多线程的上下文切换和锁竞争开销</li><li><strong>内存操作速度快</strong>：Redis 的性能瓶颈通常不在 CPU，而在内存和网络 I/O</li></ul><h3 id="2-2-实现机制"><a href="#2-2-实现机制" class="headerlink" title="2.2 实现机制"></a>2.2 实现机制</h3><p>Redis 单线程模型的核心实现基于：</p><ul><li><strong>事件循环</strong>：使用 epoll/kqueue 等高效的 I/O 多路复用技术</li><li><strong>非阻塞 I/O</strong>：所有网络 I/O 操作都是非阻塞的</li><li><strong>命令队列</strong>：按顺序执行命令，避免了并发访问的问题</li></ul><h2 id="3-Redis-6-0-之前为什么用单线程？"><a href="#3-Redis-6-0-之前为什么用单线程？" class="headerlink" title="3. Redis 6.0 之前为什么用单线程？"></a>3. Redis 6.0 之前为什么用单线程？</h2><h3 id="3-1-单线程的优势"><a href="#3-1-单线程的优势" class="headerlink" title="3.1 单线程的优势"></a>3.1 单线程的优势</h3><ul><li><strong>简单可维护</strong>：不需要处理复杂的并发控制</li><li><strong>避免同步开销</strong>：没有线程切换和竞争条件</li><li><strong>充分利用 CPU</strong>：单线程模型下 CPU 利用率通常较高</li></ul><h3 id="3-2-性能考虑"><a href="#3-2-性能考虑" class="headerlink" title="3.2 性能考虑"></a>3.2 性能考虑</h3><ul><li>Redis 的性能瓶颈主要在于内存和网络带宽</li><li>单线程模型下，Redis 仍然可以达到很高的性能（10w+ QPS）</li><li>大多数场景下，单线程已经能满足需求</li></ul><h2 id="4-Redis-6-0-为什么引入多线程？"><a href="#4-Redis-6-0-为什么引入多线程？" class="headerlink" title="4. Redis 6.0 为什么引入多线程？"></a>4. Redis 6.0 为什么引入多线程？</h2><h3 id="4-1-引入原因"><a href="#4-1-引入原因" class="headerlink" title="4.1 引入原因"></a>4.1 引入原因</h3><ul><li><strong>网络 I/O 瓶颈</strong>：随着网络带宽的提升，单线程处理网络 I/O 成为性能瓶颈</li><li><strong>多核利用</strong>：现代服务器普遍是多核的，单线程无法充分利用硬件资源</li><li><strong>大数据包处理</strong>：对于大数据包的解析和组装，多线程可以提供更好的性能</li></ul><h3 id="4-2-多线程实现"><a href="#4-2-多线程实现" class="headerlink" title="4.2 多线程实现"></a>4.2 多线程实现</h3><p>Redis 6.0 的多线程实现特点：</p><ul><li><strong>I/O 多线程</strong>：只针对网络 I/O 实现多线程</li><li><strong>命令处理单线程</strong>：核心命令处理仍然是单线程的</li><li><strong>可配置</strong>：多线程特性可以通过配置开启或关闭</li></ul><h3 id="4-3-性能提升"><a href="#4-3-性能提升" class="headerlink" title="4.3 性能提升"></a>4.3 性能提升</h3><p>多线程带来的性能改进：</p><ul><li>在网络 I/O 密集场景下，性能提升显著（提升 30% - 50%）</li><li>对于小数据包，提升效果可能不明显</li><li>在大数据包场景下，性能提升更为明显</li></ul><h2 id="5-最佳实践建议"><a href="#5-最佳实践建议" class="headerlink" title="5. 最佳实践建议"></a>5. 最佳实践建议</h2><h3 id="5-1-版本选择"><a href="#5-1-版本选择" class="headerlink" title="5.1 版本选择"></a>5.1 版本选择</h3><ul><li>如果主要处理小数据包，Redis 6.0 之前的版本足够使用</li><li>如果有大量网络 I/O 或大数据包处理需求，建议使用 Redis 6.0 及以上版本</li></ul><h3 id="5-2-多线程配置"><a href="#5-2-多线程配置" class="headerlink" title="5.2 多线程配置"></a>5.2 多线程配置</h3><ul><li>根据服务器 CPU 核心数合理配置线程数</li><li>建议线程数不要超过 CPU 核心数</li><li>可以通过压测确定最优的线程数配置</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://redis.io/documentation">Redis 官方文档</a></li><li><a href="https://raw.githubusercontent.com/redis/redis/6.0/00-RELEASENOTES">Redis 6.0 Release Notes</a></li></ul><hr><p>希望这篇文章能帮助您更好地理解 Redis 的线程模型及其演进历程。如果您有任何问题，欢迎在评论区讨论！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;Redis 作为一个高性能的内存数据库，其线程模型设计一直是开发者关注的焦点。从最初的单线程设计到 Redis 6.0 引入</summary>
      
    
    
    
    <category term="数据库" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/"/>
    
    
    <category term="数据库" scheme="https://lucky845.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis" scheme="https://lucky845.github.io/tags/Redis/"/>
    
    <category term="性能优化" scheme="https://lucky845.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="线程模型" scheme="https://lucky845.github.io/tags/%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/"/>
    
    <category term="并发处理" scheme="https://lucky845.github.io/tags/%E5%B9%B6%E5%8F%91%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>【Redis】哨兵模式详解与实践</title>
    <link href="https://lucky845.github.io/archives/c55fa584.html"/>
    <id>https://lucky845.github.io/archives/c55fa584.html</id>
    <published>2025-03-01T06:00:00.000Z</published>
    <updated>2025-03-01T09:54:52.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>Redis 是一个高性能的内存数据库，在生产环境中通常需要保证其高可用性。当使用主从复制时，如果主节点发生故障，需要手动将从节点提升为主节点，这个过程繁琐且容易出错。Redis 哨兵（Sentinel）模式提供了自动故障检测和故障转移功能，能够在主节点故障时自动选举新的主节点，保证系统的高可用性。本文将详细介绍 Redis 哨兵模式的工作原理、配置方法及最佳实践。</p><h2 id="1-Redis-哨兵模式基本概念"><a href="#1-Redis-哨兵模式基本概念" class="headerlink" title="1. Redis 哨兵模式基本概念"></a>1. Redis 哨兵模式基本概念</h2><p>Redis 哨兵是 Redis 高可用性解决方案的核心组件，它是一个独立运行的进程，负责监控 Redis 主从实例的健康状态，并在主节点故障时自动进行故障转移。哨兵模式的主要特点包括：</p><ul><li><strong>自动故障检测</strong>：哨兵会定期检查主节点和从节点的健康状态。</li><li><strong>自动故障转移</strong>：当主节点不可用时，哨兵会自动选举一个从节点作为新的主节点。</li><li><strong>客户端通知</strong>：哨兵会通知客户端新主节点的地址，使客户端能够连接到新的主节点。</li><li><strong>配置提供者</strong>：哨兵可以为客户端提供服务发现功能，帮助客户端找到当前的主节点。</li></ul><h2 id="2-哨兵模式的工作原理"><a href="#2-哨兵模式的工作原理" class="headerlink" title="2. 哨兵模式的工作原理"></a>2. 哨兵模式的工作原理</h2><h3 id="2-1-监控（Monitoring）"><a href="#2-1-监控（Monitoring）" class="headerlink" title="2.1 监控（Monitoring）"></a>2.1 监控（Monitoring）</h3><p>哨兵会定期向主节点和从节点发送 PING 命令，检查它们是否正常运行。如果在指定的时间内没有收到有效回复，哨兵会将该实例标记为「主观下线」（Subjectively Down，简称 SDOWN）。</p><h3 id="2-2-通知（Notification）"><a href="#2-2-通知（Notification）" class="headerlink" title="2.2 通知（Notification）"></a>2.2 通知（Notification）</h3><p>当哨兵发现主节点或从节点处于「主观下线」状态时，会通过发布/订阅机制通知其他哨兵。如果多个哨兵都认为主节点已经下线，那么主节点会被标记为「客观下线」（Objectively Down，简称 ODOWN）。</p><h3 id="2-3-故障转移（Failover）"><a href="#2-3-故障转移（Failover）" class="headerlink" title="2.3 故障转移（Failover）"></a>2.3 故障转移（Failover）</h3><p>当主节点被标记为「客观下线」后，哨兵会进行以下操作：</p><ol><li><strong>选举领导者</strong>：哨兵集群会选举一个领导者来执行故障转移操作。</li><li><strong>选择新的主节点</strong>：领导者会从从节点中选择一个最适合的节点作为新的主节点。</li><li><strong>配置从节点</strong>：将其他从节点重新配置为新主节点的从节点。</li><li><strong>通知客户端</strong>：通知客户端新主节点的地址。</li></ol><h2 id="3-哨兵模式的配置"><a href="#3-哨兵模式的配置" class="headerlink" title="3. 哨兵模式的配置"></a>3. 哨兵模式的配置</h2><h3 id="3-1-环境准备"><a href="#3-1-环境准备" class="headerlink" title="3.1 环境准备"></a>3.1 环境准备</h3><p>在配置哨兵模式之前，您需要准备以下环境：</p><ul><li>一个 Redis 主节点</li><li>至少一个 Redis 从节点（推荐至少两个）</li><li>至少三个哨兵实例（推荐奇数个）</li></ul><h3 id="3-2-配置主从复制"><a href="#3-2-配置主从复制" class="headerlink" title="3.2 配置主从复制"></a>3.2 配置主从复制</h3><p>首先，需要配置 Redis 的主从复制。在从节点的配置文件中添加以下配置：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># 配置主节点的地址和端口replicaof 192.168.1.100 6379# 如果主节点设置了密码，需要配置密码masterauth your_master_password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-配置哨兵"><a href="#3-3-配置哨兵" class="headerlink" title="3.3 配置哨兵"></a>3.3 配置哨兵</h3><p>创建一个 <code>sentinel.conf</code> 配置文件，添加以下配置：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># 监听端口port 26379# 指定工作目录dir /tmp# 监控的主节点# sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;port&gt; &lt;quorum&gt;sentinel monitor mymaster 192.168.1.100 6379 2# 主节点或从节点多久无响应视为下线（毫秒）sentinel down-after-milliseconds mymaster 30000# 故障转移超时时间（毫秒）sentinel failover-timeout mymaster 180000# 同时进行故障转移的从节点数量sentinel parallel-syncs mymaster 1# 如果主节点有密码，需要配置密码sentinel auth-pass mymaster your_master_password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置说明：</p><ul><li><code>sentinel monitor mymaster 192.168.1.100 6379 2</code>：监控名为 mymaster 的主节点，IP 为 192.168.1.100，端口为 6379，当至少有 2 个哨兵认为主节点不可用时，才会进行故障转移。</li><li><code>sentinel down-after-milliseconds mymaster 30000</code>：如果主节点在 30 秒内没有响应，则认为主节点已下线。</li><li><code>sentinel failover-timeout mymaster 180000</code>：故障转移的超时时间为 180 秒。</li><li><code>sentinel parallel-syncs mymaster 1</code>：在故障转移期间，每次只能有 1 个从节点进行同步。</li></ul><h3 id="3-4-启动哨兵"><a href="#3-4-启动哨兵" class="headerlink" title="3.4 启动哨兵"></a>3.4 启动哨兵</h3><p>使用以下命令启动哨兵：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-sentinel /path/to/sentinel.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-server /path/to/sentinel.conf <span class="token parameter variable">--sentinel</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-哨兵模式的实际部署"><a href="#4-哨兵模式的实际部署" class="headerlink" title="4. 哨兵模式的实际部署"></a>4. 哨兵模式的实际部署</h2><h3 id="4-1-Docker-环境下的部署"><a href="#4-1-Docker-环境下的部署" class="headerlink" title="4.1 Docker 环境下的部署"></a>4.1 Docker 环境下的部署</h3><p>在 Docker 环境中部署 Redis 哨兵模式，可以使用 Docker Compose 来简化配置。以下是一个示例的 <code>docker-compose.yml</code> 文件：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">redis-master</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>master    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"6379:6379"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./redis<span class="token punctuation">-</span>master.conf<span class="token punctuation">:</span>/usr/local/etc/redis/redis.conf    <span class="token key atrule">command</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>server /usr/local/etc/redis/redis.conf  <span class="token key atrule">redis-slave-1</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>slave<span class="token punctuation">-</span><span class="token number">1</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"6380:6379"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./redis<span class="token punctuation">-</span>slave<span class="token punctuation">-</span>1.conf<span class="token punctuation">:</span>/usr/local/etc/redis/redis.conf    <span class="token key atrule">command</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>server /usr/local/etc/redis/redis.conf    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> redis<span class="token punctuation">-</span>master  <span class="token key atrule">redis-slave-2</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>slave<span class="token punctuation">-</span><span class="token number">2</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"6381:6379"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./redis<span class="token punctuation">-</span>slave<span class="token punctuation">-</span>2.conf<span class="token punctuation">:</span>/usr/local/etc/redis/redis.conf    <span class="token key atrule">command</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>server /usr/local/etc/redis/redis.conf    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> redis<span class="token punctuation">-</span>master  <span class="token key atrule">redis-sentinel-1</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>sentinel<span class="token punctuation">-</span><span class="token number">1</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"26379:26379"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./sentinel<span class="token punctuation">-</span>1.conf<span class="token punctuation">:</span>/usr/local/etc/redis/sentinel.conf    <span class="token key atrule">command</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>sentinel /usr/local/etc/redis/sentinel.conf    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> redis<span class="token punctuation">-</span>master      <span class="token punctuation">-</span> redis<span class="token punctuation">-</span>slave<span class="token punctuation">-</span><span class="token number">1</span>      <span class="token punctuation">-</span> redis<span class="token punctuation">-</span>slave<span class="token punctuation">-</span><span class="token number">2</span>  <span class="token key atrule">redis-sentinel-2</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>sentinel<span class="token punctuation">-</span><span class="token number">2</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"26380:26379"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./sentinel<span class="token punctuation">-</span>2.conf<span class="token punctuation">:</span>/usr/local/etc/redis/sentinel.conf    <span class="token key atrule">command</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>sentinel /usr/local/etc/redis/sentinel.conf    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> redis<span class="token punctuation">-</span>master      <span class="token punctuation">-</span> redis<span class="token punctuation">-</span>slave<span class="token punctuation">-</span><span class="token number">1</span>      <span class="token punctuation">-</span> redis<span class="token punctuation">-</span>slave<span class="token punctuation">-</span><span class="token number">2</span>  <span class="token key atrule">redis-sentinel-3</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>sentinel<span class="token punctuation">-</span><span class="token number">3</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"26381:26379"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./sentinel<span class="token punctuation">-</span>3.conf<span class="token punctuation">:</span>/usr/local/etc/redis/sentinel.conf    <span class="token key atrule">command</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>sentinel /usr/local/etc/redis/sentinel.conf    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> redis<span class="token punctuation">-</span>master      <span class="token punctuation">-</span> redis<span class="token punctuation">-</span>slave<span class="token punctuation">-</span><span class="token number">1</span>      <span class="token punctuation">-</span> redis<span class="token punctuation">-</span>slave<span class="token punctuation">-</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-客户端连接"><a href="#4-2-客户端连接" class="headerlink" title="4.2 客户端连接"></a>4.2 客户端连接</h3><p>在 Java 应用中使用 Jedis 连接 Redis 哨兵模式的示例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">JedisSentinelPool</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisSentinelExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 配置哨兵信息</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> sentinels <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sentinels<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"192.168.1.100:26379"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sentinels<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"192.168.1.101:26379"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sentinels<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"192.168.1.102:26379"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 创建哨兵连接池</span>        <span class="token class-name">JedisSentinelPool</span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisSentinelPool</span><span class="token punctuation">(</span><span class="token string">"mymaster"</span><span class="token punctuation">,</span> sentinels<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 获取 Jedis 实例</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 执行操作</span>            jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> value <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment">// 关闭连接池</span>            pool<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-哨兵模式的最佳实践"><a href="#5-哨兵模式的最佳实践" class="headerlink" title="5. 哨兵模式的最佳实践"></a>5. 哨兵模式的最佳实践</h2><h3 id="5-1-哨兵数量"><a href="#5-1-哨兵数量" class="headerlink" title="5.1 哨兵数量"></a>5.1 哨兵数量</h3><p>建议至少部署 3 个哨兵实例，并且使用奇数个哨兵，以便在选举过程中避免平票情况。哨兵实例应该部署在不同的物理机器上，以提高可用性。</p><h3 id="5-2-配置优化"><a href="#5-2-配置优化" class="headerlink" title="5.2 配置优化"></a>5.2 配置优化</h3><ul><li><strong>合理设置 down-after-milliseconds</strong>：根据网络环境和业务需求，设置合适的主观下线时间。</li><li><strong>调整 parallel-syncs</strong>：如果从节点较多，可以适当增加 parallel-syncs 的值，加快故障转移速度。</li><li><strong>配置 notification-script</strong>：可以配置通知脚本，在故障转移时发送通知。</li></ul><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">sentinel notification-script mymaster /path/to/notification.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-3-监控与维护"><a href="#5-3-监控与维护" class="headerlink" title="5.3 监控与维护"></a>5.3 监控与维护</h3><ul><li>定期检查哨兵日志，了解哨兵的运行状态。</li><li>使用 Redis 的 INFO 命令监控主从复制的状态。</li><li>定期进行故障演练，确保哨兵能够正常进行故障转移。</li></ul><h2 id="6-哨兵模式与集群模式的比较"><a href="#6-哨兵模式与集群模式的比较" class="headerlink" title="6. 哨兵模式与集群模式的比较"></a>6. 哨兵模式与集群模式的比较</h2><table><thead><tr><th>特性</th><th>哨兵模式</th><th>集群模式</th></tr></thead><tbody><tr><td>数据分片</td><td>不支持</td><td>支持</td></tr><tr><td>自动故障转移</td><td>支持</td><td>支持</td></tr><tr><td>扩展性</td><td>有限</td><td>高</td></tr><tr><td>配置复杂度</td><td>中等</td><td>高</td></tr><tr><td>适用场景</td><td>数据量较小，主要需要高可用性</td><td>数据量大，需要水平扩展</td></tr></tbody></table><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://redis.io/topics/sentinel">Redis Sentinel Documentation</a></li><li><a href="https://redis.io/documentation">Redis 官方文档</a></li><li><a href="https://redis.io/topics/high-availability">Redis 高可用解决方案</a></li></ul><hr><p>希望这篇文章能帮助您更好地理解和配置 Redis 哨兵模式。如果您有任何问题，欢迎在评论区讨论！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;Redis 是一个高性能的内存数据库，在生产环境中通常需要保证其高可用性。当使用主从复制时，如果主节点发生故障，需要手动将从</summary>
      
    
    
    
    <category term="数据库" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/"/>
    
    
    <category term="数据库" scheme="https://lucky845.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis" scheme="https://lucky845.github.io/tags/Redis/"/>
    
    <category term="分布式系统" scheme="https://lucky845.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="哨兵模式" scheme="https://lucky845.github.io/tags/%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="高可用" scheme="https://lucky845.github.io/tags/%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>【Docker】部署RocketMQ完全指南</title>
    <link href="https://lucky845.github.io/archives/d55fa599.html"/>
    <id>https://lucky845.github.io/archives/d55fa599.html</id>
    <published>2025-02-28T09:00:00.000Z</published>
    <updated>2025-02-28T12:52:46.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>RocketMQ 是阿里巴巴开源的分布式消息中间件，具有高吞吐量、低延迟、高可靠性等特点，广泛应用于大规模分布式系统中的消息传递和处理。传统部署 RocketMQ 需要处理复杂的依赖关系和配置，而使用 Docker 可以大幅简化这一过程。本文将详细介绍如何使用 Docker 部署 RocketMQ，包括单节点部署和集群部署方案。</p><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><h3 id="1-1-系统要求"><a href="#1-1-系统要求" class="headerlink" title="1.1 系统要求"></a>1.1 系统要求</h3><ul><li>Docker Engine 19.03+</li><li>Docker Compose 1.25+（可选，用于多容器编排）</li><li>至少 4GB 可用内存（生产环境建议 8GB+）</li><li>足够的磁盘空间（建议 20GB+）</li></ul><h3 id="1-2-RocketMQ-组件介绍"><a href="#1-2-RocketMQ-组件介绍" class="headerlink" title="1.2 RocketMQ 组件介绍"></a>1.2 RocketMQ 组件介绍</h3><p>RocketMQ 主要包含以下几个组件：</p><ul><li><strong>NameServer</strong>：注册中心，存储 Broker 的路由信息</li><li><strong>Broker</strong>：消息存储和转发服务器</li><li><strong>Producer</strong>：消息生产者，负责发送消息</li><li><strong>Consumer</strong>：消息消费者，负责接收和处理消息</li><li><strong>Dashboard</strong>：可视化管理控制台（可选）</li></ul><h2 id="2-单节点部署"><a href="#2-单节点部署" class="headerlink" title="2. 单节点部署"></a>2. 单节点部署</h2><h3 id="2-1-使用-Docker-命令部署-RocketMQ"><a href="#2-1-使用-Docker-命令部署-RocketMQ" class="headerlink" title="2.1 使用 Docker 命令部署 RocketMQ"></a>2.1 使用 Docker 命令部署 RocketMQ</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建数据目录</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/rocketmq/namesrv/logs<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/rocketmq/namesrv/store<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/rocketmq/broker/logs<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/rocketmq/broker/store<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/rocketmq/conf<span class="token comment"># 创建配置文件</span><span class="token function">cat</span> <span class="token operator">&gt;</span> /data/rocketmq/conf/broker.conf <span class="token operator">&lt;&lt;</span> <span class="token string">EOFbrokerClusterName = DefaultClusterbrokerName = broker-abrokerId = 0deleteWhen = 04fileReservedTime = 48brokerRole = ASYNC_MASTERflushDiskType = ASYNC_FLUSH# 设置为当前主机IP，不要使用localhost或127.0.0.1brokerIP1 = 宿主机IP地址EOF</span><span class="token comment"># 运行 NameServer</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--name</span> rmqnamesrv <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">9876</span>:9876 <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /data/rocketmq/namesrv/logs:/root/logs <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /data/rocketmq/namesrv/store:/root/store <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token string">"MAX_HEAP_SIZE=256M"</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token string">"JAVA_OPT_EXT=-Xms128m -Xmx128m -Xmn64m"</span> <span class="token punctuation">\</span>  apache/rocketmq:5.1.0 <span class="token punctuation">\</span>  <span class="token function">sh</span> mqnamesrv<span class="token comment"># 运行 Broker</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--name</span> rmqbroker <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">10909</span>:10909 <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">10911</span>:10911 <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">10912</span>:10912 <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /data/rocketmq/broker/logs:/root/logs <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /data/rocketmq/broker/store:/root/store <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /data/rocketmq/conf/broker.conf:/opt/rocketmq/conf/broker.conf <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token string">"NAMESRV_ADDR=rmqnamesrv:9876"</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token string">"MAX_HEAP_SIZE=512M"</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token string">"JAVA_OPT_EXT=-Xms256m -Xmx256m -Xmn128m"</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--link</span> rmqnamesrv:rmqnamesrv <span class="token punctuation">\</span>  apache/rocketmq:5.1.0 <span class="token punctuation">\</span>  <span class="token function">sh</span> mqbroker <span class="token parameter variable">-c</span> /opt/rocketmq/conf/broker.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明：</p><ul><li><code>-p 9876:9876</code>：NameServer 端口</li><li><code>-p 10909:10909</code>、<code>-p 10911:10911</code>、<code>-p 10912:10912</code>：Broker 端口</li><li><code>-v /data/rocketmq/namesrv/logs:/root/logs</code>：日志持久化</li><li><code>-v /data/rocketmq/namesrv/store:/root/store</code>：数据持久化</li><li><code>-e "MAX_HEAP_SIZE=256M"</code>：设置最大堆内存</li><li><code>-e "JAVA_OPT_EXT=-Xms128m -Xmx128m -Xmn64m"</code>：JVM 参数</li></ul><h3 id="2-2-验证部署"><a href="#2-2-验证部署" class="headerlink" title="2.2 验证部署"></a>2.2 验证部署</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 检查容器是否正常运行</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token operator">|</span> <span class="token function">grep</span> rocketmq<span class="token comment"># 查看 NameServer 日志</span><span class="token function">docker</span> logs rmqnamesrv<span class="token comment"># 查看 Broker 日志</span><span class="token function">docker</span> logs rmqbroker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-使用-Docker-Compose-部署"><a href="#3-使用-Docker-Compose-部署" class="headerlink" title="3. 使用 Docker Compose 部署"></a>3. 使用 Docker Compose 部署</h2><h3 id="3-1-创建-docker-compose-yml"><a href="#3-1-创建-docker-compose-yml" class="headerlink" title="3.1 创建 docker-compose.yml"></a>3.1 创建 docker-compose.yml</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">namesrv</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> apache/rocketmq<span class="token punctuation">:</span>5.1.0    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rmqnamesrv    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 9876<span class="token punctuation">:</span><span class="token number">9876</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./data/namesrv/logs<span class="token punctuation">:</span>/root/logs      <span class="token punctuation">-</span> ./data/namesrv/store<span class="token punctuation">:</span>/root/store    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> MAX_HEAP_SIZE=256M      <span class="token punctuation">-</span> JAVA_OPT_EXT=<span class="token punctuation">-</span>Xms128m <span class="token punctuation">-</span>Xmx128m <span class="token punctuation">-</span>Xmn64m    <span class="token key atrule">command</span><span class="token punctuation">:</span> sh mqnamesrv  <span class="token key atrule">broker</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> apache/rocketmq<span class="token punctuation">:</span>5.1.0    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rmqbroker    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 10909<span class="token punctuation">:</span><span class="token number">10909</span>      <span class="token punctuation">-</span> 10911<span class="token punctuation">:</span><span class="token number">10911</span>      <span class="token punctuation">-</span> 10912<span class="token punctuation">:</span><span class="token number">10912</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./data/broker/logs<span class="token punctuation">:</span>/root/logs      <span class="token punctuation">-</span> ./data/broker/store<span class="token punctuation">:</span>/root/store      <span class="token punctuation">-</span> ./conf/broker.conf<span class="token punctuation">:</span>/opt/rocketmq/conf/broker.conf    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> NAMESRV_ADDR=namesrv<span class="token punctuation">:</span><span class="token number">9876</span>      <span class="token punctuation">-</span> MAX_HEAP_SIZE=512M      <span class="token punctuation">-</span> JAVA_OPT_EXT=<span class="token punctuation">-</span>Xms256m <span class="token punctuation">-</span>Xmx256m <span class="token punctuation">-</span>Xmn128m    <span class="token key atrule">command</span><span class="token punctuation">:</span> sh mqbroker <span class="token punctuation">-</span>c /opt/rocketmq/conf/broker.conf    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> namesrv  <span class="token key atrule">dashboard</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> apacherocketmq/rocketmq<span class="token punctuation">-</span>dashboard<span class="token punctuation">:</span>1.0.0    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rmqdashboard    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 8080<span class="token punctuation">:</span><span class="token number">8080</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> JAVA_OPTS=<span class="token punctuation">-</span>Drocketmq.namesrv.addr=namesrv<span class="token punctuation">:</span><span class="token number">9876</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> namesrv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-创建-broker-conf-配置文件"><a href="#3-2-创建-broker-conf-配置文件" class="headerlink" title="3.2 创建 broker.conf 配置文件"></a>3.2 创建 broker.conf 配置文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> conf<span class="token function">cat</span> <span class="token operator">&gt;</span> conf/broker.conf <span class="token operator">&lt;&lt;</span> <span class="token string">EOFbrokerClusterName = DefaultClusterbrokerName = broker-abrokerId = 0deleteWhen = 04fileReservedTime = 48brokerRole = ASYNC_MASTERflushDiskType = ASYNC_FLUSH# 设置为当前主机IP，不要使用localhost或127.0.0.1brokerIP1 = 宿主机IP地址EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-启动服务"><a href="#3-3-启动服务" class="headerlink" title="3.3 启动服务"></a>3.3 启动服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-4-访问控制台"><a href="#3-4-访问控制台" class="headerlink" title="3.4 访问控制台"></a>3.4 访问控制台</h3><p>在浏览器中打开 <code>http://localhost:8080</code>，即可访问 RocketMQ Dashboard。</p><h2 id="4-RocketMQ-集群部署"><a href="#4-RocketMQ-集群部署" class="headerlink" title="4. RocketMQ 集群部署"></a>4. RocketMQ 集群部署</h2><h3 id="4-1-创建集群的-docker-compose-yml"><a href="#4-1-创建集群的-docker-compose-yml" class="headerlink" title="4.1 创建集群的 docker-compose.yml"></a>4.1 创建集群的 docker-compose.yml</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">namesrv1</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> apache/rocketmq<span class="token punctuation">:</span>5.1.0    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rmqnamesrv1    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 9876<span class="token punctuation">:</span><span class="token number">9876</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./data/namesrv1/logs<span class="token punctuation">:</span>/root/logs      <span class="token punctuation">-</span> ./data/namesrv1/store<span class="token punctuation">:</span>/root/store    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> MAX_HEAP_SIZE=256M      <span class="token punctuation">-</span> JAVA_OPT_EXT=<span class="token punctuation">-</span>Xms128m <span class="token punctuation">-</span>Xmx128m <span class="token punctuation">-</span>Xmn64m    <span class="token key atrule">command</span><span class="token punctuation">:</span> sh mqnamesrv  <span class="token key atrule">namesrv2</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> apache/rocketmq<span class="token punctuation">:</span>5.1.0    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rmqnamesrv2    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 9877<span class="token punctuation">:</span><span class="token number">9876</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./data/namesrv2/logs<span class="token punctuation">:</span>/root/logs      <span class="token punctuation">-</span> ./data/namesrv2/store<span class="token punctuation">:</span>/root/store    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> MAX_HEAP_SIZE=256M      <span class="token punctuation">-</span> JAVA_OPT_EXT=<span class="token punctuation">-</span>Xms128m <span class="token punctuation">-</span>Xmx128m <span class="token punctuation">-</span>Xmn64m    <span class="token key atrule">command</span><span class="token punctuation">:</span> sh mqnamesrv  <span class="token key atrule">broker-a-master</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> apache/rocketmq<span class="token punctuation">:</span>5.1.0    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rmqbroker<span class="token punctuation">-</span>a<span class="token punctuation">-</span>master    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 10909<span class="token punctuation">:</span><span class="token number">10909</span>      <span class="token punctuation">-</span> 10911<span class="token punctuation">:</span><span class="token number">10911</span>      <span class="token punctuation">-</span> 10912<span class="token punctuation">:</span><span class="token number">10912</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./data/broker<span class="token punctuation">-</span>a<span class="token punctuation">-</span>master/logs<span class="token punctuation">:</span>/root/logs      <span class="token punctuation">-</span> ./data/broker<span class="token punctuation">-</span>a<span class="token punctuation">-</span>master/store<span class="token punctuation">:</span>/root/store      <span class="token punctuation">-</span> ./conf/broker<span class="token punctuation">-</span>a<span class="token punctuation">-</span>master.conf<span class="token punctuation">:</span>/opt/rocketmq/conf/broker.conf    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> NAMESRV_ADDR=namesrv1<span class="token punctuation">:</span>9876;namesrv2<span class="token punctuation">:</span><span class="token number">9876</span>      <span class="token punctuation">-</span> MAX_HEAP_SIZE=512M      <span class="token punctuation">-</span> JAVA_OPT_EXT=<span class="token punctuation">-</span>Xms256m <span class="token punctuation">-</span>Xmx256m <span class="token punctuation">-</span>Xmn128m    <span class="token key atrule">command</span><span class="token punctuation">:</span> sh mqbroker <span class="token punctuation">-</span>c /opt/rocketmq/conf/broker.conf    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> namesrv1      <span class="token punctuation">-</span> namesrv2  <span class="token key atrule">broker-a-slave</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> apache/rocketmq<span class="token punctuation">:</span>5.1.0    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rmqbroker<span class="token punctuation">-</span>a<span class="token punctuation">-</span>slave    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 10919<span class="token punctuation">:</span><span class="token number">10909</span>      <span class="token punctuation">-</span> 10921<span class="token punctuation">:</span><span class="token number">10911</span>      <span class="token punctuation">-</span> 10922<span class="token punctuation">:</span><span class="token number">10912</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./data/broker<span class="token punctuation">-</span>a<span class="token punctuation">-</span>slave/logs<span class="token punctuation">:</span>/root/logs      <span class="token punctuation">-</span> ./data/broker<span class="token punctuation">-</span>a<span class="token punctuation">-</span>slave/store<span class="token punctuation">:</span>/root/store      <span class="token punctuation">-</span> ./conf/broker<span class="token punctuation">-</span>a<span class="token punctuation">-</span>slave.conf<span class="token punctuation">:</span>/opt/rocketmq/conf/broker.conf    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> NAMESRV_ADDR=namesrv1<span class="token punctuation">:</span>9876;namesrv2<span class="token punctuation">:</span><span class="token number">9876</span>      <span class="token punctuation">-</span> MAX_HEAP_SIZE=512M      <span class="token punctuation">-</span> JAVA_OPT_EXT=<span class="token punctuation">-</span>Xms256m <span class="token punctuation">-</span>Xmx256m <span class="token punctuation">-</span>Xmn128m    <span class="token key atrule">command</span><span class="token punctuation">:</span> sh mqbroker <span class="token punctuation">-</span>c /opt/rocketmq/conf/broker.conf    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> namesrv1      <span class="token punctuation">-</span> namesrv2      <span class="token punctuation">-</span> broker<span class="token punctuation">-</span>a<span class="token punctuation">-</span>master  <span class="token key atrule">broker-b-master</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> apache/rocketmq<span class="token punctuation">:</span>5.1.0    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rmqbroker<span class="token punctuation">-</span>b<span class="token punctuation">-</span>master    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 10929<span class="token punctuation">:</span><span class="token number">10909</span>      <span class="token punctuation">-</span> 10931<span class="token punctuation">:</span><span class="token number">10911</span>      <span class="token punctuation">-</span> 10932<span class="token punctuation">:</span><span class="token number">10912</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./data/broker<span class="token punctuation">-</span>b<span class="token punctuation">-</span>master/logs<span class="token punctuation">:</span>/root/logs      <span class="token punctuation">-</span> ./data/broker<span class="token punctuation">-</span>b<span class="token punctuation">-</span>master/store<span class="token punctuation">:</span>/root/store      <span class="token punctuation">-</span> ./conf/broker<span class="token punctuation">-</span>b<span class="token punctuation">-</span>master.conf<span class="token punctuation">:</span>/opt/rocketmq/conf/broker.conf    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> NAMESRV_ADDR=namesrv1<span class="token punctuation">:</span>9876;namesrv2<span class="token punctuation">:</span><span class="token number">9876</span>      <span class="token punctuation">-</span> MAX_HEAP_SIZE=512M      <span class="token punctuation">-</span> JAVA_OPT_EXT=<span class="token punctuation">-</span>Xms256m <span class="token punctuation">-</span>Xmx256m <span class="token punctuation">-</span>Xmn128m    <span class="token key atrule">command</span><span class="token punctuation">:</span> sh mqbroker <span class="token punctuation">-</span>c /opt/rocketmq/conf/broker.conf    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> namesrv1      <span class="token punctuation">-</span> namesrv2  <span class="token key atrule">broker-b-slave</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> apache/rocketmq<span class="token punctuation">:</span>5.1.0    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rmqbroker<span class="token punctuation">-</span>b<span class="token punctuation">-</span>slave    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 10939<span class="token punctuation">:</span><span class="token number">10909</span>      <span class="token punctuation">-</span> 10941<span class="token punctuation">:</span><span class="token number">10911</span>      <span class="token punctuation">-</span> 10942<span class="token punctuation">:</span><span class="token number">10912</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./data/broker<span class="token punctuation">-</span>b<span class="token punctuation">-</span>slave/logs<span class="token punctuation">:</span>/root/logs      <span class="token punctuation">-</span> ./data/broker<span class="token punctuation">-</span>b<span class="token punctuation">-</span>slave/store<span class="token punctuation">:</span>/root/store      <span class="token punctuation">-</span> ./conf/broker<span class="token punctuation">-</span>b<span class="token punctuation">-</span>slave.conf<span class="token punctuation">:</span>/opt/rocketmq/conf/broker.conf    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> NAMESRV_ADDR=namesrv1<span class="token punctuation">:</span>9876;namesrv2<span class="token punctuation">:</span><span class="token number">9876</span>      <span class="token punctuation">-</span> MAX_HEAP_SIZE=512M      <span class="token punctuation">-</span> JAVA_OPT_EXT=<span class="token punctuation">-</span>Xms256m <span class="token punctuation">-</span>Xmx256m <span class="token punctuation">-</span>Xmn128m    <span class="token key atrule">command</span><span class="token punctuation">:</span> sh mqbroker <span class="token punctuation">-</span>c /opt/rocketmq/conf/broker.conf    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> namesrv1      <span class="token punctuation">-</span> namesrv2      <span class="token punctuation">-</span> broker<span class="token punctuation">-</span>b<span class="token punctuation">-</span>master  <span class="token key atrule">dashboard</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> apacherocketmq/rocketmq<span class="token punctuation">-</span>dashboard<span class="token punctuation">:</span>1.0.0    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rmqdashboard    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 8080<span class="token punctuation">:</span><span class="token number">8080</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> JAVA_OPTS=<span class="token punctuation">-</span>Drocketmq.namesrv.addr=namesrv1<span class="token punctuation">:</span>9876;namesrv2<span class="token punctuation">:</span><span class="token number">9876</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> namesrv1      <span class="token punctuation">-</span> namesrv2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-创建-Broker-配置文件"><a href="#4-2-创建-Broker-配置文件" class="headerlink" title="4.2 创建 Broker 配置文件"></a>4.2 创建 Broker 配置文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># broker-a-master.conf</span><span class="token function">cat</span> <span class="token operator">&gt;</span> conf/broker-a-master.conf <span class="token operator">&lt;&lt;</span> <span class="token string">EOFbrokerClusterName = DefaultClusterbrokerName = broker-abrokerId = 0deleteWhen = 04fileReservedTime = 48brokerRole = ASYNC_MASTERflushDiskType = ASYNC_FLUSH# 设置为当前主机IP，不要使用localhost或127.0.0.1brokerIP1 = 宿主机IP地址EOF</span><span class="token comment"># broker-a-slave.conf</span><span class="token function">cat</span> <span class="token operator">&gt;</span> conf/broker-a-slave.conf <span class="token operator">&lt;&lt;</span> <span class="token string">EOFbrokerClusterName = DefaultClusterbrokerName = broker-abrokerId = 1deleteWhen = 04fileReservedTime = 48brokerRole = SLAVEflushDiskType = ASYNC_FLUSH# 设置为当前主机IP，不要使用localhost或127.0.0.1brokerIP1 = 宿主机IP地址# 指定主节点地址brokerMasterAddr = 宿主机IP地址:10911EOF</span><span class="token comment"># broker-b-master.conf</span><span class="token function">cat</span> <span class="token operator">&gt;</span> conf/broker-b-master.conf <span class="token operator">&lt;&lt;</span> <span class="token string">EOFbrokerClusterName = DefaultClusterbrokerName = broker-bbrokerId = 0deleteWhen = 04fileReservedTime = 48brokerRole = ASYNC_MASTERflushDiskType = ASYNC_FLUSH# 设置为当前主机IP，不要使用localhost或127.0.0.1brokerIP1 = 宿主机IP地址EOF</span><span class="token comment"># broker-b-slave.conf</span><span class="token function">cat</span> <span class="token operator">&gt;</span> conf/broker-b-slave.conf <span class="token operator">&lt;&lt;</span> <span class="token string">EOFbrokerClusterName = DefaultClusterbrokerName = broker-bbrokerId = 1deleteWhen = 04fileReservedTime = 48brokerRole = SLAVEflushDiskType = ASYNC_FLUSH# 设置为当前主机IP，不要使用localhost或127.0.0.1brokerIP1 = 宿主机IP地址# 指定主节点地址brokerMasterAddr = 宿主机IP地址:10931EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-启动集群"><a href="#4-3-启动集群" class="headerlink" title="4.3 启动集群"></a>4.3 启动集群</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建必要的数据目录</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> data/namesrv1/logs data/namesrv1/store <span class="token punctuation">\</span>         data/namesrv2/logs data/namesrv2/store <span class="token punctuation">\</span>         data/broker-a-master/logs data/broker-a-master/store <span class="token punctuation">\</span>         data/broker-a-slave/logs data/broker-a-slave/store <span class="token punctuation">\</span>         data/broker-b-master/logs data/broker-b-master/store <span class="token punctuation">\</span>         data/broker-b-slave/logs data/broker-b-slave/store<span class="token comment"># 启动集群</span><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-验证集群部署"><a href="#4-4-验证集群部署" class="headerlink" title="4.4 验证集群部署"></a>4.4 验证集群部署</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 检查所有容器是否正常运行</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token operator">|</span> <span class="token function">grep</span> rmq<span class="token comment"># 查看各节点日志</span><span class="token function">docker</span> logs rmqnamesrv1<span class="token function">docker</span> logs rmqbroker-a-master<span class="token function">docker</span> logs rmqbroker-a-slave<span class="token comment"># 使用Dashboard验证集群状态</span><span class="token comment"># 访问 http://localhost:8080</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-常见问题及解决方案"><a href="#5-常见问题及解决方案" class="headerlink" title="5. 常见问题及解决方案"></a>5. 常见问题及解决方案</h2><h3 id="5-1-Broker-无法连接到-NameServer"><a href="#5-1-Broker-无法连接到-NameServer" class="headerlink" title="5.1 Broker 无法连接到 NameServer"></a>5.1 Broker 无法连接到 NameServer</h3><p><strong>症状</strong>：Broker 容器启动后立即退出，或日志中显示无法连接到 NameServer。</p><p><strong>解决方案</strong>：</p><ol><li>检查网络连接，确保容器间可以通信</li><li>检查 <code>NAMESRV_ADDR</code> 环境变量是否正确设置</li><li>确保 NameServer 已经成功启动</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 检查网络连接</span><span class="token function">docker</span> network inspect bridge<span class="token comment"># 手动测试连接</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> rmqbroker <span class="token function">ping</span> rmqnamesrv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-brokerIP1-配置错误"><a href="#5-2-brokerIP1-配置错误" class="headerlink" title="5.2 brokerIP1 配置错误"></a>5.2 brokerIP1 配置错误</h3><p><strong>症状</strong>：Producer 或 Consumer 无法连接到 Broker，或连接后无法正常发送/接收消息。</p><p><strong>解决方案</strong>：</p><ol><li>确保 broker.conf 中的 brokerIP1 设置为宿主机的实际 IP 地址，而不是 127.0.0.1 或 localhost</li><li>修改配置后需要重启 Broker 容器</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 获取宿主机IP地址</span><span class="token function">ifconfig</span> <span class="token operator">|</span> <span class="token function">grep</span> inet<span class="token comment"># 更新配置并重启</span><span class="token function">docker</span> restart rmqbroker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-内存不足"><a href="#5-3-内存不足" class="headerlink" title="5.3 内存不足"></a>5.3 内存不足</h3><p><strong>症状</strong>：容器频繁重启，日志中出现 OutOfMemoryError。</p><p><strong>解决方案</strong>：</p><ol><li>调整 JVM 内存参数</li><li>增加宿主机可用内存</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 调整JVM参数示例</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--name</span> rmqbroker <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token string">"MAX_HEAP_SIZE=1G"</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token string">"JAVA_OPT_EXT=-Xms512m -Xmx512m -Xmn256m"</span> <span class="token punctuation">\</span>  <span class="token punctuation">..</span>. 其他参数 <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-性能调优"><a href="#6-性能调优" class="headerlink" title="6. 性能调优"></a>6. 性能调优</h2><h3 id="6-1-JVM-参数优化"><a href="#6-1-JVM-参数优化" class="headerlink" title="6.1 JVM 参数优化"></a>6.1 JVM 参数优化</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 生产环境推荐JVM参数</span><span class="token parameter variable">-Xms4g</span> <span class="token parameter variable">-Xmx4g</span> <span class="token parameter variable">-Xmn2g</span> <span class="token parameter variable">-XX:+UseG1GC</span> <span class="token parameter variable">-XX:G1HeapRegionSize</span><span class="token operator">=</span>16m <span class="token punctuation">\</span><span class="token parameter variable">-XX:G1ReservePercent</span><span class="token operator">=</span><span class="token number">25</span> <span class="token parameter variable">-XX:InitiatingHeapOccupancyPercent</span><span class="token operator">=</span><span class="token number">30</span> <span class="token punctuation">\</span><span class="token parameter variable">-XX:SoftRefLRUPolicyMSPerMB</span><span class="token operator">=</span><span class="token number">0</span> <span class="token parameter variable">-XX:SurvivorRatio</span><span class="token operator">=</span><span class="token number">8</span> <span class="token punctuation">\</span><span class="token parameter variable">-XX:MaxGCPauseMillis</span><span class="token operator">=</span><span class="token number">200</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-系统参数优化"><a href="#6-2-系统参数优化" class="headerlink" title="6.2 系统参数优化"></a>6.2 系统参数优化</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在宿主机上设置以下系统参数</span><span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">vm.max_map_count</span><span class="token operator">=</span><span class="token number">655360</span><span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">vm.swappiness</span><span class="token operator">=</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-3-Broker-参数优化"><a href="#6-3-Broker-参数优化" class="headerlink" title="6.3 Broker 参数优化"></a>6.3 Broker 参数优化</h3><pre class="line-numbers language-none"><code class="language-none"># broker.conf 性能优化参数flushDiskType = ASYNC_FLUSH  # 异步刷盘提高性能sendMessageThreadPoolNums = 16  # 发送消息线程池大小pullMessageThreadPoolNums = 16  # 拉取消息线程池大小processReplyMessageThreadPoolNums = 16  # 处理回复消息线程池大小<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-生产环境最佳实践"><a href="#7-生产环境最佳实践" class="headerlink" title="7. 生产环境最佳实践"></a>7. 生产环境最佳实践</h2><h3 id="7-1-高可用部署"><a href="#7-1-高可用部署" class="headerlink" title="7.1 高可用部署"></a>7.1 高可用部署</h3><ul><li>至少部署 2 个 NameServer 节点</li><li>每个 Broker 至少有一主一从</li><li>跨机器部署主从节点，避免单点故障</li><li>使用 Docker Swarm 或 Kubernetes 进行容器编排</li></ul><h3 id="7-2-监控告警"><a href="#7-2-监控告警" class="headerlink" title="7.2 监控告警"></a>7.2 监控告警</h3><ul><li>集成 Prometheus 和 Grafana 监控 RocketMQ 指标</li><li>设置关键指标告警，如消息堆积、磁盘使用率等</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Prometheus 配置示例</span><span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'rocketmq'</span>    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'rmqdashboard:8080'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3-数据持久化"><a href="#7-3-数据持久化" class="headerlink" title="7.3 数据持久化"></a>7.3 数据持久化</h3><ul><li>使用高性能存储设备存储消息数据</li><li>定期备份重要数据</li><li>考虑使用数据卷或网络存储提高可靠性</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 使用命名卷示例</span><span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> rocketmq<span class="token punctuation">-</span>namesrv<span class="token punctuation">-</span>data<span class="token punctuation">:</span>/root/store  <span class="token punctuation">-</span> rocketmq<span class="token punctuation">-</span>broker<span class="token punctuation">-</span>data<span class="token punctuation">:</span>/root/store<span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token key atrule">rocketmq-namesrv-data</span><span class="token punctuation">:</span>  rocketmq<span class="token punctuation">-</span>broker<span class="token punctuation">-</span>data<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-4-安全配置"><a href="#7-4-安全配置" class="headerlink" title="7.4 安全配置"></a>7.4 安全配置</h3><ul><li>启用 ACL 访问控制</li><li>配置 TLS 加密通信</li><li>限制容器网络访问</li></ul><pre class="line-numbers language-none"><code class="language-none"># broker.conf 安全配置aclEnable=truesslEnable=true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a>8. 总结</h2><p>本文详细介绍了如何使用 Docker 部署 RocketMQ，包括单节点部署和集群部署方案。通过容器化技术，我们可以快速搭建高可用的 RocketMQ 消息中间件服务，简化了传统部署的复杂性。在生产环境中，建议根据实际业务需求进行性能调优和安全配置，确保消息服务的稳定性和可靠性。</p><hr><p>希望这篇文章能帮助您更好地理解和使用Docker部署RocketMQ。如果您有任何问题，欢迎在评论区讨论！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;RocketMQ 是阿里巴巴开源的分布式消息中间件，具有高吞吐量、低延迟、高可靠性等特点，广泛应用于大规模分布式系统中的消息</summary>
      
    
    
    
    <category term="Linux" scheme="https://lucky845.github.io/categories/Linux/"/>
    
    <category term="Docker" scheme="https://lucky845.github.io/categories/Linux/Docker/"/>
    
    
    <category term="消息队列" scheme="https://lucky845.github.io/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    <category term="Docker" scheme="https://lucky845.github.io/tags/Docker/"/>
    
    <category term="容器化" scheme="https://lucky845.github.io/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
    <category term="RocketMQ" scheme="https://lucky845.github.io/tags/RocketMQ/"/>
    
    <category term="分布式系统" scheme="https://lucky845.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>【Docker】PostgreSQL部署与配置指南</title>
    <link href="https://lucky845.github.io/archives/e55fa599.html"/>
    <id>https://lucky845.github.io/archives/e55fa599.html</id>
    <published>2025-02-28T09:00:00.000Z</published>
    <updated>2025-02-28T12:39:37.119Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>PostgreSQL是一个功能强大的开源关系型数据库系统，以其可靠性、数据完整性和扩展性而闻名。在Docker环境中部署PostgreSQL不仅可以简化安装过程，还能提供更好的环境隔离和资源管理。本文将详细介绍如何使用Docker部署和配置PostgreSQL服务，包括单节点部署、性能优化以及常见问题的解决方案。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>在开始部署之前，请确保您的系统已经安装：</p><ul><li>Docker Engine (版本 20.10.0 或更高)</li><li>Docker Compose (可选，用于多容器部署)</li></ul><h2 id="单节点部署"><a href="#单节点部署" class="headerlink" title="单节点部署"></a>单节点部署</h2><h3 id="1-拉取PostgreSQL镜像"><a href="#1-拉取PostgreSQL镜像" class="headerlink" title="1. 拉取PostgreSQL镜像"></a>1. 拉取PostgreSQL镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 拉取官方PostgreSQL镜像</span><span class="token function">docker</span> pull postgres:15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-创建数据持久化目录"><a href="#2-创建数据持久化目录" class="headerlink" title="2. 创建数据持久化目录"></a>2. 创建数据持久化目录</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建本地目录用于数据持久化</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/postgresql/data<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/postgresql/conf<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/postgresql/logs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-配置PostgreSQL"><a href="#3-配置PostgreSQL" class="headerlink" title="3. 配置PostgreSQL"></a>3. 配置PostgreSQL</h3><p>创建自定义配置文件 <code>/data/postgresql/conf/postgresql.conf</code>：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># 基本配置listen_addresses = '*'max_connections = 100# 内存配置shared_buffers = 256MBwork_mem = 4MBmaintenance_work_mem = 64MB# WAL配置wal_level = replicamax_wal_size = 1GBmin_wal_size = 80MB# 查询优化effective_cache_size = 1GBrandom_page_cost = 1.1# 日志配置log_destination = 'stderr'logging_collector = onlog_directory = '/var/log/postgresql'log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'log_rotation_age = 1dlog_rotation_size = 10MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-启动PostgreSQL容器"><a href="#4-启动PostgreSQL容器" class="headerlink" title="4. 启动PostgreSQL容器"></a>4. 启动PostgreSQL容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 基本启动命令</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--name</span> postgresql <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">5432</span>:5432 <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token assign-left variable">POSTGRES_PASSWORD</span><span class="token operator">=</span>your_password <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token assign-left variable">POSTGRES_USER</span><span class="token operator">=</span>your_user <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token assign-left variable">POSTGRES_DB</span><span class="token operator">=</span>your_db <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /data/postgresql/data:/var/lib/postgresql/data <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /data/postgresql/conf/postgresql.conf:/etc/postgresql/postgresql.conf <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /data/postgresql/logs:/var/log/postgresql <span class="token punctuation">\</span>  <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\</span>  postgres:15 <span class="token punctuation">\</span>  <span class="token parameter variable">-c</span> <span class="token string">'config_file=/etc/postgresql/postgresql.conf'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-验证部署"><a href="#5-验证部署" class="headerlink" title="5. 验证部署"></a>5. 验证部署</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 检查容器状态</span><span class="token function">docker</span> <span class="token function">ps</span><span class="token comment"># 连接到PostgreSQL</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> postgresql psql <span class="token parameter variable">-U</span> your_user <span class="token parameter variable">-d</span> your_db<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="1-内存配置优化"><a href="#1-内存配置优化" class="headerlink" title="1. 内存配置优化"></a>1. 内存配置优化</h3><p>根据服务器可用内存调整以下参数：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># 调整共享缓冲区（建议为系统内存的25%）shared_buffers = 2GB# 调整工作内存（每个会话可用）work_mem = 16MB# 调整维护操作内存maintenance_work_mem = 256MB# 调整有效缓存大小（建议为系统内存的75%）effective_cache_size = 6GB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-并发连接优化"><a href="#2-并发连接优化" class="headerlink" title="2. 并发连接优化"></a>2. 并发连接优化</h3><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># 根据服务器CPU核心数调整max_connections = 200max_worker_processes = 8max_parallel_workers_per_gather = 4max_parallel_workers = 8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-WAL配置优化"><a href="#3-WAL配置优化" class="headerlink" title="3. WAL配置优化"></a>3. WAL配置优化</h3><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># 调整WAL大小和检查点max_wal_size = 2GBcheckpoint_timeout = 15mincheckpoint_completion_target = 0.9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据备份与恢复"><a href="#数据备份与恢复" class="headerlink" title="数据备份与恢复"></a>数据备份与恢复</h2><h3 id="1-创建数据备份"><a href="#1-创建数据备份" class="headerlink" title="1. 创建数据备份"></a>1. 创建数据备份</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用pg_dump创建数据库备份</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> postgresql pg_dump <span class="token parameter variable">-U</span> your_user <span class="token parameter variable">-d</span> your_db <span class="token operator">&gt;</span> backup.sql<span class="token comment"># 使用pg_basebackup创建完整备份</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> postgresql pg_basebackup <span class="token parameter variable">-D</span> /backup <span class="token parameter variable">-U</span> your_user <span class="token parameter variable">-P</span> <span class="token parameter variable">-Ft</span> <span class="token parameter variable">-z</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-数据恢复"><a href="#2-数据恢复" class="headerlink" title="2. 数据恢复"></a>2. 数据恢复</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 从SQL备份恢复</span><span class="token function">cat</span> backup.sql <span class="token operator">|</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-i</span> postgresql psql <span class="token parameter variable">-U</span> your_user <span class="token parameter variable">-d</span> your_db<span class="token comment"># 从基础备份恢复</span><span class="token comment"># 1. 停止容器</span><span class="token function">docker</span> stop postgresql<span class="token comment"># 2. 清空数据目录</span><span class="token function">rm</span> <span class="token parameter variable">-rf</span> /data/postgresql/data/*<span class="token comment"># 3. 解压备份文件到数据目录</span><span class="token function">tar</span> xzf backup.tar.gz <span class="token parameter variable">-C</span> /data/postgresql/data<span class="token comment"># 4. 重启容器</span><span class="token function">docker</span> start postgresql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常见问题解决"><a href="#常见问题解决" class="headerlink" title="常见问题解决"></a>常见问题解决</h2><h3 id="1-连接问题"><a href="#1-连接问题" class="headerlink" title="1. 连接问题"></a>1. 连接问题</h3><p>如果无法连接到PostgreSQL，请检查：</p><ol><li>容器运行状态</li><li>端口映射配置</li><li>PostgreSQL配置文件中的<code>listen_addresses</code>设置</li><li>防火墙规则</li></ol><h3 id="2-性能问题"><a href="#2-性能问题" class="headerlink" title="2. 性能问题"></a>2. 性能问题</h3><p>如果遇到性能问题，可以：</p><ol><li>检查并优化查询</li><li>调整内存配置</li><li>检查是否需要增加索引</li><li>使用EXPLAIN ANALYZE分析查询计划</li></ol><h3 id="3-磁盘空间问题"><a href="#3-磁盘空间问题" class="headerlink" title="3. 磁盘空间问题"></a>3. 磁盘空间问题</h3><p>预防和解决磁盘空间问题：</p><ol><li>定期监控磁盘使用情况</li><li>配置合适的WAL设置</li><li>实施表分区策略</li><li>定期清理无用数据和索引</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过Docker部署PostgreSQL可以显著简化数据库的安装、配置和管理过程。本文介绍了单节点部署、性能优化、数据备份与恢复以及常见问题的解决方案。在生产环境中，建议根据实际需求调整配置参数，并确保数据的安全性和可靠性。</p><hr><p>希望这篇文章能帮助您更好地理解和使用Docker部署PostgreSQL。如果您有任何问题，欢迎在评论区讨论！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;PostgreSQL是一个功能强大的开源关系型数据库系统，以其可靠性、数据完整性和扩展性而闻名。在Docker环境中部署Po</summary>
      
    
    
    
    <category term="Linux" scheme="https://lucky845.github.io/categories/Linux/"/>
    
    <category term="Docker" scheme="https://lucky845.github.io/categories/Linux/Docker/"/>
    
    
    <category term="数据库" scheme="https://lucky845.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="配置" scheme="https://lucky845.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
    <category term="Docker" scheme="https://lucky845.github.io/tags/Docker/"/>
    
    <category term="容器化" scheme="https://lucky845.github.io/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
    <category term="PostgreSQL" scheme="https://lucky845.github.io/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title>【Docker】MySQL部署与配置指南</title>
    <link href="https://lucky845.github.io/archives/e55fa598.html"/>
    <id>https://lucky845.github.io/archives/e55fa598.html</id>
    <published>2025-02-28T08:00:00.000Z</published>
    <updated>2025-02-28T12:32:42.544Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>MySQL是一个流行的关系型数据库管理系统，在Docker环境中部署MySQL可以简化安装过程，提高部署效率，并实现更好的资源隔离和管理。本文将详细介绍如何使用Docker部署和配置MySQL服务，包括单节点部署、Docker Compose配置以及性能优化等内容。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>在开始部署之前，请确保您的系统已经安装：</p><ul><li>Docker Engine (版本 20.10.0 或更高)</li><li>Docker Compose (可选，用于多容器部署)</li></ul><h2 id="单节点部署"><a href="#单节点部署" class="headerlink" title="单节点部署"></a>单节点部署</h2><h3 id="1-拉取MySQL镜像"><a href="#1-拉取MySQL镜像" class="headerlink" title="1. 拉取MySQL镜像"></a>1. 拉取MySQL镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 拉取最新版本的MySQL官方镜像</span><span class="token function">docker</span> pull mysql:8.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-创建数据持久化目录"><a href="#2-创建数据持久化目录" class="headerlink" title="2. 创建数据持久化目录"></a>2. 创建数据持久化目录</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建本地目录用于数据持久化</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/mysql/data<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/mysql/conf<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/mysql/logs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-创建自定义配置文件"><a href="#3-创建自定义配置文件" class="headerlink" title="3. 创建自定义配置文件"></a>3. 创建自定义配置文件</h3><p>创建 <code>/data/mysql/conf/my.cnf</code> 配置文件：</p><pre class="line-numbers language-cnf" data-language="cnf"><code class="language-cnf">[mysqld]character-set-server=utf8mb4collation-server=utf8mb4_unicode_cidefault-time-zone=+8:00max_connections=1000# 日志配置slow_query_log=1slow_query_log_file=/var/log/mysql/slow.loglong_query_time=2# InnoDB配置innodb_buffer_pool_size=1Ginnodb_log_file_size=256Minnodb_flush_log_at_trx_commit=2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-启动MySQL容器"><a href="#4-启动MySQL容器" class="headerlink" title="4. 启动MySQL容器"></a>4. 启动MySQL容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 基本启动命令</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--name</span> mysql <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>your_password <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_DATABASE</span><span class="token operator">=</span>your_db <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /data/mysql/data:/var/lib/mysql <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /data/mysql/conf/my.cnf:/etc/mysql/conf.d/my.cnf <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /data/mysql/logs:/var/log/mysql <span class="token punctuation">\</span>  <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\</span>  mysql:8.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Docker-Compose配置"><a href="#Docker-Compose配置" class="headerlink" title="Docker Compose配置"></a>Docker Compose配置</h2><h3 id="1-创建docker-compose-yml文件"><a href="#1-创建docker-compose-yml文件" class="headerlink" title="1. 创建docker-compose.yml文件"></a>1. 创建docker-compose.yml文件</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.8'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">8.0</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"3306:3306"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> MYSQL_ROOT_PASSWORD=your_password      <span class="token punctuation">-</span> MYSQL_DATABASE=your_db      <span class="token punctuation">-</span> MYSQL_USER=your_user      <span class="token punctuation">-</span> MYSQL_PASSWORD=your_user_password    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /data/mysql/data<span class="token punctuation">:</span>/var/lib/mysql      <span class="token punctuation">-</span> /data/mysql/conf/my.cnf<span class="token punctuation">:</span>/etc/mysql/conf.d/my.cnf      <span class="token punctuation">-</span> /data/mysql/logs<span class="token punctuation">:</span>/var/log/mysql    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>default<span class="token punctuation">-</span>authentication<span class="token punctuation">-</span>plugin=mysql_native_password    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">healthcheck</span><span class="token punctuation">:</span>      <span class="token key atrule">test</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"CMD"</span><span class="token punctuation">,</span> <span class="token string">"mysqladmin"</span><span class="token punctuation">,</span> <span class="token string">"ping"</span><span class="token punctuation">,</span> <span class="token string">"-h"</span><span class="token punctuation">,</span> <span class="token string">"localhost"</span><span class="token punctuation">]</span>      <span class="token key atrule">interval</span><span class="token punctuation">:</span> 10s      <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 5s      <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-启动服务"><a href="#2-启动服务" class="headerlink" title="2. 启动服务"></a>2. 启动服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="MySQL配置优化"><a href="#MySQL配置优化" class="headerlink" title="MySQL配置优化"></a>MySQL配置优化</h2><h3 id="1-内存配置"><a href="#1-内存配置" class="headerlink" title="1. 内存配置"></a>1. 内存配置</h3><p>在my.cnf中添加以下配置：</p><pre class="line-numbers language-cnf" data-language="cnf"><code class="language-cnf"># 缓冲池大小，建议设置为系统内存的50%-70%innodb_buffer_pool_size=4G# 查询缓存query_cache_size=64Mquery_cache_type=1# 排序缓冲区sort_buffer_size=4Mjoin_buffer_size=4M<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-并发配置"><a href="#2-并发配置" class="headerlink" title="2. 并发配置"></a>2. 并发配置</h3><pre class="line-numbers language-cnf" data-language="cnf"><code class="language-cnf"># 最大连接数max_connections=1000# 线程缓存thread_cache_size=16# 表缓存table_open_cache=2000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-日志配置"><a href="#3-日志配置" class="headerlink" title="3. 日志配置"></a>3. 日志配置</h3><pre class="line-numbers language-cnf" data-language="cnf"><code class="language-cnf"># 慢查询日志slow_query_log=1slow_query_log_file=/var/log/mysql/slow.loglong_query_time=2# 错误日志log_error=/var/log/mysql/error.log# 二进制日志log_bin=/var/log/mysql/mysql-bin.logexpire_logs_days=7max_binlog_size=100M<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据备份与恢复"><a href="#数据备份与恢复" class="headerlink" title="数据备份与恢复"></a>数据备份与恢复</h2><h3 id="1-备份数据"><a href="#1-备份数据" class="headerlink" title="1. 备份数据"></a>1. 备份数据</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用Docker执行备份命令</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> mysql <span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">'exec mysqldump -uroot -p"$MYSQL_ROOT_PASSWORD" --all-databases'</span> <span class="token operator">&gt;</span> /path/to/backup.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-恢复数据"><a href="#2-恢复数据" class="headerlink" title="2. 恢复数据"></a>2. 恢复数据</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 恢复数据到容器</span><span class="token function">cat</span> /path/to/backup.sql <span class="token operator">|</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-i</span> mysql <span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">'exec mysql -uroot -p"$MYSQL_ROOT_PASSWORD"'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="多实例部署"><a href="#多实例部署" class="headerlink" title="多实例部署"></a>多实例部署</h2><p>对于需要部署MySQL主从复制的场景，可以使用以下Docker Compose配置：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.8'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">mysql-master</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">8.0</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>master    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"3306:3306"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> MYSQL_ROOT_PASSWORD=master_password    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /data/mysql<span class="token punctuation">-</span>master/data<span class="token punctuation">:</span>/var/lib/mysql      <span class="token punctuation">-</span> /data/mysql<span class="token punctuation">-</span>master/conf/my.cnf<span class="token punctuation">:</span>/etc/mysql/conf.d/my.cnf    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always  <span class="token key atrule">mysql-slave</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">8.0</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>slave    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"3307:3306"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> MYSQL_ROOT_PASSWORD=slave_password    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /data/mysql<span class="token punctuation">-</span>slave/data<span class="token punctuation">:</span>/var/lib/mysql      <span class="token punctuation">-</span> /data/mysql<span class="token punctuation">-</span>slave/conf/my.cnf<span class="token punctuation">:</span>/etc/mysql/conf.d/my.cnf    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> mysql<span class="token punctuation">-</span>master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主服务器配置 <code>/data/mysql-master/conf/my.cnf</code>：</p><pre class="line-numbers language-cnf" data-language="cnf"><code class="language-cnf">[mysqld]server-id=1log_bin=mysql-bingtid_mode=ONenforce_gtid_consistency=ONbinlog_format=ROW<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从服务器配置 <code>/data/mysql-slave/conf/my.cnf</code>：</p><pre class="line-numbers language-cnf" data-language="cnf"><code class="language-cnf">[mysqld]server-id=2log_bin=mysql-bingtid_mode=ONenforce_gtid_consistency=ONread_only=ON<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常见问题与解决方案"><a href="#常见问题与解决方案" class="headerlink" title="常见问题与解决方案"></a>常见问题与解决方案</h2><h3 id="1-容器无法启动"><a href="#1-容器无法启动" class="headerlink" title="1. 容器无法启动"></a>1. 容器无法启动</h3><p>检查日志：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> logs mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常见原因：</p><ul><li>数据目录权限问题</li><li>配置文件格式错误</li><li>端口冲突</li></ul><h3 id="2-连接被拒绝"><a href="#2-连接被拒绝" class="headerlink" title="2. 连接被拒绝"></a>2. 连接被拒绝</h3><p>确保：</p><ul><li>MySQL服务正在运行</li><li>端口映射正确</li><li>防火墙设置允许连接</li><li>用户有正确的访问权限</li></ul><h3 id="3-性能问题"><a href="#3-性能问题" class="headerlink" title="3. 性能问题"></a>3. 性能问题</h3><ul><li>检查容器资源限制</li><li>优化MySQL配置参数</li><li>使用数据卷而非绑定挂载提高I/O性能</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过Docker部署MySQL可以大大简化数据库的安装、配置和管理过程。本文介绍了单节点部署、Docker Compose配置、性能优化以及常见问题的解决方案。在生产环境中，建议根据实际需求调整配置参数，并确保数据的安全性和可靠性。</p><hr><p>希望这篇文章能帮助您更好地理解和使用Docker部署MySQL。如果您有任何问题，欢迎在评论区讨论！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;MySQL是一个流行的关系型数据库管理系统，在Docker环境中部署MySQL可以简化安装过程，提高部署效率，并实现更好的资</summary>
      
    
    
    
    <category term="Linux" scheme="https://lucky845.github.io/categories/Linux/"/>
    
    <category term="Docker" scheme="https://lucky845.github.io/categories/Linux/Docker/"/>
    
    
    <category term="数据库" scheme="https://lucky845.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="配置" scheme="https://lucky845.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
    <category term="Docker" scheme="https://lucky845.github.io/tags/Docker/"/>
    
    <category term="容器化" scheme="https://lucky845.github.io/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
    <category term="MySQL" scheme="https://lucky845.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>【Docker】Redis部署与配置指南</title>
    <link href="https://lucky845.github.io/archives/e55fa597.html"/>
    <id>https://lucky845.github.io/archives/e55fa597.html</id>
    <published>2025-02-28T08:00:00.000Z</published>
    <updated>2025-02-28T12:29:52.056Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>Redis是一个广泛使用的开源内存数据库，在Docker环境中部署Redis可以简化安装过程，提高部署效率，并实现更好的资源隔离。本文将详细介绍如何使用Docker部署和配置Redis服务。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>在开始部署之前，请确保您的系统已经安装：</p><ul><li>Docker Engine (版本 20.10.0 或更高)</li><li>Docker Compose (可选，用于多容器部署)</li></ul><h2 id="单节点部署"><a href="#单节点部署" class="headerlink" title="单节点部署"></a>单节点部署</h2><h3 id="1-拉取Redis镜像"><a href="#1-拉取Redis镜像" class="headerlink" title="1. 拉取Redis镜像"></a>1. 拉取Redis镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 拉取最新版本的Redis官方镜像</span><span class="token function">docker</span> pull redis:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-创建数据持久化目录"><a href="#2-创建数据持久化目录" class="headerlink" title="2. 创建数据持久化目录"></a>2. 创建数据持久化目录</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建本地目录用于数据持久化</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/redis/data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-启动Redis容器"><a href="#3-启动Redis容器" class="headerlink" title="3. 启动Redis容器"></a>3. 启动Redis容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 基本启动命令</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--name</span> redis <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /data/redis/data:/data <span class="token punctuation">\</span>  <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\</span>  redis:latest <span class="token punctuation">\</span>  redis-server <span class="token parameter variable">--appendonly</span> <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Docker-Compose配置"><a href="#Docker-Compose配置" class="headerlink" title="Docker Compose配置"></a>Docker Compose配置</h2><h3 id="1-创建docker-compose-yml文件"><a href="#1-创建docker-compose-yml文件" class="headerlink" title="1. 创建docker-compose.yml文件"></a>1. 创建docker-compose.yml文件</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.8'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"6379:6379"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /data/redis/data<span class="token punctuation">:</span>/data      <span class="token punctuation">-</span> /data/redis/conf/redis.conf<span class="token punctuation">:</span>/etc/redis/redis.conf    <span class="token key atrule">command</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>server /etc/redis/redis.conf    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-启动服务"><a href="#2-启动服务" class="headerlink" title="2. 启动服务"></a>2. 启动服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Redis配置优化"><a href="#Redis配置优化" class="headerlink" title="Redis配置优化"></a>Redis配置优化</h2><h3 id="1-内存配置"><a href="#1-内存配置" class="headerlink" title="1. 内存配置"></a>1. 内存配置</h3><p>在redis.conf中添加以下配置：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># 设置最大内存限制maxmemory 2gb# 内存淘汰策略maxmemory-policy allkeys-lru<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-持久化配置"><a href="#2-持久化配置" class="headerlink" title="2. 持久化配置"></a>2. 持久化配置</h3><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># 开启AOF持久化appendonly yesappendfsync everysec# 开启RDB持久化save 900 1save 300 10save 60 10000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-网络安全配置"><a href="#3-网络安全配置" class="headerlink" title="3. 网络安全配置"></a>3. 网络安全配置</h3><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># 绑定地址bind 0.0.0.0# 设置访问密码requirepass your_strong_password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="性能优化建议"><a href="#性能优化建议" class="headerlink" title="性能优化建议"></a>性能优化建议</h2><ol><li><p><strong>内存优化</strong>：</p><ul><li>合理设置maxmemory</li><li>选择适当的内存淘汰策略</li><li>定期清理过期键</li></ul></li><li><p><strong>持久化优化</strong>：</p><ul><li>在性能要求高的场景可以关闭AOF</li><li>调整RDB保存频率</li><li>使用单独的存储卷</li></ul></li><li><p><strong>网络优化</strong>：</p><ul><li>使用host网络模式提升性能</li><li>合理设置tcp-backlog值</li><li>调整timeout时间</li></ul></li></ol><h2 id="监控和维护"><a href="#监控和维护" class="headerlink" title="监控和维护"></a>监控和维护</h2><h3 id="1-容器健康检查"><a href="#1-容器健康检查" class="headerlink" title="1. 容器健康检查"></a>1. 容器健康检查</h3><p>在docker-compose.yml中添加健康检查：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">healthcheck</span><span class="token punctuation">:</span>  <span class="token key atrule">test</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"CMD"</span><span class="token punctuation">,</span> <span class="token string">"redis-cli"</span><span class="token punctuation">,</span> <span class="token string">"ping"</span><span class="token punctuation">]</span>  <span class="token key atrule">interval</span><span class="token punctuation">:</span> 30s  <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 10s  <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-日志管理"><a href="#2-日志管理" class="headerlink" title="2. 日志管理"></a>2. 日志管理</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看容器日志</span><span class="token function">docker</span> logs redis<span class="token comment"># 设置日志轮转</span>--log-opt max-size<span class="token operator">=</span>10m <span class="token punctuation">\</span>--log-opt max-file<span class="token operator">=</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常见问题处理"><a href="#常见问题处理" class="headerlink" title="常见问题处理"></a>常见问题处理</h2><ol><li><p><strong>内存溢出</strong>：</p><ul><li>检查maxmemory设置</li><li>查看内存使用情况</li><li>适当调整内存淘汰策略</li></ul></li><li><p><strong>持久化失败</strong>：</p><ul><li>确保存储卷权限正确</li><li>检查磁盘空间</li><li>查看错误日志</li></ul></li><li><p><strong>连接超时</strong>：</p><ul><li>检查网络配置</li><li>调整timeout参数</li><li>验证防火墙设置</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过Docker部署Redis不仅简化了安装和配置过程，还提供了更好的隔离性和可移植性。合理的配置和优化可以确保Redis在Docker环境中稳定高效运行。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://redis.io/documentation">Redis官方文档</a></li><li><a href="https://hub.docker.com/_/redis">Docker Hub Redis</a></li><li><a href="https://redis.io/topics/admin">Redis配置最佳实践</a></li></ul><hr><p>希望这篇文章能帮助您更好地在Docker环境中部署和配置Redis。如果您有任何问题，欢迎在评论区讨论！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;Redis是一个广泛使用的开源内存数据库，在Docker环境中部署Redis可以简化安装过程，提高部署效率，并实现更好的资源</summary>
      
    
    
    
    <category term="Linux" scheme="https://lucky845.github.io/categories/Linux/"/>
    
    <category term="Docker" scheme="https://lucky845.github.io/categories/Linux/Docker/"/>
    
    
    <category term="数据库" scheme="https://lucky845.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis" scheme="https://lucky845.github.io/tags/Redis/"/>
    
    <category term="配置" scheme="https://lucky845.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
    <category term="Docker" scheme="https://lucky845.github.io/tags/Docker/"/>
    
    <category term="容器化" scheme="https://lucky845.github.io/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>【Docker】部署RabbitMQ及配置延时队列完全指南</title>
    <link href="https://lucky845.github.io/archives/d55fa598.html"/>
    <id>https://lucky845.github.io/archives/d55fa598.html</id>
    <published>2025-02-28T07:00:00.000Z</published>
    <updated>2025-02-28T12:23:25.366Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>RabbitMQ 是一个开源的消息代理软件，它实现了高级消息队列协议(AMQP)，提供可靠的消息传递机制。在微服务架构和分布式系统中，RabbitMQ 扮演着重要角色。传统部署 RabbitMQ 需要处理复杂的依赖关系和配置，而使用 Docker 可以大幅简化这一过程。本文将详细介绍如何使用 Docker 部署 RabbitMQ，以及如何配置和使用延时队列功能。</p><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><h3 id="1-1-系统要求"><a href="#1-1-系统要求" class="headerlink" title="1.1 系统要求"></a>1.1 系统要求</h3><ul><li>Docker Engine 19.03+</li><li>Docker Compose 1.25+（可选，用于多容器编排）</li><li>至少 2GB 可用内存（生产环境建议 4GB+）</li><li>足够的磁盘空间（建议 10GB+）</li></ul><h3 id="1-2-镜像选择"><a href="#1-2-镜像选择" class="headerlink" title="1.2 镜像选择"></a>1.2 镜像选择</h3><p>RabbitMQ 官方提供了多种 Docker 镜像，最常用的有：</p><ul><li><code>rabbitmq:3.12-management</code>：包含管理界面的 RabbitMQ 3.12 版本</li><li><code>rabbitmq:3.12</code>：不包含管理界面的基础版本</li></ul><p>本文主要使用带管理界面的版本，便于可视化操作和监控。</p><h2 id="2-单节点部署"><a href="#2-单节点部署" class="headerlink" title="2. 单节点部署"></a>2. 单节点部署</h2><h3 id="2-1-使用-Docker-命令部署-RabbitMQ"><a href="#2-1-使用-Docker-命令部署-RabbitMQ" class="headerlink" title="2.1 使用 Docker 命令部署 RabbitMQ"></a>2.1 使用 Docker 命令部署 RabbitMQ</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建数据和日志目录</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/rabbitmq/data<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/rabbitmq/log<span class="token comment"># 运行 RabbitMQ 容器</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--name</span> rabbitmq <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">5672</span>:5672 <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">15672</span>:15672 <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_USER</span><span class="token operator">=</span>admin <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_PASS</span><span class="token operator">=</span>admin123 <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /data/rabbitmq/data:/var/lib/rabbitmq <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /data/rabbitmq/log:/var/log/rabbitmq <span class="token punctuation">\</span>  <span class="token parameter variable">--hostname</span> my-rabbit <span class="token punctuation">\</span>  rabbitmq:3.12-management<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明：</p><ul><li><code>-p 5672:5672</code>：AMQP 协议端口</li><li><code>-p 15672:15672</code>：管理界面端口</li><li><code>-e RABBITMQ_DEFAULT_USER=admin</code>：设置默认用户名</li><li><code>-e RABBITMQ_DEFAULT_PASS=admin123</code>：设置默认密码</li><li><code>-v /data/rabbitmq/data:/var/lib/rabbitmq</code>：数据持久化</li><li><code>-v /data/rabbitmq/log:/var/log/rabbitmq</code>：日志持久化</li><li><code>--hostname my-rabbit</code>：设置容器主机名（对集群很重要）</li></ul><h3 id="2-2-验证部署"><a href="#2-2-验证部署" class="headerlink" title="2.2 验证部署"></a>2.2 验证部署</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 检查容器是否正常运行</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token operator">|</span> <span class="token function">grep</span> rabbitmq<span class="token comment"># 查看日志</span><span class="token function">docker</span> logs rabbitmq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问管理界面：在浏览器中打开 <code>http://localhost:15672</code>，使用设置的用户名和密码登录。</p><h2 id="3-使用-Docker-Compose-部署"><a href="#3-使用-Docker-Compose-部署" class="headerlink" title="3. 使用 Docker Compose 部署"></a>3. 使用 Docker Compose 部署</h2><h3 id="3-1-创建-docker-compose-yml-文件"><a href="#3-1-创建-docker-compose-yml-文件" class="headerlink" title="3.1 创建 docker-compose.yml 文件"></a>3.1 创建 docker-compose.yml 文件</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> rabbitmq<span class="token punctuation">:</span>3.12<span class="token punctuation">-</span>management    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rabbitmq    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>rabbit    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"5672:5672"</span>   <span class="token comment"># AMQP 端口</span>      <span class="token punctuation">-</span> <span class="token string">"15672:15672"</span> <span class="token comment"># 管理界面端口</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> RABBITMQ_DEFAULT_USER=admin      <span class="token punctuation">-</span> RABBITMQ_DEFAULT_PASS=admin123    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./data<span class="token punctuation">:</span>/var/lib/rabbitmq      <span class="token punctuation">-</span> ./logs<span class="token punctuation">:</span>/var/log/rabbitmq    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-启动服务"><a href="#3-2-启动服务" class="headerlink" title="3.2 启动服务"></a>3.2 启动服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-RabbitMQ-集群部署"><a href="#4-RabbitMQ-集群部署" class="headerlink" title="4. RabbitMQ 集群部署"></a>4. RabbitMQ 集群部署</h2><h3 id="4-1-创建集群的-docker-compose-yml"><a href="#4-1-创建集群的-docker-compose-yml" class="headerlink" title="4.1 创建集群的 docker-compose.yml"></a>4.1 创建集群的 docker-compose.yml</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">rabbitmq1</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> rabbitmq<span class="token punctuation">:</span>3.12<span class="token punctuation">-</span>management    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> rabbitmq1    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"5672:5672"</span>      <span class="token punctuation">-</span> <span class="token string">"15672:15672"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> RABBITMQ_ERLANG_COOKIE=SWQOKODSQALRPCLNMEQG      <span class="token punctuation">-</span> RABBITMQ_DEFAULT_USER=admin      <span class="token punctuation">-</span> RABBITMQ_DEFAULT_PASS=admin123    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./rabbitmq1/data<span class="token punctuation">:</span>/var/lib/rabbitmq      <span class="token punctuation">-</span> ./rabbitmq1/log<span class="token punctuation">:</span>/var/log/rabbitmq  <span class="token key atrule">rabbitmq2</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> rabbitmq<span class="token punctuation">:</span>3.12<span class="token punctuation">-</span>management    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> rabbitmq2    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"5673:5672"</span>      <span class="token punctuation">-</span> <span class="token string">"15673:15672"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> RABBITMQ_ERLANG_COOKIE=SWQOKODSQALRPCLNMEQG      <span class="token punctuation">-</span> RABBITMQ_DEFAULT_USER=admin      <span class="token punctuation">-</span> RABBITMQ_DEFAULT_PASS=admin123    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./rabbitmq2/data<span class="token punctuation">:</span>/var/lib/rabbitmq      <span class="token punctuation">-</span> ./rabbitmq2/log<span class="token punctuation">:</span>/var/log/rabbitmq    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> rabbitmq1  <span class="token key atrule">rabbitmq3</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> rabbitmq<span class="token punctuation">:</span>3.12<span class="token punctuation">-</span>management    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> rabbitmq3    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"5674:5672"</span>      <span class="token punctuation">-</span> <span class="token string">"15674:15672"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> RABBITMQ_ERLANG_COOKIE=SWQOKODSQALRPCLNMEQG      <span class="token punctuation">-</span> RABBITMQ_DEFAULT_USER=admin      <span class="token punctuation">-</span> RABBITMQ_DEFAULT_PASS=admin123    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./rabbitmq3/data<span class="token punctuation">:</span>/var/lib/rabbitmq      <span class="token punctuation">-</span> ./rabbitmq3/log<span class="token punctuation">:</span>/var/log/rabbitmq    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> rabbitmq1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-配置集群"><a href="#4-2-配置集群" class="headerlink" title="4.2 配置集群"></a>4.2 配置集群</h3><p>启动容器后，需要将节点加入集群：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入第二个节点</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> rabbitmq2 <span class="token function">bash</span><span class="token comment"># 停止应用</span>rabbitmqctl stop_app<span class="token comment"># 重置节点</span>rabbitmqctl reset<span class="token comment"># 加入集群</span>rabbitmqctl join_cluster rabbit@rabbitmq1<span class="token comment"># 启动应用</span>rabbitmqctl start_app<span class="token comment"># 退出容器</span><span class="token builtin class-name">exit</span><span class="token comment"># 对第三个节点重复上述操作</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> rabbitmq3 <span class="token function">bash</span>rabbitmqctl stop_apprabbitmqctl resetrabbitmqctl join_cluster rabbit@rabbitmq1rabbitmqctl start_app<span class="token builtin class-name">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-延时队列配置"><a href="#5-延时队列配置" class="headerlink" title="5. 延时队列配置"></a>5. 延时队列配置</h2><h3 id="5-1-延时队列概念"><a href="#5-1-延时队列概念" class="headerlink" title="5.1 延时队列概念"></a>5.1 延时队列概念</h3><p>延时队列是指消息在发送到队列后，不会立即被消费，而是在指定的时间后才能被消费。RabbitMQ 本身并没有直接提供延时队列功能，但可以通过以下两种方式实现：</p><ol><li>使用 Dead Letter Exchange (DLX) 和消息 TTL</li><li>使用 rabbitmq_delayed_message_exchange 插件</li></ol><h3 id="5-2-使用-Dead-Letter-Exchange-实现延时队列"><a href="#5-2-使用-Dead-Letter-Exchange-实现延时队列" class="headerlink" title="5.2 使用 Dead Letter Exchange 实现延时队列"></a>5.2 使用 Dead Letter Exchange 实现延时队列</h3><h4 id="5-2-1-原理"><a href="#5-2-1-原理" class="headerlink" title="5.2.1 原理"></a>5.2.1 原理</h4><p>当消息在队列中的存活时间超过设定的 TTL（Time To Live）值时，或者队列长度超过最大长度时，消息会被发送到与队列绑定的死信交换机（Dead Letter Exchange），然后路由到另一个队列，这个队列就是我们真正消费消息的队列。</p><h4 id="5-2-2-配置步骤"><a href="#5-2-2-配置步骤" class="headerlink" title="5.2.2 配置步骤"></a>5.2.2 配置步骤</h4><ol><li>进入 RabbitMQ 容器：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> rabbitmq <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>使用 rabbitmqadmin 创建所需的交换机和队列：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建死信交换机</span>rabbitmqadmin <span class="token builtin class-name">declare</span> exchange <span class="token assign-left variable">name</span><span class="token operator">=</span>dlx_exchange <span class="token assign-left variable">type</span><span class="token operator">=</span>direct<span class="token comment"># 创建实际消费队列</span>rabbitmqadmin <span class="token builtin class-name">declare</span> queue <span class="token assign-left variable">name</span><span class="token operator">=</span>actual_queue<span class="token comment"># 将实际消费队列绑定到死信交换机</span>rabbitmqadmin <span class="token builtin class-name">declare</span> binding <span class="token assign-left variable">source</span><span class="token operator">=</span>dlx_exchange <span class="token assign-left variable">destination</span><span class="token operator">=</span>actual_queue <span class="token assign-left variable">routing_key</span><span class="token operator">=</span>dlx_routing_key<span class="token comment"># 创建延时队列，设置消息 TTL 和死信交换机</span>rabbitmqadmin <span class="token builtin class-name">declare</span> queue <span class="token assign-left variable">name</span><span class="token operator">=</span>delay_queue <span class="token assign-left variable">arguments</span><span class="token operator">=</span><span class="token string">'{"x-dead-letter-exchange":"dlx_exchange","x-dead-letter-routing-key":"dlx_routing_key","x-message-ttl":10000}'</span><span class="token comment"># 创建普通交换机</span>rabbitmqadmin <span class="token builtin class-name">declare</span> exchange <span class="token assign-left variable">name</span><span class="token operator">=</span>normal_exchange <span class="token assign-left variable">type</span><span class="token operator">=</span>direct<span class="token comment"># 将延时队列绑定到普通交换机</span>rabbitmqadmin <span class="token builtin class-name">declare</span> binding <span class="token assign-left variable">source</span><span class="token operator">=</span>normal_exchange <span class="token assign-left variable">destination</span><span class="token operator">=</span>delay_queue <span class="token assign-left variable">routing_key</span><span class="token operator">=</span>delay_routing_key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述配置创建了一个延时为 10 秒（10000 毫秒）的队列。</p><h3 id="5-3-使用-rabbitmq-delayed-message-exchange-插件"><a href="#5-3-使用-rabbitmq-delayed-message-exchange-插件" class="headerlink" title="5.3 使用 rabbitmq_delayed_message_exchange 插件"></a>5.3 使用 rabbitmq_delayed_message_exchange 插件</h3><h4 id="5-3-1-安装插件"><a href="#5-3-1-安装插件" class="headerlink" title="5.3.1 安装插件"></a>5.3.1 安装插件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入容器</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> rabbitmq <span class="token function">bash</span><span class="token comment"># 启用插件</span>rabbitmq-plugins <span class="token builtin class-name">enable</span> rabbitmq_delayed_message_exchange<span class="token comment"># 退出容器</span><span class="token builtin class-name">exit</span><span class="token comment"># 重启容器使插件生效</span><span class="token function">docker</span> restart rabbitmq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-3-2-配置延时交换机"><a href="#5-3-2-配置延时交换机" class="headerlink" title="5.3.2 配置延时交换机"></a>5.3.2 配置延时交换机</h4><p>通过管理界面或命令行创建延时交换机：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入容器</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> rabbitmq <span class="token function">bash</span><span class="token comment"># 创建延时交换机</span>rabbitmqadmin <span class="token builtin class-name">declare</span> exchange <span class="token assign-left variable">name</span><span class="token operator">=</span>delayed_exchange <span class="token assign-left variable">type</span><span class="token operator">=</span>x-delayed-message <span class="token assign-left variable">arguments</span><span class="token operator">=</span><span class="token string">'{"x-delayed-type":"direct"}'</span><span class="token comment"># 创建队列</span>rabbitmqadmin <span class="token builtin class-name">declare</span> queue <span class="token assign-left variable">name</span><span class="token operator">=</span>delayed_queue<span class="token comment"># 绑定队列到延时交换机</span>rabbitmqadmin <span class="token builtin class-name">declare</span> binding <span class="token assign-left variable">source</span><span class="token operator">=</span>delayed_exchange <span class="token assign-left variable">destination</span><span class="token operator">=</span>delayed_queue <span class="token assign-left variable">routing_key</span><span class="token operator">=</span>delayed_routing_key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-延时队列的使用示例"><a href="#6-延时队列的使用示例" class="headerlink" title="6. 延时队列的使用示例"></a>6. 延时队列的使用示例</h2><h3 id="6-1-使用-Dead-Letter-Exchange-方式"><a href="#6-1-使用-Dead-Letter-Exchange-方式" class="headerlink" title="6.1 使用 Dead Letter Exchange 方式"></a>6.1 使用 Dead Letter Exchange 方式</h3><h4 id="Java-代码示例"><a href="#Java-代码示例" class="headerlink" title="Java 代码示例"></a>Java 代码示例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Channel</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">ConnectionFactory</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayQueueProducer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"admin123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">"Hello, delayed message!"</span><span class="token punctuation">;</span>                        <span class="token comment">// 发送消息到普通交换机，路由到延时队列</span>            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">"normal_exchange"</span><span class="token punctuation">,</span> <span class="token string">"delay_routing_key"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Sent message: '"</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">"', will be delivered in 10 seconds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="消费者代码"><a href="#消费者代码" class="headerlink" title="消费者代码"></a>消费者代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayQueueConsumer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"admin123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 消费实际队列中的消息</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"actual_queue"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span> delivery<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>delivery<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Received delayed message: '"</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> consumerTag <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Waiting for delayed messages..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-使用-rabbitmq-delayed-message-exchange-插件"><a href="#6-2-使用-rabbitmq-delayed-message-exchange-插件" class="headerlink" title="6.2 使用 rabbitmq_delayed_message_exchange 插件"></a>6.2 使用 rabbitmq_delayed_message_exchange 插件</h3><h4 id="Java-代码示例-1"><a href="#Java-代码示例-1" class="headerlink" title="Java 代码示例"></a>Java 代码示例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">AMQP</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Channel</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">ConnectionFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayedPluginProducer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"admin123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">"Hello, delayed message!"</span><span class="token punctuation">;</span>                        <span class="token comment">// 设置消息头，指定延迟时间（毫秒）</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            headers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-delay"</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10秒延迟</span>                        <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 发送消息到延时交换机</span>            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">"delayed_exchange"</span><span class="token punctuation">,</span> <span class="token string">"delayed_routing_key"</span><span class="token punctuation">,</span> props<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Sent message: '"</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">"', will be delivered in 10 seconds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="消费者代码-1"><a href="#消费者代码-1" class="headerlink" title="消费者代码"></a>消费者代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayedPluginConsumer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"admin123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 消费延时队列中的消息</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"delayed_queue"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span> delivery<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>delivery<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Received delayed message: '"</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> consumerTag <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Waiting for delayed messages..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-延时队列应用场景"><a href="#7-延时队列应用场景" class="headerlink" title="7. 延时队列应用场景"></a>7. 延时队列应用场景</h2><p>延时队列在实际业务中有很多应用场景，例如：</p><ol><li><strong>订单超时取消</strong>：用户下单后，如果在指定时间内未支付，系统自动取消订单</li><li><strong>定时任务调度</strong>：定时执行某些任务，如定时发送邮件、短信等</li><li><strong>消息重试机制</strong>：消息消费失败后，延迟一段时间再次投递</li><li><strong>限时优惠活动</strong>：优惠券到期提醒、活动结束通知等</li><li><strong>预约系统</strong>：提前预约后，到指定时间自动通知用户</li></ol><h2 id="8-常见问题与解决方案"><a href="#8-常见问题与解决方案" class="headerlink" title="8. 常见问题与解决方案"></a>8. 常见问题与解决方案</h2><h3 id="8-1-消息堆积问题"><a href="#8-1-消息堆积问题" class="headerlink" title="8.1 消息堆积问题"></a>8.1 消息堆积问题</h3><p>当生产速度大于消费速度时，可能导致消息堆积：</p><ul><li>增加消费者数量</li><li>优化消费者处理逻辑</li><li>增加硬件资源</li><li>使用集群模式分担负载</li></ul><h3 id="8-2-插件安装失败"><a href="#8-2-插件安装失败" class="headerlink" title="8.2 插件安装失败"></a>8.2 插件安装失败</h3><p>如果插件安装失败，可以尝试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看可用插件列表</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> rabbitmq rabbitmq-plugins list<span class="token comment"># 确保容器有足够权限</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token parameter variable">--user</span> root rabbitmq <span class="token function">bash</span><span class="token comment"># 手动下载插件并放入插件目录</span><span class="token builtin class-name">cd</span> /plugins<span class="token function">wget</span> https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/download/v3.12.0/rabbitmq_delayed_message_exchange-3.12.0.ez<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-3-集群节点同步问题"><a href="#8-3-集群节点同步问题" class="headerlink" title="8.3 集群节点同步问题"></a>8.3 集群节点同步问题</h3><p>集群节点之间可能出现同步问题：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 检查集群状态</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> rabbitmq1 rabbitmqctl cluster_status<span class="token comment"># 如果节点状态异常，可以尝试重新加入集群</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> rabbitmq2 <span class="token function">bash</span>rabbitmqctl stop_apprabbitmqctl resetrabbitmqctl join_cluster rabbit@rabbitmq1rabbitmqctl start_app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-总结"><a href="#9-总结" class="headerlink" title="9. 总结"></a>9. 总结</h2><p>Docker 部署 RabbitMQ 极大地简化了环境配置和管理工作。通过本文介绍的方法，可以快速部署单节点或集群模式的 RabbitMQ 服务，并配置延时队列功能。延时队列作为 RabbitMQ 的重要功能扩展，在实际业务中有着广泛的应用场景。</p><p>无论是使用死信队列方式还是插件方式实现延时队列，都能满足大多数业务场景的需求。在选择实现方式时，可以根据具体需求和系统架构进行选择。</p><hr><h2 id="希望这篇文章能帮助您更好地理解如何使用-Docker-部署-RabbitMQ-并配置延时队列。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解如何使用-Docker-部署-RabbitMQ-并配置延时队列。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解如何使用 Docker 部署 RabbitMQ 并配置延时队列。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解如何使用 Docker 部署 RabbitMQ 并配置延时队列。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;RabbitMQ 是一个开源的消息代理软件，它实现了高级消息队列协议(AMQP)，提供可靠的消息传递机制。在微服务架构和分布</summary>
      
    
    
    
    <category term="Linux" scheme="https://lucky845.github.io/categories/Linux/"/>
    
    <category term="Docker" scheme="https://lucky845.github.io/categories/Linux/Docker/"/>
    
    
    <category term="消息队列" scheme="https://lucky845.github.io/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    <category term="Docker" scheme="https://lucky845.github.io/tags/Docker/"/>
    
    <category term="容器化" scheme="https://lucky845.github.io/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
    <category term="RabbitMQ" scheme="https://lucky845.github.io/tags/RabbitMQ/"/>
    
    <category term="延时队列" scheme="https://lucky845.github.io/tags/%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
</feed>
