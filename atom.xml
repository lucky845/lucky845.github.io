<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lucky845的博客</title>
  
  <subtitle>Java/Spring Boot/Python全栈技术分享</subtitle>
  <link href="https://blog.lucky845.top/atom.xml" rel="self"/>
  
  <link href="https://blog.lucky845.top/"/>
  <updated>2025-09-18T08:08:06.020Z</updated>
  <id>https://blog.lucky845.top/</id>
  
  <author>
    <name>lucky845</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Java】Atomic原子类总结</title>
    <link href="https://blog.lucky845.top/archives/3c6a2f8e.html"/>
    <id>https://blog.lucky845.top/archives/3c6a2f8e.html</id>
    <published>2025-09-18T06:30:00.000Z</published>
    <updated>2025-09-18T08:08:06.020Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-Atomic原子类总结"><a href="#Java-Atomic原子类总结" class="headerlink" title="Java Atomic原子类总结"></a>Java Atomic原子类总结</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在Java并发编程中，保证线程安全是一个核心问题。传统的锁机制（如synchronized和ReentrantLock）虽然能够解决线程安全问题，但存在性能开销大、可能导致线程阻塞等缺点。为了提供更高效的线程安全解决方案，Java并发包（java.util.concurrent）中提供了一系列的原子操作类，这些类基于CAS（Compare-And-Swap）机制实现，能够在不使用锁的情况下保证操作的原子性。本文将全面总结Java中的Atomic原子类家族。</p><h2 id="1-Atomic原子类概述"><a href="#1-Atomic原子类概述" class="headerlink" title="1. Atomic原子类概述"></a>1. Atomic原子类概述</h2><h3 id="1-1-什么是Atomic原子类"><a href="#1-1-什么是Atomic原子类" class="headerlink" title="1.1 什么是Atomic原子类"></a>1.1 什么是Atomic原子类</h3><p>Atomic原子类是Java并发包中提供的一组线程安全的操作类，它们能够在多线程环境下保证对变量操作的原子性，而无需使用传统的锁机制。Atomic原子类的核心特性是原子性、可见性和有序性，这些特性使得它们在高并发场景下比传统锁机制具有更好的性能。</p><h3 id="1-2-Atomic原子类的实现原理"><a href="#1-2-Atomic原子类的实现原理" class="headerlink" title="1.2 Atomic原子类的实现原理"></a>1.2 Atomic原子类的实现原理</h3><p>Atomic原子类的实现基于CAS（Compare-And-Swap）机制，这是一种无锁算法。CAS操作包含三个操作数：</p><ul><li>内存位置V</li><li>预期值A</li><li>新值B</li></ul><p>当且仅当内存位置V的值等于预期值A时，才会将该内存位置的值更新为新值B，否则不做任何操作。整个比较并交换的操作是原子的，由CPU硬件指令保证。关于CAS机制的详细解释，可参考《<a href="https://blog.lucky845.top/archives/7e8f9a2d.html">CAS机制详解</a>》。</p><p>在Java中，Atomic原子类内部通过调用<code>sun.misc.Unsafe</code>类提供的CAS相关方法实现原子操作。<code>Unsafe</code>类提供了直接操作内存的能力，并通过JNI调用底层的CPU指令来实现CAS操作。</p><h2 id="2-Atomic原子类的分类"><a href="#2-Atomic原子类的分类" class="headerlink" title="2. Atomic原子类的分类"></a>2. Atomic原子类的分类</h2><p>Java中的Atomic原子类可以分为四大类：</p><ol><li><strong>基本类型原子类</strong>：用于操作基本数据类型的原子类</li><li><strong>数组类型原子类</strong>：用于操作数组中元素的原子类</li><li><strong>引用类型原子类</strong>：用于操作引用类型的原子类</li><li><strong>字段更新器</strong>：用于原子地更新对象的字段</li></ol><p>下面我们将逐一介绍这些类型的原子类。</p><h2 id="3-基本类型原子类"><a href="#3-基本类型原子类" class="headerlink" title="3. 基本类型原子类"></a>3. 基本类型原子类</h2><p>基本类型原子类主要包括以下几个：</p><ul><li><code>AtomicBoolean</code>：原子操作布尔类型</li><li><code>AtomicInteger</code>：原子操作整型</li><li><code>AtomicLong</code>：原子操作长整型</li></ul><p>这些类提供的方法类似，下面以<code>AtomicInteger</code>为例介绍其主要方法和使用方式。</p><h3 id="3-1-AtomicInteger的主要方法"><a href="#3-1-AtomicInteger的主要方法" class="headerlink" title="3.1 AtomicInteger的主要方法"></a>3.1 AtomicInteger的主要方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建AtomicInteger实例，初始值为0</span><span class="token class-name">AtomicInteger</span> ai <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建AtomicInteger实例，指定初始值</span><span class="token class-name">AtomicInteger</span> ai <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取当前值</span><span class="token keyword">int</span> currentValue <span class="token operator">=</span> ai<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置新值</span>ai<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 原子地设置新值并返回旧值</span><span class="token keyword">int</span> oldValue <span class="token operator">=</span> ai<span class="token punctuation">.</span><span class="token function">getAndSet</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 原子地将当前值增加1并返回旧值</span><span class="token keyword">int</span> oldValue <span class="token operator">=</span> ai<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 原子地将当前值增加1并返回新值</span><span class="token keyword">int</span> newValue <span class="token operator">=</span> ai<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 原子地将当前值减少1并返回旧值</span><span class="token keyword">int</span> oldValue <span class="token operator">=</span> ai<span class="token punctuation">.</span><span class="token function">getAndDecrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 原子地将当前值减少1并返回新值</span><span class="token keyword">int</span> newValue <span class="token operator">=</span> ai<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 原子地将给定的值加到当前值上并返回旧值</span><span class="token keyword">int</span> oldValue <span class="token operator">=</span> ai<span class="token punctuation">.</span><span class="token function">getAndAdd</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 原子地将给定的值加到当前值上并返回新值</span><span class="token keyword">int</span> newValue <span class="token operator">=</span> ai<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 原子地更新值，使用给定的更新函数</span><span class="token keyword">int</span> updatedValue <span class="token operator">=</span> ai<span class="token punctuation">.</span><span class="token function">updateAndGet</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 原子地更新值，使用给定的更新函数并返回旧值</span><span class="token keyword">int</span> oldValue <span class="token operator">=</span> ai<span class="token punctuation">.</span><span class="token function">getAndUpdate</span><span class="token punctuation">(</span>x <span class="token operator">-&gt;</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 原子地将当前值与输入值进行计算并更新，使用给定的累加器函数</span><span class="token keyword">int</span> updatedValue <span class="token operator">=</span> ai<span class="token punctuation">.</span><span class="token function">accumulateAndGet</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 原子地将当前值与输入值进行计算并更新，使用给定的累加器函数并返回旧值</span><span class="token keyword">int</span> oldValue <span class="token operator">=</span> ai<span class="token punctuation">.</span><span class="token function">getAndAccumulate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-使用示例"><a href="#3-2-使用示例" class="headerlink" title="3.2 使用示例"></a>3.2 使用示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicInteger</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicIntegerExample</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> counter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建10个线程，每个线程对计数器增加1000次</span>        <span class="token class-name">Thread</span><span class="token punctuation">[</span><span class="token punctuation">]</span> threads <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> threads<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    counter<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment">// 等待所有线程执行完成</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span> thread <span class="token operator">:</span> threads<span class="token punctuation">)</span> <span class="token punctuation">{</span>            thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment">// 输出最终结果</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Final counter value: "</span> <span class="token operator">+</span> counter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 应该输出10000</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-数组类型原子类"><a href="#4-数组类型原子类" class="headerlink" title="4. 数组类型原子类"></a>4. 数组类型原子类</h2><p>数组类型原子类主要包括以下几个：</p><ul><li><code>AtomicIntegerArray</code>：原子操作整型数组</li><li><code>AtomicLongArray</code>：原子操作长整型数组</li><li><code>AtomicReferenceArray</code>：原子操作引用类型数组</li></ul><p>这些类提供的方法类似，下面以<code>AtomicIntegerArray</code>为例介绍其主要方法和使用方式。</p><h3 id="4-1-AtomicIntegerArray的主要方法"><a href="#4-1-AtomicIntegerArray的主要方法" class="headerlink" title="4.1 AtomicIntegerArray的主要方法"></a>4.1 AtomicIntegerArray的主要方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建指定长度的AtomicIntegerArray实例，所有元素初始值为0</span><span class="token class-name">AtomicIntegerArray</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicIntegerArray</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建AtomicIntegerArray实例，使用给定的int数组初始化</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intArray <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">AtomicIntegerArray</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicIntegerArray</span><span class="token punctuation">(</span>intArray<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取指定索引位置的元素值</span><span class="token keyword">int</span> value <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置指定索引位置的元素值</span>array<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 原子地设置指定索引位置的元素值并返回旧值</span><span class="token keyword">int</span> oldValue <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">getAndSet</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 原子地将指定索引位置的元素值增加1并返回旧值</span><span class="token keyword">int</span> oldValue <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 原子地将指定索引位置的元素值增加1并返回新值</span><span class="token keyword">int</span> newValue <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 原子地将指定索引位置的元素值减少1并返回旧值</span><span class="token keyword">int</span> oldValue <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">getAndDecrement</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 原子地将指定索引位置的元素值减少1并返回新值</span><span class="token keyword">int</span> newValue <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 原子地将给定的值加到指定索引位置的元素值上并返回旧值</span><span class="token keyword">int</span> oldValue <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">getAndAdd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 原子地将给定的值加到指定索引位置的元素值上并返回新值</span><span class="token keyword">int</span> newValue <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 原子地更新指定索引位置的元素值，使用给定的更新函数</span><span class="token keyword">int</span> updatedValue <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">updateAndGet</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> x <span class="token operator">-&gt;</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 原子地更新指定索引位置的元素值，使用给定的更新函数并返回旧值</span><span class="token keyword">int</span> oldValue <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">getAndUpdate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> x <span class="token operator">-&gt;</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 原子地将当前值与输入值进行计算并更新，使用给定的累加器函数</span><span class="token keyword">int</span> updatedValue <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">accumulateAndGet</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 原子地将当前值与输入值进行计算并更新，使用给定的累加器函数并返回旧值</span><span class="token keyword">int</span> oldValue <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">getAndAccumulate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-使用示例"><a href="#4-2-使用示例" class="headerlink" title="4.2 使用示例"></a>4.2 使用示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicIntegerArray</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicIntegerArrayExample</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">AtomicIntegerArray</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicIntegerArray</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建5个线程，每个线程操作数组中的一个元素</span>        <span class="token class-name">Thread</span><span class="token punctuation">[</span><span class="token punctuation">]</span> threads <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> threads<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> index <span class="token operator">=</span> i<span class="token punctuation">;</span>            threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    array<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment">// 等待所有线程执行完成</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span> thread <span class="token operator">:</span> threads<span class="token punctuation">)</span> <span class="token punctuation">{</span>            thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment">// 输出数组的最终状态</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Final array values: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 每个元素都应该是1000</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-引用类型原子类"><a href="#5-引用类型原子类" class="headerlink" title="5. 引用类型原子类"></a>5. 引用类型原子类</h2><p>引用类型原子类主要包括以下几个：</p><ul><li><code>AtomicReference</code>：原子操作引用类型</li><li><code>AtomicStampedReference</code>：带版本戳的原子引用类型，解决ABA问题</li><li><code>AtomicMarkableReference</code>：带标记位的原子引用类型</li></ul><h3 id="5-1-AtomicReference"><a href="#5-1-AtomicReference" class="headerlink" title="5.1 AtomicReference"></a>5.1 AtomicReference</h3><p><code>AtomicReference</code>用于原子地更新引用类型变量。它的使用方式与基本类型原子类类似：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建AtomicReference实例，指定初始引用</span><span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> atomicUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取当前引用</span><span class="token class-name">User</span> currentUser <span class="token operator">=</span> atomicUser<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置新引用</span>atomicUser<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 原子地设置新引用并返回旧引用</span><span class="token class-name">User</span> oldUser <span class="token operator">=</span> atomicUser<span class="token punctuation">.</span><span class="token function">getAndSet</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Charlie"</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 原子地比较并设置引用</span><span class="token keyword">boolean</span> updated <span class="token operator">=</span> atomicUser<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>    <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Charlie"</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"David"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 原子地更新引用，使用给定的更新函数</span><span class="token class-name">User</span> updatedUser <span class="token operator">=</span> atomicUser<span class="token punctuation">.</span><span class="token function">updateAndGet</span><span class="token punctuation">(</span>user <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 原子地更新引用，使用给定的更新函数并返回旧引用</span><span class="token class-name">User</span> oldUser <span class="token operator">=</span> atomicUser<span class="token punctuation">.</span><span class="token function">getAndUpdate</span><span class="token punctuation">(</span>user <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 原子地将当前引用与输入引用进行计算并更新，使用给定的累加器函数</span><span class="token class-name">User</span> updatedUser <span class="token operator">=</span> atomicUser<span class="token punctuation">.</span><span class="token function">accumulateAndGet</span><span class="token punctuation">(</span>    <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Eve"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token punctuation">(</span>u1<span class="token punctuation">,</span> u2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> u1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> u2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 原子地将当前引用与输入引用进行计算并更新，使用给定的累加器函数并返回旧引用</span><span class="token class-name">User</span> oldUser <span class="token operator">=</span> atomicUser<span class="token punctuation">.</span><span class="token function">getAndAccumulate</span><span class="token punctuation">(</span>    <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Frank"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token punctuation">(</span>u1<span class="token punctuation">,</span> u2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>u1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> u1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> u2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 自定义User类</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> age <span class="token operator">==</span> user<span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-AtomicStampedReference"><a href="#5-2-AtomicStampedReference" class="headerlink" title="5.2 AtomicStampedReference"></a>5.2 AtomicStampedReference</h3><p><code>AtomicStampedReference</code>通过引入版本戳解决了ABA问题。ABA问题是指在CAS操作中，一个值从A变成B，又从B变回A，而CAS操作无法检测到这个变化。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建AtomicStampedReference实例，指定初始引用和初始版本戳</span><span class="token class-name">AtomicStampedReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> atomicStampedRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicStampedReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"initial"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取当前引用和版本戳</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stampHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">String</span> currentRef <span class="token operator">=</span> atomicStampedRef<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>stampHolder<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> currentStamp <span class="token operator">=</span> stampHolder<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 原子地比较并设置引用和版本戳</span><span class="token keyword">boolean</span> updated <span class="token operator">=</span> atomicStampedRef<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>    <span class="token string">"initial"</span><span class="token punctuation">,</span>     <span class="token string">"updated"</span><span class="token punctuation">,</span>     currentStamp<span class="token punctuation">,</span>     currentStamp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置新引用和版本戳（不进行比较）</span>atomicStampedRef<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"newValue"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 尝试原子地更新引用和版本戳</span><span class="token keyword">boolean</span> updated <span class="token operator">=</span> atomicStampedRef<span class="token punctuation">.</span><span class="token function">attemptStamp</span><span class="token punctuation">(</span><span class="token string">"newValue"</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-AtomicMarkableReference"><a href="#5-3-AtomicMarkableReference" class="headerlink" title="5.3 AtomicMarkableReference"></a>5.3 AtomicMarkableReference</h3><p><code>AtomicMarkableReference</code>与<code>AtomicStampedReference</code>类似，但它不是使用整数作为版本戳，而是使用布尔值作为标记位：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建AtomicMarkableReference实例，指定初始引用和初始标记</span><span class="token class-name">AtomicMarkableReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> atomicMarkableRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicMarkableReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"initial"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取当前引用和标记</span><span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> markHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">String</span> currentRef <span class="token operator">=</span> atomicMarkableRef<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>markHolder<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> currentMark <span class="token operator">=</span> markHolder<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 原子地比较并设置引用和标记</span><span class="token keyword">boolean</span> updated <span class="token operator">=</span> atomicMarkableRef<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>    <span class="token string">"initial"</span><span class="token punctuation">,</span>     <span class="token string">"updated"</span><span class="token punctuation">,</span>     currentMark<span class="token punctuation">,</span>     <span class="token operator">!</span>currentMark<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置新引用和标记（不进行比较）</span>atomicMarkableRef<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"newValue"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-字段更新器"><a href="#6-字段更新器" class="headerlink" title="6. 字段更新器"></a>6. 字段更新器</h2><p>字段更新器允许我们在不修改原有类的情况下，对其字段进行原子操作。主要包括以下几个：</p><ul><li><code>AtomicIntegerFieldUpdater</code>：原子更新整型字段</li><li><code>AtomicLongFieldUpdater</code>：原子更新长整型字段</li><li><code>AtomicReferenceFieldUpdater</code>：原子更新引用类型字段</li></ul><h3 id="6-1-AtomicIntegerFieldUpdater"><a href="#6-1-AtomicIntegerFieldUpdater" class="headerlink" title="6.1 AtomicIntegerFieldUpdater"></a>6.1 AtomicIntegerFieldUpdater</h3><p>使用<code>AtomicIntegerFieldUpdater</code>需要注意以下几点：</p><ul><li>被更新的字段必须是<code>volatile</code>类型的，以确保可见性</li><li>字段的访问权限必须是<code>public</code>、<code>protected</code>或默认的（包可见性）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicIntegerFieldUpdater</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicIntegerFieldUpdaterExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建Person实例</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 创建字段更新器</span>        <span class="token class-name">AtomicIntegerFieldUpdater</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> ageUpdater <span class="token operator">=</span> <span class="token class-name">AtomicIntegerFieldUpdater</span><span class="token punctuation">.</span><span class="token function">newUpdater</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 原子地增加年龄</span>        ageUpdater<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Updated age: "</span> <span class="token operator">+</span> person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出26</span>                <span class="token comment">// 原子地比较并设置年龄</span>        <span class="token keyword">boolean</span> updated <span class="token operator">=</span> ageUpdater<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Update successful: "</span> <span class="token operator">+</span> updated<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"New age: "</span> <span class="token operator">+</span> person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出30</span>    <span class="token punctuation">}</span>        <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">volatile</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span> <span class="token comment">// 必须是volatile类型</span>                <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-Atomic原子类的优缺点"><a href="#7-Atomic原子类的优缺点" class="headerlink" title="7. Atomic原子类的优缺点"></a>7. Atomic原子类的优缺点</h2><h3 id="7-1-优点"><a href="#7-1-优点" class="headerlink" title="7.1 优点"></a>7.1 优点</h3><ol><li><strong>高性能</strong>：相比传统的锁机制，Atomic原子类基于CAS实现，避免了线程切换和阻塞的开销，具有更高的性能</li><li><strong>非阻塞</strong>：线程在竞争失败时不会被挂起，而是可以立即尝试再次操作</li><li><strong>简单易用</strong>：API设计简洁明了，使用方便</li><li><strong>无需手动释放锁</strong>：不存在死锁风险</li></ol><h3 id="7-2-缺点"><a href="#7-2-缺点" class="headerlink" title="7.2 缺点"></a>7.2 缺点</h3><ol><li><strong>ABA问题</strong>：基本的Atomic原子类存在ABA问题（可以使用<code>AtomicStampedReference</code>或<code>AtomicMarkableReference</code>解决）</li><li><strong>自旋开销</strong>：在高并发场景下，大量线程同时竞争同一个原子变量，会导致CAS操作失败率增加，线程不断自旋尝试，增加CPU开销</li><li><strong>功能有限</strong>：Atomic原子类只提供了简单的原子操作，对于复杂的复合操作，需要额外的处理</li></ol><h2 id="8-Atomic原子类的使用场景"><a href="#8-Atomic原子类的使用场景" class="headerlink" title="8. Atomic原子类的使用场景"></a>8. Atomic原子类的使用场景</h2><p>Atomic原子类适用于以下场景：</p><ol><li><strong>计数器</strong>：如统计网站访问量、接口调用次数等</li><li><strong>并发标记</strong>：如标记某个资源是否被占用</li><li><strong>线程安全的单例模式</strong>：可以使用<code>AtomicReference</code>实现双重检查锁定的单例模式</li><li><strong>无锁算法实现</strong>：如无锁队列、无锁栈等</li><li><strong>并发环境下的状态管理</strong>：如状态机的实现</li></ol><h2 id="9-总结"><a href="#9-总结" class="headerlink" title="9. 总结"></a>9. 总结</h2><p>本文全面总结了Java中的Atomic原子类家族，包括基本类型原子类、数组类型原子类、引用类型原子类和字段更新器。这些原子类基于CAS机制实现，能够在不使用锁的情况下保证操作的原子性，在高并发场景下具有更好的性能。</p><p>Atomic原子类是Java并发编程中的重要工具，合理使用它们可以帮助我们编写高性能、线程安全的并发程序。但同时也需要注意它们的局限性，如ABA问题和自旋开销等，在实际应用中根据具体场景选择合适的并发控制机制。</p>]]></content>
    
    
    <summary type="html">本文全面总结了Java中的Atomic原子类家族，包括基本类型原子类、数组类型原子类、引用类型原子类和字段更新器等，详细介绍了各类Atomic类的使用方法、实现原理和应用场景。</summary>
    
    
    
    <category term="Java" scheme="https://blog.lucky845.top/categories/Java/"/>
    
    <category term="技术笔记" scheme="https://blog.lucky845.top/categories/Java/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Java基础" scheme="https://blog.lucky845.top/categories/Java/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://blog.lucky845.top/tags/Java/"/>
    
    <category term="并发编程" scheme="https://blog.lucky845.top/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    <category term="JUC" scheme="https://blog.lucky845.top/tags/JUC/"/>
    
    <category term="原子操作" scheme="https://blog.lucky845.top/tags/%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/"/>
    
    <category term="Atomic" scheme="https://blog.lucky845.top/tags/Atomic/"/>
    
  </entry>
  
  <entry>
    <title>【Linux】系统性能优化全面指南</title>
    <link href="https://blog.lucky845.top/archives/9e6b1d7f.html"/>
    <id>https://blog.lucky845.top/archives/9e6b1d7f.html</id>
    <published>2025-09-18T03:15:00.000Z</published>
    <updated>2025-09-18T08:08:06.020Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在现代IT环境中，服务器性能直接影响着应用的响应速度和用户体验。随着业务量的增长和数据规模的扩大，对Linux服务器进行合理的性能优化变得越来越重要。本文将从多个维度详细介绍Linux系统性能优化的方法和最佳实践，帮助系统管理员和运维工程师构建高效、稳定的服务器环境。</p><h2 id="1-Linux性能优化基础"><a href="#1-Linux性能优化基础" class="headerlink" title="1. Linux性能优化基础"></a>1. Linux性能优化基础</h2><h3 id="1-1-性能评估指标"><a href="#1-1-性能评估指标" class="headerlink" title="1.1 性能评估指标"></a>1.1 性能评估指标</h3><p>在进行性能优化之前，我们需要了解几个关键的性能评估指标：</p><ul><li><strong>CPU利用率</strong>：衡量CPU的繁忙程度</li><li><strong>内存使用率</strong>：评估内存的使用情况</li><li><strong>磁盘I/O</strong>：磁盘读写性能</li><li><strong>网络吞吐量</strong>：网络数据传输速率</li><li><strong>系统负载</strong>：系统的繁忙程度，通常表示为1分钟、5分钟和15分钟的平均值</li></ul><h3 id="1-2-性能监控工具"><a href="#1-2-性能监控工具" class="headerlink" title="1.2 性能监控工具"></a>1.2 性能监控工具</h3><p>Linux提供了丰富的性能监控工具，常用的包括：</p><ul><li><code>top</code>：实时监控系统整体性能</li><li><code>htop</code>：增强版的top工具，提供更友好的界面</li><li><code>vmstat</code>：虚拟内存统计</li><li><code>iostat</code>：I/O统计信息</li><li><code>sar</code>：系统活动报告</li><li><code>netstat</code>：网络统计信息</li><li><code>iftop</code>：网络带宽监控</li><li><code>free</code>：内存使用情况</li></ul><h2 id="2-CPU性能优化"><a href="#2-CPU性能优化" class="headerlink" title="2. CPU性能优化"></a>2. CPU性能优化</h2><h3 id="2-1-CPU使用率分析"><a href="#2-1-CPU使用率分析" class="headerlink" title="2.1 CPU使用率分析"></a>2.1 CPU使用率分析</h3><p>使用<code>top</code>命令分析CPU使用率：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动top命令</span>$ <span class="token function">top</span><span class="token comment"># 按CPU使用率排序</span>在top界面按P键<span class="token comment"># 查看每个核心的CPU使用率</span>在top界面按1键<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-进程优先级调整"><a href="#2-2-进程优先级调整" class="headerlink" title="2.2 进程优先级调整"></a>2.2 进程优先级调整</h3><p>通过调整进程优先级，可以让关键业务获得更多的CPU资源：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动进程时设置优先级</span>$ <span class="token function">nice</span> <span class="token parameter variable">-n</span> <span class="token number">10</span> <span class="token builtin class-name">command</span><span class="token comment"># 调整已有进程的优先级</span>$ <span class="token function">renice</span> <span class="token number">10</span> <span class="token parameter variable">-p</span> PID<span class="token comment"># 实时调整进程优先级（更精细的控制）</span>$ chrt <span class="token parameter variable">-r</span> <span class="token number">99</span> <span class="token parameter variable">-p</span> PID  <span class="token comment"># 将进程设置为实时优先级99</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-CPU亲和性设置"><a href="#2-3-CPU亲和性设置" class="headerlink" title="2.3 CPU亲和性设置"></a>2.3 CPU亲和性设置</h3><p>将进程绑定到特定的CPU核心，可以减少CPU切换开销：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看进程的CPU亲和性</span>$ taskset <span class="token parameter variable">-p</span> PID<span class="token comment"># 设置进程的CPU亲和性（绑定到核心0和1）</span>$ taskset <span class="token parameter variable">-p</span> 0x3 PID<span class="token comment"># 启动进程时设置CPU亲和性</span>$ taskset <span class="token parameter variable">-c</span> <span class="token number">0,1</span> <span class="token builtin class-name">command</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-内存性能优化"><a href="#3-内存性能优化" class="headerlink" title="3. 内存性能优化"></a>3. 内存性能优化</h2><h3 id="3-1-内存使用监控"><a href="#3-1-内存使用监控" class="headerlink" title="3.1 内存使用监控"></a>3.1 内存使用监控</h3><p>使用<code>free</code>和<code>vmstat</code>命令监控内存使用情况：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看内存使用情况</span>$ <span class="token function">free</span> <span class="token parameter variable">-h</span><span class="token comment"># 监控内存和交换空间使用情况</span>$ <span class="token function">vmstat</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-交换空间优化"><a href="#3-2-交换空间优化" class="headerlink" title="3.2 交换空间优化"></a>3.2 交换空间优化</h3><p>合理配置交换空间可以提高系统的稳定性：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看交换空间使用情况</span>$ <span class="token function">swapon</span> <span class="token parameter variable">-s</span><span class="token comment"># 调整交换空间使用策略（降低交换频率）</span>$ <span class="token function">sysctl</span> <span class="token assign-left variable">vm.swappiness</span><span class="token operator">=</span><span class="token number">10</span><span class="token comment"># 永久设置</span>$ <span class="token builtin class-name">echo</span> <span class="token string">"vm.swappiness=10"</span> <span class="token operator">&gt;&gt;</span> /etc/sysctl.conf$ <span class="token function">sysctl</span> <span class="token parameter variable">-p</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-内存缓存优化"><a href="#3-3-内存缓存优化" class="headerlink" title="3.3 内存缓存优化"></a>3.3 内存缓存优化</h3><p>Linux会将空闲内存用作文件系统缓存，我们可以通过调整相关参数优化缓存行为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 调整文件系统缓存回收策略</span>$ <span class="token function">sysctl</span> <span class="token assign-left variable">vm.vfs_cache_pressure</span><span class="token operator">=</span><span class="token number">50</span><span class="token comment"># 永久设置</span>$ <span class="token builtin class-name">echo</span> <span class="token string">"vm.vfs_cache_pressure=50"</span> <span class="token operator">&gt;&gt;</span> /etc/sysctl.conf$ <span class="token function">sysctl</span> <span class="token parameter variable">-p</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-磁盘I-O性能优化"><a href="#4-磁盘I-O性能优化" class="headerlink" title="4. 磁盘I/O性能优化"></a>4. 磁盘I/O性能优化</h2><h3 id="4-1-磁盘性能评估"><a href="#4-1-磁盘性能评估" class="headerlink" title="4.1 磁盘性能评估"></a>4.1 磁盘性能评估</h3><p>使用<code>iostat</code>评估磁盘性能：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装sysstat包（包含iostat）</span>$ yum <span class="token function">install</span> sysstat  <span class="token comment"># CentOS/RHEL</span>$ <span class="token function">apt</span> <span class="token function">install</span> sysstat  <span class="token comment"># Ubuntu/Debian</span><span class="token comment"># 查看磁盘I/O统计</span>$ iostat <span class="token parameter variable">-dx</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-文件系统优化"><a href="#4-2-文件系统优化" class="headerlink" title="4.2 文件系统优化"></a>4.2 文件系统优化</h3><p>选择合适的文件系统并进行优化配置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看当前文件系统</span>$ <span class="token function">df</span> <span class="token parameter variable">-T</span><span class="token comment"># 格式化时优化（以ext4为例）</span>$ mkfs.ext4 <span class="token parameter variable">-O</span> dir_index,extent <span class="token parameter variable">-T</span> largefile /dev/sdb1<span class="token comment"># 挂载选项优化</span>$ <span class="token function">mount</span> <span class="token parameter variable">-o</span> noatime,discard /dev/sdb1 /data<span class="token comment"># 永久设置挂载选项</span>$ <span class="token builtin class-name">echo</span> <span class="token string">'/dev/sdb1 /data ext4 noatime,discard 0 0'</span> <span class="token operator">&gt;&gt;</span> /etc/fstab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-I-O调度器调整"><a href="#4-3-I-O调度器调整" class="headerlink" title="4.3 I/O调度器调整"></a>4.3 I/O调度器调整</h3><p>根据不同的存储设备类型，选择合适的I/O调度器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看当前I/O调度器</span>$ <span class="token function">cat</span> /sys/block/sda/queue/scheduler<span class="token comment"># 临时设置I/O调度器（SSD推荐使用none或mq-deadline）</span>$ <span class="token builtin class-name">echo</span> none <span class="token operator">&gt;</span> /sys/block/sda/queue/scheduler<span class="token comment"># 永久设置I/O调度器</span>$ <span class="token builtin class-name">echo</span> <span class="token string">'ACTION=="add|change", KERNEL=="sda", ATTR{queue/scheduler}="none"'</span> <span class="token operator">&gt;</span> /etc/udev/rules.d/60-scheduler.rules<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-网络性能优化"><a href="#5-网络性能优化" class="headerlink" title="5. 网络性能优化"></a>5. 网络性能优化</h2><h3 id="5-1-网络接口配置"><a href="#5-1-网络接口配置" class="headerlink" title="5.1 网络接口配置"></a>5.1 网络接口配置</h3><p>优化网络接口参数以提高网络性能：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看网络接口信息</span>$ <span class="token function">ifconfig</span> <span class="token parameter variable">-a</span>$ <span class="token function">ethtool</span> eth0<span class="token comment"># 启用巨帧（在支持的网络环境中）</span>$ <span class="token function">ethtool</span> <span class="token parameter variable">-K</span> eth0 gso on gro on tso on<span class="token comment"># 增加网络缓冲区大小</span>$ <span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">net.core.rmem_max</span><span class="token operator">=</span><span class="token number">16777216</span>$ <span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">net.core.wmem_max</span><span class="token operator">=</span><span class="token number">16777216</span>$ <span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">net.core.rmem_default</span><span class="token operator">=</span><span class="token number">16777216</span>$ <span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">net.core.wmem_default</span><span class="token operator">=</span><span class="token number">16777216</span><span class="token comment"># 永久设置</span>$ <span class="token builtin class-name">echo</span> <span class="token string">"net.core.rmem_max=16777216"</span> <span class="token operator">&gt;&gt;</span> /etc/sysctl.conf$ <span class="token builtin class-name">echo</span> <span class="token string">"net.core.wmem_max=16777216"</span> <span class="token operator">&gt;&gt;</span> /etc/sysctl.conf$ <span class="token builtin class-name">echo</span> <span class="token string">"net.core.rmem_default=16777216"</span> <span class="token operator">&gt;&gt;</span> /etc/sysctl.conf$ <span class="token builtin class-name">echo</span> <span class="token string">"net.core.wmem_default=16777216"</span> <span class="token operator">&gt;&gt;</span> /etc/sysctl.conf$ <span class="token function">sysctl</span> <span class="token parameter variable">-p</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-TCP参数优化"><a href="#5-2-TCP参数优化" class="headerlink" title="5.2 TCP参数优化"></a>5.2 TCP参数优化</h3><p>调整TCP参数可以显著提高网络传输性能：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启用TCP窗口缩放</span>$ <span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">net.ipv4.tcp_window_scaling</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment"># 增加TCP连接跟踪表大小</span>$ <span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">net.netfilter.nf_conntrack_max</span><span class="token operator">=</span><span class="token number">1000000</span><span class="token comment"># 减少TIME_WAIT连接数量</span>$ <span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">net.ipv4.tcp_tw_reuse</span><span class="token operator">=</span><span class="token number">1</span>$ <span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">net.ipv4.tcp_tw_recycle</span><span class="token operator">=</span><span class="token number">0</span>  <span class="token comment"># 注意：NAT环境下不要启用</span>$ <span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">net.ipv4.tcp_fin_timeout</span><span class="token operator">=</span><span class="token number">30</span><span class="token comment"># 增加TCP最大连接数</span>$ <span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">net.core.somaxconn</span><span class="token operator">=</span><span class="token number">65535</span><span class="token comment"># 永久设置</span>$ <span class="token builtin class-name">echo</span> <span class="token string">"net.ipv4.tcp_window_scaling=1"</span> <span class="token operator">&gt;&gt;</span> /etc/sysctl.conf$ <span class="token builtin class-name">echo</span> <span class="token string">"net.netfilter.nf_conntrack_max=1000000"</span> <span class="token operator">&gt;&gt;</span> /etc/sysctl.conf$ <span class="token builtin class-name">echo</span> <span class="token string">"net.ipv4.tcp_tw_reuse=1"</span> <span class="token operator">&gt;&gt;</span> /etc/sysctl.conf$ <span class="token builtin class-name">echo</span> <span class="token string">"net.ipv4.tcp_tw_recycle=0"</span> <span class="token operator">&gt;&gt;</span> /etc/sysctl.conf$ <span class="token builtin class-name">echo</span> <span class="token string">"net.ipv4.tcp_fin_timeout=30"</span> <span class="token operator">&gt;&gt;</span> /etc/sysctl.conf$ <span class="token builtin class-name">echo</span> <span class="token string">"net.core.somaxconn=65535"</span> <span class="token operator">&gt;&gt;</span> /etc/sysctl.conf$ <span class="token function">sysctl</span> <span class="token parameter variable">-p</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-应用性能优化"><a href="#6-应用性能优化" class="headerlink" title="6. 应用性能优化"></a>6. 应用性能优化</h2><h3 id="6-1-JVM优化"><a href="#6-1-JVM优化" class="headerlink" title="6.1 JVM优化"></a>6.1 JVM优化</h3><p>对于Java应用，JVM参数优化至关重要：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 合理设置堆大小</span><span class="token assign-left variable">JAVA_OPTS</span><span class="token operator">=</span><span class="token string">"-Xms4g -Xmx4g"</span><span class="token comment"># 选择合适的垃圾收集器（JDK11+推荐使用G1）</span><span class="token assign-left variable">JAVA_OPTS</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$JAVA_OPTS</span> -XX:+UseG1GC"</span><span class="token comment"># 启用并行GC线程</span><span class="token assign-left variable">JAVA_OPTS</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$JAVA_OPTS</span> -XX:ParallelGCThreads=8"</span><span class="token comment"># 设置GC日志</span><span class="token assign-left variable">JAVA_OPTS</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$JAVA_OPTS</span> -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:gc.log"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-Web服务器优化"><a href="#6-2-Web服务器优化" class="headerlink" title="6.2 Web服务器优化"></a>6.2 Web服务器优化</h3><p>以Nginx为例，进行Web服务器性能优化：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 优化工作进程数量</span><span class="token directive"><span class="token keyword">worker_processes</span> auto</span><span class="token punctuation">;</span><span class="token comment"># 每个进程的最大连接数</span><span class="token directive"><span class="token keyword">worker_connections</span> <span class="token number">10240</span></span><span class="token punctuation">;</span><span class="token comment"># 启用高效文件传输模式</span><span class="token directive"><span class="token keyword">sendfile</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span><span class="token comment"># 减少网络报文段数量</span><span class="token directive"><span class="token keyword">tcp_nopush</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span><span class="token comment"># 减少延迟</span><span class="token directive"><span class="token keyword">tcp_nodelay</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span><span class="token comment"># 连接超时设置</span><span class="token directive"><span class="token keyword">keepalive_timeout</span> <span class="token number">65</span></span><span class="token punctuation">;</span><span class="token comment"># 优化FastCGI缓存（如果使用PHP）</span><span class="token directive"><span class="token keyword">fastcgi_cache_path</span> /var/cache/nginx levels=1:2 keys_zone=php_cache:10m max_size=10g inactive=60m use_temp_path=off</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-系统内核优化"><a href="#7-系统内核优化" class="headerlink" title="7. 系统内核优化"></a>7. 系统内核优化</h2><h3 id="7-1-内核版本升级"><a href="#7-1-内核版本升级" class="headerlink" title="7.1 内核版本升级"></a>7.1 内核版本升级</h3><p>保持使用最新的稳定内核版本，可以获得更好的性能和安全性：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看当前内核版本</span>$ <span class="token function">uname</span> <span class="token parameter variable">-r</span><span class="token comment"># CentOS/RHEL系统升级内核</span>$ yum update kernel<span class="token comment"># Ubuntu/Debian系统升级内核</span>$ <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt</span> upgrade linux-image-generic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-内核参数调优"><a href="#7-2-内核参数调优" class="headerlink" title="7.2 内核参数调优"></a>7.2 内核参数调优</h3><p>根据系统需求，调整关键内核参数：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 优化文件描述符限制</span>$ <span class="token function">sysctl</span> <span class="token parameter variable">-w</span> fs.file-max<span class="token operator">=</span><span class="token number">1000000</span><span class="token comment"># 增加进程最大打开文件数</span>$ <span class="token builtin class-name">echo</span> <span class="token string">'* soft nofile 65535'</span> <span class="token operator">&gt;&gt;</span> /etc/security/limits.conf$ <span class="token builtin class-name">echo</span> <span class="token string">'* hard nofile 65535'</span> <span class="token operator">&gt;&gt;</span> /etc/security/limits.conf<span class="token comment"># 优化异步I/O性能</span>$ <span class="token function">sysctl</span> <span class="token parameter variable">-w</span> fs.aio-max-nr<span class="token operator">=</span><span class="token number">1048576</span><span class="token comment"># 永久设置</span>$ <span class="token builtin class-name">echo</span> <span class="token string">"fs.file-max=1000000"</span> <span class="token operator">&gt;&gt;</span> /etc/sysctl.conf$ <span class="token builtin class-name">echo</span> <span class="token string">"fs.aio-max-nr=1048576"</span> <span class="token operator">&gt;&gt;</span> /etc/sysctl.conf$ <span class="token function">sysctl</span> <span class="token parameter variable">-p</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-性能优化最佳实践"><a href="#8-性能优化最佳实践" class="headerlink" title="8. 性能优化最佳实践"></a>8. 性能优化最佳实践</h2><ol><li><p><strong>性能基准测试</strong>：在优化前进行基准测试，建立性能基线</p></li><li><p><strong>渐进式优化</strong>：一次只更改一个变量，测试其对性能的影响</p></li><li><p><strong>监控与分析</strong>：建立完善的监控系统，持续跟踪性能变化</p></li><li><p><strong>定期维护</strong>：定期清理日志、临时文件，进行系统检查</p></li><li><p><strong>针对应用特性优化</strong>：根据应用的特点和瓶颈，制定针对性的优化策略</p></li><li><p><strong>考虑硬件限制</strong>：了解硬件的性能极限，避免过度优化</p></li><li><p><strong>记录优化过程</strong>：详细记录每一步优化操作和结果，便于回滚和总结</p></li></ol><h2 id="9-总结"><a href="#9-总结" class="headerlink" title="9. 总结"></a>9. 总结</h2><p>Linux系统性能优化是一个持续的过程，需要从多个维度综合考虑。本文介绍了CPU、内存、磁盘I/O、网络、应用和系统内核等方面的优化方法和最佳实践。通过合理的优化配置，可以显著提高系统的性能和稳定性，为应用提供更好的运行环境。</p><p>在实际优化过程中，应根据系统的具体情况和应用需求，选择合适的优化策略，并通过监控工具持续评估优化效果，不断调整和改进。</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/performance_tuning_guide/index">Linux Performance Optimization Guide</a></li><li><a href="https://www.kernel.org/doc/html/latest/">Linux Kernel Documentation</a></li><li><a href="https://www.nginx.com/resources/wiki/start/topics/tutorials/optimizations/">Nginx Optimization Guide</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;在现代IT环境中，服务器性能直接影响着应用的响应速度和用户体验。随着业务量的增长和数据规模的扩大，对Linux服务器进行合理</summary>
      
    
    
    
    <category term="Linux" scheme="https://blog.lucky845.top/categories/Linux/"/>
    
    <category term="系统管理" scheme="https://blog.lucky845.top/categories/Linux/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
    
    
    <category term="Linux" scheme="https://blog.lucky845.top/tags/Linux/"/>
    
    <category term="性能优化" scheme="https://blog.lucky845.top/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="系统调优" scheme="https://blog.lucky845.top/tags/%E7%B3%BB%E7%BB%9F%E8%B0%83%E4%BC%98/"/>
    
    <category term="服务器管理" scheme="https://blog.lucky845.top/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>【Spring Boot】日志管理完全指南</title>
    <link href="https://blog.lucky845.top/archives/2d85f3c7.html"/>
    <id>https://blog.lucky845.top/archives/2d85f3c7.html</id>
    <published>2025-09-18T02:30:00.000Z</published>
    <updated>2025-09-18T08:08:06.020Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在Spring Boot应用开发中，日志管理是一个至关重要但常常被低估的部分。良好的日志系统不仅能够帮助我们排查问题，还能提供系统运行状态的实时监控和性能分析依据。本文将全面介绍Spring Boot中的日志管理方案，从基础配置到高级特性，帮助开发者构建一个高效、灵活的日志系统。</p><h2 id="1-Spring-Boot日志系统概述"><a href="#1-Spring-Boot日志系统概述" class="headerlink" title="1. Spring Boot日志系统概述"></a>1. Spring Boot日志系统概述</h2><h3 id="1-1-默认日志系统"><a href="#1-1-默认日志系统" class="headerlink" title="1.1 默认日志系统"></a>1.1 默认日志系统</h3><p>Spring Boot默认使用Logback作为日志框架，并提供了对Log4j2和JUL（Java Util Logging）的支持。在大多数情况下，使用默认的Logback配置就能够满足基础需求。</p><p>Spring Boot日志系统的核心优势：</p><ul><li>开箱即用，无需额外配置</li><li>支持多种日志框架的切换</li><li>提供灵活的配置选项</li><li>集成控制台和文件输出</li></ul><h3 id="1-2-日志级别"><a href="#1-2-日志级别" class="headerlink" title="1.2 日志级别"></a>1.2 日志级别</h3><p>Spring Boot支持以下日志级别（按严重程度递增）：</p><ul><li>TRACE：最详细的日志信息，通常仅用于开发调试</li><li>DEBUG：调试信息，记录程序的详细执行流程</li><li>INFO：一般信息，记录应用的关键运行状态</li><li>WARN：警告信息，表示可能发生的问题</li><li>ERROR：错误信息，表示发生了错误但不影响系统运行</li><li>FATAL：致命错误，表示发生了严重错误，系统可能无法继续运行</li></ul><h2 id="2-基础日志配置"><a href="#2-基础日志配置" class="headerlink" title="2. 基础日志配置"></a>2. 基础日志配置</h2><h3 id="2-1-在application-properties中配置"><a href="#2-1-在application-properties中配置" class="headerlink" title="2.1 在application.properties中配置"></a>2.1 在application.properties中配置</h3><p>Spring Boot提供了简单的属性配置方式，可以在<code>application.properties</code>或<code>application.yml</code>文件中设置基本的日志参数：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 配置根日志级别</span>logging.level.root=INFO<span class="token comment"># 配置特定包的日志级别</span>logging.level.com.example.demo=DEBUG<span class="token comment"># 配置控制台输出格式</span>logging.pattern.console=%d<span class="token punctuation">{</span>yyyy<span class="token punctuation">-</span>MM<span class="token punctuation">-</span>dd HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss<span class="token punctuation">}</span> <span class="token punctuation">[</span>%thread<span class="token punctuation">]</span> %<span class="token punctuation">-</span>5level %logger<span class="token punctuation">{</span><span class="token number">36</span><span class="token punctuation">}</span> <span class="token punctuation">-</span> %msg%n<span class="token comment"># 配置文件输出</span>logging.file.name=logs/application.loglogging.pattern.file=%d<span class="token punctuation">{</span>yyyy<span class="token punctuation">-</span>MM<span class="token punctuation">-</span>dd HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss<span class="token punctuation">}</span> <span class="token punctuation">[</span>%thread<span class="token punctuation">]</span> %<span class="token punctuation">-</span>5level %logger<span class="token punctuation">{</span><span class="token number">36</span><span class="token punctuation">}</span> <span class="token punctuation">-</span> %msg%n<span class="token comment"># 文件滚动策略</span>logging.logback.rollingpolicy.max<span class="token punctuation">-</span>file<span class="token punctuation">-</span>size=10MBlogging.logback.rollingpolicy.max<span class="token punctuation">-</span>history=30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-使用logback-spring-xml配置"><a href="#2-2-使用logback-spring-xml配置" class="headerlink" title="2.2 使用logback-spring.xml配置"></a>2.2 使用logback-spring.xml配置</h3><p>对于更复杂的日志需求，推荐使用专用的日志配置文件。在Spring Boot中，我们可以创建<code>logback-spring.xml</code>文件放在<code>src/main/resources</code>目录下，Spring Boot会自动加载它。</p><p>以下是一个典型的<code>logback-spring.xml</code>配置示例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org/springframework/boot/logging/logback/defaults.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!-- 控制台输出 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 文件输出 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>logs/application.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- 按天回滚，格式为 application-2023-03-01.log --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>logs/application-%d{yyyy-MM-dd}.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- 保留30天的日志文件 --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">&gt;</span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- 总大小上限为1GB --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>totalSizeCap</span><span class="token punctuation">&gt;</span></span>1GB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>totalSizeCap</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 错误日志单独输出 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ERROR_FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.ThresholdFilter<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">&gt;</span></span>ERROR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">&gt;</span></span>logs/error.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>logs/error-%d{yyyy-MM-dd}.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">&gt;</span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 配置根日志级别 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ERROR_FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 配置特定包的日志级别 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.example.demo<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DEBUG<span class="token punctuation">"</span></span> <span class="token attr-name">additivity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 第三方库的日志级别配置 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.hibernate<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WARN<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-高级日志功能"><a href="#3-高级日志功能" class="headerlink" title="3. 高级日志功能"></a>3. 高级日志功能</h2><h3 id="3-1-多环境日志配置"><a href="#3-1-多环境日志配置" class="headerlink" title="3.1 多环境日志配置"></a>3.1 多环境日志配置</h3><p>在实际开发中，我们通常需要为不同环境（如开发、测试、生产）配置不同的日志级别和输出方式。Spring Boot提供了<code>&lt;springProfile&gt;</code>标签来实现这一功能：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 公共配置 --&gt;</span>        <span class="token comment">&lt;!-- 开发环境配置 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dev<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DEBUG<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 生产环境配置 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prod<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ERROR_FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-异步日志"><a href="#3-2-异步日志" class="headerlink" title="3.2 异步日志"></a>3.2 异步日志</h3><p>为了提高应用性能，可以将日志记录改为异步方式，避免日志IO操作阻塞主线程：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 异步日志配置 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ASYNC<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.AsyncAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 不丢失日志，当队列满时，将阻塞主线程 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>neverBlock</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>neverBlock</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 设置队列大小 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>queueSize</span><span class="token punctuation">&gt;</span></span>1024<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>queueSize</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 引用已有的appender --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ERROR_FILE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 在root中引用异步appender --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ASYNC<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-自定义日志格式"><a href="#3-3-自定义日志格式" class="headerlink" title="3.3 自定义日志格式"></a>3.3 自定义日志格式</h3><p>可以根据需要自定义日志输出格式，添加额外信息如请求ID、用户信息等：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] [%X{requestId}] [%X{username}] %-5level %logger{36} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4-在代码中使用日志"><a href="#4-在代码中使用日志" class="headerlink" title="4. 在代码中使用日志"></a>4. 在代码中使用日志</h2><h3 id="4-1-使用SLF4J-API"><a href="#4-1-使用SLF4J-API" class="headerlink" title="4.1 使用SLF4J API"></a>4.1 使用SLF4J API</h3><p>Spring Boot推荐使用SLF4J（Simple Logging Facade for Java）作为日志抽象层，这样可以方便地切换底层日志实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogController</span> <span class="token punctuation">{</span>        <span class="token comment">// 获取Logger实例</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">LogController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/log-test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">logTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"这是一条TRACE级别的日志"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"这是一条DEBUG级别的日志"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"这是一条INFO级别的日志"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"这是一条WARN级别的日志"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"这是一条ERROR级别的日志"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 带参数的日志</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"用户[{}]登录系统"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 异常日志</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"发生了除零异常"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token string">"日志测试完成"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-使用-Slf4j注解"><a href="#4-2-使用-Slf4j注解" class="headerlink" title="4.2 使用@Slf4j注解"></a>4.2 使用@Slf4j注解</h3><p>如果使用Lombok，可以通过<code>@Slf4j</code>注解简化Logger的声明：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogController</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/log-test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">logTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"这是使用@Slf4j注解的日志"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"日志测试完成"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-生产环境日志最佳实践"><a href="#5-生产环境日志最佳实践" class="headerlink" title="5. 生产环境日志最佳实践"></a>5. 生产环境日志最佳实践</h2><p>在生产环境中，合理的日志配置和使用方式至关重要：</p><ol><li><p><strong>合理设置日志级别</strong>：生产环境建议使用INFO或WARN级别，避免过多的日志影响性能</p></li><li><p><strong>日志文件滚动策略</strong>：配置合理的文件大小和保留时间，防止日志文件过大</p></li><li><p><strong>错误日志分离</strong>：将ERROR级别的日志单独输出到文件，便于问题排查</p></li><li><p><strong>敏感信息保护</strong>：避免在日志中记录密码、API密钥等敏感信息</p></li><li><p><strong>使用MDC上下文</strong>：利用SLF4J的MDC（Mapped Diagnostic Context）功能，在日志中添加请求ID、用户信息等上下文数据，便于追踪完整请求链路</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">MDC</span></span><span class="token punctuation">;</span><span class="token comment">// 在请求开始时添加上下文信息</span><span class="token constant">MDC</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"requestId"</span><span class="token punctuation">,</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token constant">MDC</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> currentUser<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在请求结束时清除上下文信息</span><span class="token constant">MDC</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>本文全面介绍了Spring Boot中的日志管理方案，包括默认日志系统、基础配置、高级功能、代码中的使用方式以及生产环境最佳实践。通过合理配置和使用日志系统，我们可以更好地监控应用运行状态，快速定位和解决问题，提高应用的可维护性和稳定性。</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/howto.html#howto.logging">Spring Boot官方文档 - 日志</a></li><li><a href="https://logback.qos.ch/documentation.html">Logback官方文档</a></li><li><a href="http://www.slf4j.org/manual.html">SLF4J官方文档</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;在Spring Boot应用开发中，日志管理是一个至关重要但常常被低估的部分。良好的日志系统不仅能够帮助我们排查问题，还能提</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.lucky845.top/categories/Java/"/>
    
    <category term="Spring Boot" scheme="https://blog.lucky845.top/categories/Java/Spring-Boot/"/>
    
    
    <category term="日志管理" scheme="https://blog.lucky845.top/tags/%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/"/>
    
    <category term="Spring Boot" scheme="https://blog.lucky845.top/tags/Spring-Boot/"/>
    
    <category term="Logback" scheme="https://blog.lucky845.top/tags/Logback/"/>
    
    <category term="最佳实践" scheme="https://blog.lucky845.top/tags/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>【Java】并发容器总结：线程安全的集合框架详解</title>
    <link href="https://blog.lucky845.top/archives/7a8b905g.html"/>
    <id>https://blog.lucky845.top/archives/7a8b905g.html</id>
    <published>2025-06-05T01:00:00.000Z</published>
    <updated>2025-06-05T00:04:10.676Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、并发容器概述"><a href="#一、并发容器概述" class="headerlink" title="一、并发容器概述"></a>一、并发容器概述</h2><p>Java并发容器是Java集合框架中专门为多线程环境设计的线程安全容器。它们通过不同的并发控制机制，确保在多线程访问时的数据一致性和线程安全性。</p><h3 id="1-1-主要并发容器分类"><a href="#1-1-主要并发容器分类" class="headerlink" title="1.1 主要并发容器分类"></a>1.1 主要并发容器分类</h3><ol><li><p><strong>并发Map</strong></p><ul><li>ConcurrentHashMap</li><li>ConcurrentSkipListMap</li></ul></li><li><p><strong>并发Queue</strong></p><ul><li>ConcurrentLinkedQueue</li><li>BlockingQueue接口及其实现类</li><li>TransferQueue接口及其实现类</li></ul></li><li><p><strong>并发Set</strong></p><ul><li>ConcurrentSkipListSet</li><li>CopyOnWriteArraySet</li></ul></li><li><p><strong>并发List</strong></p><ul><li>CopyOnWriteArrayList</li></ul></li></ol><h2 id="二、ConcurrentHashMap详解"><a href="#二、ConcurrentHashMap详解" class="headerlink" title="二、ConcurrentHashMap详解"></a>二、ConcurrentHashMap详解</h2><h3 id="2-1-核心特性"><a href="#2-1-核心特性" class="headerlink" title="2.1 核心特性"></a>2.1 核心特性</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span>    <span class="token keyword">implements</span> <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>        <span class="token comment">// 默认初始容量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_CAPACITY</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>        <span class="token comment">// 默认并发级别</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_CONCURRENCY_LEVEL</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>        <span class="token comment">// 默认加载因子</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> <span class="token constant">DEFAULT_LOAD_FACTOR</span> <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ConcurrentHashMap的主要特点：</p><ol><li><strong>分段锁机制</strong>：JDK 1.7采用Segment分段锁</li><li><strong>CAS + synchronized</strong>：JDK 1.8采用CAS + synchronized保证并发安全</li><li><strong>并发度可调</strong>：支持自定义并发级别</li><li><strong>弱一致性</strong>：迭代器不会抛出ConcurrentModificationException</li></ol><h3 id="2-2-核心方法实现"><a href="#2-2-核心方法实现" class="headerlink" title="2.2 核心方法实现"></a>2.2 核心方法实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 插入或更新元素</span><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> f<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fh<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            tab <span class="token operator">=</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fh <span class="token operator">=</span> f<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">MOVED</span><span class="token punctuation">)</span>            tab <span class="token operator">=</span> <span class="token function">helpTransfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 链表或红黑树的插入逻辑</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、BlockingQueue详解"><a href="#三、BlockingQueue详解" class="headerlink" title="三、BlockingQueue详解"></a>三、BlockingQueue详解</h2><h3 id="3-1-主要实现类"><a href="#3-1-主要实现类" class="headerlink" title="3.1 主要实现类"></a>3.1 主要实现类</h3><ol><li><strong>ArrayBlockingQueue</strong>：有界阻塞队列</li><li><strong>LinkedBlockingQueue</strong>：可选有界阻塞队列</li><li><strong>PriorityBlockingQueue</strong>：无界优先级阻塞队列</li><li><strong>DelayQueue</strong>：延迟队列</li><li><strong>SynchronousQueue</strong>：同步队列</li></ol><h3 id="3-2-核心方法"><a href="#3-2-核心方法" class="headerlink" title="3.2 核心方法"></a>3.2 核心方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">// 添加元素，如果队列满则阻塞</span>    <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>        <span class="token comment">// 获取元素，如果队列空则阻塞</span>    <span class="token class-name">E</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>        <span class="token comment">// 添加元素，如果队列满则返回false</span>    <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取元素，如果队列空则返回null</span>    <span class="token class-name">E</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、CopyOnWriteArrayList详解"><a href="#四、CopyOnWriteArrayList详解" class="headerlink" title="四、CopyOnWriteArrayList详解"></a>四、CopyOnWriteArrayList详解</h2><h3 id="4-1-实现原理"><a href="#4-1-实现原理" class="headerlink" title="4.1 实现原理"></a>4.1 实现原理</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span>    <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">RandomAccess</span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">{</span>        <span class="token comment">// 使用volatile保证可见性</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">;</span>        <span class="token comment">// 写操作时加锁</span>    <span class="token keyword">final</span> <span class="token keyword">transient</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CopyOnWriteArrayList的特点：</p><ol><li><strong>写时复制</strong>：修改时复制整个数组</li><li><strong>读操作无锁</strong>：读操作不需要加锁</li><li><strong>弱一致性</strong>：迭代器不会抛出ConcurrentModificationException</li><li><strong>适合读多写少</strong>：写操作性能较差</li></ol><h3 id="4-2-核心方法实现"><a href="#4-2-核心方法实现" class="headerlink" title="4.2 核心方法实现"></a>4.2 核心方法实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newElements <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newElements<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token function">setArray</span><span class="token punctuation">(</span>newElements<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、并发容器的使用建议"><a href="#五、并发容器的使用建议" class="headerlink" title="五、并发容器的使用建议"></a>五、并发容器的使用建议</h2><h3 id="5-1-选择建议"><a href="#5-1-选择建议" class="headerlink" title="5.1 选择建议"></a>5.1 选择建议</h3><ol><li><p><strong>Map的选择</strong></p><ul><li>需要高并发：使用ConcurrentHashMap</li><li>需要排序：使用ConcurrentSkipListMap</li></ul></li><li><p><strong>Queue的选择</strong></p><ul><li>需要阻塞操作：使用BlockingQueue</li><li>需要优先级：使用PriorityBlockingQueue</li><li>需要延迟处理：使用DelayQueue</li></ul></li><li><p><strong>List的选择</strong></p><ul><li>读多写少：使用CopyOnWriteArrayList</li><li>写多读少：使用Collections.synchronizedList</li></ul></li></ol><h3 id="5-2-性能优化建议"><a href="#5-2-性能优化建议" class="headerlink" title="5.2 性能优化建议"></a>5.2 性能优化建议</h3><ol><li><p><strong>合理设置并发级别</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 根据实际并发量设置并发级别</span><span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span>     <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">0.75f</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>避免频繁扩容</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 预估容量，避免频繁扩容</span><span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span>     <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>合理使用批量操作</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 批量操作减少锁竞争</span>map<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>anotherMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="六、常见问题与解决方案"><a href="#六、常见问题与解决方案" class="headerlink" title="六、常见问题与解决方案"></a>六、常见问题与解决方案</h2><h3 id="6-1-死锁问题"><a href="#6-1-死锁问题" class="headerlink" title="6.1 死锁问题"></a>6.1 死锁问题</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 错误示例：可能发生死锁</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>map1<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>map2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 操作</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 正确示例：使用ConcurrentHashMap避免死锁</span><span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-性能问题"><a href="#6-2-性能问题" class="headerlink" title="6.2 性能问题"></a>6.2 性能问题</h3><ol><li><p><strong>避免频繁的写操作</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 错误示例：频繁写操作</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 正确示例：批量操作</span>list<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>合理使用迭代器</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 错误示例：在迭代过程中修改</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 可能抛出ConcurrentModificationException</span><span class="token punctuation">}</span><span class="token comment">// 正确示例：使用迭代器的remove方法</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><p>Java并发容器通过不同的并发控制机制，为多线程环境提供了线程安全的集合实现。选择合适的并发容器，可以显著提高程序的并发性能和可靠性。</p><p>主要特点：</p><ol><li><strong>线程安全</strong>：通过锁机制或CAS保证线程安全</li><li><strong>高性能</strong>：针对不同场景优化</li><li><strong>弱一致性</strong>：迭代器不会抛出ConcurrentModificationException</li><li><strong>可扩展性</strong>：支持自定义并发级别和容量</li></ol><h2 id="八、参考资料"><a href="#八、参考资料" class="headerlink" title="八、参考资料"></a>八、参考资料</h2><ol><li><p><strong>官方文档</strong></p><ul><li><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/concurrent/package-summary.html">Java SE 17 API Documentation - Concurrent Collections</a></li></ul></li><li><p><strong>书籍</strong></p><ul><li>Brian Goetz. <em>Java Concurrency in Practice</em>. Addison-Wesley Professional, 2006.</li><li>Doug Lea. <em>Concurrent Programming in Java</em>. Addison-Wesley Professional, 1999.</li></ul></li><li><p><strong>技术博客</strong></p><ul><li><a href="https://www.infoq.cn/article/java-concurrency-programming">Java并发编程实战</a></li><li><a href="https://www.jianshu.com/p/c0642afe03e0">深入理解Java并发容器</a></li></ul></li></ol><h2 id="九、讨论与交流"><a href="#九、讨论与交流" class="headerlink" title="九、讨论与交流"></a>九、讨论与交流</h2><p>如果您对本文有任何疑问、建议或发现了错误，欢迎在评论区留言讨论。我们可以一起探讨Java并发容器的实现细节、性能优化或在实际项目中的应用经验。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、并发容器概述&quot;&gt;&lt;a href=&quot;#一、并发容器概述&quot; class=&quot;headerlink&quot; title=&quot;一、并发容器概述&quot;&gt;&lt;/a&gt;一、并发容器概述&lt;/h2&gt;&lt;p&gt;Java并发容器是Java集合框架中专门为多线程环境设计的线程安全容器。它们通过不同的并发控</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.lucky845.top/categories/Java/"/>
    
    <category term="Java基础" scheme="https://blog.lucky845.top/categories/Java/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="并发编程" scheme="https://blog.lucky845.top/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Java集合" scheme="https://blog.lucky845.top/tags/Java%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>【Java】ThreadLocal详解：原理、使用场景与最佳实践</title>
    <link href="https://blog.lucky845.top/archives/7e8f9a2e.html"/>
    <id>https://blog.lucky845.top/archives/7e8f9a2e.html</id>
    <published>2025-06-05T00:00:00.000Z</published>
    <updated>2025-06-04T23:52:52.856Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ThreadLocal详解：原理、使用场景与最佳实践"><a href="#ThreadLocal详解：原理、使用场景与最佳实践" class="headerlink" title="ThreadLocal详解：原理、使用场景与最佳实践"></a>ThreadLocal详解：原理、使用场景与最佳实践</h1><h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><p>在Java并发编程中，ThreadLocal是一个非常重要的工具类，它提供了线程本地变量的功能，使每个线程都可以独立地改变自己的副本，而不会影响其他线程所对应的副本。ThreadLocal的设计理念是”以空间换时间”，它为每个线程提供了一份独立的变量副本，从而隔离了多线程操作的数据，避免了线程安全问题。</p><p>本文将深入探讨ThreadLocal的实现原理、使用场景、常见问题以及最佳实践，帮助读者更好地理解和使用这一重要的并发工具。</p><h2 id="2-ThreadLocal的基本概念"><a href="#2-ThreadLocal的基本概念" class="headerlink" title="2. ThreadLocal的基本概念"></a>2. ThreadLocal的基本概念</h2><p>ThreadLocal是Java中的一个类，它提供了线程本地变量的功能。线程本地变量可以理解为：每一个线程都有一个独立的变量副本，各个线程之间的变量副本互不影响。</p><h3 id="2-1-ThreadLocal的基本使用"><a href="#2-1-ThreadLocal的基本使用" class="headerlink" title="2.1 ThreadLocal的基本使用"></a>2.1 ThreadLocal的基本使用</h3><p>ThreadLocal的基本API非常简单，主要包括以下几个方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建一个ThreadLocal变量</span><span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> threadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置当前线程的本地变量值</span>threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"当前线程的值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取当前线程的本地变量值</span><span class="token class-name">String</span> value <span class="token operator">=</span> threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 移除当前线程的本地变量</span>threadLocal<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置初始值（需要重写initialValue方法）</span><span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> threadLocalWithInitial <span class="token operator">=</span> <span class="token class-name">ThreadLocal</span><span class="token punctuation">.</span><span class="token function">withInitial</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token string">"初始值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-简单示例"><a href="#2-2-简单示例" class="headerlink" title="2.2 简单示例"></a>2.2 简单示例</h3><p>下面是一个简单的ThreadLocal使用示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalExample</span> <span class="token punctuation">{</span>    <span class="token comment">// 创建一个ThreadLocal变量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> threadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建两个线程</span>        <span class="token class-name">Thread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">// 设置线程1的本地变量</span>            threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"线程1的数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 打印线程1的本地变量</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程1获取的值: "</span> <span class="token operator">+</span> threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 清除线程1的本地变量</span>            threadLocal<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">// 设置线程2的本地变量</span>            threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"线程2的数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 打印线程2的本地变量</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程2获取的值: "</span> <span class="token operator">+</span> threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 清除线程2的本地变量</span>            threadLocal<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 启动线程</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">线程1获取的值: 线程1的数据线程2获取的值: 线程2的数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从输出结果可以看出，虽然两个线程共享同一个ThreadLocal变量，但每个线程都有自己独立的副本。</p><h2 id="3-ThreadLocal的实现原理"><a href="#3-ThreadLocal的实现原理" class="headerlink" title="3. ThreadLocal的实现原理"></a>3. ThreadLocal的实现原理</h2><p>要深入理解ThreadLocal，我们需要了解其底层实现原理。</p><h3 id="3-1-核心数据结构"><a href="#3-1-核心数据结构" class="headerlink" title="3.1 核心数据结构"></a>3.1 核心数据结构</h3><p>ThreadLocal的实现主要涉及以下几个关键类：</p><ul><li><strong>ThreadLocal</strong>：提供线程本地变量的功能</li><li><strong>Thread</strong>：线程类，其中包含一个ThreadLocalMap类型的成员变量</li><li><strong>ThreadLocalMap</strong>：定制的哈希表，用于存储线程本地变量</li><li><strong>Entry</strong>：ThreadLocalMap中的条目，继承自WeakReference</li></ul><h3 id="3-2-源码分析"><a href="#3-2-源码分析" class="headerlink" title="3.2 源码分析"></a>3.2 源码分析</h3><h4 id="3-2-1-Thread类中的threadLocals字段"><a href="#3-2-1-Thread类中的threadLocals字段" class="headerlink" title="3.2.1 Thread类中的threadLocals字段"></a>3.2.1 Thread类中的threadLocals字段</h4><p>在Thread类中，有一个threadLocals字段，类型为ThreadLocalMap：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* ThreadLocal values pertaining to this thread. This map is maintained * by the ThreadLocal class. */</span><span class="token class-name">ThreadLocal<span class="token punctuation">.</span>ThreadLocalMap</span> threadLocals <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个字段是由ThreadLocal类维护的，用于存储当前线程的所有本地变量。</p><h4 id="3-2-2-ThreadLocal的set方法"><a href="#3-2-2-ThreadLocal的set方法" class="headerlink" title="3.2.2 ThreadLocal的set方法"></a>3.2.2 ThreadLocal的set方法</h4><p>当我们调用ThreadLocal的set方法时，实际上是将值存储在当前线程的ThreadLocalMap中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">ThreadLocalMap</span> <span class="token function">getMap</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> t<span class="token punctuation">.</span>threadLocals<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">createMap</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">,</span> <span class="token class-name">T</span> firstValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    t<span class="token punctuation">.</span>threadLocals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalMap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> firstValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从源码可以看出：</p><ol><li>首先获取当前线程</li><li>然后获取当前线程的ThreadLocalMap</li><li>如果map存在，则将当前ThreadLocal对象作为key，值作为value存入map</li><li>如果map不存在，则创建一个新的ThreadLocalMap</li></ol><h4 id="3-2-3-ThreadLocal的get方法"><a href="#3-2-3-ThreadLocal的get方法" class="headerlink" title="3.2.3 ThreadLocal的get方法"></a>3.2.3 ThreadLocal的get方法</h4><p>当我们调用ThreadLocal的get方法时，实际上是从当前线程的ThreadLocalMap中获取值：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ThreadLocalMap<span class="token punctuation">.</span>Entry</span> e <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getEntry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>            <span class="token class-name">T</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span>e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token class-name">T</span> <span class="token function">setInitialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">T</span> value <span class="token operator">=</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token class-name">T</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从源码可以看出：</p><ol><li>首先获取当前线程</li><li>然后获取当前线程的ThreadLocalMap</li><li>如果map存在，则以当前ThreadLocal对象为key，获取对应的Entry</li><li>如果Entry存在，则返回Entry中的value</li><li>如果map不存在或Entry不存在，则调用setInitialValue方法设置初始值并返回</li></ol><h4 id="3-2-4-ThreadLocal的remove方法"><a href="#3-2-4-ThreadLocal的remove方法" class="headerlink" title="3.2.4 ThreadLocal的remove方法"></a>3.2.4 ThreadLocal的remove方法</h4><p>当我们调用ThreadLocal的remove方法时，实际上是从当前线程的ThreadLocalMap中移除对应的Entry：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ThreadLocalMap</span> m <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        m<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-5-ThreadLocalMap的实现"><a href="#3-2-5-ThreadLocalMap的实现" class="headerlink" title="3.2.5 ThreadLocalMap的实现"></a>3.2.5 ThreadLocalMap的实现</h4><p>ThreadLocalMap是ThreadLocal的静态内部类，它是一个定制的哈希表，专门用于存储线程本地变量：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalMap</span> <span class="token punctuation">{</span>    <span class="token comment">// Entry继承自WeakReference，以ThreadLocal为key</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span> <span class="token keyword">extends</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ThreadLocal</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token comment">/** The value associated with this ThreadLocal. */</span>        <span class="token class-name">Object</span> value<span class="token punctuation">;</span>        <span class="token class-name">Entry</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> k<span class="token punctuation">,</span> <span class="token class-name">Object</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            value <span class="token operator">=</span> v<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment">// 初始容量，必须是2的幂</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">INITIAL_CAPACITY</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>        <span class="token comment">// Entry表，大小总是2的幂</span>    <span class="token keyword">private</span> <span class="token class-name">Entry</span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span>        <span class="token comment">// 表中的Entry数量</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 扩容阈值，默认为初始容量的2/3</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> threshold<span class="token punctuation">;</span>        <span class="token comment">// 其他方法...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ThreadLocalMap使用开放地址法解决哈希冲突，而不是链表法。当发生哈希冲突时，会线性探测下一个空槽位。</p><h3 id="3-3-ThreadLocal的内存模型"><a href="#3-3-ThreadLocal的内存模型" class="headerlink" title="3.3 ThreadLocal的内存模型"></a>3.3 ThreadLocal的内存模型</h3><p>基于上述源码分析，我们可以得出ThreadLocal的内存模型：</p><ol><li>每个Thread线程内部都有一个ThreadLocalMap</li><li>ThreadLocalMap的key是ThreadLocal实例本身，value是真正存储的值</li><li>每个ThreadLocal实例可以在多个线程中使用，但它们在不同线程中对应的值是隔离的</li></ol><p>这种设计使得每个线程都拥有自己独立的变量副本，实现了线程隔离。</p><h2 id="4-ThreadLocal的使用场景"><a href="#4-ThreadLocal的使用场景" class="headerlink" title="4. ThreadLocal的使用场景"></a>4. ThreadLocal的使用场景</h2><p>ThreadLocal主要适用于以下几种场景：</p><h3 id="4-1-线程安全的单例模式"><a href="#4-1-线程安全的单例模式" class="headerlink" title="4.1 线程安全的单例模式"></a>4.1 线程安全的单例模式</h3><p>在单例模式中，如果单例对象的状态是线程安全的，那么可以使用ThreadLocal来实现线程安全的单例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalSingleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ThreadLocalSingleton</span><span class="token punctuation">&gt;</span></span> singleton <span class="token operator">=</span>         <span class="token class-name">ThreadLocal</span><span class="token punctuation">.</span><span class="token function">withInitial</span><span class="token punctuation">(</span><span class="token class-name">ThreadLocalSingleton</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">ThreadLocalSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ThreadLocalSingleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 其他方法...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式创建的单例对象在每个线程中都是独立的，避免了线程安全问题。</p><h3 id="4-2-数据库连接管理"><a href="#4-2-数据库连接管理" class="headerlink" title="4.2 数据库连接管理"></a>4.2 数据库连接管理</h3><p>在Web应用中，通常需要在一个请求的多个步骤中共享同一个数据库连接，这时可以使用ThreadLocal来管理连接：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConnectionManager</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Connection</span><span class="token punctuation">&gt;</span></span> connectionHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> connectionHolder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                connectionHolder<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> conn<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">closeConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> connectionHolder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 处理异常</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                connectionHolder<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-用户身份信息传递"><a href="#4-3-用户身份信息传递" class="headerlink" title="4.3 用户身份信息传递"></a>4.3 用户身份信息传递</h3><p>在Web应用中，用户的身份信息通常需要在多个方法之间传递，这时可以使用ThreadLocal来存储用户信息：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserContext</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        userHolder<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">User</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userHolder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        userHolder<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Web应用中的使用示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserContextFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span>             <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 从请求中获取用户信息</span>            <span class="token class-name">HttpServletRequest</span> req <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> request<span class="token punctuation">;</span>            <span class="token class-name">String</span> userId <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"User-Id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>userId <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">UserContext</span><span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        <span class="token comment">// 继续处理请求</span>            chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment">// 清除ThreadLocal中的用户信息</span>            <span class="token class-name">UserContext</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment">// 其他方法...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-事务管理"><a href="#4-4-事务管理" class="headerlink" title="4.4 事务管理"></a>4.4 事务管理</h3><p>在事务管理中，通常需要在多个方法之间共享同一个事务，这时可以使用ThreadLocal来管理事务：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionManager</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Transaction</span><span class="token punctuation">&gt;</span></span> transactionHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Transaction</span> transaction <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        transaction<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        transactionHolder<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Transaction</span> <span class="token function">getCurrentTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> transactionHolder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">commitTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Transaction</span> transaction <span class="token operator">=</span> transactionHolder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>transaction <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            transaction<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            transactionHolder<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rollbackTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Transaction</span> transaction <span class="token operator">=</span> transactionHolder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>transaction <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            transaction<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            transactionHolder<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-日期格式化"><a href="#4-5-日期格式化" class="headerlink" title="4.5 日期格式化"></a>4.5 日期格式化</h3><p>SimpleDateFormat不是线程安全的，可以使用ThreadLocal来为每个线程创建一个独立的SimpleDateFormat实例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateFormatUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">&gt;</span></span> dateFormatHolder <span class="token operator">=</span>         <span class="token class-name">ThreadLocal</span><span class="token punctuation">.</span><span class="token function">withInitial</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">Date</span> date<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> dateFormatHolder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Date</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">String</span> dateStr<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> dateFormatHolder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dateStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-ThreadLocal的常见问题"><a href="#5-ThreadLocal的常见问题" class="headerlink" title="5. ThreadLocal的常见问题"></a>5. ThreadLocal的常见问题</h2><h3 id="5-1-内存泄漏问题"><a href="#5-1-内存泄漏问题" class="headerlink" title="5.1 内存泄漏问题"></a>5.1 内存泄漏问题</h3><p>ThreadLocal可能导致内存泄漏，主要原因是：</p><ol><li>ThreadLocalMap的Entry继承自WeakReference，key（即ThreadLocal对象）是弱引用</li><li>但value是强引用</li><li>如果ThreadLocal对象被回收，但Thread对象仍然存活，那么ThreadLocalMap中的value将无法被回收，导致内存泄漏</li></ol><p>解决方法：</p><ol><li>在使用完ThreadLocal后，调用remove方法清除值</li><li>使用try-finally确保清除操作一定会执行</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> threadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用threadLocal</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    threadLocal<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-线程池中的陷阱"><a href="#5-2-线程池中的陷阱" class="headerlink" title="5.2 线程池中的陷阱"></a>5.2 线程池中的陷阱</h3><p>在线程池环境中使用ThreadLocal时，由于线程会被重用，如果不及时清除ThreadLocal中的值，可能会导致数据混乱：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ExecutorService</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> threadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"task1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用threadLocal</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        threadLocal<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 必须清除，否则线程被重用时会有残留值</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-父子线程数据传递问题"><a href="#5-3-父子线程数据传递问题" class="headerlink" title="5.3 父子线程数据传递问题"></a>5.3 父子线程数据传递问题</h3><p>ThreadLocal无法实现父子线程之间的数据传递，因为每个线程都有自己独立的ThreadLocalMap。如果需要实现父子线程之间的数据传递，可以使用InheritableThreadLocal：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">InheritableThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> inheritableThreadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InheritableThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>inheritableThreadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"parent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span> childThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子线程获取的值: "</span> <span class="token operator">+</span> inheritableThreadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>childThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">子线程获取的值: parent<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但需要注意的是，InheritableThreadLocal只在子线程创建时传递一次值，之后父线程的修改不会影响子线程。</p><h2 id="6-ThreadLocal的高级特性"><a href="#6-ThreadLocal的高级特性" class="headerlink" title="6. ThreadLocal的高级特性"></a>6. ThreadLocal的高级特性</h2><h3 id="6-1-InheritableThreadLocal"><a href="#6-1-InheritableThreadLocal" class="headerlink" title="6.1 InheritableThreadLocal"></a>6.1 InheritableThreadLocal</h3><p>InheritableThreadLocal是ThreadLocal的子类，它允许子线程访问父线程中设置的本地变量：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InheritableThreadLocalExample</span> <span class="token punctuation">{</span>    <span class="token comment">// 创建一个InheritableThreadLocal变量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">InheritableThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> inheritableThreadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InheritableThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 在父线程中设置值</span>        inheritableThreadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"父线程的数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建子线程</span>        <span class="token class-name">Thread</span> childThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">// 子线程可以获取父线程设置的值</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子线程获取的值: "</span> <span class="token operator">+</span> inheritableThreadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 子线程修改值不会影响父线程</span>            inheritableThreadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"子线程修改的数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子线程修改后的值: "</span> <span class="token operator">+</span> inheritableThreadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 启动子线程</span>        childThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 等待子线程执行完毕</span>            childThread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment">// 父线程的值不受子线程修改的影响</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父线程中的值: "</span> <span class="token operator">+</span> inheritableThreadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">子线程获取的值: 父线程的数据子线程修改后的值: 子线程修改的数据父线程中的值: 父线程的数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-2-ThreadLocal-withInitial方法"><a href="#6-2-ThreadLocal-withInitial方法" class="headerlink" title="6.2 ThreadLocal.withInitial方法"></a>6.2 ThreadLocal.withInitial方法</h3><p>从Java 8开始，ThreadLocal提供了withInitial方法，可以更方便地设置初始值：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Java 8之前</span><span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">&gt;</span></span> dateFormatThreadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">SimpleDateFormat</span> <span class="token function">initialValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// Java 8及之后</span><span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">&gt;</span></span> dateFormatThreadLocal <span class="token operator">=</span>     <span class="token class-name">ThreadLocal</span><span class="token punctuation">.</span><span class="token function">withInitial</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-TransmittableThreadLocal"><a href="#6-3-TransmittableThreadLocal" class="headerlink" title="6.3 TransmittableThreadLocal"></a>6.3 TransmittableThreadLocal</h3><p>在复杂的线程池环境中，InheritableThreadLocal可能无法满足需求，因为线程池中的线程是复用的，而InheritableThreadLocal只在线程创建时传递一次值。这时可以使用阿里巴巴开源的TransmittableThreadLocal：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 添加依赖</span><span class="token comment">// &lt;dependency&gt;</span><span class="token comment">//     &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><span class="token comment">//     &lt;artifactId&gt;transmittable-thread-local&lt;/artifactId&gt;</span><span class="token comment">//     &lt;version&gt;2.12.1&lt;/version&gt;</span><span class="token comment">// &lt;/dependency&gt;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>ttl<span class="token punctuation">.</span></span><span class="token class-name">TransmittableThreadLocal</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>ttl<span class="token punctuation">.</span></span><span class="token class-name">TtlRunnable</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutorService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Executors</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransmittableThreadLocalExample</span> <span class="token punctuation">{</span>    <span class="token comment">// 创建一个TransmittableThreadLocal变量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">TransmittableThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransmittableThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建线程池</span>        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 在父线程中设置值</span>        context<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"value-set-in-parent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 提交任务到线程池</span>        <span class="token class-name">Runnable</span> task <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子线程获取的值: "</span> <span class="token operator">+</span> context<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token comment">// 使用TtlRunnable包装任务</span>        executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">TtlRunnable</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 修改父线程中的值</span>        context<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"value-modified-in-parent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 再次提交任务到线程池</span>        executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token class-name">TtlRunnable</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 关闭线程池</span>        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">子线程获取的值: value-set-in-parent子线程获取的值: value-modified-in-parent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="7-ThreadLocal的性能分析"><a href="#7-ThreadLocal的性能分析" class="headerlink" title="7. ThreadLocal的性能分析"></a>7. ThreadLocal的性能分析</h2><h3 id="7-1-时间复杂度"><a href="#7-1-时间复杂度" class="headerlink" title="7.1 时间复杂度"></a>7.1 时间复杂度</h3><p>ThreadLocal的主要操作（get、set、remove）的时间复杂度如下：</p><ul><li><strong>get操作</strong>：O(1)，但在发生哈希冲突时可能会退化为O(n)</li><li><strong>set操作</strong>：O(1)，但在发生哈希冲突或需要扩容时可能会退化为O(n)</li><li><strong>remove操作</strong>：O(1)，但在发生哈希冲突时可能会退化为O(n)</li></ul><h3 id="7-2-空间复杂度"><a href="#7-2-空间复杂度" class="headerlink" title="7.2 空间复杂度"></a>7.2 空间复杂度</h3><p>ThreadLocal的空间复杂度与线程数量和每个线程中ThreadLocal的数量有关：</p><ul><li>如果有n个线程，每个线程中有m个ThreadLocal，那么空间复杂度为O(n*m)</li></ul><h3 id="7-3-性能优化建议"><a href="#7-3-性能优化建议" class="headerlink" title="7.3 性能优化建议"></a>7.3 性能优化建议</h3><ol><li><strong>合理设置初始容量</strong>：如果知道会使用多少个ThreadLocal，可以适当调整ThreadLocalMap的初始容量</li><li><strong>及时清除不再使用的ThreadLocal</strong>：调用remove方法释放内存</li><li><strong>避免创建过多的ThreadLocal</strong>：过多的ThreadLocal会增加内存占用和GC压力</li><li><strong>考虑使用ThreadLocal.withInitial</strong>：可以避免频繁的null检查和初始化</li></ol><h2 id="8-ThreadLocal的最佳实践"><a href="#8-ThreadLocal的最佳实践" class="headerlink" title="8. ThreadLocal的最佳实践"></a>8. ThreadLocal的最佳实践</h2><h3 id="8-1-正确使用ThreadLocal的步骤"><a href="#8-1-正确使用ThreadLocal的步骤" class="headerlink" title="8.1 正确使用ThreadLocal的步骤"></a>8.1 正确使用ThreadLocal的步骤</h3><ol><li><strong>声明为静态变量</strong>：通常将ThreadLocal声明为静态变量，以便在多个方法中共享</li><li><strong>初始化</strong>：根据需要设置初始值</li><li><strong>使用</strong>：在需要的地方获取和设置值</li><li><strong>清除</strong>：在使用完毕后及时清除值</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BestPracticeExample</span> <span class="token punctuation">{</span>    <span class="token comment">// 1. 声明为静态变量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userThreadLocal <span class="token operator">=</span> <span class="token class-name">ThreadLocal</span><span class="token punctuation">.</span><span class="token function">withInitial</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 2. 设置值</span>        userThreadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">User</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 3. 获取值</span>        <span class="token keyword">return</span> userThreadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 4. 清除值</span>        userThreadLocal<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 使用ThreadLocal</span>            <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 处理业务逻辑</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment">// 确保清除值</span>            <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-2-避免内存泄漏的建议"><a href="#8-2-避免内存泄漏的建议" class="headerlink" title="8.2 避免内存泄漏的建议"></a>8.2 避免内存泄漏的建议</h3><ol><li><strong>使用try-finally确保清除</strong>：在使用ThreadLocal的方法中，使用try-finally确保在方法结束时清除值</li><li><strong>使用弱引用持有ThreadLocal</strong>：避免强引用导致ThreadLocal无法被回收</li><li><strong>定期清理线程池中的ThreadLocal</strong>：在线程池环境中，定期调用remove方法清除ThreadLocal中的值</li></ol><h3 id="8-3-在Spring框架中使用ThreadLocal"><a href="#8-3-在Spring框架中使用ThreadLocal" class="headerlink" title="8.3 在Spring框架中使用ThreadLocal"></a>8.3 在Spring框架中使用ThreadLocal</h3><p>Spring框架中的事务管理、请求上下文等功能都使用了ThreadLocal。以下是在Spring MVC中使用ThreadLocal的示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestContextHolder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RequestContext</span><span class="token punctuation">&gt;</span></span> requestContextThreadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setRequestContext</span><span class="token punctuation">(</span><span class="token class-name">RequestContext</span> requestContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        requestContextThreadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>requestContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">RequestContext</span> <span class="token function">getRequestContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> requestContextThreadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        requestContextThreadLocal<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestContextInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建请求上下文</span>        <span class="token class-name">RequestContext</span> requestContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RequestContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        requestContext<span class="token punctuation">.</span><span class="token function">setRequestId</span><span class="token punctuation">(</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        requestContext<span class="token punctuation">.</span><span class="token function">setStartTime</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 设置到ThreadLocal中</span>        <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">setRequestContext</span><span class="token punctuation">(</span>requestContext<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 清除ThreadLocal中的值</span>        <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-参考资料"><a href="#9-参考资料" class="headerlink" title="9. 参考资料"></a>9. 参考资料</h2><ul><li><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/ThreadLocal.html">Java ThreadLocal API文档</a></li><li>《Java并发编程实战》第3章 线程安全性</li><li>《Effective Java（第三版）》第59条：了解和使用库</li><li><a href="https://github.com/alibaba/p3c">阿里巴巴Java开发手册</a></li><li><a href="https://github.com/alibaba/transmittable-thread-local">TransmittableThreadLocal GitHub</a></li></ul><hr><p>本文详细介绍了ThreadLocal的原理、使用场景与最佳实践，希望对您有所帮助。如果您有任何问题，欢迎在评论区讨论！</p>]]></content>
    
    
    <summary type="html">本文详细介绍了Java中的ThreadLocal原理、实现机制、使用场景、常见问题及最佳实践，帮助读者全面理解这一重要的线程隔离工具。</summary>
    
    
    
    <category term="Java" scheme="https://blog.lucky845.top/categories/Java/"/>
    
    <category term="技术笔记" scheme="https://blog.lucky845.top/categories/Java/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Java基础" scheme="https://blog.lucky845.top/categories/Java/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://blog.lucky845.top/tags/Java/"/>
    
    <category term="并发编程" scheme="https://blog.lucky845.top/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    <category term="JUC" scheme="https://blog.lucky845.top/tags/JUC/"/>
    
    <category term="ThreadLocal" scheme="https://blog.lucky845.top/tags/ThreadLocal/"/>
    
  </entry>
  
  <entry>
    <title>【Java】线程池详解：原理、参数与最佳实践</title>
    <link href="https://blog.lucky845.top/archives/e55fb503.html"/>
    <id>https://blog.lucky845.top/archives/e55fb503.html</id>
    <published>2025-03-31T06:30:00.000Z</published>
    <updated>2025-03-31T06:27:18.256Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java线程池详解：原理、参数与最佳实践"><a href="#Java线程池详解：原理、参数与最佳实践" class="headerlink" title="Java线程池详解：原理、参数与最佳实践"></a>Java线程池详解：原理、参数与最佳实践</h1><h2 id="1-线程池基础"><a href="#1-线程池基础" class="headerlink" title="1. 线程池基础"></a>1. 线程池基础</h2><h3 id="1-1-什么是线程池"><a href="#1-1-什么是线程池" class="headerlink" title="1.1 什么是线程池"></a>1.1 什么是线程池</h3><p>线程池是一种线程使用模式，它是为了减少线程创建和销毁的开销，提高系统响应速度而创建的一种池化技术。线程池维护着多个线程，等待着监督管理者分配可并发执行的任务。这种做法，一方面避免了处理任务时创建销毁线程的开销，另一方面避免了线程数量膨胀导致的过度调度问题。</p><h3 id="1-2-为什么需要线程池"><a href="#1-2-为什么需要线程池" class="headerlink" title="1.2 为什么需要线程池"></a>1.2 为什么需要线程池</h3><p>在Java应用中，创建线程是一个昂贵的操作，需要JVM和操作系统的参与。频繁创建和销毁线程会带来以下问题：</p><ul><li><strong>性能开销大</strong>：线程创建和销毁需要时间，会影响处理效率</li><li><strong>资源消耗高</strong>：每个线程都需要占用系统内存，过多的线程会导致OOM</li><li><strong>稳定性差</strong>：无限制创建线程可能导致系统崩溃</li><li><strong>系统开销大</strong>：线程调度需要CPU时间，线程数量过多会导致过度调度</li></ul><p>使用线程池可以有效解决上述问题，主要优势包括：</p><ul><li><strong>降低资源消耗</strong>：复用已创建的线程，减少线程创建和销毁的开销</li><li><strong>提高响应速度</strong>：任务到达时，无需等待线程创建即可立即执行</li><li><strong>提高线程的可管理性</strong>：统一管理线程，避免无限制创建</li><li><strong>提供更多更强大的功能</strong>：如延时执行、定时执行、监控等</li></ul><h2 id="2-ThreadPoolExecutor详解"><a href="#2-ThreadPoolExecutor详解" class="headerlink" title="2. ThreadPoolExecutor详解"></a>2. ThreadPoolExecutor详解</h2><h3 id="2-1-核心参数"><a href="#2-1-核心参数" class="headerlink" title="2.1 核心参数"></a>2.1 核心参数</h3><p>Java中的<code>ThreadPoolExecutor</code>是线程池的核心实现类，它提供了强大的线程池功能。创建一个<code>ThreadPoolExecutor</code>需要以下几个核心参数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                          <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                          <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                          <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>                          <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> workQueue<span class="token punctuation">,</span>                          <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">,</span>                          <span class="token class-name">RejectedExecutionHandler</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 初始化代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>各参数详解：</p><ol><li><p><strong>corePoolSize（核心线程数）</strong>：线程池中保持活跃的线程数量，即使它们处于空闲状态</p><ul><li>当提交任务时，如果运行的线程数少于corePoolSize，则创建新线程来处理请求</li><li>如果运行的线程数等于或多于corePoolSize，则将任务加入队列</li></ul></li><li><p><strong>maximumPoolSize（最大线程数）</strong>：线程池允许创建的最大线程数</p><ul><li>当队列已满且线程数小于maximumPoolSize时，创建新线程来处理任务</li><li>当队列已满且线程数等于maximumPoolSize时，根据拒绝策略处理新任务</li></ul></li><li><p><strong>keepAliveTime（线程存活时间）</strong>：当线程数大于核心线程数时，多余的空闲线程在终止前等待新任务的最长时间</p></li><li><p><strong>unit（时间单位）</strong>：keepAliveTime参数的时间单位</p></li><li><p><strong>workQueue（工作队列）</strong>：用于保存等待执行的任务的阻塞队列</p><ul><li>常用队列：ArrayBlockingQueue、LinkedBlockingQueue、SynchronousQueue、PriorityBlockingQueue</li></ul></li><li><p><strong>threadFactory（线程工厂）</strong>：用于创建新线程的工厂</p><ul><li>可以自定义线程名称、优先级、是否为守护线程等</li></ul></li><li><p><strong>handler（拒绝策略）</strong>：当队列和线程池都满了，无法处理新任务时的策略</p><ul><li>默认策略：AbortPolicy（抛出异常）</li></ul></li></ol><h3 id="2-2-工作原理"><a href="#2-2-工作原理" class="headerlink" title="2.2 工作原理"></a>2.2 工作原理</h3><p>线程池的工作流程如下：</p><ol><li><p>当提交一个新任务到线程池时，线程池会做如下判断：</p><ul><li>如果正在运行的线程数小于corePoolSize，那么马上创建线程运行这个任务</li><li>如果正在运行的线程数大于或等于corePoolSize，那么将这个任务放入队列</li><li>如果队列已满，且正在运行的线程数小于maximumPoolSize，那么创建非核心线程运行这个任务</li><li>如果队列已满，且正在运行的线程数大于或等于maximumPoolSize，那么线程池会启动饱和拒绝策略</li></ul></li><li><p>当一个线程完成任务时，它会从队列中取下一个任务来执行</p></li><li><p>当一个线程空闲超过keepAliveTime时，线程池会判断：</p><ul><li>如果当前运行的线程数大于corePoolSize，那么这个线程就被停掉</li><li>所以线程池的所有任务完成后，它最终会收缩到corePoolSize的大小</li></ul></li></ol><p>下面是线程池执行流程的示意图：</p><pre class="line-numbers language-none"><code class="language-none">              ┌─────────────┐              │   提交任务   │              └──────┬──────┘                     ↓          ┌────────────────────┐          │  线程数 &lt; 核心线程数 │          └────────┬───────────┘                   │       ┌───────────┴───────────┐       │                       │       ↓                       ↓┌─────────────┐         ┌─────────────┐│  创建新线程  │ 否      │  加入工作队列 │└──────┬──────┘         └──────┬──────┘       │                       │       ↓                       ↓┌─────────────┐         ┌─────────────┐│  执行任务    │         │  队列已满?   │└─────────────┘         └──────┬──────┘                               │                     ┌─────────┴─────────┐                     │                   │                     ↓                   ↓              ┌─────────────┐     ┌─────────────┐              │  线程数 &lt;    │ 是  │  创建新线程  │              │  最大线程数? │ ──→ │  执行任务    │              └──────┬──────┘     └─────────────┘                     │ 否                     ↓              ┌─────────────┐              │  执行拒绝策略 │              └─────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-拒绝策略"><a href="#2-3-拒绝策略" class="headerlink" title="2.3 拒绝策略"></a>2.3 拒绝策略</h3><p>当线程池的任务缓存队列已满且线程池中的线程数目达到maximumPoolSize时，如果还有任务到来，线程池会根据拒绝策略来处理这些任务。ThreadPoolExecutor提供了四种拒绝策略：</p><ol><li><strong>AbortPolicy（默认）</strong>：直接抛出RejectedExecutionException异常，阻止系统正常运行</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AbortPolicy</span> <span class="token keyword">implements</span> <span class="token class-name">RejectedExecutionHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rejectedExecution</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">,</span> <span class="token class-name">ThreadPoolExecutor</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RejectedExecutionException</span><span class="token punctuation">(</span><span class="token string">"Task "</span> <span class="token operator">+</span> r<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                                           <span class="token string">" rejected from "</span> <span class="token operator">+</span>                                           e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>CallerRunsPolicy</strong>：调用者运行策略，在调用者线程中执行任务，不会抛弃任务也不会抛出异常</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CallerRunsPolicy</span> <span class="token keyword">implements</span> <span class="token class-name">RejectedExecutionHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rejectedExecution</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">,</span> <span class="token class-name">ThreadPoolExecutor</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token punctuation">.</span><span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            r<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>DiscardPolicy</strong>：直接丢弃任务，不做任何处理</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DiscardPolicy</span> <span class="token keyword">implements</span> <span class="token class-name">RejectedExecutionHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rejectedExecution</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">,</span> <span class="token class-name">ThreadPoolExecutor</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 什么也不做，直接丢弃</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><strong>DiscardOldestPolicy</strong>：丢弃队列中最早的任务，然后尝试执行当前任务</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DiscardOldestPolicy</span> <span class="token keyword">implements</span> <span class="token class-name">RejectedExecutionHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rejectedExecution</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">,</span> <span class="token class-name">ThreadPoolExecutor</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token punctuation">.</span><span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了这四种策略，我们还可以实现RejectedExecutionHandler接口来自定义拒绝策略：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomRejectedExecutionHandler</span> <span class="token keyword">implements</span> <span class="token class-name">RejectedExecutionHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rejectedExecution</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">,</span> <span class="token class-name">ThreadPoolExecutor</span> executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 记录日志</span>        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Task rejected: "</span> <span class="token operator">+</span> r<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 可以尝试重新提交到其他线程池</span>        <span class="token comment">// 或者将任务保存到数据库，后续再处理</span>        <span class="token comment">// 或者执行其他自定义逻辑</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-常见线程池类型"><a href="#3-常见线程池类型" class="headerlink" title="3. 常见线程池类型"></a>3. 常见线程池类型</h2><p>Java提供了几种常见的线程池，它们都是通过Executors工厂类来创建的。虽然在实际开发中，我们更推荐直接使用ThreadPoolExecutor来创建线程池，但了解这些预定义的线程池类型对于理解线程池的使用场景很有帮助。</p><h3 id="3-1-FixedThreadPool"><a href="#3-1-FixedThreadPool" class="headerlink" title="3.1 FixedThreadPool"></a>3.1 FixedThreadPool</h3><p>固定大小的线程池，核心线程数等于最大线程数，使用无界队列LinkedBlockingQueue。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>                                  <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span>                                  <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>特点</strong>：</p><ul><li>核心线程数等于最大线程数，线程数量固定</li><li>使用无界队列，队列可能会无限增长</li><li>适合需要限制并发线程数的场景</li></ul><p><strong>风险</strong>：由于使用无界队列，当任务持续快速提交时，可能导致OOM</p><h3 id="3-2-CachedThreadPool"><a href="#3-2-CachedThreadPool" class="headerlink" title="3.2 CachedThreadPool"></a>3.2 CachedThreadPool</h3><p>可缓存的线程池，核心线程数为0，最大线程数为Integer.MAX_VALUE，使用SynchronousQueue。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">,</span>                                  <span class="token number">60L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>                                  <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>特点</strong>：</p><ul><li>核心线程数为0，最大线程数非常大</li><li>线程空闲60秒后会被回收</li><li>使用SynchronousQueue，该队列不存储任务，而是直接交给线程执行</li><li>适合执行大量短期异步任务的场景</li></ul><p><strong>风险</strong>：线程数量可能会无限增长，导致OOM</p><h3 id="3-3-SingleThreadExecutor"><a href="#3-3-SingleThreadExecutor" class="headerlink" title="3.3 SingleThreadExecutor"></a>3.3 SingleThreadExecutor</h3><p>单线程的线程池，核心线程数和最大线程数都为1，使用无界队列LinkedBlockingQueue。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                                  <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span>                                  <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>特点</strong>：</p><ul><li>只有一个工作线程</li><li>保证所有任务按照指定顺序执行（FIFO, LIFO, 优先级）</li><li>适合需要保证顺序执行的场景</li></ul><p><strong>风险</strong>：同样使用无界队列，可能导致OOM</p><h3 id="3-4-ScheduledThreadPool"><a href="#3-4-ScheduledThreadPool" class="headerlink" title="3.4 ScheduledThreadPool"></a>3.4 ScheduledThreadPool</h3><p>支持定时及周期性任务执行的线程池。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ScheduledExecutorService</span> <span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>特点</strong>：</p><ul><li>核心线程数固定，最大线程数为Integer.MAX_VALUE</li><li>使用DelayedWorkQueue，可以执行延时任务和周期性任务</li><li>适合需要定时执行任务的场景</li></ul><h2 id="4-线程池的使用实践"><a href="#4-线程池的使用实践" class="headerlink" title="4. 线程池的使用实践"></a>4. 线程池的使用实践</h2><h3 id="4-1-线程池参数配置"><a href="#4-1-线程池参数配置" class="headerlink" title="4.1 线程池参数配置"></a>4.1 线程池参数配置</h3><p>线程池参数配置是一门艺术，需要根据具体业务场景和系统资源来确定。以下是一些常见的参数配置建议：</p><ol><li><p><strong>核心线程数</strong>：</p><ul><li>IO密集型任务：核心线程数 = CPU核心数 * (1 + 平均等待时间/平均工作时间)</li><li>CPU密集型任务：核心线程数 = CPU核心数 + 1</li></ul></li><li><p><strong>最大线程数</strong>：</p><ul><li>最大线程数 = 核心线程数 * (1 + 业务峰值系数)</li><li>考虑系统能承受的最大线程数</li></ul></li><li><p><strong>队列容量</strong>：</p><ul><li>队列容量 = 核心线程数 * 并发任务提交率 * 平均任务处理时间</li><li>避免使用无界队列</li></ul></li><li><p><strong>拒绝策略</strong>：</p><ul><li>根据业务需求选择合适的拒绝策略</li><li>对于重要任务，可以考虑自定义拒绝策略，如重试、持久化等</li></ul></li></ol><h3 id="4-2-线程池最佳实践"><a href="#4-2-线程池最佳实践" class="headerlink" title="4.2 线程池最佳实践"></a>4.2 线程池最佳实践</h3><ol><li><strong>避免使用Executors创建线程池</strong><ul><li>Executors创建的线程池可能会导致OOM</li><li>推荐直接使用ThreadPoolExecutor，明确指定参数</li></ul></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 不推荐</span><span class="token class-name">ExecutorService</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 推荐</span><span class="token class-name">ThreadPoolExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>    <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">60L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">ThreadFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNameFormat</span><span class="token punctuation">(</span><span class="token string">"custom-pool-%d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>根据任务类型分离线程池</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolManager</span> <span class="token punctuation">{</span>    <span class="token comment">// 快速任务线程池</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ThreadPoolExecutor</span> fastTaskPool<span class="token punctuation">;</span>    <span class="token comment">// 慢速任务线程池</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ThreadPoolExecutor</span> slowTaskPool<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadPoolManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>fastTaskPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">60L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>slowTaskPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">60L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">submitFastTask</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fastTaskPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">submitSlowTask</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>        slowTaskPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>使用自定义线程工厂</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomThreadFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ThreadFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> namePrefix<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> threadNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">CustomThreadFactory</span><span class="token punctuation">(</span><span class="token class-name">String</span> namePrefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>namePrefix <span class="token operator">=</span> namePrefix<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Thread</span> <span class="token function">newThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> namePrefix <span class="token operator">+</span> threadNumber<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置为非守护线程</span>        thread<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置线程优先级</span>        thread<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token constant">NORM_PRIORITY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> thread<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><strong>监控线程池状态</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolMonitor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ThreadPoolExecutor</span> threadPool<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ScheduledExecutorService</span> scheduler<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadPoolMonitor</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span> threadPool<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>threadPool <span class="token operator">=</span> threadPool<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>scheduler <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadScheduledExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">startMonitoring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startMonitoring</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        scheduler<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========线程池状态========"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程池大小: "</span> <span class="token operator">+</span> threadPool<span class="token punctuation">.</span><span class="token function">getPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"活跃线程数: "</span> <span class="token operator">+</span> threadPool<span class="token punctuation">.</span><span class="token function">getActiveCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队列任务数: "</span> <span class="token operator">+</span> threadPool<span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已完成任务数: "</span> <span class="token operator">+</span> threadPool<span class="token punctuation">.</span><span class="token function">getCompletedTaskCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li><strong>优雅关闭线程池</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdownThreadPoolGracefully</span><span class="token punctuation">(</span><span class="token class-name">ExecutorService</span> threadPool<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 拒绝接受新任务</span>    threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">// 等待已提交任务完成</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>threadPool<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 强制关闭</span>            threadPool<span class="token punctuation">.</span><span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 再次等待</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>threadPool<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程池未能完全关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 重新尝试关闭</span>        threadPool<span class="token punctuation">.</span><span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 保留中断状态</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-线程池常见问题与解决方案"><a href="#5-线程池常见问题与解决方案" class="headerlink" title="5. 线程池常见问题与解决方案"></a>5. 线程池常见问题与解决方案</h2><h3 id="5-1-线程池爆满问题"><a href="#5-1-线程池爆满问题" class="headerlink" title="5.1 线程池爆满问题"></a>5.1 线程池爆满问题</h3><p><strong>症状</strong>：</p><ul><li>任务执行延迟</li><li>系统响应变慢</li><li>频繁出现拒绝异常</li></ul><p><strong>解决方案</strong>：</p><ol><li>调整线程池参数，增加核心线程数和最大线程数</li><li>优化任务执行逻辑，减少单个任务执行时间</li><li>实施任务分类与隔离，避免慢任务影响快任务</li><li>实现动态线程池，根据系统负载自动调整参数</li></ol><h3 id="5-2-线程泄漏问题"><a href="#5-2-线程泄漏问题" class="headerlink" title="5.2 线程泄漏问题"></a>5.2 线程泄漏问题</h3><p><strong>症状</strong>：</p><ul><li>线程池中的线程数量持续增长但不释放</li><li>系统资源逐渐耗尽</li></ul><p><strong>解决方案</strong>：</p><ol><li>确保任务能正常结束，避免死循环</li><li>正确处理异常，避免任务执行中断</li><li>设置合理的超时时间，避免任务长时间执行</li><li>使用线程工厂创建可识别的线程，方便排查问题</li></ol><h3 id="5-3-任务堆积问题"><a href="#5-3-任务堆积问题" class="headerlink" title="5.3 任务堆积问题"></a>5.3 任务堆积问题</h3><p><strong>症状</strong>：</p><ul><li>队列中的任务数量持续增长</li><li>任务执行延迟严重</li></ul><p><strong>解决方案</strong>：</p><ol><li>使用有界队列，避免无限堆积</li><li>实现任务优先级管理，优先处理重要任务</li><li>增加临时线程处理堆积任务</li><li>实现任务拒绝时的降级处理</li></ol><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>线程池是Java并发编程中非常重要的组件，合理使用线程池可以显著提高系统的性能和稳定性。本文详细介绍了线程池的基本概念、核心参数、工作原理、常见类型以及最佳实践，希望能帮助读者更好地理解和使用线程池。</p><p>在实际应用中，需要根据具体的业务场景和系统特点，选择合适的线程池配置，并进行充分的测试和监控，以确保系统的稳定运行。同时，也要注意避免线程池使用中的常见陷阱，如参数配置不当、任务执行时间过长等问题。</p><hr><p>希望这篇文章能帮助您更好地理解和使用Java线程池。如果您有任何问题或建议，欢迎在评论区讨论！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java线程池详解：原理、参数与最佳实践&quot;&gt;&lt;a href=&quot;#Java线程池详解：原理、参数与最佳实践&quot; class=&quot;headerlink&quot; title=&quot;Java线程池详解：原理、参数与最佳实践&quot;&gt;&lt;/a&gt;Java线程池详解：原理、参数与最佳实践&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.lucky845.top/categories/Java/"/>
    
    <category term="线程池" scheme="https://blog.lucky845.top/categories/Java/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
    
    <category term="Java" scheme="https://blog.lucky845.top/tags/Java/"/>
    
    <category term="并发编程" scheme="https://blog.lucky845.top/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    <category term="线程池" scheme="https://blog.lucky845.top/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>【Java】JMM内存模型详解</title>
    <link href="https://blog.lucky845.top/archives/9e7d3f2a.html"/>
    <id>https://blog.lucky845.top/archives/9e7d3f2a.html</id>
    <published>2025-03-29T07:00:00.000Z</published>
    <updated>2025-03-29T06:13:28.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java内存模型-JMM-详解"><a href="#Java内存模型-JMM-详解" class="headerlink" title="Java内存模型(JMM)详解"></a>Java内存模型(JMM)详解</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在多线程编程中，由于线程间的通信方式、缓存一致性问题以及编译器和处理器的优化，导致程序执行的结果可能与预期不符。Java内存模型(Java Memory Model，简称JMM)就是为了解决这些问题而提出的。本文将深入探讨JMM的核心概念、工作原理以及在并发编程中的应用，帮助读者更好地理解和应用Java并发编程。</p><h2 id="1-JMM基本概念"><a href="#1-JMM基本概念" class="headerlink" title="1. JMM基本概念"></a>1. JMM基本概念</h2><h3 id="1-1-什么是Java内存模型"><a href="#1-1-什么是Java内存模型" class="headerlink" title="1.1 什么是Java内存模型"></a>1.1 什么是Java内存模型</h3><p>Java内存模型(JMM)是一种规范，它定义了Java虚拟机(JVM)在计算机内存(RAM)中的工作方式。JMM规定了一个线程如何以及何时可以看到由其他线程修改过的共享变量的值，以及在必要时如何同步地访问共享变量。</p><p>JMM的主要目标是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样的底层细节。</p><h3 id="1-2-JMM的抽象结构"><a href="#1-2-JMM的抽象结构" class="headerlink" title="1.2 JMM的抽象结构"></a>1.2 JMM的抽象结构</h3><p>JMM定义了一个抽象的内存模型，屏蔽了各种硬件和操作系统的内存访问差异：</p><pre class="line-numbers language-none"><code class="language-none">┌─────────────┐          ┌─────────────┐│  线程A       │          │  线程B      │└─────────────┘          └─────────────┘      │                        │      ▼                        ▼┌─────────────┐          ┌─────────────┐│ 本地内存A    │          │ 本地内存B   ││(工作内存)    │          │(工作内存)   │└─────────────┘          └─────────────┘      │                        │      │                        │      ▼                        ▼┌─────────────────────────────────────┐│            主内存                    ││  (存储Java对象，包括成员变量等)         │└─────────────────────────────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在JMM中：</p><ol><li><strong>主内存(Main Memory)</strong>：所有线程共享的内存区域，存储所有的变量(包括实例变量和静态变量，不包括局部变量和方法参数)。</li><li><strong>工作内存(Working Memory)</strong>：每个线程都有自己的工作内存，线程对变量的所有操作(读取、赋值等)都必须在工作内存中进行，而不能直接操作主内存中的变量。</li><li><strong>线程间通信</strong>：线程之间的变量值传递需要通过主内存来完成。</li></ol><h3 id="1-3-JMM与硬件内存架构的关系"><a href="#1-3-JMM与硬件内存架构的关系" class="headerlink" title="1.3 JMM与硬件内存架构的关系"></a>1.3 JMM与硬件内存架构的关系</h3><p>JMM与计算机硬件内存架构之间存在一定的差异：</p><ul><li>硬件内存架构没有区分线程栈和堆，但JMM抽象了主内存与工作内存的概念</li><li>硬件内存架构中，所有的共享变量都存在主内存中</li><li>每个CPU都有自己的缓存，JMM中的工作内存可以类比为CPU的缓存</li></ul><h2 id="2-JMM的三大特性"><a href="#2-JMM的三大特性" class="headerlink" title="2. JMM的三大特性"></a>2. JMM的三大特性</h2><h3 id="2-1-原子性-Atomicity"><a href="#2-1-原子性-Atomicity" class="headerlink" title="2.1 原子性(Atomicity)"></a>2.1 原子性(Atomicity)</h3><p>原子性是指一个操作是不可中断的，要么全部执行成功，要么全部执行失败，不存在部分执行的情况。</p><p>在Java中，对基本数据类型的读取和赋值操作是原子性的(除了long和double类型的非volatile变量)。但是像i++这样的操作，它包括读取变量的值、加1、写回主内存三个步骤，这个过程不是原子性的。</p><p><strong>Java提供的原子性保证：</strong></p><ol><li>基本数据类型的读写操作(除了long和double)是原子性的</li><li>所有引用类型的读写操作是原子性的</li><li>volatile修饰的long和double变量的读写是原子性的</li><li>原子性操作可以通过synchronized和Lock来保证</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicityExample</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 非原子操作</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        count<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 读取-修改-写入，非原子操作</span>    <span class="token punctuation">}</span>        <span class="token comment">// 使用synchronized保证原子性</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">safeIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 使用AtomicInteger保证原子性</span>    <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> atomicCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">atomicIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        atomicCount<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-可见性-Visibility"><a href="#2-2-可见性-Visibility" class="headerlink" title="2.2 可见性(Visibility)"></a>2.2 可见性(Visibility)</h3><p>可见性是指当一个线程修改了共享变量的值，其他线程能够立即得知这个修改。在多核CPU中，每个CPU都有自己的缓存，当多个线程在不同的CPU上运行时，可能会导致缓存不一致的问题。</p><p><strong>Java提供的可见性保证：</strong></p><ol><li>volatile关键字可以保证变量的可见性</li><li>synchronized和Lock在释放锁之前会将工作内存中的变量值刷新到主内存</li><li>final关键字可以保证初始化完成的对象对其他线程可见</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VisibilityExample</span> <span class="token punctuation">{</span>    <span class="token comment">// 不保证可见性</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">// 使用volatile保证可见性</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> volatileFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 修改后对其他线程不一定立即可见</span>        volatileFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 修改后对其他线程立即可见</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// flag可能读取到旧值</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 循环等待</span>        <span class="token punctuation">}</span>                <span class="token comment">// volatileFlag一定能读取到最新值</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>volatileFlag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 循环等待</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-有序性-Ordering"><a href="#2-3-有序性-Ordering" class="headerlink" title="2.3 有序性(Ordering)"></a>2.3 有序性(Ordering)</h3><p>有序性是指程序执行的顺序按照代码的先后顺序执行。在JMM中，为了提高性能，编译器和处理器常常会对指令进行重排序，导致程序实际执行的顺序可能与代码顺序不同。</p><p>指令重排序的类型：</p><ol><li><strong>编译器优化重排序</strong>：编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序</li><li><strong>指令级并行重排序</strong>：现代处理器采用了指令级并行技术来将多条指令重叠执行</li><li><strong>内存系统重排序</strong>：由于处理器使用缓存和读写缓冲区，使得加载和存储操作看上去可能是在乱序执行</li></ol><p><strong>Java提供的有序性保证：</strong></p><ol><li>volatile关键字禁止指令重排序</li><li>synchronized和Lock保证同一时刻只有一个线程执行同步代码，相当于是让线程顺序执行同步代码</li><li>happens-before规则保证特定情况下的有序性</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderingExample</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">// 可能发生指令重排序</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token comment">// 1</span>        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// 2</span>        <span class="token comment">// 1和2可能会重排序</span>    <span class="token punctuation">}</span>        <span class="token comment">// 使用volatile防止指令重排序</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> volatileFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">safeWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>              <span class="token comment">// 3</span>        volatileFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>        <span class="token comment">// 由于volatileFlag是volatile变量，3一定会在4之前执行</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Happens-Before原则"><a href="#3-Happens-Before原则" class="headerlink" title="3. Happens-Before原则"></a>3. Happens-Before原则</h2><p>Happens-Before是JMM中非常重要的概念，它定义了两个操作之间的内存可见性。如果操作A happens-before 操作B，那么操作A的结果对操作B是可见的，即操作A的执行结果将对操作B可见，且A的执行顺序排在B之前。</p><h3 id="3-1-Happens-Before的规则"><a href="#3-1-Happens-Before的规则" class="headerlink" title="3.1 Happens-Before的规则"></a>3.1 Happens-Before的规则</h3><ol><li><strong>程序顺序规则</strong>：在一个线程内，按照程序代码顺序，前面的操作happens-before后面的操作</li><li><strong>监视器锁规则</strong>：对一个锁的解锁happens-before于随后对这个锁的加锁</li><li><strong>volatile变量规则</strong>：对一个volatile变量的写操作happens-before于后面对这个变量的读操作</li><li><strong>传递性规则</strong>：如果A happens-before B，且B happens-before C，那么A happens-before C</li><li><strong>线程启动规则</strong>：Thread对象的start()方法happens-before于此线程的每一个动作</li><li><strong>线程终止规则</strong>：线程中的所有操作都happens-before于其他线程检测到该线程已经终止</li><li><strong>线程中断规则</strong>：对线程interrupt()方法的调用happens-before于被中断线程的代码检测到中断事件的发生</li><li><strong>对象终结规则</strong>：一个对象的初始化完成happens-before于它的finalize()方法的开始</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HappenBeforeExample</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        value <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>    <span class="token comment">// 1</span>        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token comment">// 2</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 3</span>            <span class="token comment">// 由于volatile的happens-before规则，如果3读取到flag为true</span>            <span class="token comment">// 那么1对value的写入对4的读取一定可见</span>            <span class="token keyword">int</span> r <span class="token operator">=</span> value<span class="token punctuation">;</span>  <span class="token comment">// 4 - 这里一定能读到42</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-内存屏障"><a href="#4-内存屏障" class="headerlink" title="4. 内存屏障"></a>4. 内存屏障</h2><p>内存屏障(Memory Barrier)是一种CPU指令，用于控制特定条件下的重排序和内存可见性。JMM使用内存屏障来实现volatile的内存语义。</p><h3 id="4-1-内存屏障的分类"><a href="#4-1-内存屏障的分类" class="headerlink" title="4.1 内存屏障的分类"></a>4.1 内存屏障的分类</h3><ol><li><strong>LoadLoad屏障</strong>：确保Load1数据的装载先于Load2及后续装载指令的装载</li><li><strong>StoreStore屏障</strong>：确保Store1数据对其他处理器可见（刷新到内存）先于Store2及后续存储指令的存储</li><li><strong>LoadStore屏障</strong>：确保Load1数据装载先于Store2及后续的存储指令刷新到内存</li><li><strong>StoreLoad屏障</strong>：确保Store1数据对其他处理器变得可见（指刷新到内存）先于Load2及后续装载指令的装载</li></ol><h3 id="4-2-内存屏障与volatile的实现"><a href="#4-2-内存屏障与volatile的实现" class="headerlink" title="4.2 内存屏障与volatile的实现"></a>4.2 内存屏障与volatile的实现</h3><p>JMM针对编译器制定的volatile重排序规则：</p><ol><li>当第二个操作是volatile写时，不管第一个操作是什么，都不能重排序</li><li>当第一个操作是volatile读时，不管第二个操作是什么，都不能重排序</li><li>当第一个操作是volatile写，第二个操作是volatile读时，不能重排序</li></ol><p>在实现上，volatile的内存语义通过内存屏障来保证：</p><ul><li>在每个volatile写操作前插入StoreStore屏障</li><li>在每个volatile写操作后插入StoreLoad屏障</li><li>在每个volatile读操作后插入LoadLoad屏障</li><li>在每个volatile读操作后插入LoadStore屏障</li></ul><pre class="line-numbers language-none"><code class="language-none">// volatile写StoreStore屏障volatile写操作StoreLoad屏障// volatile读volatile读操作LoadLoad屏障LoadStore屏障<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-volatile关键字详解"><a href="#5-volatile关键字详解" class="headerlink" title="5. volatile关键字详解"></a>5. volatile关键字详解</h2><p>volatile是Java提供的一种轻量级的同步机制，它保证了变量的可见性和有序性，但不保证原子性。</p><h3 id="5-1-volatile的内存语义"><a href="#5-1-volatile的内存语义" class="headerlink" title="5.1 volatile的内存语义"></a>5.1 volatile的内存语义</h3><ol><li><strong>可见性</strong>：对一个volatile变量的写，总是能立即被其他线程看到</li><li><strong>有序性</strong>：禁止指令重排序优化</li></ol><h3 id="5-2-volatile的适用场景"><a href="#5-2-volatile的适用场景" class="headerlink" title="5.2 volatile的适用场景"></a>5.2 volatile的适用场景</h3><ol><li><strong>状态标志</strong>：用作状态标志，标示某种状态是否发生变化</li><li><strong>双重检查锁定</strong>：在单例模式的双重检查锁定中，使用volatile修饰单例对象</li><li><strong>独立观察</strong>：一个线程修改值，其他线程通过读取这个值来感知变化</li></ol><h3 id="5-3-volatile的局限性"><a href="#5-3-volatile的局限性" class="headerlink" title="5.3 volatile的局限性"></a>5.3 volatile的局限性</h3><ol><li>不能保证复合操作的原子性，如i++</li><li>不适合做计数器，因为不保证原子性</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VolatileExample</span> <span class="token punctuation">{</span>    <span class="token comment">// 用作状态标志</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doIfFlagSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 执行操作</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment">// 双重检查锁定单例模式</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">VolatileExample</span> instance<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">VolatileExample</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 第一次检查</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">VolatileExample</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 第二次检查</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VolatileExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-实际应用中的JMM问题"><a href="#6-实际应用中的JMM问题" class="headerlink" title="6. 实际应用中的JMM问题"></a>6. 实际应用中的JMM问题</h2><h3 id="6-1-单例模式与JMM"><a href="#6-1-单例模式与JMM" class="headerlink" title="6.1 单例模式与JMM"></a>6.1 单例模式与JMM</h3><p>在单例模式的实现中，如果不正确处理JMM相关问题，可能会导致线程安全问题：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment">// 非线程安全的懒汉式</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 可能多个线程同时进入</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 线程安全的双重检查锁定</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton</span> safeInstance<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getSafeInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>safeInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>safeInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    safeInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 上面这行代码实际上包含三个步骤：</span>                    <span class="token comment">// 1. 分配内存空间</span>                    <span class="token comment">// 2. 初始化对象</span>                    <span class="token comment">// 3. 将引用指向内存空间</span>                    <span class="token comment">// 如果没有volatile，2和3可能会重排序，导致其他线程看到一个未完全初始化的对象</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> safeInstance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-并发容器与JMM"><a href="#6-2-并发容器与JMM" class="headerlink" title="6.2 并发容器与JMM"></a>6.2 并发容器与JMM</h3><p>Java中的并发容器，如ConcurrentHashMap，通过合理使用volatile和CAS等机制，在不加锁的情况下实现了线程安全：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcurrentHashMapExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 线程安全的操作</span>        <span class="token class-name">String</span> value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 线程安全的操作</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-无锁编程与JMM"><a href="#6-3-无锁编程与JMM" class="headerlink" title="6.3 无锁编程与JMM"></a>6.3 无锁编程与JMM</h3><p>使用AtomicInteger等原子类可以在不使用锁的情况下实现线程安全的计数器：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AtomicExample</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> counter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        counter<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 原子操作，线程安全</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> counter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-JMM与多线程开发最佳实践"><a href="#7-JMM与多线程开发最佳实践" class="headerlink" title="7. JMM与多线程开发最佳实践"></a>7. JMM与多线程开发最佳实践</h2><h3 id="7-1-正确使用同步机制"><a href="#7-1-正确使用同步机制" class="headerlink" title="7.1 正确使用同步机制"></a>7.1 正确使用同步机制</h3><ol><li>优先使用java.util.concurrent包中的并发工具类</li><li>其次考虑使用synchronized和volatile关键字</li><li>尽量避免使用低级别的同步原语，如Thread.sleep()、Thread.yield()等</li></ol><h3 id="7-2-避免共享可变状态"><a href="#7-2-避免共享可变状态" class="headerlink" title="7.2 避免共享可变状态"></a>7.2 避免共享可变状态</h3><ol><li>尽量使用不可变对象</li><li>使用线程封闭技术，如ThreadLocal</li><li>使用线程安全的集合类</li></ol><h3 id="7-3-正确发布对象"><a href="#7-3-正确发布对象" class="headerlink" title="7.3 正确发布对象"></a>7.3 正确发布对象</h3><ol><li>在构造函数返回前不要暴露this引用</li><li>使用工厂方法安全发布对象</li><li>使用final字段保证初始化安全性</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SafePublication</span> <span class="token punctuation">{</span>    <span class="token comment">// 使用final字段保证初始化安全性</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">SafePublication</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 使用工厂方法安全发布对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SafePublication</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SafePublication</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Java内存模型(JMM)是Java并发编程的基础，它定义了线程如何与内存交互以及线程之间如何通信。理解JMM对于编写正确的并发程序至关重要。</p><p>本文详细介绍了JMM的基本概念、三大特性(原子性、可见性、有序性)、happens-before规则、内存屏障以及volatile关键字的实现机制。通过这些知识，我们可以更好地理解Java并发编程中的内存一致性问题，从而编写出更加高效、安全的并发程序。</p><p>在实际开发中，我们应该遵循多线程开发的最佳实践，正确使用同步机制，避免共享可变状态，并确保对象的安全发布。只有这样，才能充分利用多核处理器的优势，同时避免并发编程中的各种陷阱。</p>]]></content>
    
    
    <summary type="html">本文详细介绍了Java内存模型(JMM)的核心概念、工作原理、三大特性(原子性、可见性、有序性)、happens-before规则、内存屏障以及volatile关键字的实现机制，帮助读者深入理解Java并发编程中的内存一致性问题。</summary>
    
    
    
    <category term="Java" scheme="https://blog.lucky845.top/categories/Java/"/>
    
    <category term="技术笔记" scheme="https://blog.lucky845.top/categories/Java/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Java基础" scheme="https://blog.lucky845.top/categories/Java/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://blog.lucky845.top/tags/Java/"/>
    
    <category term="并发编程" scheme="https://blog.lucky845.top/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    <category term="JMM" scheme="https://blog.lucky845.top/tags/JMM/"/>
    
    <category term="内存模型" scheme="https://blog.lucky845.top/tags/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>【Java】CAS机制详解</title>
    <link href="https://blog.lucky845.top/archives/7e8f9a2d.html"/>
    <id>https://blog.lucky845.top/archives/7e8f9a2d.html</id>
    <published>2025-03-29T02:00:00.000Z</published>
    <updated>2025-03-29T06:06:57.077Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-CAS机制详解"><a href="#Java-CAS机制详解" class="headerlink" title="Java CAS机制详解"></a>Java CAS机制详解</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在Java并发编程中，锁机制是保证线程安全的常用手段。然而，传统的锁机制（如synchronized）存在性能开销大、可能导致死锁等问题。为了解决这些问题，Java引入了一种基于硬件原语的轻量级同步机制——CAS（Compare And Swap，比较并交换）。本文将深入探讨CAS的原理、实现和应用，帮助读者全面理解这一重要的并发控制机制。</p><h2 id="1-CAS基本概念"><a href="#1-CAS基本概念" class="headerlink" title="1. CAS基本概念"></a>1. CAS基本概念</h2><h3 id="1-1-什么是CAS"><a href="#1-1-什么是CAS" class="headerlink" title="1.1 什么是CAS"></a>1.1 什么是CAS</h3><p>CAS是一种无锁算法，全称为Compare And Swap（比较并交换）。它是一种原子操作，可以将指定内存位置的值与预期值进行比较，只有当它们相同时，才将该内存位置的值修改为新的值。整个比较并交换的操作是一个原子操作，不会被线程调度机制打断。</p><p>CAS操作包含三个操作数：</p><ul><li><strong>内存位置V</strong>：要更新的变量的内存地址</li><li><strong>预期值A</strong>：更新前，变量预期的值</li><li><strong>新值B</strong>：要设置的新值</li></ul><p>CAS的伪代码表示如下：</p><pre class="line-numbers language-none"><code class="language-none">function CAS(V, A, B) {    if (V == A) {        V = B;        return true; // 更新成功    } else {        return false; // 更新失败    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-CAS的特点"><a href="#1-2-CAS的特点" class="headerlink" title="1.2 CAS的特点"></a>1.2 CAS的特点</h3><ol><li><strong>原子性</strong>：CAS操作是一个原子操作，执行过程不会被中断。</li><li><strong>非阻塞性</strong>：线程执行CAS操作失败时，可以立即得知结果并决定后续操作，不需要被挂起等待。</li><li><strong>乐观性</strong>：CAS是一种乐观锁的实现，假设数据在大多数情况下不会发生冲突。</li><li><strong>轻量级</strong>：相比传统锁机制，CAS的性能开销更小。</li></ol><h2 id="2-CAS的底层实现"><a href="#2-CAS的底层实现" class="headerlink" title="2. CAS的底层实现"></a>2. CAS的底层实现</h2><h3 id="2-1-硬件层面的支持"><a href="#2-1-硬件层面的支持" class="headerlink" title="2.1 硬件层面的支持"></a>2.1 硬件层面的支持</h3><p>CAS操作的原子性是由CPU硬件指令保证的。现代处理器都支持CAS操作，如：</p><ul><li>x86架构：CMPXCHG指令</li><li>SPARC架构：CAS指令</li><li>IA64架构：CASA指令</li></ul><p>这些指令能够在硬件层面保证比较和交换操作的原子性，不会被线程调度打断。</p><h3 id="2-2-Java中的实现-Unsafe类"><a href="#2-2-Java中的实现-Unsafe类" class="headerlink" title="2.2 Java中的实现 - Unsafe类"></a>2.2 Java中的实现 - Unsafe类</h3><p>Java中的CAS操作主要通过<code>sun.misc.Unsafe</code>类实现。Unsafe类提供了一系列的compareAndSwap*方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token class-name">Object</span> expected<span class="token punctuation">,</span> <span class="token class-name">Object</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> expected<span class="token punctuation">,</span> <span class="token keyword">int</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">long</span> expected<span class="token punctuation">,</span> <span class="token keyword">long</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这些方法都是native方法，它们通过JNI（Java Native Interface）调用底层的C++代码，最终调用CPU的原子指令来完成CAS操作。</p><p>下面是一个使用Unsafe实现CAS操作的示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span><span class="token class-name">Unsafe</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CASDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Unsafe</span> unsafe<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> valueOffset<span class="token punctuation">;</span>        <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 通过反射获取Unsafe实例</span>            <span class="token class-name">Field</span> field <span class="token operator">=</span> <span class="token class-name">Unsafe</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"theUnsafe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            unsafe <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Unsafe</span><span class="token punctuation">)</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 获取value字段的内存偏移量</span>            valueOffset <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">objectFieldOffset</span><span class="token punctuation">(</span>                <span class="token class-name">CASDemo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> expectedValue<span class="token punctuation">,</span> <span class="token keyword">int</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> valueOffset<span class="token punctuation">,</span> expectedValue<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> current<span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            current <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> current <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Java并发包中的CAS应用"><a href="#3-Java并发包中的CAS应用" class="headerlink" title="3. Java并发包中的CAS应用"></a>3. Java并发包中的CAS应用</h2><h3 id="3-1-原子类（Atomic-）"><a href="#3-1-原子类（Atomic-）" class="headerlink" title="3.1 原子类（Atomic*）"></a>3.1 原子类（Atomic*）</h3><p>Java并发包（java.util.concurrent.atomic）提供了一系列原子类，它们内部使用CAS操作来保证线程安全：</p><ul><li><strong>AtomicBoolean</strong>：原子更新布尔类型</li><li><strong>AtomicInteger</strong>：原子更新整型</li><li><strong>AtomicLong</strong>：原子更新长整型</li><li><strong>AtomicReference</strong>：原子更新引用类型</li><li><strong>AtomicIntegerArray</strong>：原子更新整型数组</li><li><strong>AtomicLongArray</strong>：原子更新长整型数组</li><li><strong>AtomicReferenceArray</strong>：原子更新引用类型数组</li></ul><p>以AtomicInteger为例，其incrementAndGet方法的实现如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> current <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> next <span class="token operator">=</span> current <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个方法使用了CAS操作和自旋（循环尝试）的方式来实现原子递增。</p><h3 id="3-2-并发容器"><a href="#3-2-并发容器" class="headerlink" title="3.2 并发容器"></a>3.2 并发容器</h3><p>Java中的许多并发容器也使用了CAS操作，如ConcurrentHashMap：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// JDK 1.8 ConcurrentHashMap中的部分代码</span><span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// ...</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// ...</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// ...</span>    <span class="token punctuation">}</span>    <span class="token comment">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-锁实现"><a href="#3-3-锁实现" class="headerlink" title="3.3 锁实现"></a>3.3 锁实现</h3><p>Java中的显式锁（如ReentrantLock）也在内部使用了CAS操作：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// AbstractQueuedSynchronizer中的部分代码</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token keyword">int</span> expect<span class="token punctuation">,</span> <span class="token keyword">int</span> update<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> unsafe<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> stateOffset<span class="token punctuation">,</span> expect<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-CAS的问题与解决方案"><a href="#4-CAS的问题与解决方案" class="headerlink" title="4. CAS的问题与解决方案"></a>4. CAS的问题与解决方案</h2><h3 id="4-1-ABA问题"><a href="#4-1-ABA问题" class="headerlink" title="4.1 ABA问题"></a>4.1 ABA问题</h3><p>ABA问题是CAS操作的一个典型问题：如果一个值原来是A，变成了B，又变回了A，那么CAS操作检查时会认为这个值没有被修改过，但实际上它已经经历了A-&gt;B-&gt;A的变化。</p><p>例如：</p><ol><li>线程1读取值A</li><li>线程1被挂起</li><li>线程2将值从A修改为B，再修改回A</li><li>线程1恢复执行，发现值仍然是A，CAS操作成功</li></ol><p>但实际上，值已经被修改过了，这可能导致程序逻辑错误。</p><h3 id="4-2-解决ABA问题-版本号-时间戳"><a href="#4-2-解决ABA问题-版本号-时间戳" class="headerlink" title="4.2 解决ABA问题 - 版本号/时间戳"></a>4.2 解决ABA问题 - 版本号/时间戳</h3><p>解决ABA问题的一种常用方法是使用版本号或时间戳。每次修改值的同时增加版本号，这样即使值本身变回了原来的值，版本号也是不同的。</p><p>Java提供了AtomicStampedReference和AtomicMarkableReference类来解决ABA问题：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicStampedReference</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ABADemo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">AtomicStampedReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> atomicStampedRef <span class="token operator">=</span>         <span class="token keyword">new</span> <span class="token class-name">AtomicStampedReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">// 获取当前版本号</span>            <span class="token keyword">int</span> stamp <span class="token operator">=</span> atomicStampedRef<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t1 第一次读取："</span> <span class="token operator">+</span> atomicStampedRef<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 版本号："</span> <span class="token operator">+</span> stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 暂停一秒，让t2执行</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>                        <span class="token comment">// CAS操作，同时检查值和版本号</span>            <span class="token keyword">boolean</span> success <span class="token operator">=</span> atomicStampedRef<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>                <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> stamp<span class="token punctuation">,</span> stamp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t1 CAS操作结果："</span> <span class="token operator">+</span> success<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">// 获取当前版本号</span>            <span class="token keyword">int</span> stamp <span class="token operator">=</span> atomicStampedRef<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t2 第一次读取："</span> <span class="token operator">+</span> atomicStampedRef<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 版本号："</span> <span class="token operator">+</span> stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 执行ABA操作</span>            atomicStampedRef<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> stamp<span class="token punctuation">,</span> stamp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t2 将值改为："</span> <span class="token operator">+</span> atomicStampedRef<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 版本号："</span> <span class="token operator">+</span> atomicStampedRef<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        atomicStampedRef<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> atomicStampedRef<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> atomicStampedRef<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t2 将值改回："</span> <span class="token operator">+</span> atomicStampedRef<span class="token punctuation">.</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 版本号："</span> <span class="token operator">+</span> atomicStampedRef<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">t1 第一次读取：100, 版本号：0t2 第一次读取：100, 版本号：0t2 将值改为：101, 版本号：1t2 将值改回：100, 版本号：2t1 CAS操作结果：false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，虽然值变回了100，但由于版本号已经从0变成了2，所以t1的CAS操作失败了。</p><h3 id="4-3-循环时间长开销大"><a href="#4-3-循环时间长开销大" class="headerlink" title="4.3 循环时间长开销大"></a>4.3 循环时间长开销大</h3><p>CAS操作如果长时间不成功，会导致循环时间长，CPU开销大。解决方法：</p><ol><li><strong>限制自旋次数</strong>：设置一个自旋次数的上限，超过后使用传统锁。</li><li><strong>使用退避策略</strong>：如指数退避，每次失败后等待时间增加。</li><li><strong>合理设计并发粒度</strong>：减少竞争，如ConcurrentHashMap的分段锁设计。</li></ol><h3 id="4-4-只能保证一个共享变量的原子操作"><a href="#4-4-只能保证一个共享变量的原子操作" class="headerlink" title="4.4 只能保证一个共享变量的原子操作"></a>4.4 只能保证一个共享变量的原子操作</h3><p>CAS只能保证对单个变量的原子操作。如果需要对多个变量进行原子操作，可以：</p><ol><li><strong>使用AtomicReference包装多个变量</strong>：将多个变量封装在一个对象中，然后使用AtomicReference。</li><li><strong>使用锁</strong>：对于复杂的原子操作，可以使用传统锁机制。</li></ol><h2 id="5-CAS与锁的对比"><a href="#5-CAS与锁的对比" class="headerlink" title="5. CAS与锁的对比"></a>5. CAS与锁的对比</h2><h3 id="5-1-性能对比"><a href="#5-1-性能对比" class="headerlink" title="5.1 性能对比"></a>5.1 性能对比</h3><p>在低竞争环境下，CAS的性能通常优于传统锁：</p><ol><li><strong>无需线程切换</strong>：CAS失败时不会导致线程阻塞和唤醒，避免了线程切换的开销。</li><li><strong>无需操作系统介入</strong>：CAS是用户态操作，不需要进入内核态。</li><li><strong>适合短时间操作</strong>：对于执行时间短的操作，CAS的自旋等待比线程阻塞更高效。</li></ol><p>但在高竞争环境下，CAS可能导致大量的自旋和重试，反而不如传统锁。</p><h3 id="5-2-使用场景对比"><a href="#5-2-使用场景对比" class="headerlink" title="5.2 使用场景对比"></a>5.2 使用场景对比</h3><p><strong>CAS适合的场景</strong>：</p><ul><li>竞争不激烈的环境</li><li>只需要对单个变量进行原子操作</li><li>操作执行时间短</li></ul><p><strong>传统锁适合的场景</strong>：</p><ul><li>竞争激烈的环境</li><li>需要对多个变量进行原子操作</li><li>操作执行时间长</li><li>需要公平性保证</li></ul><h2 id="6-实践应用"><a href="#6-实践应用" class="headerlink" title="6. 实践应用"></a>6. 实践应用</h2><h3 id="6-1-实现一个线程安全的计数器"><a href="#6-1-实现一个线程安全的计数器" class="headerlink" title="6.1 实现一个线程安全的计数器"></a>6.1 实现一个线程安全的计数器</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicLong</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcurrentCounter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">AtomicLong</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> count<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> count<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">ConcurrentCounter</span> counter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> threadCount <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> incrementsPerThread <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>                <span class="token class-name">Thread</span><span class="token punctuation">[</span><span class="token punctuation">]</span> threads <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">[</span>threadCount<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> threadCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> incrementsPerThread<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span> thread <span class="token operator">:</span> threads<span class="token punctuation">)</span> <span class="token punctuation">{</span>            thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Expected: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>threadCount <span class="token operator">*</span> incrementsPerThread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Actual: "</span> <span class="token operator">+</span> counter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-实现一个简单的自旋锁"><a href="#6-2-实现一个简单的自旋锁" class="headerlink" title="6.2 实现一个简单的自旋锁"></a>6.2 实现一个简单的自旋锁</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicReference</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleSpinLock</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">&gt;</span></span> owner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span> currentThread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 自旋直到获取锁</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>owner<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> currentThread<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 可以添加一些退避策略，如Thread.yield()</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span> currentThread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        owner<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>currentThread<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">SimpleSpinLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleSpinLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>                t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>            t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Final count: "</span> <span class="token operator">+</span> count<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h2><p>CAS是Java并发编程中的一种重要机制，它通过硬件原语实现了无锁的原子操作，在许多场景下可以替代传统的锁机制，提高并发性能。CAS的核心思想是乐观并发控制，它假设冲突很少发生，只在数据真正被修改时才采取措施。</p><p>虽然CAS存在ABA问题、自旋开销大、只能保证单变量原子操作等局限性，但通过合理的设计和使用，这些问题都可以得到有效解决。在实际应用中，我们应该根据具体场景选择合适的并发控制机制，在低竞争环境下优先考虑CAS，在高竞争或复杂操作场景下考虑传统锁机制。</p><p>理解和掌握CAS机制，对于编写高效的并发程序至关重要。希望本文能帮助读者深入理解CAS的原理和应用，为并发编程实践提供指导。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>《Java并发编程实战》</li><li>《深入理解Java虚拟机》</li><li>Oracle官方文档：java.util.concurrent.atomic包</li><li>Doug Lea. The java.util.concurrent Synchronizer Framework.</li></ol><hr><p>本文详细介绍了 CAS 详解，希望对您有所帮助。如果您有任何问题，欢迎在评论区讨论！</p>]]></content>
    
    
    <summary type="html">本文详细介绍了Java中的CAS(Compare And Swap)机制，包括其基本原理、底层实现、应用场景、ABA问题及解决方案，以及与传统锁机制的对比分析。</summary>
    
    
    
    <category term="Java" scheme="https://blog.lucky845.top/categories/Java/"/>
    
    <category term="技术笔记" scheme="https://blog.lucky845.top/categories/Java/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Java基础" scheme="https://blog.lucky845.top/categories/Java/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://blog.lucky845.top/tags/Java/"/>
    
    <category term="并发编程" scheme="https://blog.lucky845.top/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    <category term="JUC" scheme="https://blog.lucky845.top/tags/JUC/"/>
    
    <category term="原子操作" scheme="https://blog.lucky845.top/tags/%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>【Java】乐观锁与悲观锁详解</title>
    <link href="https://blog.lucky845.top/archives/b55fa588.html"/>
    <id>https://blog.lucky845.top/archives/b55fa588.html</id>
    <published>2025-03-27T10:00:00.000Z</published>
    <updated>2025-03-27T10:47:52.023Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在并发编程和数据库事务处理中，锁机制是保证数据一致性和完整性的关键技术。根据锁的实现策略，锁机制主要分为乐观锁（Optimistic Lock）和悲观锁（Pessimistic Lock）两种类型。本文将详细介绍这两种锁机制的原理、实现方式、适用场景以及各自的优缺点。</p><h2 id="1-锁的基本概念"><a href="#1-锁的基本概念" class="headerlink" title="1. 锁的基本概念"></a>1. 锁的基本概念</h2><p>在多线程或分布式环境下，多个操作可能会同时访问和修改同一资源，这可能导致数据不一致或资源竞争的问题。锁机制通过限制对共享资源的并发访问，确保在同一时间只有一个操作能够修改资源，从而保证数据的一致性。</p><h2 id="2-悲观锁（Pessimistic-Lock）"><a href="#2-悲观锁（Pessimistic-Lock）" class="headerlink" title="2. 悲观锁（Pessimistic Lock）"></a>2. 悲观锁（Pessimistic Lock）</h2><h3 id="2-1-基本原理"><a href="#2-1-基本原理" class="headerlink" title="2.1 基本原理"></a>2.1 基本原理</h3><p>悲观锁的基本思想是：<strong>假设最坏的情况，认为在数据处理过程中，数据随时会被其他线程或事务修改，因此在整个数据处理过程中需要将数据锁定，防止其他线程或事务进行修改。</strong></p><p>悲观锁的工作流程如下：</p><ol><li>当事务或线程需要操作数据时，首先尝试获取锁。</li><li>如果获取锁成功，则可以对数据进行读取和修改；如果获取锁失败，则等待或放弃操作。</li><li>操作完成后，释放锁，允许其他事务或线程获取锁并操作数据。</li></ol><h3 id="2-2-实现方式"><a href="#2-2-实现方式" class="headerlink" title="2.2 实现方式"></a>2.2 实现方式</h3><h4 id="2-2-1-数据库中的悲观锁"><a href="#2-2-1-数据库中的悲观锁" class="headerlink" title="2.2.1 数据库中的悲观锁"></a>2.2.1 数据库中的悲观锁</h4><p>在关系型数据库中，悲观锁通常通过以下方式实现：</p><p><strong>1. 排他锁（Exclusive Lock）</strong></p><p>在 MySQL 中，可以使用 <code>SELECT ... FOR UPDATE</code> 语句获取排他锁：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 开始事务</span><span class="token keyword">BEGIN</span><span class="token punctuation">;</span><span class="token comment">-- 获取排他锁</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">FOR</span> <span class="token keyword">UPDATE</span><span class="token punctuation">;</span><span class="token comment">-- 更新数据</span><span class="token keyword">UPDATE</span> users <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">-</span> <span class="token number">100</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- 提交事务</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2. 共享锁（Shared Lock）</strong></p><p>在 MySQL 中，可以使用 <code>SELECT ... LOCK IN SHARE MODE</code> 语句获取共享锁：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 开始事务</span><span class="token keyword">BEGIN</span><span class="token punctuation">;</span><span class="token comment">-- 获取共享锁</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">LOCK</span> <span class="token operator">IN</span> <span class="token keyword">SHARE</span> <span class="token keyword">MODE</span><span class="token punctuation">;</span><span class="token comment">-- 提交事务</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-2-Java-中的悲观锁"><a href="#2-2-2-Java-中的悲观锁" class="headerlink" title="2.2.2 Java 中的悲观锁"></a>2.2.2 Java 中的悲观锁</h4><p>Java 中的悲观锁主要通过 <code>synchronized</code> 关键字和 <code>ReentrantLock</code> 类实现：</p><p><strong>1. synchronized 关键字</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> balance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">double</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>balance <span class="token operator">&gt;=</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>            balance <span class="token operator">-=</span> amount<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">double</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> balance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2. ReentrantLock 类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">ReentrantLock</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> balance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">double</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>balance <span class="token operator">&gt;=</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                balance <span class="token operator">-=</span> amount<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> balance<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-适用场景"><a href="#2-3-适用场景" class="headerlink" title="2.3 适用场景"></a>2.3 适用场景</h3><p>悲观锁适用于以下场景：</p><ol><li><strong>写操作频繁</strong>：当系统中写操作比读操作更频繁时，使用悲观锁可以减少冲突。</li><li><strong>资源竞争激烈</strong>：当多个线程或事务频繁地同时访问同一资源时，使用悲观锁可以避免频繁的重试和回滚。</li><li><strong>安全性要求高</strong>：当系统对数据一致性的要求非常高，不能容忍任何数据不一致的情况时，悲观锁是更安全的选择。</li></ol><h3 id="2-4-优缺点"><a href="#2-4-优缺点" class="headerlink" title="2.4 优缺点"></a>2.4 优缺点</h3><p><strong>优点：</strong></p><ol><li><strong>简单直观</strong>：悲观锁的实现和使用相对简单，容易理解。</li><li><strong>安全性高</strong>：悲观锁可以确保在锁定期间，数据不会被其他线程或事务修改，从而保证数据的一致性。</li></ol><p><strong>缺点：</strong></p><ol><li><strong>性能开销大</strong>：悲观锁会锁定资源，导致其他线程或事务需要等待，降低系统的并发性能。</li><li><strong>可能导致死锁</strong>：如果多个线程或事务以不同的顺序获取多个锁，可能会导致死锁。</li></ol><h2 id="3-乐观锁（Optimistic-Lock）"><a href="#3-乐观锁（Optimistic-Lock）" class="headerlink" title="3. 乐观锁（Optimistic Lock）"></a>3. 乐观锁（Optimistic Lock）</h2><h3 id="3-1-基本原理"><a href="#3-1-基本原理" class="headerlink" title="3.1 基本原理"></a>3.1 基本原理</h3><p>乐观锁的基本思想是：<strong>假设最好的情况，认为数据在大多数情况下不会被其他线程或事务修改，因此不需要在整个数据处理过程中锁定数据，而是在更新数据时检查数据是否被修改过。</strong></p><p>乐观锁的工作流程如下：</p><ol><li>当事务或线程需要操作数据时，首先读取数据及其版本号（或时间戳）。</li><li>在更新数据时，检查数据的版本号是否与读取时的版本号一致。</li><li>如果版本号一致，则更新数据并增加版本号；如果版本号不一致，则说明数据已被其他线程或事务修改，需要重试或放弃操作。</li></ol><h3 id="3-2-实现方式"><a href="#3-2-实现方式" class="headerlink" title="3.2 实现方式"></a>3.2 实现方式</h3><h4 id="3-2-1-数据库中的乐观锁"><a href="#3-2-1-数据库中的乐观锁" class="headerlink" title="3.2.1 数据库中的乐观锁"></a>3.2.1 数据库中的乐观锁</h4><p>在关系型数据库中，乐观锁通常通过以下方式实现：</p><p><strong>1. 版本号机制</strong></p><p>在数据表中添加一个版本号字段，每次更新数据时增加版本号：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 开始事务</span><span class="token keyword">BEGIN</span><span class="token punctuation">;</span><span class="token comment">-- 读取数据及版本号</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- 假设读取到的版本号为 1</span><span class="token comment">-- 更新数据，同时检查版本号</span><span class="token keyword">UPDATE</span> users <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">,</span> version <span class="token operator">=</span> version <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">AND</span> version <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- 提交事务</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2. 时间戳机制</strong></p><p>在数据表中添加一个时间戳字段，每次更新数据时更新时间戳：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 开始事务</span><span class="token keyword">BEGIN</span><span class="token punctuation">;</span><span class="token comment">-- 读取数据及时间戳</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- 假设读取到的时间戳为 '2023-01-01 12:00:00'</span><span class="token comment">-- 更新数据，同时检查时间戳</span><span class="token keyword">UPDATE</span> users <span class="token keyword">SET</span> balance <span class="token operator">=</span> balance <span class="token operator">-</span> <span class="token number">100</span><span class="token punctuation">,</span> update_time <span class="token operator">=</span> <span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">AND</span> update_time <span class="token operator">=</span> <span class="token string">'2023-01-01 12:00:00'</span><span class="token punctuation">;</span><span class="token comment">-- 提交事务</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-2-Java-中的乐观锁"><a href="#3-2-2-Java-中的乐观锁" class="headerlink" title="3.2.2 Java 中的乐观锁"></a>3.2.2 Java 中的乐观锁</h4><p>Java 中的乐观锁主要通过 CAS（Compare-And-Swap）操作实现：</p><p><strong>1. AtomicInteger 类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicInteger</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> oldValue<span class="token punctuation">,</span> newValue<span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            oldValue <span class="token operator">=</span> count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            newValue <span class="token operator">=</span> oldValue <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>count<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>oldValue<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2. 自定义乐观锁</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OptimisticAccount</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> balance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> version<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token keyword">double</span> amount<span class="token punctuation">,</span> <span class="token keyword">int</span> expectedVersion<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>version <span class="token operator">==</span> expectedVersion<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>balance <span class="token operator">&gt;=</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    balance <span class="token operator">-=</span> amount<span class="token punctuation">;</span>                    version<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">AccountInfo</span> <span class="token function">getAccountInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AccountInfo</span><span class="token punctuation">(</span>balance<span class="token punctuation">,</span> version<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AccountInfo</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">double</span> balance<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> version<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">AccountInfo</span><span class="token punctuation">(</span><span class="token keyword">double</span> balance<span class="token punctuation">,</span> <span class="token keyword">int</span> version<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>version <span class="token operator">=</span> version<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> balance<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> version<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-3-Redis-中的乐观锁"><a href="#3-2-3-Redis-中的乐观锁" class="headerlink" title="3.2.3 Redis 中的乐观锁"></a>3.2.3 Redis 中的乐观锁</h4><p>Redis 提供了 <code>WATCH</code> 命令来实现乐观锁：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Transaction</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisOptimisticLock</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"account:1"</span><span class="token punctuation">;</span>        <span class="token comment">// 监视键</span>        jedis<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 读取当前余额</span>        <span class="token class-name">String</span> balanceStr <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> balance <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>balanceStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> amount <span class="token operator">=</span> <span class="token number">100.0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>balance <span class="token operator">&gt;=</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 开始事务</span>            <span class="token class-name">Transaction</span> transaction <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 更新余额</span>            transaction<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>balance <span class="token operator">-</span> amount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 执行事务</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>transaction<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务执行失败，键已被修改"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务执行成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// 关闭连接</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-适用场景"><a href="#3-3-适用场景" class="headerlink" title="3.3 适用场景"></a>3.3 适用场景</h3><p>乐观锁适用于以下场景：</p><ol><li><strong>读操作频繁</strong>：当系统中读操作比写操作更频繁时，使用乐观锁可以提高系统的并发性能。</li><li><strong>资源竞争不激烈</strong>：当多个线程或事务同时访问同一资源的概率较低时，使用乐观锁可以减少不必要的锁定。</li><li><strong>性能要求高</strong>：当系统对性能的要求高于对数据一致性的要求时，乐观锁是更好的选择。</li></ol><h3 id="3-4-优缺点"><a href="#3-4-优缺点" class="headerlink" title="3.4 优缺点"></a>3.4 优缺点</h3><p><strong>优点：</strong></p><ol><li><strong>并发性能高</strong>：乐观锁不会锁定资源，允许多个线程或事务同时访问资源，提高系统的并发性能。</li><li><strong>不会导致死锁</strong>：乐观锁不会导致死锁，因为它不会锁定资源。</li></ol><p><strong>缺点：</strong></p><ol><li><strong>实现复杂</strong>：乐观锁的实现相对复杂，需要维护版本号或时间戳。</li><li><strong>可能导致活锁</strong>：如果多个线程或事务频繁地同时修改同一资源，可能会导致活锁，即所有线程或事务都无法成功更新数据。</li></ol><h2 id="4-乐观锁与悲观锁的对比"><a href="#4-乐观锁与悲观锁的对比" class="headerlink" title="4. 乐观锁与悲观锁的对比"></a>4. 乐观锁与悲观锁的对比</h2><table><thead><tr><th>特性</th><th>乐观锁</th><th>悲观锁</th></tr></thead><tbody><tr><td>基本思想</td><td>假设数据不会被修改</td><td>假设数据会被修改</td></tr><tr><td>锁定方式</td><td>不锁定资源，在更新时检查</td><td>锁定资源，防止其他操作</td></tr><tr><td>并发性能</td><td>高</td><td>低</td></tr><tr><td>实现复杂度</td><td>复杂</td><td>简单</td></tr><tr><td>适用场景</td><td>读操作频繁，资源竞争不激烈</td><td>写操作频繁，资源竞争激烈</td></tr><tr><td>可能问题</td><td>活锁</td><td>死锁</td></tr></tbody></table><h2 id="5-实际应用案例"><a href="#5-实际应用案例" class="headerlink" title="5. 实际应用案例"></a>5. 实际应用案例</h2><h3 id="5-1-电商系统中的库存管理"><a href="#5-1-电商系统中的库存管理" class="headerlink" title="5.1 电商系统中的库存管理"></a>5.1 电商系统中的库存管理</h3><p>在电商系统中，库存管理是一个典型的并发问题。当多个用户同时下单购买同一商品时，需要确保库存数量的正确性。</p><p><strong>使用悲观锁的实现：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PessimisticInventoryService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">reduceStock</span><span class="token punctuation">(</span><span class="token class-name">Long</span> productId<span class="token punctuation">,</span> <span class="token keyword">int</span> quantity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 查询库存</span>            <span class="token keyword">int</span> stock <span class="token operator">=</span> <span class="token function">getStock</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 检查库存是否充足</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>stock <span class="token operator">&gt;=</span> quantity<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 减少库存</span>                <span class="token function">updateStock</span><span class="token punctuation">(</span>productId<span class="token punctuation">,</span> stock <span class="token operator">-</span> quantity<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getStock</span><span class="token punctuation">(</span><span class="token class-name">Long</span> productId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 从数据库查询库存</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 示例代码</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">updateStock</span><span class="token punctuation">(</span><span class="token class-name">Long</span> productId<span class="token punctuation">,</span> <span class="token keyword">int</span> newStock<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 更新数据库中的库存</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用乐观锁的实现：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OptimisticInventoryService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">reduceStock</span><span class="token punctuation">(</span><span class="token class-name">Long</span> productId<span class="token punctuation">,</span> <span class="token keyword">int</span> quantity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> retryCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxRetryCount <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>retryCount <span class="token operator">&lt;</span> maxRetryCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 查询库存及版本号</span>            <span class="token class-name">InventoryInfo</span> info <span class="token operator">=</span> <span class="token function">getInventoryInfo</span><span class="token punctuation">(</span>productId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> stock <span class="token operator">=</span> info<span class="token punctuation">.</span><span class="token function">getStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> version <span class="token operator">=</span> info<span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 检查库存是否充足</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>stock <span class="token operator">&gt;=</span> quantity<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 使用乐观锁更新库存</span>                <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token function">updateStock</span><span class="token punctuation">(</span>productId<span class="token punctuation">,</span> stock <span class="token operator">-</span> quantity<span class="token punctuation">,</span> version<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            retryCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">InventoryInfo</span> <span class="token function">getInventoryInfo</span><span class="token punctuation">(</span><span class="token class-name">Long</span> productId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 从数据库查询库存及版本号</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InventoryInfo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 示例代码</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">updateStock</span><span class="token punctuation">(</span><span class="token class-name">Long</span> productId<span class="token punctuation">,</span> <span class="token keyword">int</span> newStock<span class="token punctuation">,</span> <span class="token keyword">int</span> expectedVersion<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 使用乐观锁更新数据库中的库存</span>        <span class="token comment">// UPDATE inventory SET stock = newStock, version = version + 1 WHERE product_id = productId AND version = expectedVersion</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 示例代码</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InventoryInfo</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> stock<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> version<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">InventoryInfo</span><span class="token punctuation">(</span><span class="token keyword">int</span> stock<span class="token punctuation">,</span> <span class="token keyword">int</span> version<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>stock <span class="token operator">=</span> stock<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>version <span class="token operator">=</span> version<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> stock<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> version<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-分布式系统中的会话管理"><a href="#5-2-分布式系统中的会话管理" class="headerlink" title="5.2 分布式系统中的会话管理"></a>5.2 分布式系统中的会话管理</h3><p>在分布式系统中，多个服务实例可能需要同时访问和修改用户会话数据。</p><p><strong>使用悲观锁的实现（基于 Redis）：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PessimisticSessionManager</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Jedis</span> jedis<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">PessimisticSessionManager</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>jedis <span class="token operator">=</span> jedis<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateSession</span><span class="token punctuation">(</span><span class="token class-name">String</span> sessionId<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> lockKey <span class="token operator">=</span> <span class="token string">"lock:session:"</span> <span class="token operator">+</span> sessionId<span class="token punctuation">;</span>        <span class="token class-name">String</span> lockValue <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 获取锁</span>            <span class="token keyword">boolean</span> acquired <span class="token operator">=</span> <span class="token function">acquireLock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> lockValue<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>acquired<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 更新会话数据</span>                <span class="token class-name">String</span> sessionKey <span class="token operator">=</span> <span class="token string">"session:"</span> <span class="token operator">+</span> sessionId<span class="token punctuation">;</span>                jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span>sessionKey<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment">// 释放锁</span>            <span class="token function">releaseLock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> lockValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">acquireLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> lockKey<span class="token punctuation">,</span> <span class="token class-name">String</span> lockValue<span class="token punctuation">,</span> <span class="token keyword">int</span> expireSeconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> lockValue<span class="token punctuation">,</span> <span class="token string">"NX"</span><span class="token punctuation">,</span> <span class="token string">"EX"</span><span class="token punctuation">,</span> expireSeconds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"OK"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">releaseLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> lockKey<span class="token punctuation">,</span> <span class="token class-name">String</span> lockValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> currentValue <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lockValue<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            jedis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用乐观锁的实现（基于 Redis）：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Transaction</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OptimisticSessionManager</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Jedis</span> jedis<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">OptimisticSessionManager</span><span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>jedis <span class="token operator">=</span> jedis<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">updateSession</span><span class="token punctuation">(</span><span class="token class-name">String</span> sessionId<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> sessionKey <span class="token operator">=</span> <span class="token string">"session:"</span> <span class="token operator">+</span> sessionId<span class="token punctuation">;</span>        <span class="token comment">// 监视键</span>        jedis<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span>sessionKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 开始事务</span>        <span class="token class-name">Transaction</span> transaction <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 更新会话数据</span>        transaction<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span>sessionKey<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行事务</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>transaction<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 事务执行失败，键已被修改</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 事务执行成功</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-注意事项"><a href="#6-注意事项" class="headerlink" title="6. 注意事项"></a>6. 注意事项</h2><ol><li><p><strong>选择合适的锁机制</strong>：根据系统的特点和需求，选择合适的锁机制。如果系统中读操作远多于写操作，可以考虑使用乐观锁；如果写操作频繁或对数据一致性要求高，可以考虑使用悲观锁。</p></li><li><p><strong>避免死锁和活锁</strong>：在使用悲观锁时，注意避免死锁；在使用乐观锁时，注意避免活锁。</p></li><li><p><strong>设置合理的超时时间</strong>：在使用悲观锁时，设置合理的超时时间，避免长时间锁定资源。</p></li><li><p><strong>考虑锁的粒度</strong>：锁的粒度越小，并发性能越高，但实现复杂度也越高。根据系统的需求，选择合适的锁粒度。</p></li><li><p><strong>考虑分布式环境</strong>：在分布式环境中，需要使用分布式锁来确保在多个服务实例之间的数据一致性。</p></li></ol><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h2><p>乐观锁和悲观锁是两种不同的锁机制，各有优缺点和适用场景。悲观锁通过锁定资源来防止其他操作，适用于写操作频繁、资源竞争激烈的场景；乐观锁通过版本检查来确保数据一致性，适用于读操作频繁、资源竞争不激烈的场景。在实际应用中，需要根据系统的特点和需求，选择合适的锁机制，以实现数据一致性和高并发性能的平衡。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://jcip.net/">Java Concurrency in Practice</a></li><li><a href="https://dev.mysql.com/doc/">MySQL Documentation</a></li><li><a href="https://redis.io/documentation">Redis Documentation</a></li></ul><hr><p>希望这篇文章能帮助您更好地理解乐观锁和悲观锁的概念、实现方式和适用场景。如果您有任何问题，欢迎在评论区讨论！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;在并发编程和数据库事务处理中，锁机制是保证数据一致性和完整性的关键技术。根据锁的实现策略，锁机制主要分为乐观锁（Optimi</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.lucky845.top/categories/Java/"/>
    
    <category term="基础知识" scheme="https://blog.lucky845.top/categories/Java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="数据库" scheme="https://blog.lucky845.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="分布式系统" scheme="https://blog.lucky845.top/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="Java" scheme="https://blog.lucky845.top/tags/Java/"/>
    
    <category term="并发" scheme="https://blog.lucky845.top/tags/%E5%B9%B6%E5%8F%91/"/>
    
    <category term="锁机制" scheme="https://blog.lucky845.top/tags/%E9%94%81%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>【Java】DelayQueue延迟队列核心源码与实现机制详解</title>
    <link href="https://blog.lucky845.top/archives/7d9e5f2b.html"/>
    <id>https://blog.lucky845.top/archives/7d9e5f2b.html</id>
    <published>2025-03-23T06:00:00.000Z</published>
    <updated>2025-03-23T06:31:55.393Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、底层数据结构与设计原理"><a href="#一、底层数据结构与设计原理" class="headerlink" title="一、底层数据结构与设计原理"></a>一、底层数据结构与设计原理</h2><h3 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h3><p>DelayQueue是Java并发包中的一个实现，它是一个无界的阻塞队列，队列中的元素只有在其指定的延迟时间到期后才能被取出。其核心特性包括：</p><ol><li><strong>延时特性</strong>：元素只有在其延迟时间到期后才能从队列中取出</li><li><strong>优先级排序</strong>：元素按照延迟时间的先后顺序排序（先到期的元素优先级更高）</li><li><strong>阻塞操作</strong>：当没有到期元素时，获取操作会阻塞</li><li><strong>线程安全</strong>：支持并发访问</li></ol><h3 id="1-2-底层数据结构"><a href="#1-2-底层数据结构" class="headerlink" title="1.2 底层数据结构"></a>1.2 底层数据结构</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// JDK 1.8 DelayQueue部分源码</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Delayed</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span>    <span class="token keyword">implements</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">// 可重入锁，保证线程安全</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">transient</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 优先级队列，用于按照延迟时间排序元素</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 用于标识是否有线程在等待获取元素</span>    <span class="token keyword">private</span> <span class="token class-name">Thread</span> leader <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">// 条件变量，用于线程间的通知机制</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Condition</span> available <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DelayQueue的底层实现主要依赖于以下几个关键组件：</p><ol><li><strong>PriorityQueue</strong>：作为底层存储结构，保证元素按照延迟时间排序</li><li><strong>ReentrantLock</strong>：提供线程安全保障</li><li><strong>Condition</strong>：实现线程等待和唤醒机制</li><li><strong>Leader-Follower模式</strong>：优化多线程等待情况下的性能</li></ol><h3 id="1-3-Delayed接口"><a href="#1-3-Delayed接口" class="headerlink" title="1.3 Delayed接口"></a>1.3 Delayed接口</h3><p>DelayQueue中的元素必须实现Delayed接口，该接口继承自Comparable接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Delayed</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Delayed</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 返回与此对象相关的剩余延迟时间，以给定的时间单位表示     */</span>    <span class="token keyword">long</span> <span class="token function">getDelay</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现此接口需要完成两个核心功能：</p><ol><li>实现<code>getDelay()</code>方法，返回元素还需要延迟的时间</li><li>实现<code>compareTo()</code>方法，定义元素之间的优先级比较规则</li></ol><h2 id="二、核心方法源码解析"><a href="#二、核心方法源码解析" class="headerlink" title="二、核心方法源码解析"></a>二、核心方法源码解析</h2><h3 id="2-1-入队操作"><a href="#2-1-入队操作" class="headerlink" title="2.1 入队操作"></a>2.1 入队操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 添加元素到队列</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 如果添加的是队首元素（最早到期的元素），唤醒等待的线程</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            leader <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            available<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 添加元素，与offer方法相同</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">offer</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 添加元素，可能会阻塞</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">offer</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 添加元素，带超时时间</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">offer</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>入队操作的核心逻辑：</p><ol><li>获取锁，确保线程安全</li><li>将元素添加到优先级队列中</li><li>如果添加的元素成为了队首（最早到期的元素），则唤醒等待的线程</li><li>释放锁</li></ol><h3 id="2-2-出队操作"><a href="#2-2-出队操作" class="headerlink" title="2.2 出队操作"></a>2.2 出队操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取并移除队首元素，如果没有到期元素则返回null</span><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">E</span> first <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 如果队列为空或队首元素未到期，返回null</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> first<span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span><span class="token constant">NANOSECONDS</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 获取并移除队首元素，如果没有到期元素则阻塞</span><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">E</span> first <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 队列为空，等待</span>                available<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">long</span> delay <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span><span class="token constant">NANOSECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>delay <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 元素已到期，移除并返回</span>                    <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">// 元素未到期</span>                first <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 避免内存泄漏</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>leader <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 已有线程在等待，进入无限等待</span>                    available<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment">// 成为leader线程</span>                    <span class="token class-name">Thread</span> thisThread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    leader <span class="token operator">=</span> thisThread<span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token comment">// 等待延迟时间</span>                        available<span class="token punctuation">.</span><span class="token function">awaitNanos</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                        <span class="token comment">// 恢复leader为null</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>leader <span class="token operator">==</span> thisThread<span class="token punctuation">)</span>                            leader <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment">// 如果leader为null且队列非空，唤醒其他等待线程</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>leader <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            available<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 获取并移除队首元素，带超时时间</span><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> nanos <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">E</span> first <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 队列为空且超时，返回null</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token comment">// 等待指定时间</span>                nanos <span class="token operator">=</span> available<span class="token punctuation">.</span><span class="token function">awaitNanos</span><span class="token punctuation">(</span>nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">long</span> delay <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span><span class="token constant">NANOSECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>delay <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token comment">// 元素已到期，移除并返回</span>                    <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token comment">// 超时，返回null</span>                    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token comment">// 元素未到期</span>                first <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">&lt;</span> delay <span class="token operator">||</span> leader <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 剩余等待时间小于延迟时间或已有leader线程</span>                    nanos <span class="token operator">=</span> available<span class="token punctuation">.</span><span class="token function">awaitNanos</span><span class="token punctuation">(</span>nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment">// 成为leader线程</span>                    <span class="token class-name">Thread</span> thisThread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    leader <span class="token operator">=</span> thisThread<span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token keyword">long</span> timeLeft <span class="token operator">=</span> available<span class="token punctuation">.</span><span class="token function">awaitNanos</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>                        nanos <span class="token operator">-=</span> delay <span class="token operator">-</span> timeLeft<span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>leader <span class="token operator">==</span> thisThread<span class="token punctuation">)</span>                            leader <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>leader <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            available<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>出队操作的核心逻辑：</p><ol><li><strong>非阻塞出队(poll)</strong>：检查队首元素是否到期，如果到期则移除并返回，否则返回null</li><li><strong>阻塞出队(take)</strong>：<ul><li>如果队列为空，则无限等待</li><li>如果队首元素未到期，则等待到期时间</li><li>使用Leader-Follower模式优化多线程等待</li></ul></li></ol><h3 id="2-3-查看操作"><a href="#2-3-查看操作" class="headerlink" title="2.3 查看操作"></a>2.3 查看操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取但不移除队首元素，如果没有到期元素则返回null</span><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">E</span> first <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> first<span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span><span class="token constant">NANOSECONDS</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span>            <span class="token keyword">null</span> <span class="token operator">:</span> first<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、Leader-Follower模式解析"><a href="#三、Leader-Follower模式解析" class="headerlink" title="三、Leader-Follower模式解析"></a>三、Leader-Follower模式解析</h2><p>DelayQueue中使用了Leader-Follower模式来优化多线程等待的情况：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Thread</span> leader <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该模式的核心思想是：</p><ol><li>只让一个线程（Leader）等待下一个到期的元素，其他线程（Followers）无限期等待</li><li>当Leader线程获取到元素或等待超时后，会唤醒一个Follower线程成为新的Leader</li></ol><p>这种设计的优势：</p><ol><li><strong>减少不必要的唤醒</strong>：避免所有线程同时被唤醒，减少上下文切换</li><li><strong>避免惊群效应</strong>：防止多个线程同时竞争同一个元素</li><li><strong>提高CPU利用率</strong>：只有一个线程在计时等待，其他线程可以休眠</li></ol><h2 id="四、延迟队列的应用场景"><a href="#四、延迟队列的应用场景" class="headerlink" title="四、延迟队列的应用场景"></a>四、延迟队列的应用场景</h2><h3 id="4-1-定时任务调度"><a href="#4-1-定时任务调度" class="headerlink" title="4.1 定时任务调度"></a>4.1 定时任务调度</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayedTask</span> <span class="token keyword">implements</span> <span class="token class-name">Delayed</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> executeTime<span class="token punctuation">;</span> <span class="token comment">// 任务执行时间</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Runnable</span> task<span class="token punctuation">;</span>    <span class="token comment">// 要执行的任务</span>        <span class="token keyword">public</span> <span class="token class-name">DelayedTask</span><span class="token punctuation">(</span><span class="token keyword">long</span> delayInMillis<span class="token punctuation">,</span> <span class="token class-name">Runnable</span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>executeTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> delayInMillis<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>task <span class="token operator">=</span> task<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getDelay</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> unit<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>executeTime <span class="token operator">-</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Delayed</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token function">getDelay</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">NANOSECONDS</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                           o<span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">NANOSECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 使用示例</span><span class="token class-name">DelayQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DelayedTask</span><span class="token punctuation">&gt;</span></span> taskQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelayQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加延迟任务</span>taskQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DelayedTask</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Task executed after 5 seconds"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>taskQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DelayedTask</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Task executed after 1 second"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 任务执行线程</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">DelayedTask</span> task <span class="token operator">=</span> taskQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            task<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-缓存过期清理"><a href="#4-2-缓存过期清理" class="headerlink" title="4.2 缓存过期清理"></a>4.2 缓存过期清理</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayedCacheEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Delayed</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">V</span> value<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> expiryTime<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">DelayedCacheEntry</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> ttlMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>expiryTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> ttlMillis<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">K</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> key<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getDelay</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> unit<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>expiryTime <span class="token operator">-</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Delayed</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token function">getDelay</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">NANOSECONDS</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                           o<span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">NANOSECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 简单的缓存实现</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimedCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DelayQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DelayedCacheEntry</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> cleanupQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelayQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">TimedCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 启动清理线程</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token class-name">DelayedCacheEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> expired <span class="token operator">=</span> cleanupQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>expired<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> expired<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> ttlMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        cleanupQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DelayedCacheEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> ttlMillis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-限流器实现"><a href="#4-3-限流器实现" class="headerlink" title="4.3 限流器实现"></a>4.3 限流器实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RateLimiter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DelayQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DelayedPermit</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelayQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> permitsPerSecond<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">RateLimiter</span><span class="token punctuation">(</span><span class="token keyword">int</span> permitsPerSecond<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>permitsPerSecond <span class="token operator">=</span> permitsPerSecond<span class="token punctuation">;</span>        <span class="token comment">// 初始化令牌</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> permitsPerSecond<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DelayedPermit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">DelayedPermit</span> permit <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>permit <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment">// 放回一个延迟1秒的令牌</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DelayedPermit</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">DelayedPermit</span> permit <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>timeout<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>permit <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment">// 放回一个延迟1秒的令牌</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DelayedPermit</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DelayedPermit</span> <span class="token keyword">implements</span> <span class="token class-name">Delayed</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> expireTime<span class="token punctuation">;</span>                <span class="token keyword">public</span> <span class="token class-name">DelayedPermit</span><span class="token punctuation">(</span><span class="token keyword">long</span> delayMs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>expireTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> delayMs<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getDelay</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> unit<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>expireTime <span class="token operator">-</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Delayed</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token function">getDelay</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">NANOSECONDS</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                               o<span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">NANOSECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 使用示例</span><span class="token class-name">RateLimiter</span> limiter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RateLimiter</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 每秒10个请求</span><span class="token comment">// 模拟请求</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>limiter<span class="token punctuation">.</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Request "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" processed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Request "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" throttled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、性能分析与最佳实践"><a href="#五、性能分析与最佳实践" class="headerlink" title="五、性能分析与最佳实践"></a>五、性能分析与最佳实践</h2><h3 id="5-1-性能特点"><a href="#5-1-性能特点" class="headerlink" title="5.1 性能特点"></a>5.1 性能特点</h3><ol><li><p><strong>时间复杂度</strong>：</p><ul><li>入队操作：O(log n)，由于使用PriorityQueue作为底层实现</li><li>出队操作：O(log n)，由于需要重新调整堆</li><li>查看操作：O(1)，直接获取堆顶元素</li></ul></li><li><p><strong>空间复杂度</strong>：</p><ul><li>O(n)，与存储的元素数量成正比</li></ul></li><li><p><strong>并发性能</strong>：</p><ul><li>使用单锁设计，在高并发场景下可能成为瓶颈</li><li>Leader-Follower模式减少了不必要的线程唤醒，提高了效率</li></ul></li></ol><h3 id="5-2-最佳实践建议"><a href="#5-2-最佳实践建议" class="headerlink" title="5.2 最佳实践建议"></a>5.2 最佳实践建议</h3><ol><li><p><strong>合理设置延迟时间</strong>：</p><ul><li>避免设置过短的延迟时间，可能导致频繁的线程唤醒</li><li>避免设置过长的延迟时间，可能导致资源长时间占用</li></ul></li><li><p><strong>正确实现Delayed接口</strong>：</p><ul><li><code>getDelay()</code>方法应返回相对于当前时间的剩余延迟</li><li><code>compareTo()</code>方法应基于延迟时间进行比较，确保先到期的元素优先级更高</li></ul></li><li><p><strong>避免队列过大</strong>：</p><ul><li>虽然DelayQueue是无界队列，但过多元素会导致内存压力和性能下降</li><li>考虑设置上限或定期清理过期元素</li></ul></li><li><p><strong>处理异常情况</strong>：</p><ul><li>在take()方法中处理InterruptedException，确保线程安全退出</li><li>考虑使用poll()方法代替take()方法，避免无限阻塞</li></ul></li></ol><h2 id="六、与其他队列实现的对比"><a href="#六、与其他队列实现的对比" class="headerlink" title="六、与其他队列实现的对比"></a>六、与其他队列实现的对比</h2><h3 id="6-1-DelayQueue-vs-Timer-TimerTask"><a href="#6-1-DelayQueue-vs-Timer-TimerTask" class="headerlink" title="6.1 DelayQueue vs Timer/TimerTask"></a>6.1 DelayQueue vs Timer/TimerTask</h3><table><thead><tr><th>特性</th><th>DelayQueue</th><th>Timer/TimerTask</th></tr></thead><tbody><tr><td>线程安全</td><td>是</td><td>是</td></tr><tr><td>多线程支持</td><td>支持多线程并发访问</td><td>单线程执行任务</td></tr><tr><td>任务调度精度</td><td>较高</td><td>较低（受单线程影响）</td></tr><tr><td>异常处理</td><td>异常不会影响其他任务</td><td>一个任务异常会影响所有任务</td></tr><tr><td>灵活性</td><td>高（可自定义延迟逻辑）</td><td>低（固定的调度模式）</td></tr></tbody></table><h3 id="6-2-DelayQueue-vs-ScheduledThreadPoolExecutor"><a href="#6-2-DelayQueue-vs-ScheduledThreadPoolExecutor" class="headerlink" title="6.2 DelayQueue vs ScheduledThreadPoolExecutor"></a>6.2 DelayQueue vs ScheduledThreadPoolExecutor</h3><table><thead><tr><th>特性</th><th>DelayQueue</th><th>ScheduledThreadPoolExecutor</th></tr></thead><tbody><tr><td>线程池</td><td>需要自行管理线程</td><td>内置线程池</td></tr><tr><td>任务调度</td><td>只支持延迟执行</td><td>支持延迟和周期性执行</td></tr><tr><td>取消任务</td><td>需要自行实现</td><td>内置支持</td></tr><tr><td>资源消耗</td><td>较低</td><td>较高（维护线程池）</td></tr><tr><td>使用复杂度</td><td>较高（需要实现Delayed接口）</td><td>较低（直接使用）</td></tr></tbody></table><h3 id="6-3-DelayQueue-vs-其他BlockingQueue"><a href="#6-3-DelayQueue-vs-其他BlockingQueue" class="headerlink" title="6.3 DelayQueue vs 其他BlockingQueue"></a>6.3 DelayQueue vs 其他BlockingQueue</h3><table><thead><tr><th>特性</th><th>DelayQueue</th><th>ArrayBlockingQueue</th><th>LinkedBlockingQueue</th></tr></thead><tbody><tr><td>边界</td><td>无界</td><td>有界</td><td>可选（默认无界）</td></tr><tr><td>排序</td><td>按延迟时间</td><td>FIFO</td><td>FIFO</td></tr><tr><td>阻塞特性</td><td>延迟到期前阻塞</td><td>队列满/空时阻塞</td><td>队列满/空时阻塞</td></tr><tr><td>内存占用</td><td>中等</td><td>固定</td><td>动态增长</td></tr><tr><td>适用场景</td><td>延迟处理</td><td>生产者消费者模型</td><td>生产者消费者模型</td></tr></tbody></table><h2 id="七、总结与参考"><a href="#七、总结与参考" class="headerlink" title="七、总结与参考"></a>七、总结与参考</h2><h3 id="7-1-总结"><a href="#7-1-总结" class="headerlink" title="7.1 总结"></a>7.1 总结</h3><p>DelayQueue是Java并发包中一个强大的延迟队列实现，它结合了优先级队列的排序能力和阻塞队列的并发特性，适用于各种需要延迟处理的场景。通过本文的源码分析，我们深入了解了DelayQueue的内部实现机制，特别是其核心的Leader-Follower模式如何优化多线程等待的性能。</p><p>DelayQueue的设计思想和实现技巧值得我们在实际开发中借鉴，尤其是在需要处理定时任务、缓存过期、限流等场景时，DelayQueue提供了一种简洁而高效的解决方案。</p><h3 id="7-2-参考资料"><a href="#7-2-参考资料" class="headerlink" title="7.2 参考资料"></a>7.2 参考资料</h3><ol><li>JDK源码 - <code>java.util.concurrent.DelayQueue</code></li><li>《Java并发编程实战》</li><li>《Java并发编程的艺术》</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/DelayQueue.html">Java Documentation - DelayQueue</a></li></ol><h3 id="7-3-讨论交流"><a href="#7-3-讨论交流" class="headerlink" title="7.3 讨论交流"></a>7.3 讨论交流</h3><p>如果您对DelayQueue的实现有任何疑问或见解，欢迎在评论区留言讨论。您也可以分享在实际项目中使用DelayQueue的经验和最佳实践，帮助更多的开发者更好地理解和应用这一强大的并发工具。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、底层数据结构与设计原理&quot;&gt;&lt;a href=&quot;#一、底层数据结构与设计原理&quot; class=&quot;headerlink&quot; title=&quot;一、底层数据结构与设计原理&quot;&gt;&lt;/a&gt;一、底层数据结构与设计原理&lt;/h2&gt;&lt;h3 id=&quot;1-1-基本概念&quot;&gt;&lt;a href=&quot;#1</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.lucky845.top/categories/Java/"/>
    
    <category term="Java基础" scheme="https://blog.lucky845.top/categories/Java/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="并发编程" scheme="https://blog.lucky845.top/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Java集合" scheme="https://blog.lucky845.top/tags/Java%E9%9B%86%E5%90%88/"/>
    
    <category term="源码分析" scheme="https://blog.lucky845.top/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>【Java】ArrayBlockingQueue核心源码与阻塞队列实现机制详解</title>
    <link href="https://blog.lucky845.top/archives/9e4d7f2a.html"/>
    <id>https://blog.lucky845.top/archives/9e4d7f2a.html</id>
    <published>2025-03-21T04:00:00.000Z</published>
    <updated>2025-03-21T04:05:05.492Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、底层数据结构与设计原理"><a href="#一、底层数据结构与设计原理" class="headerlink" title="一、底层数据结构与设计原理"></a>一、底层数据结构与设计原理</h2><h3 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h3><p>ArrayBlockingQueue是Java并发包中的一个实现，它是一个基于数组的有界阻塞队列，遵循FIFO（先进先出）原则。其核心特性包括：</p><ol><li><strong>有界性</strong>：创建时必须指定容量，一旦创建容量不可变</li><li><strong>阻塞操作</strong>：当队列满时，入队操作阻塞；当队列空时，出队操作阻塞</li><li><strong>线程安全</strong>：通过ReentrantLock保证并发安全</li><li><strong>公平性选择</strong>：支持公平/非公平锁模式</li></ol><h3 id="1-2-底层数据结构"><a href="#1-2-底层数据结构" class="headerlink" title="1.2 底层数据结构"></a>1.2 底层数据结构</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// JDK 1.8 ArrayBlockingQueue部分源码</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span>        <span class="token keyword">implements</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">{</span>    <span class="token comment">// 存储元素的数组</span>    <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> items<span class="token punctuation">;</span>    <span class="token comment">// 下一个待取出元素的索引</span>    <span class="token keyword">int</span> takeIndex<span class="token punctuation">;</span>    <span class="token comment">// 下一个可插入元素的索引</span>    <span class="token keyword">int</span> putIndex<span class="token punctuation">;</span>    <span class="token comment">// 队列中的元素数量</span>    <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token comment">// 用于所有访问控制的锁</span>    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock<span class="token punctuation">;</span>    <span class="token comment">// 等待获取元素的条件队列</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Condition</span> notEmpty<span class="token punctuation">;</span>    <span class="token comment">// 等待插入元素的条件队列</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Condition</span> notFull<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、构造方法解析"><a href="#二、构造方法解析" class="headerlink" title="二、构造方法解析"></a>二、构造方法解析</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建指定容量的队列，默认非公平锁</span><span class="token keyword">public</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 创建指定容量的队列，可选择公平/非公平锁</span><span class="token keyword">public</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">,</span> <span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>capacity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span>fair<span class="token punctuation">)</span><span class="token punctuation">;</span>    notEmpty <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    notFull <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 创建指定容量的队列，并用集合c初始化，可选择公平/非公平锁</span><span class="token keyword">public</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">,</span> <span class="token keyword">boolean</span> fair<span class="token punctuation">,</span>                          <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> fair<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 加锁确保可见性和原子性</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">E</span> e <span class="token operator">:</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">checkNotNull</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                items<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArrayIndexOutOfBoundsException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        count <span class="token operator">=</span> i<span class="token punctuation">;</span>        putIndex <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> capacity<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、核心成员变量与锁机制"><a href="#三、核心成员变量与锁机制" class="headerlink" title="三、核心成员变量与锁机制"></a>三、核心成员变量与锁机制</h2><h3 id="3-1-关键成员变量"><a href="#3-1-关键成员变量" class="headerlink" title="3.1 关键成员变量"></a>3.1 关键成员变量</h3><ul><li><strong>items</strong>：存储队列元素的数组，容量固定</li><li><strong>takeIndex</strong>：下一个出队元素的索引</li><li><strong>putIndex</strong>：下一个入队元素的索引</li><li><strong>count</strong>：当前队列中的元素数量</li><li><strong>lock</strong>：控制并发访问的ReentrantLock锁</li><li><strong>notEmpty</strong>：队列非空条件，用于通知等待获取元素的线程</li><li><strong>notFull</strong>：队列未满条件，用于通知等待插入元素的线程</li></ul><h3 id="3-2-锁与条件变量机制"><a href="#3-2-锁与条件变量机制" class="headerlink" title="3.2 锁与条件变量机制"></a>3.2 锁与条件变量机制</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 锁机制初始化</span>lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span>fair<span class="token punctuation">)</span><span class="token punctuation">;</span>notEmpty <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>notFull <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>ArrayBlockingQueue使用单一的ReentrantLock来保护所有访问，并使用两个条件变量来管理线程等待状态：</p><ol><li><strong>notEmpty条件</strong>：当队列为空时，消费者线程在此条件上等待</li><li><strong>notFull条件</strong>：当队列已满时，生产者线程在此条件上等待</li></ol><p>这种设计确保了线程安全，同时通过条件变量实现了高效的线程等待和唤醒机制。</p><h2 id="四、核心方法源码解析"><a href="#四、核心方法源码解析" class="headerlink" title="四、核心方法源码解析"></a>四、核心方法源码解析</h2><h3 id="4-1-入队操作"><a href="#4-1-入队操作" class="headerlink" title="4.1 入队操作"></a>4.1 入队操作</h3><h4 id="4-1-1-put方法（阻塞）"><a href="#4-1-1-put方法（阻塞）" class="headerlink" title="4.1.1 put方法（阻塞）"></a>4.1.1 put方法（阻塞）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>    <span class="token function">checkNotNull</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            notFull<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 队列已满，等待空间</span>        <span class="token function">enqueue</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 入队</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 入队辅助方法</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token class-name">E</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> items <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">;</span>    items<span class="token punctuation">[</span>putIndex<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>putIndex <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        putIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 循环队列，索引到达末尾时重置为0</span>    count<span class="token operator">++</span><span class="token punctuation">;</span>    notEmpty<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 唤醒等待获取元素的线程</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-2-offer方法（非阻塞）"><a href="#4-1-2-offer方法（非阻塞）" class="headerlink" title="4.1.2 offer方法（非阻塞）"></a>4.1.2 offer方法（非阻塞）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">checkNotNull</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// 队列已满，直接返回false</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">enqueue</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 入队</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-3-offer方法（超时版本）"><a href="#4-1-3-offer方法（超时版本）" class="headerlink" title="4.1.3 offer方法（超时版本）"></a>4.1.3 offer方法（超时版本）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>    <span class="token function">checkNotNull</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> nanos <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// 超时返回false</span>            nanos <span class="token operator">=</span> notFull<span class="token punctuation">.</span><span class="token function">awaitNanos</span><span class="token punctuation">(</span>nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 等待指定时间</span>        <span class="token punctuation">}</span>        <span class="token function">enqueue</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 入队</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-出队操作"><a href="#4-2-出队操作" class="headerlink" title="4.2 出队操作"></a>4.2 出队操作</h3><h4 id="4-2-1-take方法（阻塞）"><a href="#4-2-1-take方法（阻塞）" class="headerlink" title="4.2.1 take方法（阻塞）"></a>4.2.1 take方法（阻塞）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            notEmpty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 队列为空，等待数据</span>        <span class="token keyword">return</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 出队</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 出队辅助方法</span><span class="token keyword">private</span> <span class="token class-name">E</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> items <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">;</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token class-name">E</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> items<span class="token punctuation">[</span>takeIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>    items<span class="token punctuation">[</span>takeIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">// 帮助GC</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>takeIndex <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>        takeIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 循环队列，索引到达末尾时重置为0</span>    count<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>itrs <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        itrs<span class="token punctuation">.</span><span class="token function">elementDequeued</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 通知迭代器元素已出队</span>    notFull<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 唤醒等待插入元素的线程</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-2-poll方法（非阻塞）"><a href="#4-2-2-poll方法（非阻塞）" class="headerlink" title="4.2.2 poll方法（非阻塞）"></a>4.2.2 poll方法（非阻塞）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-3-poll方法（超时版本）"><a href="#4-2-3-poll方法（超时版本）" class="headerlink" title="4.2.3 poll方法（超时版本）"></a>4.2.3 poll方法（超时版本）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> nanos <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">// 超时返回null</span>            nanos <span class="token operator">=</span> notEmpty<span class="token punctuation">.</span><span class="token function">awaitNanos</span><span class="token punctuation">(</span>nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 等待指定时间</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-查看操作"><a href="#4-3-查看操作" class="headerlink" title="4.3 查看操作"></a>4.3 查看操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">itemAt</span><span class="token punctuation">(</span>takeIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 只查看不移除</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 获取指定位置元素的辅助方法</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span><span class="token keyword">final</span> <span class="token class-name">E</span> <span class="token function">itemAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、循环数组实现原理"><a href="#五、循环数组实现原理" class="headerlink" title="五、循环数组实现原理"></a>五、循环数组实现原理</h2><p>ArrayBlockingQueue使用循环数组实现队列，这种设计有以下特点：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 入队索引循环</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>putIndex <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    putIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 出队索引循环</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>takeIndex <span class="token operator">==</span> items<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    takeIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><strong>空间复用</strong>：通过循环使用数组空间，避免了数据搬移</li><li><strong>边界处理</strong>：当索引到达数组末尾时，自动重置为0继续使用</li><li><strong>高效实现</strong>：入队和出队操作的时间复杂度均为O(1)</li></ol><p>这种循环数组的实现使得ArrayBlockingQueue在有限的空间内能够高效地处理元素的添加和移除。</p><h2 id="六、公平性与非公平性对比"><a href="#六、公平性与非公平性对比" class="headerlink" title="六、公平性与非公平性对比"></a>六、公平性与非公平性对比</h2><p>ArrayBlockingQueue支持两种锁模式：</p><h3 id="6-1-公平锁模式"><a href="#6-1-公平锁模式" class="headerlink" title="6.1 公平锁模式"></a>6.1 公平锁模式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建公平锁模式的队列</span><span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fairQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>优点</strong>：按照线程等待的时间顺序获取锁，避免线程饥饿</li><li><strong>缺点</strong>：需要维护一个有序队列，性能相对较低</li></ul><h3 id="6-2-非公平锁模式（默认）"><a href="#6-2-非公平锁模式（默认）" class="headerlink" title="6.2 非公平锁模式（默认）"></a>6.2 非公平锁模式（默认）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建非公平锁模式的队列（默认）</span><span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>优点</strong>：吞吐量更高，性能更好</li><li><strong>缺点</strong>：可能导致某些线程长时间等待（饥饿）</li></ul><h2 id="七、性能特性与最佳实践"><a href="#七、性能特性与最佳实践" class="headerlink" title="七、性能特性与最佳实践"></a>七、性能特性与最佳实践</h2><h3 id="7-1-性能特点"><a href="#7-1-性能特点" class="headerlink" title="7.1 性能特点"></a>7.1 性能特点</h3><ol><li><strong>有界性能优势</strong>：预分配固定大小的数组，避免动态扩容</li><li><strong>单锁设计</strong>：所有操作共用一把锁，简化实现但可能成为性能瓶颈</li><li><strong>数组访问效率</strong>：基于数组实现，随机访问效率高</li><li><strong>内存占用</strong>：相比链表实现的队列，内存占用更紧凑</li></ol><h3 id="7-2-适用场景"><a href="#7-2-适用场景" class="headerlink" title="7.2 适用场景"></a>7.2 适用场景</h3><ul><li><strong>生产者-消费者模型</strong>：典型的阻塞队列应用场景</li><li><strong>线程池工作队列</strong>：用于存储等待执行的任务</li><li><strong>数据缓冲区</strong>：在异步处理系统中作为数据缓冲</li><li><strong>流量控制</strong>：利用有界特性进行流量整形和控制</li></ul><h3 id="7-3-使用建议"><a href="#7-3-使用建议" class="headerlink" title="7.3 使用建议"></a>7.3 使用建议</h3><ol><li><strong>合理设置容量</strong>：根据生产和消费速率设置合适的队列容量</li><li><strong>选择合适的API</strong>：根据需求选择阻塞(put/take)或非阻塞(offer/poll)方法</li><li><strong>注意锁竞争</strong>：高并发场景下考虑使用LinkedBlockingQueue或ConcurrentLinkedQueue</li><li><strong>避免在锁内执行耗时操作</strong>：减少锁持有时间，提高并发性</li></ol><h2 id="八、源码实现的关键设计思想"><a href="#八、源码实现的关键设计思想" class="headerlink" title="八、源码实现的关键设计思想"></a>八、源码实现的关键设计思想</h2><ol><li><strong>单锁 + 双条件变量</strong>：使用一个ReentrantLock和两个Condition实现线程协作</li><li><strong>循环数组</strong>：通过循环索引实现高效的FIFO队列</li><li><strong>阻塞与非阻塞API</strong>：提供多种操作方式满足不同需求</li><li><strong>公平性选择</strong>：支持公平与非公平锁模式，满足不同场景需求</li></ol><h2 id="九、与其他阻塞队列的对比"><a href="#九、与其他阻塞队列的对比" class="headerlink" title="九、与其他阻塞队列的对比"></a>九、与其他阻塞队列的对比</h2><h3 id="9-1-ArrayBlockingQueue-vs-LinkedBlockingQueue"><a href="#9-1-ArrayBlockingQueue-vs-LinkedBlockingQueue" class="headerlink" title="9.1 ArrayBlockingQueue vs LinkedBlockingQueue"></a>9.1 ArrayBlockingQueue vs LinkedBlockingQueue</h3><table><thead><tr><th>特性</th><th>ArrayBlockingQueue</th><th>LinkedBlockingQueue</th></tr></thead><tbody><tr><td>底层实现</td><td>循环数组</td><td>链表</td></tr><tr><td>容量限制</td><td>创建时固定</td><td>可选（默认Integer.MAX_VALUE）</td></tr><tr><td>锁机制</td><td>单锁</td><td>双锁（分离的读写锁）</td></tr><tr><td>内存占用</td><td>紧凑，预分配</td><td>按需分配，额外引用开销</td></tr><tr><td>适用场景</td><td>容量可预知，读写频率接近</td><td>容量不可预知，读写速率不匹配</td></tr></tbody></table><h3 id="9-2-ArrayBlockingQueue-vs-ConcurrentLinkedQueue"><a href="#9-2-ArrayBlockingQueue-vs-ConcurrentLinkedQueue" class="headerlink" title="9.2 ArrayBlockingQueue vs ConcurrentLinkedQueue"></a>9.2 ArrayBlockingQueue vs ConcurrentLinkedQueue</h3><table><thead><tr><th>特性</th><th>ArrayBlockingQueue</th><th>ConcurrentLinkedQueue</th></tr></thead><tbody><tr><td>阻塞特性</td><td>支持阻塞操作</td><td>非阻塞（无等待）</td></tr><tr><td>底层实现</td><td>数组 + 锁</td><td>链表 + CAS</td></tr><tr><td>容量限制</td><td>有界</td><td>无界</td></tr><tr><td>性能特点</td><td>中等并发性能</td><td>高并发性能</td></tr><tr><td>适用场景</td><td>需要阻塞语义的场景</td><td>高吞吐、低延迟场景</td></tr></tbody></table><h3 id="9-3-ArrayBlockingQueue-vs-DelayQueue"><a href="#9-3-ArrayBlockingQueue-vs-DelayQueue" class="headerlink" title="9.3 ArrayBlockingQueue vs DelayQueue"></a>9.3 ArrayBlockingQueue vs DelayQueue</h3><table><thead><tr><th>特性</th><th>ArrayBlockingQueue</th><th>DelayQueue</th></tr></thead><tbody><tr><td>元素特性</td><td>普通元素</td><td>延迟元素（需实现Delayed接口）</td></tr><tr><td>出队顺序</td><td>FIFO</td><td>按延迟时间排序</td></tr><tr><td>应用场景</td><td>普通生产-消费模型</td><td>定时任务、缓存过期</td></tr></tbody></table><h2 id="十、讨论与交流"><a href="#十、讨论与交流" class="headerlink" title="十、讨论与交流"></a>十、讨论与交流</h2><h3 id="10-1-常见问题解答"><a href="#10-1-常见问题解答" class="headerlink" title="10.1 常见问题解答"></a>10.1 常见问题解答</h3><ol><li><p><strong>为什么ArrayBlockingQueue使用单锁而不是分离锁？</strong></p><ul><li>设计简单性：单锁实现更简单，代码更易维护</li><li>数组特性：数组结构使得头尾操作相互影响，分离锁收益有限</li><li>避免死锁：单锁避免了复杂的死锁处理逻辑</li></ul></li><li><p><strong>ArrayBlockingQueue是否线程安全？</strong></p><ul><li>是的，通过ReentrantLock保证了所有操作的线程安全性</li><li>所有修改操作都在锁的保护下进行，确保了可见性和原子性</li></ul></li><li><p><strong>如何选择合适的队列容量？</strong></p><ul><li>分析生产和消费速率，确保队列不会成为性能瓶颈</li><li>考虑内存限制，避免过大的队列占用过多内存</li><li>通常设置为生产速率与消费速率之差的峰值乘以服务时间</li></ul></li></ol><h3 id="10-2-性能优化建议"><a href="#10-2-性能优化建议" class="headerlink" title="10.2 性能优化建议"></a>10.2 性能优化建议</h3><ol><li><p><strong>减少锁竞争</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用多个队列分散负载</span><span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Task</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> queues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token punctuation">[</span>nThreads<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nThreads<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    queues<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 根据某种策略选择队列</span><span class="token keyword">int</span> index <span class="token operator">=</span> task<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> nThreads<span class="token punctuation">;</span>queues<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>批量操作</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用drainTo批量处理元素</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Task</span><span class="token punctuation">&gt;</span></span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>batchSize<span class="token punctuation">)</span><span class="token punctuation">;</span>queue<span class="token punctuation">.</span><span class="token function">drainTo</span><span class="token punctuation">(</span>tasks<span class="token punctuation">,</span> batchSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Task</span> task <span class="token operator">:</span> tasks<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">process</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>合理使用超时方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 避免无限等待</span><span class="token class-name">Task</span> task <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">process</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment">// 处理超时情况</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="10-3-参考资料"><a href="#10-3-参考资料" class="headerlink" title="10.3 参考资料"></a>10.3 参考资料</h3><ol><li>Java SE Documentation - <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ArrayBlockingQueue.html">java.util.concurrent.ArrayBlockingQueue</a></li><li>《Java并发编程实战》- Brian Goetz等</li><li>《Java并发编程的艺术》- 方腾飞等</li><li>Doug Lea - <a href="http://gee.cs.oswego.edu/dl/cpj/index.html">《Concurrent Programming in Java》</a></li><li>OpenJDK源码 - <a href="https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/util/concurrent/ArrayBlockingQueue.java">ArrayBlockingQueue.java</a></li></ol><p>通过本文的分析，我们深入了解了ArrayBlockingQueue的实现原理、性能特点和最佳实践。在实际应用中，根据具体场景选择合适的阻塞队列实现，可以显著提升系统的性能和可靠性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、底层数据结构与设计原理&quot;&gt;&lt;a href=&quot;#一、底层数据结构与设计原理&quot; class=&quot;headerlink&quot; title=&quot;一、底层数据结构与设计原理&quot;&gt;&lt;/a&gt;一、底层数据结构与设计原理&lt;/h2&gt;&lt;h3 id=&quot;1-1-基本概念&quot;&gt;&lt;a href=&quot;#1</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.lucky845.top/categories/Java/"/>
    
    <category term="Java基础" scheme="https://blog.lucky845.top/categories/Java/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="并发编程" scheme="https://blog.lucky845.top/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Java集合" scheme="https://blog.lucky845.top/tags/Java%E9%9B%86%E5%90%88/"/>
    
    <category term="源码分析" scheme="https://blog.lucky845.top/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>【Java】CopyOnWriteArrayList核心源码解析与写时复制机制详解</title>
    <link href="https://blog.lucky845.top/archives/8d7c2f3e.html"/>
    <id>https://blog.lucky845.top/archives/8d7c2f3e.html</id>
    <published>2025-03-20T06:00:00.000Z</published>
    <updated>2025-03-20T07:18:47.926Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、写时复制机制原理"><a href="#一、写时复制机制原理" class="headerlink" title="一、写时复制机制原理"></a>一、写时复制机制原理</h2><h3 id="1-1-设计思想"><a href="#1-1-设计思想" class="headerlink" title="1.1 设计思想"></a>1.1 设计思想</h3><p>通过写时复制（Copy-On-Write）策略实现并发安全，所有修改操作都会创建底层数组的新副本。这种设计保证：</p><ol><li>读操作完全无锁，直接访问当前数组引用</li><li>写操作通过ReentrantLock保证原子性</li><li>迭代器使用创建时的数组快照，避免ConcurrentModificationException</li></ol><h3 id="1-2-适用场景"><a href="#1-2-适用场景" class="headerlink" title="1.2 适用场景"></a>1.2 适用场景</h3><p>适用于读操作远多于写操作的场景，例如：</p><ul><li>事件监听器列表管理</li><li>黑白名单等配置数据的读取</li><li>需要保证数据最终一致性的场景</li></ul><p>不适用于写操作频繁或数据实时性要求高的场景</p><h2 id="二、核心数据结构"><a href="#二、核心数据结构" class="headerlink" title="二、核心数据结构"></a>二、核心数据结构</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 使用volatile保证数组引用的可见性</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token keyword">transient</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、并发控制实现"><a href="#三、并发控制实现" class="headerlink" title="三、并发控制实现"></a>三、并发控制实现</h2><h3 id="3-1-写操作加锁机制"><a href="#3-1-写操作加锁机制" class="headerlink" title="3.1 写操作加锁机制"></a>3.1 写操作加锁机制</h3><p>所有修改操作前必须获取独占锁：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment">// 修改操作</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保证同一时刻只有一个线程执行修改操作</p><h3 id="3-2-原子引用更新"><a href="#3-2-原子引用更新" class="headerlink" title="3.2 原子引用更新"></a>3.2 原子引用更新</h3><p>volatile修饰的array引用保证：</p><ol><li>写线程修改数组引用后，读线程立即可见</li><li>配合Unsafe.putObjectVolatile实现原子引用更新</li><li>避免指令重排序导致的可见性问题</li></ol><h2 id="四、关键方法源码解析"><a href="#四、关键方法源码解析" class="headerlink" title="四、关键方法源码解析"></a>四、关键方法源码解析</h2><h3 id="4-1-add方法实现"><a href="#4-1-add方法实现" class="headerlink" title="4.1 add方法实现"></a>4.1 add方法实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newElements <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newElements<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token function">setArray</span><span class="token punctuation">(</span>newElements<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-remove方法实现"><a href="#4-2-remove方法实现" class="headerlink" title="4.2 remove方法实现"></a>4.2 remove方法实现</h3><p>public E remove(int index) {<br>    final ReentrantLock lock = this.lock;<br>    lock.lock();<br>    try {<br>        Object[] elements = getArray();<br>        int len = elements.length;<br>        E oldValue = elementAt(elements, index);<br>        int numMoved = len - index - 1;<br>        if (numMoved == 0)<br>            setArray(Arrays.copyOf(elements, len - 1));<br>        else {<br>            Object[] newElements = new Object[len - 1];<br>            System.arraycopy(elements, 0, newElements, 0, index);<br>            System.arraycopy(elements, index + 1, newElements, index, numMoved);<br>            setArray(newElements);<br>        }<br>        return oldValue;<br>    } finally {<br>        lock.unlock();<br>    }<br>}</p><h2 id="五、迭代器实现特点"><a href="#五、迭代器实现特点" class="headerlink" title="五、迭代器实现特点"></a>五、迭代器实现特点</h2><h3 id="5-1-快照迭代器"><a href="#5-1-快照迭代器" class="headerlink" title="5.1 快照迭代器"></a>5.1 快照迭代器</h3><p>迭代器持有创建时的数组快照：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">COWIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>写操作不会影响已创建的迭代器，但可能导致迭代器数据过时</p><h2 id="六、性能对比测试"><a href="#六、性能对比测试" class="headerlink" title="六、性能对比测试"></a>六、性能对比测试</h2><table><thead><tr><th>操作类型</th><th>时间复杂度</th><th>线程安全</th></tr></thead><tbody><tr><td>读操作</td><td>O(1)</td><td>无锁访问</td></tr><tr><td>写操作</td><td>O(n)</td><td>完全同步</td></tr></tbody></table><h2 id="七、最佳实践建议"><a href="#七、最佳实践建议" class="headerlink" title="七、最佳实践建议"></a>七、最佳实践建议</h2><ol><li>集合大小保持较小（建议不超过1KB）</li><li>写操作完成后及时释放资源</li><li>配合版本号实现数据最终一致性检查</li><li>避免在循环中执行批量写操作</li></ol><p>示例用法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">CopyOnWriteArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> configList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 写操作</span>configList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"new_config"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 读操作</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> config <span class="token operator">:</span> configList<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">processConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="八、参考资料"><a href="#八、参考资料" class="headerlink" title="八、参考资料"></a>八、参考资料</h2><ol><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CopyOnWriteArrayList.html">Oracle官方文档 - CopyOnWriteArrayList</a></li><li>《Java并发编程实战》第5章 并发容器</li><li>《Java性能权威指南》第9章 并发编程性能调优</li></ol><h2 id="九、技术讨论"><a href="#九、技术讨论" class="headerlink" title="九、技术讨论"></a>九、技术讨论</h2><p>如果您对本文有任何疑问、建议或发现了错误，欢迎在评论区留言讨论。我们可以一起探讨CopyOnWriteArrayList的实现细节、性能优化或在实际项目中的应用经验。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、写时复制机制原理&quot;&gt;&lt;a href=&quot;#一、写时复制机制原理&quot; class=&quot;headerlink&quot; title=&quot;一、写时复制机制原理&quot;&gt;&lt;/a&gt;一、写时复制机制原理&lt;/h2&gt;&lt;h3 id=&quot;1-1-设计思想&quot;&gt;&lt;a href=&quot;#1-1-设计思想&quot; cla</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.lucky845.top/categories/Java/"/>
    
    <category term="Java基础" scheme="https://blog.lucky845.top/categories/Java/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="并发编程" scheme="https://blog.lucky845.top/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Java集合" scheme="https://blog.lucky845.top/tags/Java%E9%9B%86%E5%90%88/"/>
    
    <category term="源码分析" scheme="https://blog.lucky845.top/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>【Java】LinkedHashMap核心源码解析与实现原理详解</title>
    <link href="https://blog.lucky845.top/archives/7a8b905g.html"/>
    <id>https://blog.lucky845.top/archives/7a8b905g.html</id>
    <published>2025-03-20T04:00:00.000Z</published>
    <updated>2025-03-20T07:10:33.365Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、底层数据结构"><a href="#一、底层数据结构" class="headerlink" title="一、底层数据结构"></a>一、底层数据结构</h2><p>LinkedHashMap是HashMap的子类，它在HashMap的基础上，通过维护一个双向链表，保证了元素的插入顺序或访问顺序：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// JDK 1.8 LinkedHashMap部分源码</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">// 双向链表的头节点</span>    <span class="token keyword">transient</span> <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> head<span class="token punctuation">;</span>        <span class="token comment">// 双向链表的尾节点</span>    <span class="token keyword">transient</span> <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> tail<span class="token punctuation">;</span>        <span class="token comment">// 是否按访问顺序排序，true表示按访问顺序，false表示按插入顺序</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> accessOrder<span class="token punctuation">;</span>        <span class="token comment">// 默认构造函数，按插入顺序排序</span>    <span class="token keyword">public</span> <span class="token class-name">LinkedHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        accessOrder <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 指定初始容量的构造函数，按插入顺序排序</span>    <span class="token keyword">public</span> <span class="token class-name">LinkedHashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        accessOrder <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 指定初始容量和负载因子的构造函数，按插入顺序排序</span>    <span class="token keyword">public</span> <span class="token class-name">LinkedHashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>        accessOrder <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 指定初始容量、负载因子和排序模式的构造函数</span>    <span class="token keyword">public</span> <span class="token class-name">LinkedHashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">,</span> <span class="token keyword">boolean</span> accessOrder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>accessOrder <span class="token operator">=</span> accessOrder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 使用已有Map构造，按插入顺序排序</span>    <span class="token keyword">public</span> <span class="token class-name">LinkedHashMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        accessOrder <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token function">putMapEntries</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-Entry节点结构"><a href="#1-1-Entry节点结构" class="headerlink" title="1.1 Entry节点结构"></a>1.1 Entry节点结构</h3><p>LinkedHashMap的核心是其Entry节点，它继承自HashMap.Node，并增加了before和after引用，用于维护双向链表：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">HashMap<span class="token punctuation">.</span>Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> before<span class="token punctuation">,</span> after<span class="token punctuation">;</span> <span class="token comment">// 双向链表的前驱和后继节点引用</span>        <span class="token class-name">Entry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种设计使得LinkedHashMap同时拥有HashMap的高效查找特性和链表的有序遍历特性：</p><ol><li><strong>哈希表结构</strong>：继承自HashMap，使用哈希表进行元素存储，保证了O(1)的查找效率</li><li><strong>双向链表结构</strong>：通过Entry节点的before和after引用，维护了元素的插入顺序或访问顺序</li></ol><h2 id="二、关键成员变量"><a href="#二、关键成员变量" class="headerlink" title="二、关键成员变量"></a>二、关键成员变量</h2><table><thead><tr><th>变量名</th><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>head</td><td>Entry&lt;K,V&gt;</td><td>双向链表的头节点</td></tr><tr><td>tail</td><td>Entry&lt;K,V&gt;</td><td>双向链表的尾节点</td></tr><tr><td>accessOrder</td><td>boolean</td><td>决定迭代顺序，true表示访问顺序，false表示插入顺序</td></tr></tbody></table><p>其中，accessOrder是LinkedHashMap的关键特性：</p><ul><li>当accessOrder为false时（默认值），元素按照插入顺序排列</li><li>当accessOrder为true时，元素按照访问顺序排列，最近访问的元素会移动到链表末尾</li></ul><h2 id="三、核心方法源码解析"><a href="#三、核心方法源码解析" class="headerlink" title="三、核心方法源码解析"></a>三、核心方法源码解析</h2><h3 id="3-1-链表维护方法"><a href="#3-1-链表维护方法" class="headerlink" title="3.1 链表维护方法"></a>3.1 链表维护方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 将节点链接到双向链表的尾部</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">linkNodeLast</span><span class="token punctuation">(</span><span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> last <span class="token operator">=</span> tail<span class="token punctuation">;</span>    tail <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>last <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        head <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        p<span class="token punctuation">.</span>before <span class="token operator">=</span> last<span class="token punctuation">;</span>        last<span class="token punctuation">.</span>after <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 从双向链表中移除节点</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">transferLinks</span><span class="token punctuation">(</span><span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> src<span class="token punctuation">,</span> <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> dst<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> b <span class="token operator">=</span> dst<span class="token punctuation">.</span>before <span class="token operator">=</span> src<span class="token punctuation">.</span>before<span class="token punctuation">;</span>    <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> a <span class="token operator">=</span> dst<span class="token punctuation">.</span>after <span class="token operator">=</span> src<span class="token punctuation">.</span>after<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        head <span class="token operator">=</span> dst<span class="token punctuation">;</span>    <span class="token keyword">else</span>        b<span class="token punctuation">.</span>after <span class="token operator">=</span> dst<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        tail <span class="token operator">=</span> dst<span class="token punctuation">;</span>    <span class="token keyword">else</span>        a<span class="token punctuation">.</span>before <span class="token operator">=</span> dst<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-重写HashMap的回调方法"><a href="#3-2-重写HashMap的回调方法" class="headerlink" title="3.2 重写HashMap的回调方法"></a>3.2 重写HashMap的回调方法</h3><p>LinkedHashMap重写了HashMap的三个关键回调方法，用于维护双向链表：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 节点访问后的回调，当accessOrder为true时，将访问的节点移到链表末尾</span><span class="token keyword">void</span> <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> last<span class="token punctuation">;</span>    <span class="token comment">// 如果是按访问顺序排序，且当前节点不是尾节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>accessOrder <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>last <span class="token operator">=</span> tail<span class="token punctuation">)</span> <span class="token operator">!=</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>e<span class="token punctuation">;</span>        <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> b <span class="token operator">=</span> p<span class="token punctuation">.</span>before<span class="token punctuation">;</span>        <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> a <span class="token operator">=</span> p<span class="token punctuation">.</span>after<span class="token punctuation">;</span>                <span class="token comment">// 从链表中断开当前节点</span>        p<span class="token punctuation">.</span>after <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            head <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">else</span>            b<span class="token punctuation">.</span>after <span class="token operator">=</span> a<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            a<span class="token punctuation">.</span>before <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token keyword">else</span>            last <span class="token operator">=</span> b<span class="token punctuation">;</span>                <span class="token comment">// 将当前节点插入到链表尾部</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>last <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            head <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            p<span class="token punctuation">.</span>before <span class="token operator">=</span> last<span class="token punctuation">;</span>            last<span class="token punctuation">.</span>after <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        tail <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token operator">++</span>modCount<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 节点插入后的回调，将新节点添加到链表末尾</span><span class="token keyword">void</span> <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> first<span class="token punctuation">;</span>    <span class="token comment">// 如果需要删除最老的元素，且链表不为空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>evict <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>first <span class="token operator">=</span> head<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">K</span> key <span class="token operator">=</span> first<span class="token punctuation">.</span>key<span class="token punctuation">;</span>        <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 节点删除后的回调，从链表中移除节点</span><span class="token keyword">void</span> <span class="token function">afterNodeRemoval</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>e<span class="token punctuation">;</span>    <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> b <span class="token operator">=</span> p<span class="token punctuation">.</span>before<span class="token punctuation">;</span>    <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> a <span class="token operator">=</span> p<span class="token punctuation">.</span>after<span class="token punctuation">;</span>        <span class="token comment">// 清空节点的前驱和后继引用</span>    p<span class="token punctuation">.</span>before <span class="token operator">=</span> p<span class="token punctuation">.</span>after <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token comment">// 更新链表</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        head <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token keyword">else</span>        b<span class="token punctuation">.</span>after <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        tail <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token keyword">else</span>        a<span class="token punctuation">.</span>before <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-get方法实现"><a href="#3-3-get方法实现" class="headerlink" title="3.3 get方法实现"></a>3.3 get方法实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span>    <span class="token comment">// 调用HashMap的getNode方法获取节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 如果是按访问顺序排序，则将访问的节点移到链表末尾</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>accessOrder<span class="token punctuation">)</span>        <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-removeEldestEntry方法"><a href="#3-4-removeEldestEntry方法" class="headerlink" title="3.4 removeEldestEntry方法"></a>3.4 removeEldestEntry方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 判断是否应该移除最老的元素，默认返回false</span><span class="token comment">// 子类可以重写此方法实现LRU缓存等功能</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> eldest<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、LinkedHashMap的特殊应用"><a href="#四、LinkedHashMap的特殊应用" class="headerlink" title="四、LinkedHashMap的特殊应用"></a>四、LinkedHashMap的特殊应用</h2><h3 id="4-1-实现LRU缓存"><a href="#4-1-实现LRU缓存" class="headerlink" title="4.1 实现LRU缓存"></a>4.1 实现LRU缓存</h3><p>LinkedHashMap可以很容易地实现LRU（Least Recently Used，最近最少使用）缓存：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LRUCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span> <span class="token comment">// 缓存容量</span>        <span class="token keyword">public</span> <span class="token class-name">LRUCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 初始容量、负载因子、访问顺序</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> <span class="token number">0.75f</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 重写removeEldestEntry方法，当缓存满时移除最老的元素</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> eldest<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> capacity<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LRUCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LRUCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 访问键1，将其移到链表末尾</span>cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加新元素，会导致最久未使用的元素（键2）被移除</span>cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"four"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：[3, 1, 4]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-保持插入顺序的Map"><a href="#4-2-保持插入顺序的Map" class="headerlink" title="4.2 保持插入顺序的Map"></a>4.2 保持插入顺序的Map</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> orderedMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>orderedMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>orderedMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>orderedMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"three"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 遍历时会按照插入顺序输出</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> orderedMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 输出：</span><span class="token comment">// one: 1</span><span class="token comment">// two: 2</span><span class="token comment">// three: 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、性能分析与使用建议"><a href="#五、性能分析与使用建议" class="headerlink" title="五、性能分析与使用建议"></a>五、性能分析与使用建议</h2><h3 id="5-1-性能特点"><a href="#5-1-性能特点" class="headerlink" title="5.1 性能特点"></a>5.1 性能特点</h3><table><thead><tr><th>操作</th><th>时间复杂度</th><th>说明</th></tr></thead><tbody><tr><td>get/put/remove</td><td>O(1)</td><td>继承自HashMap的高效哈希查找</td></tr><tr><td>遍历</td><td>O(n)</td><td>通过双向链表实现有序遍历</td></tr></tbody></table><p>LinkedHashMap相比HashMap增加了维护双向链表的开销，但提供了有序性保证：</p><ul><li>空间开销：每个节点增加了两个引用（before和after）</li><li>时间开销：插入、删除、访问操作需要额外维护双向链表</li></ul><h3 id="5-2-使用建议"><a href="#5-2-使用建议" class="headerlink" title="5.2 使用建议"></a>5.2 使用建议</h3><ol><li><strong>需要有序Map时使用</strong>：当需要按照插入顺序或访问顺序遍历Map时，应优先考虑LinkedHashMap</li><li><strong>实现LRU缓存</strong>：通过设置accessOrder为true并重写removeEldestEntry方法，可以轻松实现LRU缓存</li><li><strong>避免频繁修改</strong>：如果应用场景中Map会频繁修改但不需要有序性，使用HashMap可能更高效</li><li><strong>初始容量设置</strong>：合理设置初始容量可以减少扩容次数，提高性能</li></ol><h2 id="六、性能优化建议"><a href="#六、性能优化建议" class="headerlink" title="六、性能优化建议"></a>六、性能优化建议</h2><h3 id="6-1-性能对比"><a href="#6-1-性能对比" class="headerlink" title="6.1 性能对比"></a>6.1 性能对比</h3><table><thead><tr><th>操作类型</th><th>HashMap</th><th>LinkedHashMap</th></tr></thead><tbody><tr><td>插入操作</td><td>O(1)</td><td>O(1)+链表维护</td></tr><tr><td>查询操作</td><td>O(1)</td><td>O(1)+访问顺序维护</td></tr><tr><td>遍历操作</td><td>O(n)</td><td>O(n)（有序遍历）</td></tr></tbody></table><h3 id="6-2-内存优化技巧"><a href="#6-2-内存优化技巧" class="headerlink" title="6.2 内存优化技巧"></a>6.2 内存优化技巧</h3><ol><li><strong>合理设置初始容量</strong>：避免频繁扩容，建议根据业务场景预估容量</li><li><strong>使用基本数据类型</strong>：尽量使用<code>LinkedHashMap&lt;Integer, String&gt;</code>而非<code>LinkedHashMap&lt;Long, String&gt;</code></li><li><strong>及时清理无效数据</strong>：对LRU缓存实现要设置合理的过期策略</li><li><strong>避免冗余顺序维护</strong>：不需要顺序特性时改用HashMap</li></ol><h2 id="七、常见问题解答"><a href="#七、常见问题解答" class="headerlink" title="七、常见问题解答"></a>七、常见问题解答</h2><h3 id="7-1-并发修改异常"><a href="#7-1-并发修改异常" class="headerlink" title="7.1 并发修改异常"></a>7.1 并发修改异常</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 多线程环境下需要同步处理</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> syncMap <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-2-LRU缓存容量设置"><a href="#7-2-LRU缓存容量设置" class="headerlink" title="7.2 LRU缓存容量设置"></a>7.2 LRU缓存容量设置</h3><ul><li>建议设置初始容量为缓存最大容量的1.25倍</li><li>示例：最大缓存1000条数据时，设置<code>new LRUCache(1250)</code></li></ul><h3 id="7-3-顺序不一致问题"><a href="#7-3-顺序不一致问题" class="headerlink" title="7.3 顺序不一致问题"></a>7.3 顺序不一致问题</h3><p>可能原因及解决方案：</p><ol><li><strong>意外修改accessOrder</strong>：确认构造函数参数是否设置正确</li><li><strong>并发环境下无序访问</strong>：使用同步包装器或ConcurrentLinkedHashMap</li><li><strong>哈希冲突导致桶顺序变化</strong>：重写key对象的hashCode()保证良好分布</li></ol><h2 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h2><p>LinkedHashMap通过巧妙地结合HashMap的哈希表结构和双向链表，在保证高效查找的同时，提供了可预测的迭代顺序。它的主要特点包括：</p><ol><li><strong>继承自HashMap</strong>：拥有HashMap的所有特性，如高效的查找、插入和删除操作</li><li><strong>维护元素顺序</strong>：通过双向链表维护元素的插入顺序或访问顺序</li><li><strong>灵活的排序策略</strong>：可以选择按插入顺序（默认）或访问顺序排序</li><li><strong>支持LRU机制</strong>：通过重写removeEldestEntry方法，可以实现LRU缓存等功能</li></ol><p>LinkedHashMap是HashMap和LinkedList的完美结合，为需要有序性的Map应用场景提供了理想的解决方案。</p><h2 id="九、参考资料"><a href="#九、参考资料" class="headerlink" title="九、参考资料"></a>九、参考资料</h2><ol><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html">Oracle官方文档 - LinkedHashMap</a></li><li>《Effective Java（第3版）》 第13章 集合</li><li><a href="https://docs.oracle.com/javase/tutorial/collections/index.html">Java Collections Framework官方指南</a></li><li><a href="https://hg.openjdk.java.net/jdk-updates/jdk17u/file/tip/src/java.base/share/classes/java/util/LinkedHashMap.java">LinkedHashMap源码分析（JDK 17）</a></li></ol><h2 id="十、讨论与交流"><a href="#十、讨论与交流" class="headerlink" title="十、讨论与交流"></a>十、讨论与交流</h2><p>如果您对本文有任何疑问、建议或发现了错误，欢迎在评论区留言讨论。我们可以一起探讨LinkedHashHashMap的实现细节、性能优化或在实际项目中的应用经验。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、底层数据结构&quot;&gt;&lt;a href=&quot;#一、底层数据结构&quot; class=&quot;headerlink&quot; title=&quot;一、底层数据结构&quot;&gt;&lt;/a&gt;一、底层数据结构&lt;/h2&gt;&lt;p&gt;LinkedHashMap是HashMap的子类，它在HashMap的基础上，通过维护一个双</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.lucky845.top/categories/Java/"/>
    
    <category term="Java基础" scheme="https://blog.lucky845.top/categories/Java/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java集合" scheme="https://blog.lucky845.top/tags/Java%E9%9B%86%E5%90%88/"/>
    
    <category term="源码分析" scheme="https://blog.lucky845.top/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>【Java】ConcurrentHashMap核心源码与底层数据结构分析</title>
    <link href="https://blog.lucky845.top/archives/7a8b905f.html"/>
    <id>https://blog.lucky845.top/archives/7a8b905f.html</id>
    <published>2025-03-10T06:00:00.000Z</published>
    <updated>2025-03-20T06:43:42.916Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、底层数据结构"><a href="#一、底层数据结构" class="headerlink" title="一、底层数据结构"></a>一、底层数据结构</h2><p>ConcurrentHashMap是Java中高性能的线程安全哈希表实现，它在JDK 1.8中采用了数组+链表+红黑树的复合数据结构，同时结合CAS和synchronized实现了高效的并发控制：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// JDK 1.8 ConcurrentHashMap部分源码</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token comment">// 最大容量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span>        <span class="token comment">// 默认初始容量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_CAPACITY</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>        <span class="token comment">// 默认并发级别，已不再使用，但为了兼容性保留</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_CONCURRENCY_LEVEL</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>        <span class="token comment">// 负载因子，当前使用固定值</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> <span class="token constant">LOAD_FACTOR</span> <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span>        <span class="token comment">// 链表转红黑树阈值</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">TREEIFY_THRESHOLD</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token comment">// 红黑树转链表阈值</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">UNTREEIFY_THRESHOLD</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        <span class="token comment">// 转红黑树时表的最小容量</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MIN_TREEIFY_CAPACITY</span> <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>        <span class="token comment">// 每个线程处理的最小批量数</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MIN_TRANSFER_STRIDE</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>        <span class="token comment">// sizeCtl中记录stamp的位数</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">RESIZE_STAMP_BITS</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>        <span class="token comment">// 可以帮助扩容的最大线程数</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_RESIZERS</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">-</span> <span class="token constant">RESIZE_STAMP_BITS</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// sizeCtl中记录size大小的偏移量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">RESIZE_STAMP_SHIFT</span> <span class="token operator">=</span> <span class="token number">32</span> <span class="token operator">-</span> <span class="token constant">RESIZE_STAMP_BITS</span><span class="token punctuation">;</span>        <span class="token comment">// 节点哈希值的特殊标记</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MOVED</span>     <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 表示正在转移</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">TREEBIN</span>   <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 表示已经转为红黑树</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">RESERVED</span>  <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 表示节点的哈希值为-3，保留</span>        <span class="token comment">// 可用处理器数量</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">NCPU</span> <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 存储元素的数组，大小总是2的幂次方</span>    <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span>        <span class="token comment">// 扩容时用于存储元素的临时数组</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nextTable<span class="token punctuation">;</span>        <span class="token comment">// 记录容量，初始化和扩容控制</span>    <span class="token comment">// 负数：表示正在初始化或扩容，-1表示正在初始化，-N表示有N-1个线程正在进行扩容</span>    <span class="token comment">// 正数：表示下一次扩容的阈值</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> sizeCtl<span class="token punctuation">;</span>        <span class="token comment">// 扩容时存储每个桶元素的转移进度</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> transferIndex<span class="token punctuation">;</span>        <span class="token comment">// 元素个数计数器，基于CounterCell实现</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> baseCount<span class="token punctuation">;</span>        <span class="token comment">// 元素计数器数组，用于分散计数</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token class-name">CounterCell</span><span class="token punctuation">[</span><span class="token punctuation">]</span> counterCells<span class="token punctuation">;</span>        <span class="token comment">// 视图相关字段</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">KeySetView</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> keySet<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">ValuesView</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> values<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">EntrySetView</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> entrySet<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-Node节点结构"><a href="#1-1-Node节点结构" class="headerlink" title="1.1 Node节点结构"></a>1.1 Node节点结构</h3><p>ConcurrentHashMap的基本存储单元是Node节点，它与HashMap的Node类似，但使用volatile修饰value和next引用，保证了可见性：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>      <span class="token comment">// 哈希值</span>    <span class="token keyword">final</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>         <span class="token comment">// 键</span>    <span class="token keyword">volatile</span> <span class="token class-name">V</span> value<span class="token punctuation">;</span>    <span class="token comment">// 值，使用volatile修饰</span>    <span class="token keyword">volatile</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span> <span class="token comment">// 下一个节点的引用，使用volatile修饰</span>        <span class="token comment">// 构造函数</span>    <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> val<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hash <span class="token operator">=</span> hash<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 实现Map.Entry接口的方法</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">K</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span> <span class="token keyword">return</span> key<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span> <span class="token keyword">return</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span> <span class="token keyword">return</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">^</span> value<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token comment">// 设置新值并返回旧值</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">V</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不支持直接修改值</span>    <span class="token punctuation">}</span>        <span class="token comment">// 判断两个节点是否相等</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Object</span> k<span class="token punctuation">,</span> v<span class="token punctuation">,</span> u<span class="token punctuation">;</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span>v <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span>k <span class="token operator">==</span> key <span class="token operator">||</span> k<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token punctuation">(</span>u <span class="token operator">=</span> value<span class="token punctuation">)</span> <span class="token operator">||</span> v<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 查找方法，用于在链表中查找指定key的节点</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span> <span class="token class-name">Object</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">do</span> <span class="token punctuation">{</span>                <span class="token class-name">K</span> ek<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> h <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> k <span class="token operator">||</span> <span class="token punctuation">(</span>ek <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> k<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> e<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-TreeNode和TreeBin结构"><a href="#1-2-TreeNode和TreeBin结构" class="headerlink" title="1.2 TreeNode和TreeBin结构"></a>1.2 TreeNode和TreeBin结构</h3><p>当链表长度超过阈值（默认为8）时，链表会转换为红黑树，此时使用TreeNode和TreeBin节点：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// TreeNode是红黑树的节点</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> parent<span class="token punctuation">;</span>  <span class="token comment">// 父节点</span>    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> left<span class="token punctuation">;</span>    <span class="token comment">// 左子节点</span>    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> right<span class="token punctuation">;</span>   <span class="token comment">// 右子节点</span>    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> prev<span class="token punctuation">;</span>    <span class="token comment">// 删除时需要用到的前一个节点</span>    <span class="token keyword">boolean</span> red<span class="token punctuation">;</span>           <span class="token comment">// 节点颜色（红/黑）</span>        <span class="token comment">// 构造函数</span>    <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> val<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">,</span>             <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 返回根节点</span>    <span class="token keyword">final</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">root</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> r <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span> p<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> r<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> r<span class="token punctuation">;</span>            r <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// ... 其他红黑树操作方法</span><span class="token punctuation">}</span><span class="token comment">// TreeBin是ConcurrentHashMap特有的，封装了红黑树的根节点</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TreeBin</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">;</span>           <span class="token comment">// 红黑树的根节点</span>    <span class="token keyword">volatile</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> first<span class="token punctuation">;</span> <span class="token comment">// 链表的第一个节点</span>    <span class="token keyword">volatile</span> <span class="token class-name">Thread</span> waiter<span class="token punctuation">;</span>       <span class="token comment">// 最近的一个设置写锁的线程</span>    <span class="token keyword">volatile</span> <span class="token keyword">int</span> lockState<span class="token punctuation">;</span>       <span class="token comment">// 锁状态</span>        <span class="token comment">// 锁状态枚举</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">WRITER</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 获取写锁的标识</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">WAITER</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">// 等待写锁的标识</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">READER</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token comment">// 增加读锁的单位值</span>        <span class="token comment">// 构造函数，传入TreeNode链表的第一个节点，构建红黑树</span>    <span class="token class-name">TreeBin</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token constant">TREEBIN</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TREEBIN是特殊的哈希值</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>first <span class="token operator">=</span> b<span class="token punctuation">;</span>        <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> r <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> x <span class="token operator">=</span> b<span class="token punctuation">,</span> next<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> x <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            next <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            x<span class="token punctuation">.</span>left <span class="token operator">=</span> x<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                x<span class="token punctuation">.</span>parent <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                x<span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                r <span class="token operator">=</span> x<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">// 构建红黑树的过程</span>                <span class="token comment">// ...</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> r<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// ... 其他红黑树操作方法和锁控制方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-ForwardingNode节点"><a href="#1-3-ForwardingNode节点" class="headerlink" title="1.3 ForwardingNode节点"></a>1.3 ForwardingNode节点</h3><p>ForwardingNode是一种特殊的节点，在扩容时使用，它的哈希值为MOVED（-1），指向nextTable：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ForwardingNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nextTable<span class="token punctuation">;</span> <span class="token comment">// 扩容时的新表引用</span>        <span class="token comment">// 构造函数</span>    <span class="token class-name">ForwardingNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token constant">MOVED</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// MOVED是特殊的哈希值</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nextTable <span class="token operator">=</span> tab<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 在ForwardingNode中查找元素，直接到nextTable中查找</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span> <span class="token class-name">Object</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 循环查找，应对多层forwarding的情况</span>        outer<span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> nextTable<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> tab <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span>                <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> eh<span class="token punctuation">;</span> <span class="token class-name">K</span> ek<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>eh <span class="token operator">=</span> e<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> h <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> k <span class="token operator">||</span> <span class="token punctuation">(</span>ek <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> k<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> e<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>eh <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">ForwardingNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        tab <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ForwardingNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span>nextTable<span class="token punctuation">;</span>                        <span class="token keyword">continue</span> outer<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span>                        <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、并发控制机制"><a href="#二、并发控制机制" class="headerlink" title="二、并发控制机制"></a>二、并发控制机制</h2><h3 id="2-1-CAS操作"><a href="#2-1-CAS操作" class="headerlink" title="2.1 CAS操作"></a>2.1 CAS操作</h3><p>ConcurrentHashMap大量使用CAS（Compare And Swap）操作来保证线程安全，避免使用全局锁：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取数组中的节点（volatile读）</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">tabAt</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">getObjectVolatile</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>i <span class="token operator">&lt;&lt;</span> <span class="token constant">ASHIFT</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">ABASE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 利用CAS设置数组中的节点</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">boolean</span> <span class="token function">casTabAt</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span>                                  <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>i <span class="token operator">&lt;&lt;</span> <span class="token constant">ASHIFT</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">ABASE</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 设置数组中的节点（volatile写）</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">setTabAt</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">putObjectVolatile</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>i <span class="token operator">&lt;&lt;</span> <span class="token constant">ASHIFT</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">ABASE</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-synchronized锁"><a href="#2-2-synchronized锁" class="headerlink" title="2.2 synchronized锁"></a>2.2 synchronized锁</h3><p>ConcurrentHashMap在JDK 1.8中使用synchronized锁定链表或红黑树的首节点，实现了细粒度的锁控制：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> f<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fh<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            tab <span class="token operator">=</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 初始化表</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 桶为空，CAS插入新节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fh <span class="token operator">=</span> f<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">MOVED</span><span class="token punctuation">)</span>            tab <span class="token operator">=</span> <span class="token function">helpTransfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 协助扩容</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">V</span> oldVal <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token comment">// 对首节点加锁</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fh <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 链表</span>                        binCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> f<span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token class-name">K</span> ek<span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                                <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span>                                 <span class="token punctuation">(</span>ek <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                oldVal <span class="token operator">=</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>                                    e<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> pred <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                pred<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token keyword">instanceof</span> <span class="token class-name">TreeBin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 红黑树</span>                        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">;</span>                        binCount <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeBin</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            oldVal <span class="token operator">=</span> p<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>                                p<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">&gt;=</span> <span class="token constant">TREEIFY_THRESHOLD</span><span class="token punctuation">)</span>                    <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 链表转红黑树</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVal <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> oldVal<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">addCount</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> binCount<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 更新计数</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-读操作无锁化"><a href="#2-3-读操作无锁化" class="headerlink" title="2.3 读操作无锁化"></a>2.3 读操作无锁化</h3><p>ConcurrentHashMap的get操作不需要加锁，利用volatile保证了可见性：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">,</span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> eh<span class="token punctuation">;</span> <span class="token class-name">K</span> ek<span class="token punctuation">;</span>    <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>eh <span class="token operator">=</span> e<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 检查第一个节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>ek <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>eh <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 特殊节点（ForwardingNode或TreeBin）</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> p<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 遍历链表</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> h <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>ek <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、核心方法实现"><a href="#三、核心方法实现" class="headerlink" title="三、核心方法实现"></a>三、核心方法实现</h2><h3 id="3-1-初始化方法"><a href="#3-1-初始化方法" class="headerlink" title="3.1 初始化方法"></a>3.1 初始化方法</h3><p>ConcurrentHashMap使用懒加载策略，在第一次插入元素时才初始化table：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token keyword">int</span> sc<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> tab<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sc <span class="token operator">=</span> sizeCtl<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 有其他线程在初始化</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 让出CPU时间片</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">SIZECTL</span><span class="token punctuation">,</span> sc<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// CAS设置sizeCtl为-1，表示正在初始化</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> tab<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>sc <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> sc <span class="token operator">:</span> <span class="token constant">DEFAULT_CAPACITY</span><span class="token punctuation">;</span> <span class="token comment">// 默认容量16</span>                    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                    table <span class="token operator">=</span> tab <span class="token operator">=</span> nt<span class="token punctuation">;</span>                    sc <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置阈值为0.75n</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                sizeCtl <span class="token operator">=</span> sc<span class="token punctuation">;</span> <span class="token comment">// 恢复sizeCtl为阈值</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> tab<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-扩容方法"><a href="#3-2-扩容方法" class="headerlink" title="3.2 扩容方法"></a>3.2 扩容方法</h3><p>ConcurrentHashMap的扩容操作支持多线程并发执行，大大提高了扩容效率：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nextTab<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">,</span> stride<span class="token punctuation">;</span>    <span class="token comment">// 计算每个线程处理的桶区间跨度，最小为16</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>stride <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">NCPU</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token constant">NCPU</span> <span class="token operator">:</span> n<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token constant">MIN_TRANSFER_STRIDE</span><span class="token punctuation">)</span>        stride <span class="token operator">=</span> <span class="token constant">MIN_TRANSFER_STRIDE</span><span class="token punctuation">;</span>        <span class="token comment">// 初始化nextTab</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextTab <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 容量翻倍</span>            nextTab <span class="token operator">=</span> nt<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sizeCtl <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        nextTable <span class="token operator">=</span> nextTab<span class="token punctuation">;</span>        transferIndex <span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token comment">// 初始化转移下标</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> nextn <span class="token operator">=</span> nextTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment">// 创建ForwardingNode，标记已经处理过的桶</span>    <span class="token class-name">ForwardingNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> fwd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForwardingNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>nextTab<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 是否继续处理下一个桶</span>    <span class="token keyword">boolean</span> finishing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 是否完成扩容</span>        <span class="token comment">// 多线程并发扩容的核心循环</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bound <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> f<span class="token punctuation">;</span> <span class="token keyword">int</span> fh<span class="token punctuation">;</span>        <span class="token comment">// 确定当前线程负责的桶区间</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>advance<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// ... 计算下一个要处理的桶索引</span>        <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">&gt;=</span> n <span class="token operator">||</span> i <span class="token operator">+</span> n <span class="token operator">&gt;=</span> nextn<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 扩容结束</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>finishing<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nextTable <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                table <span class="token operator">=</span> nextTab<span class="token punctuation">;</span> <span class="token comment">// 更新table引用</span>                sizeCtl <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 更新阈值</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// ... 检查是否所有桶都已处理完毕</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 桶为空，放置ForwardingNode标记</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> fwd<span class="token punctuation">)</span><span class="token punctuation">)</span>                advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 处理下一个桶</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fh <span class="token operator">=</span> f<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">MOVED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 已经是ForwardingNode，说明这个桶已经被处理过了</span>            advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// 对桶首节点加锁，处理该桶的元素</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// ... 将元素分配到新桶中（高位桶和低位桶）</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-size计算方法"><a href="#3-3-size计算方法" class="headerlink" title="3.3 size计算方法"></a>3.3 size计算方法</h3><p>ConcurrentHashMap使用分段计数的方式实现高效的size计算：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> n <span class="token operator">=</span> <span class="token function">sumCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span>            <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">:</span>            <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token function">sumCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">CounterCell</span><span class="token punctuation">[</span><span class="token punctuation">]</span> as <span class="token operator">=</span> counterCells<span class="token punctuation">;</span> <span class="token class-name">CounterCell</span> a<span class="token punctuation">;</span>    <span class="token keyword">long</span> sum <span class="token operator">=</span> baseCount<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>as <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> as<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">=</span> as<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                sum <span class="token operator">+=</span> a<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、与HashMap的对比"><a href="#四、与HashMap的对比" class="headerlink" title="四、与HashMap的对比"></a>四、与HashMap的对比</h2><h3 id="4-1-线程安全性"><a href="#4-1-线程安全性" class="headerlink" title="4.1 线程安全性"></a>4.1 线程安全性</h3><p>ConcurrentHashMap与HashMap最大的区别在于线程安全性：</p><ol><li><strong>HashMap</strong>：非线程安全，在多线程环境下可能导致死循环、数据丢失等问题</li><li><strong>ConcurrentHashMap</strong>：线程安全，采用CAS+synchronized实现并发控制</li></ol><h3 id="4-2-实现机制对比"><a href="#4-2-实现机制对比" class="headerlink" title="4.2 实现机制对比"></a>4.2 实现机制对比</h3><table><thead><tr><th>特性</th><th>HashMap</th><th>ConcurrentHashMap</th></tr></thead><tbody><tr><td>底层结构</td><td>数组+链表+红黑树</td><td>数组+链表+红黑树</td></tr><tr><td>线程安全</td><td>否</td><td>是</td></tr><tr><td>锁机制</td><td>无</td><td>JDK 1.7：分段锁<br>JDK 1.8：CAS+synchronized</td></tr><tr><td>允许null键值</td><td>是</td><td>否</td></tr><tr><td>扩容方式</td><td>单线程扩容</td><td>多线程并发扩容</td></tr><tr><td>计数方式</td><td>直接维护size字段</td><td>分段计数（CounterCell数组）</td></tr></tbody></table><h3 id="4-3-性能对比"><a href="#4-3-性能对比" class="headerlink" title="4.3 性能对比"></a>4.3 性能对比</h3><ol><li><strong>单线程环境</strong>：HashMap性能略高于ConcurrentHashMap</li><li><strong>多线程环境</strong>：<ul><li>ConcurrentHashMap性能远高于HashMap</li><li>ConcurrentHashMap性能远高于使用Collections.synchronizedMap()包装的HashMap</li><li>ConcurrentHashMap性能远高于Hashtable</li></ul></li></ol><h2 id="五、JDK-1-7与JDK-1-8的区别"><a href="#五、JDK-1-7与JDK-1-8的区别" class="headerlink" title="五、JDK 1.7与JDK 1.8的区别"></a>五、JDK 1.7与JDK 1.8的区别</h2><h3 id="5-1-数据结构变化"><a href="#5-1-数据结构变化" class="headerlink" title="5.1 数据结构变化"></a>5.1 数据结构变化</h3><ol><li><p><strong>JDK 1.7</strong>：</p><ul><li>采用Segment数组+HashEntry数组的结构</li><li>Segment继承自ReentrantLock，实现分段锁</li><li>每个Segment维护一个HashEntry数组</li></ul></li><li><p><strong>JDK 1.8</strong>：</p><ul><li>采用Node数组+链表+红黑树的结构</li><li>去除了Segment分段锁的设计</li><li>使用CAS+synchronized实现更细粒度的锁控制</li></ul></li></ol><h3 id="5-2-锁实现变化"><a href="#5-2-锁实现变化" class="headerlink" title="5.2 锁实现变化"></a>5.2 锁实现变化</h3><ol><li><p><strong>JDK 1.7</strong>：</p><ul><li>使用分段锁Segment，每个Segment独立加锁</li><li>最大并发度受Segment数组大小限制</li></ul></li><li><p><strong>JDK 1.8</strong>：</p><ul><li>使用CAS+synchronized锁定桶的首节点</li><li>锁粒度更细，并发度更高</li><li>利用synchronized的优化（偏向锁、轻量级锁、重量级锁）提升性能</li></ul></li></ol><h3 id="5-3-扩容机制变化"><a href="#5-3-扩容机制变化" class="headerlink" title="5.3 扩容机制变化"></a>5.3 扩容机制变化</h3><ol><li><p><strong>JDK 1.7</strong>：</p><ul><li>每个Segment独立扩容</li><li>扩容时，其他Segment不受影响</li></ul></li><li><p><strong>JDK 1.8</strong>：</p><ul><li>支持多线程并发扩容</li><li>使用ForwardingNode标记已处理的桶</li><li>扩容效率大幅提升</li></ul></li></ol><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p>ConcurrentHashMap是Java中高性能的线程安全哈希表实现，它通过精心设计的数据结构和并发控制机制，实现了高效的并发访问。</p><p>主要特点：</p><ol><li><strong>底层结构</strong>：数组+链表+红黑树</li><li><strong>并发控制</strong>：CAS+synchronized</li><li><strong>读操作</strong>：完全无锁，利用volatile保证可见性</li><li><strong>写操作</strong>：细粒度的锁控制，只锁定当前桶的首节点</li><li><strong>扩容机制</strong>：支持多线程并发扩容，提高扩容效率</li><li><strong>计数方式</strong>：使用分段计数，避免计数时的竞争</li></ol><p>ConcurrentHashMap的设计充分考虑了并发环境下的性能和安全性，是Java并发编程中的经典实现，也是学习并发数据结构设计的优秀范例。</p><h2 id="七、参考资料"><a href="#七、参考资料" class="headerlink" title="七、参考资料"></a>七、参考资料</h2><ol><li><p><strong>官方文档</strong></p><ul><li><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/concurrent/ConcurrentHashMap.html">Java SE 17 API Documentation - ConcurrentHashMap</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ConcurrentHashMap.html">Java SE 8 API Documentation - ConcurrentHashMap</a></li></ul></li><li><p><strong>书籍</strong></p><ul><li>Brian Goetz等. <em>Java并发编程实战</em>. 机械工业出版社, 2012.</li><li>周志明. <em>深入理解Java虚拟机（第3版）</em>. 机械工业出版社, 2019.</li><li>Doug Lea. <em>Java并发编程：设计原则与模式</em>. 机械工业出版社, 2004.</li></ul></li><li><p><strong>技术博客与文章</strong></p><ul><li><a href="https://www.jianshu.com/p/c0642afe03e0">深入浅出ConcurrentHashMap1.8</a></li><li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E5%B9%B6%E5%8F%91.md#concurrenthashmap">ConcurrentHashMap源码分析</a></li><li><a href="https://www.infoq.cn/article/ConcurrentHashMap/">聊聊并发（四）——深入分析ConcurrentHashMap</a></li></ul></li><li><p><strong>JDK源码</strong></p><ul><li><a href="https://github.com/openjdk/jdk/blob/jdk8-b120/src/share/classes/java/util/concurrent/ConcurrentHashMap.java">JDK 1.8 ConcurrentHashMap源码</a></li><li><a href="https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/java/util/concurrent/ConcurrentHashMap.java">JDK 17 ConcurrentHashMap源码</a></li></ul></li></ol><h2 id="八、讨论与交流"><a href="#八、讨论与交流" class="headerlink" title="八、讨论与交流"></a>八、讨论与交流</h2><p>如果您对ConcurrentHashMap的实现有任何疑问或见解，欢迎在评论区留言讨论。您的反馈和建议将帮助我不断改进文章内容。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、底层数据结构&quot;&gt;&lt;a href=&quot;#一、底层数据结构&quot; class=&quot;headerlink&quot; title=&quot;一、底层数据结构&quot;&gt;&lt;/a&gt;一、底层数据结构&lt;/h2&gt;&lt;p&gt;ConcurrentHashMap是Java中高性能的线程安全哈希表实现，它在JDK 1.8</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.lucky845.top/categories/Java/"/>
    
    <category term="Java基础" scheme="https://blog.lucky845.top/categories/Java/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="并发编程" scheme="https://blog.lucky845.top/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Java集合" scheme="https://blog.lucky845.top/tags/Java%E9%9B%86%E5%90%88/"/>
    
    <category term="源码分析" scheme="https://blog.lucky845.top/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>【Java】HashMap核心源码解析与实现原理详解</title>
    <link href="https://blog.lucky845.top/archives/7a8b905e.html"/>
    <id>https://blog.lucky845.top/archives/7a8b905e.html</id>
    <published>2025-03-10T03:00:00.000Z</published>
    <updated>2025-03-20T06:43:42.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、底层数据结构"><a href="#一、底层数据结构" class="headerlink" title="一、底层数据结构"></a>一、底层数据结构</h2><p>HashMap是Java中最常用的Map实现，它基于哈希表实现，在JDK 1.8中采用了数组+链表+红黑树的复合数据结构：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// JDK 1.8 HashMap部分源码</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token comment">// 默认初始容量 - 必须是2的幂</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 即16</span>        <span class="token comment">// 最大容量</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span>        <span class="token comment">// 默认加载因子</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> <span class="token constant">DEFAULT_LOAD_FACTOR</span> <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span>        <span class="token comment">// 链表转红黑树的阈值</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">TREEIFY_THRESHOLD</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token comment">// 红黑树转链表的阈值</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">UNTREEIFY_THRESHOLD</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        <span class="token comment">// 转红黑树时，数组的最小长度</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MIN_TREEIFY_CAPACITY</span> <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>        <span class="token comment">// 存储元素的数组，总是2的幂次倍</span>    <span class="token keyword">transient</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span>        <span class="token comment">// 存放具体元素的集合</span>    <span class="token keyword">transient</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entrySet<span class="token punctuation">;</span>        <span class="token comment">// 存放元素的个数，注意这个不等于数组的长度</span>    <span class="token keyword">transient</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>        <span class="token comment">// 每次扩容和更改map结构的计数器</span>    <span class="token keyword">transient</span> <span class="token keyword">int</span> modCount<span class="token punctuation">;</span>        <span class="token comment">// 临界值 当实际大小(容量*填充因子)超过临界值时，会进行扩容</span>    <span class="token keyword">int</span> threshold<span class="token punctuation">;</span>        <span class="token comment">// 填充因子</span>    <span class="token keyword">final</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-Node节点结构"><a href="#1-1-Node节点结构" class="headerlink" title="1.1 Node节点结构"></a>1.1 Node节点结构</h3><p>HashMap的基本存储单元是Node节点，它实现了Map.Entry接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>      <span class="token comment">// 哈希值</span>    <span class="token keyword">final</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>         <span class="token comment">// 键</span>    <span class="token class-name">V</span> value<span class="token punctuation">;</span>             <span class="token comment">// 值</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>      <span class="token comment">// 指向下一个节点的引用</span>        <span class="token comment">// 构造函数</span>    <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hash <span class="token operator">=</span> hash<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 实现Map.Entry接口的方法</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">K</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span> <span class="token keyword">return</span> key<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span> <span class="token keyword">return</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> key <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token comment">// 计算hashCode</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 设置新值并返回旧值</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">V</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">V</span> oldValue <span class="token operator">=</span> value<span class="token punctuation">;</span>        value <span class="token operator">=</span> newValue<span class="token punctuation">;</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 判断两个节点是否相等</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-TreeNode结构"><a href="#1-2-TreeNode结构" class="headerlink" title="1.2 TreeNode结构"></a>1.2 TreeNode结构</h3><p>当链表长度超过阈值（默认为8）时，链表会转换为红黑树，此时使用TreeNode节点：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 红黑树节点，继承自LinkedHashMap.Entry</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> parent<span class="token punctuation">;</span>  <span class="token comment">// 父节点</span>    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> left<span class="token punctuation">;</span>    <span class="token comment">// 左子节点</span>    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> right<span class="token punctuation">;</span>   <span class="token comment">// 右子节点</span>    <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> prev<span class="token punctuation">;</span>    <span class="token comment">// 删除时需要用到的前一个节点</span>    <span class="token keyword">boolean</span> red<span class="token punctuation">;</span>           <span class="token comment">// 节点颜色（红/黑）</span>        <span class="token comment">// 构造函数</span>    <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> val<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 返回当前节点的根节点</span>    <span class="token keyword">final</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">root</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> r <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span> p<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> r<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> r<span class="token punctuation">;</span>            r <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// ... 其他红黑树操作方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、构造方法解析"><a href="#二、构造方法解析" class="headerlink" title="二、构造方法解析"></a>二、构造方法解析</h2><p>HashMap提供了多个构造方法，以适应不同的初始化需求：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 默认构造函数</span><span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> <span class="token constant">DEFAULT_LOAD_FACTOR</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 指定初始容量的构造函数</span><span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> <span class="token constant">DEFAULT_LOAD_FACTOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 指定初始容量和加载因子的构造函数</span><span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 检查参数合法性</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal initial capacity: "</span> <span class="token operator">+</span> initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&gt;</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span>        initialCapacity <span class="token operator">=</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>loadFactor <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>loadFactor<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal load factor: "</span> <span class="token operator">+</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> loadFactor<span class="token punctuation">;</span>    <span class="token comment">// 计算阈值，注意这里并没有初始化table数组</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>threshold <span class="token operator">=</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 使用已有Map创建新的HashMap</span><span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> <span class="token constant">DEFAULT_LOAD_FACTOR</span><span class="token punctuation">;</span>    <span class="token function">putMapEntries</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>tableSizeFor</code>方法用于计算大于等于给定值的最小2的幂：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> cap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">;</span>    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">;</span>    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">:</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、核心方法源码解析"><a href="#三、核心方法源码解析" class="headerlink" title="三、核心方法源码解析"></a>三、核心方法源码解析</h2><h3 id="3-1-put方法"><a href="#3-1-put方法" class="headerlink" title="3.1 put方法"></a>3.1 put方法</h3><p>put方法是HashMap最常用的方法之一，用于添加或更新键值对：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 计算key的哈希值</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> h<span class="token punctuation">;</span>    <span class="token comment">// 如果key为null，返回0；否则，将key的hashCode与其右移16位的值进行异或运算</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// put的核心实现</span><span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span> <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>        <span class="token comment">// 如果table为空或长度为0，则进行初始化</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment">// 计算索引位置，如果该位置为空，则直接创建新节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span>        <span class="token comment">// 如果第一个节点就是要找的键，则记录该节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            e <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token comment">// 如果是红黑树节点，则调用红黑树的插入方法</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>            e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// 遍历链表</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 到达链表尾部，创建新节点</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 如果链表长度达到阈值，则转为红黑树</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">&gt;=</span> <span class="token constant">TREEIFY_THRESHOLD</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                        <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">// 找到相同的key，跳出循环</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                p <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                <span class="token comment">// 如果找到了对应的key，则更新值并返回旧值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">V</span> oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment">// 修改计数加1</span>    <span class="token operator">++</span>modCount<span class="token punctuation">;</span>    <span class="token comment">// 如果大小超过阈值，则扩容</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">&gt;</span> threshold<span class="token punctuation">)</span>        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-get方法"><a href="#3-2-get方法" class="headerlink" title="3.2 get方法"></a>3.2 get方法</h3><p>get方法用于根据键获取对应的值：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">getNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> first<span class="token punctuation">,</span> e<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span>        <span class="token comment">// 如果table不为空且长度大于0，且对应索引位置的节点不为空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>first <span class="token operator">=</span> tab<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 检查第一个节点是否匹配</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> first<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> first<span class="token punctuation">;</span>                <span class="token comment">// 如果有下一个节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 如果是红黑树节点，则使用红黑树的查找方法</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>first<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTreeNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 遍历链表查找</span>            <span class="token keyword">do</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> e<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-resize方法"><a href="#3-3-resize方法" class="headerlink" title="3.3 resize方法"></a>3.3 resize方法</h3><p>resize方法用于初始化或扩容哈希表：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTab <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> oldCap <span class="token operator">=</span> <span class="token punctuation">(</span>oldTab <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> oldTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> oldThr <span class="token operator">=</span> threshold<span class="token punctuation">;</span>    <span class="token keyword">int</span> newCap<span class="token punctuation">,</span> newThr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 如果旧容量大于0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 如果旧容量已达到最大值，则不再扩容</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">&gt;=</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            threshold <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> oldTab<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 否则，新容量为旧容量的2倍</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newCap <span class="token operator">=</span> oldCap <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">&amp;&amp;</span> oldCap <span class="token operator">&gt;=</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span><span class="token punctuation">)</span>            newThr <span class="token operator">=</span> oldThr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 新阈值也翻倍</span>    <span class="token punctuation">}</span>    <span class="token comment">// 如果旧阈值大于0（使用带参构造函数但尚未初始化）</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldThr <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        newCap <span class="token operator">=</span> oldThr<span class="token punctuation">;</span>    <span class="token comment">// 如果旧容量和旧阈值都为0（使用无参构造函数）</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        newCap <span class="token operator">=</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span><span class="token punctuation">;</span>        newThr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_LOAD_FACTOR</span> <span class="token operator">*</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 计算新阈值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newThr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>newCap <span class="token operator">*</span> loadFactor<span class="token punctuation">;</span>        newThr <span class="token operator">=</span> <span class="token punctuation">(</span>newCap <span class="token operator">&lt;</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">&amp;&amp;</span> ft <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">?</span>                 <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ft <span class="token operator">:</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    threshold <span class="token operator">=</span> newThr<span class="token punctuation">;</span>        <span class="token comment">// 创建新数组</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"rawtypes"</span><span class="token punctuation">,</span><span class="token string">"unchecked"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTab <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>newCap<span class="token punctuation">]</span><span class="token punctuation">;</span>    table <span class="token operator">=</span> newTab<span class="token punctuation">;</span>        <span class="token comment">// 如果旧表不为空，则将旧表中的元素移动到新表中</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldTab <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 遍历旧表</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldCap<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span>            <span class="token comment">// 如果当前位置有元素</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 释放旧表引用</span>                <span class="token comment">// 如果只有一个节点，直接放入新表</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    newTab<span class="token punctuation">[</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token comment">// 如果是红黑树节点，则拆分红黑树</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newTab<span class="token punctuation">,</span> j<span class="token punctuation">,</span> oldCap<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 如果是链表</span>                    <span class="token comment">// 将链表分成两部分，一部分保持原索引，另一部分移动到原索引+oldCap的位置</span>                    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> loHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> loTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 保持原索引的链表头尾</span>                    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> hiHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> hiTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 移动到新索引的链表头尾</span>                    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>                    <span class="token keyword">do</span> <span class="token punctuation">{</span>                        next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                        <span class="token comment">// 判断节点应该放在原索引还是原索引+oldCap的位置</span>                        <span class="token comment">// 这里利用了哈希值的特性，扩容后，节点要么在原位置，要么在原位置+oldCap</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 放在原索引</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                                loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                            loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 放在原索引+oldCap的位置</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                                hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                            hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token comment">// 将两个链表放入新表对应位置</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                        newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                        newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newTab<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-remove方法"><a href="#3-4-remove方法" class="headerlink" title="3.4 remove方法"></a>3.4 remove方法</h3><p>remove方法用于从哈希表中删除指定键的映射：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span>        <span class="token keyword">null</span> <span class="token operator">:</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">removeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">Object</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">,</span>                           <span class="token keyword">boolean</span> matchValue<span class="token punctuation">,</span> <span class="token keyword">boolean</span> movable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> index<span class="token punctuation">;</span>    <span class="token comment">// 如果表不为空且对应位置有节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>index <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> node <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> e<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span> <span class="token class-name">V</span> v<span class="token punctuation">;</span>        <span class="token comment">// 检查第一个节点是否匹配</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            node <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 如果是红黑树节点，则使用红黑树的查找方法</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                node <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTreeNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">// 遍历链表查找</span>                <span class="token keyword">do</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                        <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span>                         <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        node <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    p <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                <span class="token comment">// 如果找到了节点，且不需要匹配值或值匹配</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>matchValue <span class="token operator">||</span> <span class="token punctuation">(</span>v <span class="token operator">=</span> node<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token operator">==</span> value <span class="token operator">||</span>                             <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 如果是红黑树节点，则使用红黑树的删除方法</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeTreeNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> movable<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 如果是链表的第一个节点</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> p<span class="token punctuation">)</span>                tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment">// 如果是链表中间的节点</span>            <span class="token keyword">else</span>                p<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token operator">++</span>modCount<span class="token punctuation">;</span>            <span class="token operator">--</span>size<span class="token punctuation">;</span>            <span class="token function">afterNodeRemoval</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> node<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、HashMap的性能优化"><a href="#四、HashMap的性能优化" class="headerlink" title="四、HashMap的性能优化"></a>四、HashMap的性能优化</h2><h3 id="4-1-哈希算法优化"><a href="#4-1-哈希算法优化" class="headerlink" title="4.1 哈希算法优化"></a>4.1 哈希算法优化</h3><p>HashMap的哈希算法经过了精心设计，以减少哈希冲突：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> h<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个算法将哈希值的高16位与低16位进行异或运算，主要有两个目的：</p><ol><li><p><strong>充分利用哈希值的所有位</strong>：由于HashMap的容量通常不会很大，计算索引时只会用到哈希值的低位。通过将高16位与低16位异或，可以让高位也参与索引计算，减少冲突。</p></li><li><p><strong>提高随机性</strong>：增加哈希值的随机性，使得数据分布更均匀。</p></li></ol><h3 id="4-2-红黑树优化"><a href="#4-2-红黑树优化" class="headerlink" title="4.2 红黑树优化"></a>4.2 红黑树优化</h3><p>JDK 1.8中引入了红黑树来优化链表过长的问题：</p><ol><li><p><strong>链表转红黑树的条件</strong>：</p><ul><li>链表长度达到TREEIFY_THRESHOLD（默认为8）</li><li>数组长度达到MIN_TREEIFY_CAPACITY（默认为64）</li></ul></li><li><p><strong>红黑树转链表的条件</strong>：</p><ul><li>红黑树节点数量小于UNTREEIFY_THRESHOLD（默认为6）</li></ul></li></ol><p>这种优化使得在哈希冲突严重的情况下，查找的时间复杂度从O(n)降低到O(log n)。</p><h3 id="4-3-扩容优化"><a href="#4-3-扩容优化" class="headerlink" title="4.3 扩容优化"></a>4.3 扩容优化</h3><p>JDK 1.8中对扩容过程也进行了优化：</p><ol><li><p><strong>容量始终为2的幂</strong>：这样可以通过位运算快速计算索引，提高效率。</p></li><li><p><strong>元素重新分配</strong>：扩容时，元素要么在原位置，要么在原位置+oldCap的位置，避免了重新计算哈希值。</p></li></ol><h2 id="五、HashMap的使用注意事项"><a href="#五、HashMap的使用注意事项" class="headerlink" title="五、HashMap的使用注意事项"></a>五、HashMap的使用注意事项</h2><h3 id="5-1-初始容量设置"><a href="#5-1-初始容量设置" class="headerlink" title="5.1 初始容量设置"></a>5.1 初始容量设置</h3><p>合理设置初始容量可以减少扩容次数，提高性能：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 如果预计存储100个元素，设置初始容量为100/0.75 ≈ 134</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">134</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-2-线程安全问题"><a href="#5-2-线程安全问题" class="headerlink" title="5.2 线程安全问题"></a>5.2 线程安全问题</h3><p>HashMap不是线程安全的，在多线程环境下可能导致数据不一致甚至死循环。解决方案：</p><ol><li>使用Collections.synchronizedMap()包装：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> synchronizedMap <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>使用ConcurrentHashMap：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> concurrentMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-3-自定义对象作为键"><a href="#5-3-自定义对象作为键" class="headerlink" title="5.3 自定义对象作为键"></a>5.3 自定义对象作为键</h3><p>当使用自定义对象作为键时，必须正确重写equals()和hashCode()方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token comment">// 构造函数、getter和setter省略</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> age <span class="token operator">==</span> person<span class="token punctuation">.</span>age <span class="token operator">&amp;&amp;</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p>HashMap是Java中使用最广泛的Map实现，它通过数组+链表+红黑树的复合数据结构，实现了高效的键值对存储和查找。</p><p>主要特点：</p><ol><li><strong>底层结构</strong>：数组+链表+红黑树</li><li><strong>初始容量</strong>：默认16，总是2的幂</li><li><strong>加载因子</strong>：默认0.75</li><li><strong>扩容机制</strong>：当元素数量超过容量*加载因子时，容量扩大为原来的2倍</li><li><strong>红黑树优化</strong>：当链表长度超过8且数组长度超过64时，链表转换为红黑树</li></ol><p>HashMap的源码设计体现了空间与时间的权衡，以及对各种边界情况的处理。通过深入理解HashMap的实现原理，我们不仅能够更加高效地使用这一集合类，还能从中学习到许多优秀的设计思想和编程技巧，这对于提升Java编程能力和系统设计水平都有很大帮助。</p><h2 id="七、参考资料"><a href="#七、参考资料" class="headerlink" title="七、参考资料"></a>七、参考资料</h2><ol><li><p><strong>官方文档</strong></p><ul><li><a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/HashMap.html">Java SE 17 API Documentation - HashMap</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/HashMap.html">Java SE 8 API Documentation - HashMap</a></li></ul></li><li><p><strong>书籍</strong></p><ul><li>Joshua Bloch. <em>Effective Java (3rd Edition)</em>. Addison-Wesley Professional, 2018.</li><li>Cay S. Horstmann. <em>Core Java Volume I—Fundamentals (11th Edition)</em>. Prentice Hall, 2018.</li><li>Brian Goetz. <em>Java Concurrency in Practice</em>. Addison-Wesley Professional, 2006.</li></ul></li><li><p><strong>技术博客与文章</strong></p><ul><li><a href="https://tech.meituan.com/2016/06/24/java-hashmap.html">Java HashMap工作原理及实现</a> - 美团技术团队</li><li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E5%AE%B9%E5%99%A8.md#hashmap">HashMap源码分析</a> - CS-Notes</li></ul></li><li><p><strong>JDK源码</strong></p><ul><li><a href="https://github.com/openjdk/jdk/blob/jdk8-b120/src/share/classes/java/util/HashMap.java">JDK 1.8 HashMap源码</a></li></ul></li></ol><h2 id="八、讨论与交流"><a href="#八、讨论与交流" class="headerlink" title="八、讨论与交流"></a>八、讨论与交流</h2><p>如果您对本文有任何疑问、建议或发现了错误，欢迎在评论区留言讨论。我们可以一起探讨HashMap的实现细节、性能优化或在实际项目中的应用经验。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、底层数据结构&quot;&gt;&lt;a href=&quot;#一、底层数据结构&quot; class=&quot;headerlink&quot; title=&quot;一、底层数据结构&quot;&gt;&lt;/a&gt;一、底层数据结构&lt;/h2&gt;&lt;p&gt;HashMap是Java中最常用的Map实现，它基于哈希表实现，在JDK 1.8中采用了数组</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.lucky845.top/categories/Java/"/>
    
    <category term="Java基础" scheme="https://blog.lucky845.top/categories/Java/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java集合" scheme="https://blog.lucky845.top/tags/Java%E9%9B%86%E5%90%88/"/>
    
    <category term="源码分析" scheme="https://blog.lucky845.top/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>【Java】LinkedList核心源码解析与实现原理详解</title>
    <link href="https://blog.lucky845.top/archives/7a8b905d.html"/>
    <id>https://blog.lucky845.top/archives/7a8b905d.html</id>
    <published>2025-03-10T02:00:00.000Z</published>
    <updated>2025-03-20T06:43:42.997Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、底层数据结构"><a href="#一、底层数据结构" class="headerlink" title="一、底层数据结构"></a>一、底层数据结构</h2><p>LinkedList是基于双向链表实现的List接口，其核心数据结构是内部的Node节点类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// JDK 1.8 LinkedList部分源码</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token class-name">E</span> item<span class="token punctuation">;</span>           <span class="token comment">// 节点存储的元素</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>     <span class="token comment">// 后继节点引用</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> prev<span class="token punctuation">;</span>     <span class="token comment">// 前驱节点引用</span>    <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> prev<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与ArrayList基于数组实现不同，LinkedList通过节点之间的相互引用，形成了一个双向链表结构：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">transient</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 链表大小</span><span class="token keyword">transient</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> first<span class="token punctuation">;</span>       <span class="token comment">// 头节点引用</span><span class="token keyword">transient</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> last<span class="token punctuation">;</span>        <span class="token comment">// 尾节点引用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="二、构造方法解析"><a href="#二、构造方法解析" class="headerlink" title="二、构造方法解析"></a>二、构造方法解析</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 无参构造</span><span class="token keyword">public</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 集合参数构造</span><span class="token keyword">public</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addAll</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与ArrayList不同，LinkedList的构造方法非常简单，无参构造方法仅创建一个空链表，不需要初始化容量。集合参数构造方法则是通过addAll方法将集合中的元素添加到链表中。</p><h2 id="三、关键成员变量"><a href="#三、关键成员变量" class="headerlink" title="三、关键成员变量"></a>三、关键成员变量</h2><table><thead><tr><th>变量名</th><th>作用</th></tr></thead><tbody><tr><td>first</td><td>指向链表的第一个节点</td></tr><tr><td>last</td><td>指向链表的最后一个节点</td></tr><tr><td>size</td><td>链表中的元素数量</td></tr><tr><td>modCount</td><td>结构性修改计数器（用于快速失败机制）</td></tr></tbody></table><h2 id="四、核心方法源码解析"><a href="#四、核心方法源码解析" class="headerlink" title="四、核心方法源码解析"></a>四、核心方法源码解析</h2><h3 id="1-add方法执行流程"><a href="#1-add方法执行流程" class="headerlink" title="1. add方法执行流程"></a>1. add方法执行流程</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">linkLast</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">linkLast</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token keyword">else</span>        l<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    size<span class="token operator">++</span><span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>执行流程：</strong></p><ol><li>创建一个新节点，前驱指向当前的last节点，后继为null</li><li>将last引用指向新节点</li><li>如果链表为空（l == null），则first也指向新节点</li><li>否则，将原last节点的next指向新节点</li><li>更新size和modCount</li></ol><h3 id="2-addFirst方法执行流程"><a href="#2-addFirst方法执行流程" class="headerlink" title="2. addFirst方法执行流程"></a>2. addFirst方法执行流程</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">linkFirst</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">linkFirst</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>    first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token keyword">else</span>        f<span class="token punctuation">.</span>prev <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    size<span class="token operator">++</span><span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>执行流程：</strong></p><ol><li>创建一个新节点，前驱为null，后继指向当前的first节点</li><li>将first引用指向新节点</li><li>如果链表为空（f == null），则last也指向新节点</li><li>否则，将原first节点的prev指向新节点</li><li>更新size和modCount</li></ol><h3 id="3-get方法执行流程"><a href="#3-get方法执行流程" class="headerlink" title="3. get方法执行流程"></a>3. get方法执行流程</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 二分查找优化：根据index位置决定从头还是从尾开始查找</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token punctuation">(</span>size <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> index<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>            x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>执行流程：</strong></p><ol><li>检查索引是否越界</li><li>调用node(index)方法获取对应位置的节点</li><li>返回节点的item值</li></ol><p><strong>优化策略：</strong></p><ul><li>根据索引位置，选择从头节点还是尾节点开始查找，减少遍历次数</li><li>如果索引小于size/2，从头开始查找；否则从尾开始查找</li></ul><h3 id="4-remove方法执行流程"><a href="#4-remove方法执行流程" class="headerlink" title="4. remove方法执行流程"></a>4. remove方法执行流程</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">E</span> <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">E</span> element <span class="token operator">=</span> x<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> prev <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        first <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        prev<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        last <span class="token operator">=</span> prev<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        next<span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    x<span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    size<span class="token operator">--</span><span class="token punctuation">;</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> element<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>执行流程：</strong></p><ol><li>检查索引是否越界</li><li>调用node(index)方法获取对应位置的节点</li><li>调用unlink方法删除节点并返回节点的值</li><li>unlink方法中：<ul><li>保存节点的值、前驱和后继</li><li>根据节点位置（是否为头/尾节点）调整链表引用</li><li>将被删除节点的引用置为null，帮助GC</li><li>更新size和modCount</li><li>返回被删除的元素</li></ul></li></ol><h2 id="五、LinkedList作为队列和栈的实现"><a href="#五、LinkedList作为队列和栈的实现" class="headerlink" title="五、LinkedList作为队列和栈的实现"></a>五、LinkedList作为队列和栈的实现</h2><p>LinkedList实现了Deque接口，可以作为队列和栈使用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 作为队列使用</span><span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 入队</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 出队</span><span class="token comment">// 作为栈使用</span><span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 入栈</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 出栈</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相关方法对应关系：</p><table><thead><tr><th>队列方法</th><th>栈方法</th><th>LinkedList方法</th><th>说明</th></tr></thead><tbody><tr><td>offer(e)</td><td>push(e)</td><td>addLast(e)/addFirst(e)</td><td>添加元素</td></tr><tr><td>poll()</td><td>pop()</td><td>removeFirst()</td><td>移除并返回元素</td></tr><tr><td>peek()</td><td>peek()</td><td>getFirst()</td><td>获取但不移除元素</td></tr></tbody></table><h2 id="六、迭代器实现原理"><a href="#六、迭代器实现原理" class="headerlink" title="六、迭代器实现原理"></a>六、迭代器实现原理</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ListItr</span> <span class="token keyword">implements</span> <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> lastReturned<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> nextIndex<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>    <span class="token comment">// 迭代器方法实现...</span>        <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lastReturned <span class="token operator">=</span> next<span class="token punctuation">;</span>        next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        nextIndex<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> lastReturned<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>LinkedList的迭代器实现与ArrayList类似，都使用了快速失败机制，但内部实现有所不同：</p><ul><li>LinkedList迭代器直接持有节点引用，而不是索引</li><li>通过节点引用的next和prev进行遍历，不需要通过索引计算</li></ul><h2 id="七、性能对比分析"><a href="#七、性能对比分析" class="headerlink" title="七、性能对比分析"></a>七、性能对比分析</h2><table><thead><tr><th>操作</th><th>LinkedList</th><th>ArrayList</th><th>说明</th></tr></thead><tbody><tr><td>add(E)</td><td>O(1)</td><td>平均O(1)，最坏O(n)</td><td>LinkedList直接添加到末尾；ArrayList可能需要扩容</td></tr><tr><td>add(int, E)</td><td>O(n)</td><td>O(n)</td><td>都需要找到指定位置，但LinkedList还需要遍历</td></tr><tr><td>get(int)</td><td>O(n)</td><td>O(1)</td><td>ArrayList直接通过索引访问；LinkedList需要遍历</td></tr><tr><td>remove(int)</td><td>O(n)</td><td>O(n)</td><td>LinkedList需要先遍历找到位置，但删除操作本身是O(1)</td></tr></tbody></table><p><strong>内存占用对比：</strong></p><ul><li>ArrayList: 仅存储元素引用和少量管理变量</li><li>LinkedList: 每个元素额外存储两个引用（prev和next），内存占用较大</li></ul><h2 id="八、使用场景建议"><a href="#八、使用场景建议" class="headerlink" title="八、使用场景建议"></a>八、使用场景建议</h2><p><strong>适合使用LinkedList的场景：</strong></p><ol><li>频繁在两端添加/删除元素</li><li>需要实现队列或栈的数据结构</li><li>不需要频繁随机访问元素</li><li>对内存占用不敏感</li></ol><p><strong>不适合使用LinkedList的场景：</strong></p><ol><li>需要频繁随机访问元素</li><li>对内存占用敏感</li><li>数据量较大且操作主要是遍历</li></ol><h2 id="九、源码实现的关键设计思想"><a href="#九、源码实现的关键设计思想" class="headerlink" title="九、源码实现的关键设计思想"></a>九、源码实现的关键设计思想</h2><ol><li><strong>双向链表设计</strong>：通过双向链表实现，支持从两端高效操作</li><li><strong>二分查找优化</strong>：get方法中根据索引位置决定从头还是从尾开始查找</li><li><strong>接口多态性</strong>：实现多个接口（List, Deque），提供多种数据结构功能</li><li><strong>快速失败机制</strong>：通过modCount实现迭代过程中的并发修改检测</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/collections/overview.html">Oracle Java Collections Framework官方文档</a></li><li>《Effective Java（第三版）》 第4章 类和接口</li><li>《Java核心技术 卷Ⅰ》 第9章 集合</li><li><a href="https://github.com/google/guava/wiki/CollectionUtilitiesExplained">Google Guava Collections指南</a></li></ul><hr><p>本文详细介绍了LinkedList核心源码解析与实现原理，希望对您有所帮助。如果您有任何问题，欢迎在评论区讨论！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、底层数据结构&quot;&gt;&lt;a href=&quot;#一、底层数据结构&quot; class=&quot;headerlink&quot; title=&quot;一、底层数据结构&quot;&gt;&lt;/a&gt;一、底层数据结构&lt;/h2&gt;&lt;p&gt;LinkedList是基于双向链表实现的List接口，其核心数据结构是内部的Node节点类：</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.lucky845.top/categories/Java/"/>
    
    <category term="Java基础" scheme="https://blog.lucky845.top/categories/Java/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java集合" scheme="https://blog.lucky845.top/tags/Java%E9%9B%86%E5%90%88/"/>
    
    <category term="源码分析" scheme="https://blog.lucky845.top/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>【Java】ArrayList核心源码解析与扩容机制详解</title>
    <link href="https://blog.lucky845.top/archives/66c41391.html"/>
    <id>https://blog.lucky845.top/archives/66c41391.html</id>
    <published>2025-03-06T05:00:00.000Z</published>
    <updated>2025-03-20T06:43:42.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、底层数据结构"><a href="#一、底层数据结构" class="headerlink" title="一、底层数据结构"></a>一、底层数据结构</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// JDK 1.8 ArrayList部分源码</span><span class="token keyword">transient</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span> <span class="token comment">// 存储元素的数组缓冲区</span><span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span> <span class="token comment">// 当前元素数量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="二、构造方法解析"><a href="#二、构造方法解析" class="headerlink" title="二、构造方法解析"></a>二、构造方法解析</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 无参构造（使用默认容量）</span><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token constant">DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 指定初始容量构造</span><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token constant">EMPTY_ELEMENTDATA</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 集合参数构造</span><span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    elementData <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>            elementData <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token constant">EMPTY_ELEMENTDATA</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、关键成员变量"><a href="#三、关键成员变量" class="headerlink" title="三、关键成员变量"></a>三、关键成员变量</h2><table><thead><tr><th>变量名</th><th>作用</th></tr></thead><tbody><tr><td>DEFAULT_CAPACITY</td><td>默认初始容量10</td></tr><tr><td>MAX_ARRAY_SIZE</td><td>最大数组长度Integer.MAX_VALUE - 8</td></tr><tr><td>modCount</td><td>结构性修改计数器（用于快速失败机制，迭代时检测并发修改）</td></tr></tbody></table><h2 id="三、add方法执行流程"><a href="#三、add方法执行流程" class="headerlink" title="三、add方法执行流程"></a>三、add方法执行流程</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 容量检查</span>    elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span> <span class="token comment">// 添加元素</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、remove方法执行流程"><a href="#四、remove方法执行流程" class="headerlink" title="四、remove方法执行流程"></a>四、remove方法执行流程</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 索引范围检查</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token class-name">E</span> oldValue <span class="token operator">=</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>    elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 清除引用，帮助GC</span>    <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>执行流程：</strong></p><ol><li>检查索引是否越界（rangeCheck）</li><li>修改计数器递增（modCount++）</li><li>获取被删除元素</li><li>计算需要移动的元素数量</li><li>使用System.arraycopy移动后续元素</li><li>将最后一个位置置空并调整size</li><li>返回被删除元素</li></ol><h2 id="五、扩容机制核心代码"><a href="#五、扩容机制核心代码" class="headerlink" title="五、扩容机制核心代码"></a>五、扩容机制核心代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1.5倍扩容</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> <span class="token constant">MAX_ARRAY_SIZE</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    elementData <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、扩容示例验证"><a href="#五、扩容示例验证" class="headerlink" title="五、扩容示例验证"></a>五、扩容示例验证</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 测试代码</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"次添加，当前容量:"</span>         <span class="token operator">+</span> <span class="token function">getCapacity</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 反射获取真实容量</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getCapacity</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">Field</span> field <span class="token operator">=</span> <span class="token class-name">ArrayList</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"elementData"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、迭代器实现原理"><a href="#七、迭代器实现原理" class="headerlink" title="七、迭代器实现原理"></a>七、迭代器实现原理</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Itr</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> cursor<span class="token punctuation">;</span>       <span class="token comment">// 下一个元素索引</span>    <span class="token keyword">int</span> lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 最后访问元素索引</span>    <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cursor <span class="token operator">!=</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// ... 实际获取元素逻辑</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="八、性能对比数据"><a href="#八、性能对比数据" class="headerlink" title="八、性能对比数据"></a>八、性能对比数据</h2><table><thead><tr><th>初始容量</th><th>添加10万元素耗时(ms)</th></tr></thead><tbody><tr><td>默认10</td><td>35</td></tr><tr><td>指定100000</td><td>8</td></tr></tbody></table><h2 id="六、扩容规律总结"><a href="#六、扩容规律总结" class="headerlink" title="六、扩容规律总结"></a>六、扩容规律总结</h2><table><thead><tr><th>元素数量</th><th>实际容量</th></tr></thead><tbody><tr><td>10</td><td>10</td></tr><tr><td>11</td><td>15</td></tr><tr><td>16</td><td>22</td></tr><tr><td>23</td><td>33</td></tr><tr><td>34</td><td>49</td></tr></tbody></table><blockquote><p>通过源码分析可见，ArrayList采用1.5倍系数扩容，在空间和时间效率之间取得平衡。开发中应根据业务场景合理设置初始容量，避免频繁扩容带来的性能损耗。</p></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/collections/overview.html">Oracle Java Collections Framework官方文档</a></li><li>《Effective Java（第三版）》 第4章 类和接口</li><li>《Java核心技术 卷Ⅰ》 第9章 集合</li><li><a href="https://github.com/google/guava/wiki/CollectionUtilitiesExplained">Google Guava Collections指南</a></li></ul><hr><p>本文详细介绍了 ArrayList核心源码解析与扩容机制详解，希望对您有所帮助。如果您有任何问题，欢迎在评论区讨论！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、底层数据结构&quot;&gt;&lt;a href=&quot;#一、底层数据结构&quot; class=&quot;headerlink&quot; title=&quot;一、底层数据结构&quot;&gt;&lt;/a&gt;一、底层数据结构&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-java&quot; data-lang</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.lucky845.top/categories/Java/"/>
    
    <category term="Java基础" scheme="https://blog.lucky845.top/categories/Java/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java集合" scheme="https://blog.lucky845.top/tags/Java%E9%9B%86%E5%90%88/"/>
    
    <category term="源码分析" scheme="https://blog.lucky845.top/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>【Java】Java集合框架详解与面试题分析</title>
    <link href="https://blog.lucky845.top/archives/7a8b905c.html"/>
    <id>https://blog.lucky845.top/archives/7a8b905c.html</id>
    <published>2025-03-06T04:00:00.000Z</published>
    <updated>2025-03-20T06:43:42.916Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java集合框架详解与面试题分析"><a href="#Java集合框架详解与面试题分析" class="headerlink" title="Java集合框架详解与面试题分析"></a>Java集合框架详解与面试题分析</h1><p>在Java编程中，集合框架是最常用的API之一，它提供了一系列接口和类来存储、操作和处理对象组。本文将深入探讨Java集合框架的核心概念、常用实现类以及面试中的常见问题。</p><h2 id="集合框架概述"><a href="#集合框架概述" class="headerlink" title="集合框架概述"></a>集合框架概述</h2><h3 id="什么是Java集合框架？"><a href="#什么是Java集合框架？" class="headerlink" title="什么是Java集合框架？"></a>什么是Java集合框架？</h3><p>Java集合框架是一个用于表示和操作集合的统一架构，它实现了一系列接口和类，使得集合的使用变得简单高效。Java集合框架主要包括以下几个部分：</p><ol><li><strong>接口（Interfaces）</strong>：代表集合的抽象数据类型，如List、Set、Map等</li><li><strong>实现类（Implementations）</strong>：接口的具体实现，如ArrayList、LinkedList、HashSet、HashMap等</li><li><strong>算法（Algorithms）</strong>：对集合进行操作的方法，如排序、搜索等</li></ol><h3 id="集合框架层次结构"><a href="#集合框架层次结构" class="headerlink" title="集合框架层次结构"></a>集合框架层次结构</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Collection</span><span class="token punctuation">[</span><span class="token class-name">I</span><span class="token punctuation">]</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>List</span><span class="token punctuation">[</span><span class="token class-name">I</span><span class="token punctuation">]</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>ArrayList</span><span class="token punctuation">[</span><span class="token class-name">C</span><span class="token punctuation">]</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>LinkedList</span><span class="token punctuation">[</span><span class="token class-name">C</span><span class="token punctuation">]</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Vector</span><span class="token punctuation">[</span><span class="token class-name">C</span><span class="token punctuation">]</span>  <span class="token comment">//线程安全</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Stack</span><span class="token punctuation">[</span><span class="token class-name">C</span><span class="token punctuation">]</span>  <span class="token comment">//线程安全</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Set</span><span class="token punctuation">[</span><span class="token class-name">I</span><span class="token punctuation">]</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>HashSet</span><span class="token punctuation">[</span><span class="token class-name">C</span><span class="token punctuation">]</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>SortedSet</span><span class="token punctuation">[</span><span class="token class-name">I</span><span class="token punctuation">]</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>TreeSet</span><span class="token punctuation">[</span><span class="token class-name">C</span><span class="token punctuation">]</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Queue</span><span class="token punctuation">[</span><span class="token class-name">I</span><span class="token punctuation">]</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Deque</span><span class="token punctuation">[</span><span class="token class-name">I</span><span class="token punctuation">]</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>PriorityQueue</span><span class="token punctuation">[</span><span class="token class-name">C</span><span class="token punctuation">]</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Map</span><span class="token punctuation">[</span><span class="token class-name">I</span><span class="token punctuation">]</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>SortedMap</span><span class="token punctuation">[</span><span class="token class-name">I</span><span class="token punctuation">]</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>TreeMap</span><span class="token punctuation">[</span><span class="token class-name">C</span><span class="token punctuation">]</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Hashtable</span><span class="token punctuation">[</span><span class="token class-name">C</span><span class="token punctuation">]</span>  <span class="token comment">//线程安全</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>HashMap</span><span class="token punctuation">[</span><span class="token class-name">C</span><span class="token punctuation">]</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>LinkedHashMap</span><span class="token punctuation">[</span><span class="token class-name">C</span><span class="token punctuation">]</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>WeakHashMap</span><span class="token punctuation">[</span><span class="token class-name">C</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">[</span><span class="token class-name">I</span><span class="token punctuation">]</span><span class="token operator">:</span>接口<span class="token punctuation">[</span><span class="token class-name">C</span><span class="token punctuation">]</span><span class="token operator">:</span>类<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="核心接口详解"><a href="#核心接口详解" class="headerlink" title="核心接口详解"></a>核心接口详解</h2><h3 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h3><p>Collection是集合层次结构的根接口，它提供了所有集合都应该实现的基本操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">// 基本操作</span>    <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 批量操作</span>    <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">retainAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">containsAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 数组操作</span>    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 迭代器</span>    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="List接口"><a href="#List接口" class="headerlink" title="List接口"></a>List接口</h3><p>List是有序集合，允许重复元素，用户可以通过索引访问元素。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">// 位置访问操作</span>    <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">E</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 搜索操作</span>    <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 列表迭代器</span>    <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 视图</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">subList</span><span class="token punctuation">(</span><span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h3><p>Set是不允许重复元素的集合。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">// 继承自Collection的所有方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h3><p>Map是键值对映射，不允许重复的键。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">// 基本操作</span>    <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">V</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">containsValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 批量操作</span>    <span class="token keyword">void</span> <span class="token function">putAll</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 视图</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> <span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 内部接口</span>    <span class="token keyword">interface</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token class-name">K</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">V</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">V</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">V</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常用实现类详解"><a href="#常用实现类详解" class="headerlink" title="常用实现类详解"></a>常用实现类详解</h2><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>ArrayList是基于动态数组实现的List接口，支持随机访问。</p><p><strong>特点：</strong></p><ul><li>基于数组实现，支持随机访问，访问元素的时间复杂度为O(1)</li><li>插入和删除元素的时间复杂度为O(n)</li><li>初始容量为10，每次扩容为原来的1.5倍</li><li>非线程安全</li></ul><p><strong>适用场景：</strong></p><ul><li>频繁访问元素</li><li>很少插入和删除元素</li><li>需要根据索引访问元素</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Python"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"C++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: Python</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p>LinkedList是基于双向链表实现的List接口，支持高效的插入和删除操作。</p><p><strong>特点：</strong></p><ul><li>基于双向链表实现</li><li>插入和删除元素的时间复杂度为O(1)（如果已知位置）</li><li>访问元素的时间复杂度为O(n)</li><li>非线程安全</li></ul><p><strong>适用场景：</strong></p><ul><li>频繁插入和删除元素</li><li>实现栈、队列等数据结构</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> linkedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>linkedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>linkedList<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token string">"Python"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在头部添加元素</span>linkedList<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"C++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 在尾部添加元素</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>linkedList<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [Python, Java, C++]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>HashSet是基于HashMap实现的Set接口，不允许重复元素。</p><p><strong>特点：</strong></p><ul><li>基于HashMap实现（元素作为HashMap的键，值为一个固定的Object对象）</li><li>不保证元素的顺序</li><li>允许使用null元素</li><li>基本操作的时间复杂度为O(1)</li><li>非线程安全</li></ul><p><strong>适用场景：</strong></p><ul><li>需要去重</li><li>不关心元素顺序</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hashSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Python"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重复元素不会被添加</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hashSet<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><p>TreeSet是基于TreeMap实现的Set接口，可以对元素进行排序。</p><p><strong>特点：</strong></p><ul><li>基于红黑树实现</li><li>元素按照自然顺序或指定的比较器排序</li><li>基本操作的时间复杂度为O(log n)</li><li>非线程安全</li></ul><p><strong>适用场景：</strong></p><ul><li>需要元素保持排序状态</li><li>需要按照自定义规则排序</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> treeSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Python"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"C++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>treeSet<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [C++, Java, Python]（按字母顺序排序）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>HashMap是基于哈希表实现的Map接口，允许null键和null值。</p><p><strong>特点：</strong></p><ul><li>基于哈希表实现（数组+链表+红黑树）</li><li>JDK 1.8后，当链表长度超过8时，会转换为红黑树</li><li>不保证元素的顺序</li><li>基本操作的时间复杂度为O(1)</li><li>非线程安全</li></ul><p><strong>适用场景：</strong></p><ul><li>需要键值对映射</li><li>需要高效的查找、插入和删除操作</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Python"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"C++"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"Python"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><p>TreeMap是基于红黑树实现的Map接口，可以对键进行排序。</p><p><strong>特点：</strong></p><ul><li>基于红黑树实现</li><li>键按照自然顺序或指定的比较器排序</li><li>基本操作的时间复杂度为O(log n)</li><li>非线程安全</li></ul><p><strong>适用场景：</strong></p><ul><li>需要键保持排序状态</li><li>需要按照自定义规则排序</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> treeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Python"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>treeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"C++"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>treeMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [C++, Java, Python]（按键的字母顺序排序）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="集合类的性能对比"><a href="#集合类的性能对比" class="headerlink" title="集合类的性能对比"></a>集合类的性能对比</h2><h3 id="时间复杂度对比"><a href="#时间复杂度对比" class="headerlink" title="时间复杂度对比"></a>时间复杂度对比</h3><table><thead><tr><th>集合类</th><th>添加</th><th>删除</th><th>查找</th><th>遍历</th></tr></thead><tbody><tr><td>ArrayList</td><td>O(1)*</td><td>O(n)</td><td>O(1)</td><td>O(n)</td></tr><tr><td>LinkedList</td><td>O(1)</td><td>O(1)**</td><td>O(n)</td><td>O(n)</td></tr><tr><td>HashSet</td><td>O(1)</td><td>O(1)</td><td>O(1)</td><td>O(n)</td></tr><tr><td>TreeSet</td><td>O(log n)</td><td>O(log n)</td><td>O(log n)</td><td>O(n)</td></tr><tr><td>HashMap</td><td>O(1)</td><td>O(1)</td><td>O(1)</td><td>O(n)</td></tr><tr><td>TreeMap</td><td>O(log n)</td><td>O(log n)</td><td>O(log n)</td><td>O(n)</td></tr></tbody></table><p>*: 添加到末尾时为O(1)，添加到中间需要移动元素，为O(n)<br>**: 如果已知位置为O(1)，否则需要先查找位置，为O(n)</p><h2 id="并发容器详解"><a href="#并发容器详解" class="headerlink" title="并发容器详解"></a>并发容器详解</h2><h3 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h3><p>适用于读多写少的并发场景，通过写时复制实现线程安全。</p><p><strong>实现原理：</strong></p><ul><li>所有修改操作（add/set/remove）都会复制底层数组</li><li>保证遍历操作的迭代器不会抛出ConcurrentModificationException</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">CopyOnWriteArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cowList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cowList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 遍历时使用快照</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> cowList<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><p>JDK1.8采用CAS+synchronized实现高并发：</p><ol><li>数组+链表/红黑树结构</li><li>Node节点使用volatile保证可见性</li><li>并发控制使用synchronized和CAS</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> concurrentMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>concurrentMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>concurrentMap<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span><span class="token string">"Python"</span><span class="token punctuation">,</span> k <span class="token operator">-&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="集合工具类"><a href="#集合工具类" class="headerlink" title="集合工具类"></a>集合工具类</h2><h3 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h3><p>常用操作方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 排序</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 反转</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 随机打乱</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取同步列表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Arrays工具类"><a href="#Arrays工具类" class="headerlink" title="Arrays工具类"></a>Arrays工具类</h3><p>数组操作示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数组排序</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 二分查找</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> copy <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数组复制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="集合工具类高级用法"><a href="#集合工具类高级用法" class="headerlink" title="集合工具类高级用法"></a>集合工具类高级用法</h2><h3 id="Collections进阶技巧"><a href="#Collections进阶技巧" class="headerlink" title="Collections进阶技巧"></a>Collections进阶技巧</h3><ol><li>创建不可修改集合：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> unmodifiableList <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>unmodifiableList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"C++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 抛出UnsupportedOperationException</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>自定义排序（按字符串长度）：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> languages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>languages<span class="token punctuation">,</span> <span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">length</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 结果：[C, Java, Python]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>查找极值：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> numbers <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span><span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Arrays高级操作"><a href="#Arrays高级操作" class="headerlink" title="Arrays高级操作"></a>Arrays高级操作</h3><ol><li>并行排序：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bigData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">1000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 填充数据...</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">parallelSort</span><span class="token punctuation">(</span>bigData<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 利用多核并行排序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>数组转流处理：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> languages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">,</span> <span class="token string">"C++"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">long</span> count <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>languages<span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>深度比较：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">deepEquals</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Java8-Stream-API"><a href="#Java8-Stream-API" class="headerlink" title="Java8 Stream API"></a>Java8 Stream API</h2><p>集合操作优化示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> langs <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">,</span> <span class="token string">"C++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 传统方式</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> filtered <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> langs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"J"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        filtered<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Stream方式</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> streamFiltered <span class="token operator">=</span> langs<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"J"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要优势：</p><ul><li>声明式编程风格</li><li>支持并行处理（parallelStream）</li><li>链式操作提高可读性</li></ul><h2 id="迭代器与Fail-Fast机制"><a href="#迭代器与Fail-Fast机制" class="headerlink" title="迭代器与Fail-Fast机制"></a>迭代器与Fail-Fast机制</h2><h3 id="迭代器工作原理"><a href="#迭代器工作原理" class="headerlink" title="迭代器工作原理"></a>迭代器工作原理</h3><p>Java集合通过Iterator接口提供标准遍历方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">E</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 使用示例</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> item <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Fail-Fast机制"><a href="#Fail-Fast机制" class="headerlink" title="Fail-Fast机制"></a>Fail-Fast机制</h3><ol><li><strong>实现原理</strong>：</li></ol><ul><li>集合内部维护modCount（修改计数器）</li><li>迭代时检查modCount是否与expectedModCount一致</li></ul><ol start="2"><li><strong>触发场景</strong>：</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Python"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结构性修改</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 抛出ConcurrentModificationException</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>解决方案</strong>：</li></ol><ul><li>使用并发集合类（如CopyOnWriteArrayList）</li><li>通过迭代器的remove方法修改集合</li></ul><h2 id="常见面试题解析"><a href="#常见面试题解析" class="headerlink" title="常见面试题解析"></a>常见面试题解析</h2><h3 id="1-ArrayList和LinkedList的区别？"><a href="#1-ArrayList和LinkedList的区别？" class="headerlink" title="1. ArrayList和LinkedList的区别？"></a>1. ArrayList和LinkedList的区别？</h3><p><strong>答案：</strong></p><p>ArrayList和LinkedList都实现了List接口，但它们的实现方式和性能特点有很大不同：</p><ol><li><p><strong>底层数据结构</strong>：</p><ul><li>ArrayList基于动态数组实现</li><li>LinkedList基于双向链表实现</li></ul></li><li><p><strong>性能特点</strong>：</p><ul><li>ArrayList随机访问效率高（O(1)），但插入删除效率低（O(n)）</li><li>LinkedList随机访问效率低（O(n)），但插入删除效率高（O(1)，如果已知位置）</li></ul></li><li><p><strong>内存占用</strong>：</p><ul><li>ArrayList只需要存储元素和少量管理数组的变量</li><li>LinkedList除了存储元素外，还需要存储前驱和后继节点的引用，内存占用较大</li></ul></li><li><p><strong>适用场景</strong>：</p><ul><li>ArrayList适合频繁随机访问的场景</li><li>LinkedList适合频繁插入删除的场景</li></ul></li></ol><h3 id="2-HashMap的实现原理？"><a href="#2-HashMap的实现原理？" class="headerlink" title="2. HashMap的实现原理？"></a>2. HashMap的实现原理？</h3><p><strong>答案：</strong></p><p>HashMap基于哈希表实现，在JDK 1.8中的具体实现如下：</p><ol><li><p><strong>数据结构</strong>：数组+链表+红黑树</p></li><li><p><strong>工作原理</strong>：</p><ul><li>通过hash函数计算键的哈希值</li><li>通过哈希值确定在数组中的位置</li><li>如果发生哈希冲突，使用链表或红黑树存储冲突的元素</li></ul></li><li><p><strong>特殊优化</strong>：</p><ul><li>当链表长度超过8且数组长度超过64时，链表会转换为红黑树，提高查询效率</li><li>当红黑树节点数量小于6时，会转换回链表</li></ul></li><li><p><strong>扩容机制</strong>：</p><ul><li>初始容量为16，负载因子为0.75</li><li>当元素数量超过容量*负载因子时，会进行扩容</li><li>每次扩容为原来的2倍</li></ul></li></ol><h3 id="3-ConcurrentHashMap和Hashtable的区别？"><a href="#3-ConcurrentHashMap和Hashtable的区别？" class="headerlink" title="3. ConcurrentHashMap和Hashtable的区别？"></a>3. ConcurrentHashMap和Hashtable的区别？</h3><p><strong>答案：</strong></p><ol><li><p><strong>线程安全实现方式</strong>：</p><ul><li>Hashtable使用synchronized关键字对整个方法进行同步，效率较低</li><li>ConcurrentHashMap在JDK 1.7中使用分段锁（Segment）提高并发性能，JDK 1.8中使用CAS和synchronized关键字对单个节点进行同步</li></ul></li><li><p><strong>性能</strong>：</p><ul><li>ConcurrentHashMap的并发性能远高于Hashtable</li></ul></li><li><p><strong>空值</strong>：</p><ul><li>Hashtable不允许null键和null值</li><li>ConcurrentHashMap不允许null键和null值</li></ul></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/collections/overview.html">Oracle Java Collections Framework官方文档</a></li><li>《Effective Java（第三版）》 第4章 类和接口</li><li>《Java核心技术 卷Ⅰ》 第9章 集合</li><li><a href="https://github.com/google/guava/wiki/CollectionUtilitiesExplained">Google Guava Collections指南</a></li></ul><hr><p>本文详细介绍了 Java集合框架详解与面试题分析，希望对您有所帮助。如果您有任何问题，欢迎在评论区讨论！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java集合框架详解与面试题分析&quot;&gt;&lt;a href=&quot;#Java集合框架详解与面试题分析&quot; class=&quot;headerlink&quot; title=&quot;Java集合框架详解与面试题分析&quot;&gt;&lt;/a&gt;Java集合框架详解与面试题分析&lt;/h1&gt;&lt;p&gt;在Java编程中，集合框架是</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.lucky845.top/categories/Java/"/>
    
    <category term="技术笔记" scheme="https://blog.lucky845.top/categories/Java/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Java基础" scheme="https://blog.lucky845.top/categories/Java/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://blog.lucky845.top/tags/Java/"/>
    
    <category term="集合框架" scheme="https://blog.lucky845.top/tags/%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    
    <category term="面试题" scheme="https://blog.lucky845.top/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>【Java】Java SPI 机制详解</title>
    <link href="https://blog.lucky845.top/archives/8f9e712f.html"/>
    <id>https://blog.lucky845.top/archives/8f9e712f.html</id>
    <published>2025-03-05T03:00:00.000Z</published>
    <updated>2025-03-20T06:43:42.916Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-SPI-机制详解"><a href="#Java-SPI-机制详解" class="headerlink" title="Java SPI 机制详解"></a>Java SPI 机制详解</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>Java SPI（Service Provider Interface）是Java提供的一种服务发现机制，它允许程序在运行时动态地发现和加载服务实现。本文将深入探讨Java SPI机制的原理、实现方式以及最佳实践，帮助您更好地理解和使用这一重要特性。</p><h2 id="什么是SPI"><a href="#什么是SPI" class="headerlink" title="什么是SPI"></a>什么是SPI</h2><p>SPI是Service Provider Interface的缩写，它是JDK内置的一种服务提供发现机制。SPI的本质是基于接口的编程＋策略模式＋配置文件组合实现的动态加载机制。</p><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><ol><li>服务接口（Service Interface）：定义服务的标准规范</li><li>服务提供者（Service Provider）：服务接口的具体实现</li><li>服务加载器（ServiceLoader）：负责加载和实例化服务提供者</li></ol><h2 id="SPI的工作原理"><a href="#SPI的工作原理" class="headerlink" title="SPI的工作原理"></a>SPI的工作原理</h2><h3 id="1-配置文件规范"><a href="#1-配置文件规范" class="headerlink" title="1. 配置文件规范"></a>1. 配置文件规范</h3><p>SPI机制要求在JAR包的<code>META-INF/services</code>目录下创建一个以服务接口全限定名为名字的文件，文件内容为实现类的全限定名，每行一个实现类。</p><pre class="line-numbers language-none"><code class="language-none"># META-INF/services/com.example.MyServicecom.example.impl.MyServiceImpl1com.example.impl.MyServiceImpl2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-ServiceLoader的使用"><a href="#2-ServiceLoader的使用" class="headerlink" title="2. ServiceLoader的使用"></a>2. ServiceLoader的使用</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取服务加载器</span><span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyService</span><span class="token punctuation">&gt;</span></span> loader <span class="token operator">=</span> <span class="token class-name">ServiceLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">MyService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 遍历所有服务实现</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MyService</span> service <span class="token operator">:</span> loader<span class="token punctuation">)</span> <span class="token punctuation">{</span>    service<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实际应用案例"><a href="#实际应用案例" class="headerlink" title="实际应用案例"></a>实际应用案例</h2><h3 id="JDBC驱动加载"><a href="#JDBC驱动加载" class="headerlink" title="JDBC驱动加载"></a>JDBC驱动加载</h3><p>JDBC是Java SPI机制最经典的应用之一：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 不需要显式加载驱动类</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="日志框架集成"><a href="#日志框架集成" class="headerlink" title="日志框架集成"></a>日志框架集成</h3><p>SLF4J使用SPI机制来发现和加载具体的日志实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 自动加载log4j、logback等具体实现</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="实现自定义SPI"><a href="#实现自定义SPI" class="headerlink" title="实现自定义SPI"></a>实现自定义SPI</h2><h3 id="1-定义服务接口"><a href="#1-定义服务接口" class="headerlink" title="1. 定义服务接口"></a>1. 定义服务接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MessageService</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-创建服务实现"><a href="#2-创建服务实现" class="headerlink" title="2. 创建服务实现"></a>2. 创建服务实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmailMessageService</span> <span class="token keyword">implements</span> <span class="token class-name">MessageService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Email: "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SMSMessageService</span> <span class="token keyword">implements</span> <span class="token class-name">MessageService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SMS: "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-配置服务实现"><a href="#3-配置服务实现" class="headerlink" title="3. 配置服务实现"></a>3. 配置服务实现</h3><p>在<code>META-INF/services</code>目录下创建配置文件：</p><pre class="line-numbers language-none"><code class="language-none"># META-INF/services/com.example.MessageServicecom.example.impl.EmailMessageServicecom.example.impl.SMSMessageService<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-使用服务"><a href="#4-使用服务" class="headerlink" title="4. 使用服务"></a>4. 使用服务</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageService</span><span class="token punctuation">&gt;</span></span> services <span class="token operator">=</span> <span class="token class-name">ServiceLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">MessageService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MessageService</span> service <span class="token operator">:</span> services<span class="token punctuation">)</span> <span class="token punctuation">{</span>    service<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">"Hello SPI"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="1-性能考虑"><a href="#1-性能考虑" class="headerlink" title="1. 性能考虑"></a>1. 性能考虑</h3><ul><li>ServiceLoader会加载并实例化所有实现类，对于大量实现类可能影响性能</li><li>考虑使用缓存机制优化多次加载的场景</li></ul><h3 id="2-异常处理"><a href="#2-异常处理" class="headerlink" title="2. 异常处理"></a>2. 异常处理</h3><ul><li>服务加载失败时要做好异常处理</li><li>提供合适的降级策略</li></ul><h3 id="3-线程安全"><a href="#3-线程安全" class="headerlink" title="3. 线程安全"></a>3. 线程安全</h3><ul><li>ServiceLoader的iterator方法不是线程安全的</li><li>在多线程环境下需要额外同步措施</li></ul><h2 id="优缺点分析"><a href="#优缺点分析" class="headerlink" title="优缺点分析"></a>优缺点分析</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>解耦：服务接口与实现分离</li><li>可扩展：新增实现无需修改代码</li><li>动态加载：运行时发现服务实现</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>需要遍历所有实现并实例化</li><li>无法指定加载顺序</li><li>配置文件格式单一</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Java SPI机制为开发可扩展的应用程序提供了强大支持。通过合理使用SPI，我们可以实现更灵活的插件化架构，使应用程序更易于维护和扩展。在实际开发中，需要根据具体场景权衡使用SPI的利弊，并遵循最佳实践来避免潜在问题。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>Java官方文档</li><li>《Java核心技术》</li><li>Spring Framework源码</li><li>JDBC规范文档</li></ul><hr><p>希望这篇文章能帮助您更好地理解Java的SPI机制。如果您有任何问题，欢迎在评论区讨论！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-SPI-机制详解&quot;&gt;&lt;a href=&quot;#Java-SPI-机制详解&quot; class=&quot;headerlink&quot; title=&quot;Java SPI 机制详解&quot;&gt;&lt;/a&gt;Java SPI 机制详解&lt;/h1&gt;&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; cla</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.lucky845.top/categories/Java/"/>
    
    <category term="技术笔记" scheme="https://blog.lucky845.top/categories/Java/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Java基础" scheme="https://blog.lucky845.top/categories/Java/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://blog.lucky845.top/tags/Java/"/>
    
    <category term="SPI" scheme="https://blog.lucky845.top/tags/SPI/"/>
    
    <category term="设计模式" scheme="https://blog.lucky845.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>【Java】Java语法糖详解：从基础到高级特性</title>
    <link href="https://blog.lucky845.top/archives/8f9e713f.html"/>
    <id>https://blog.lucky845.top/archives/8f9e713f.html</id>
    <published>2025-03-05T03:00:00.000Z</published>
    <updated>2025-03-20T06:43:43.002Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java语法糖详解"><a href="#Java语法糖详解" class="headerlink" title="Java语法糖详解"></a>Java语法糖详解</h1><h2 id="什么是语法糖？"><a href="#什么是语法糖？" class="headerlink" title="什么是语法糖？"></a>什么是语法糖？</h2><p>语法糖（Syntactic Sugar）是指在编程语言中添加的一些语法特性，这些特性不会改变程序的功能，但可以使代码更加简洁、易读。Java作为一门成熟的编程语言，提供了多种语法糖特性，本文将详细介绍这些特性的使用方法和实现原理。</p><h2 id="基础语法糖"><a href="#基础语法糖" class="headerlink" title="基础语法糖"></a>基础语法糖</h2><h3 id="1-自动装箱与拆箱"><a href="#1-自动装箱与拆箱" class="headerlink" title="1. 自动装箱与拆箱"></a>1. 自动装箱与拆箱</h3><p>自动装箱（Autoboxing）和自动拆箱（Unboxing）是Java 5引入的特性，它允许基本数据类型和对应的包装类之间自动转换。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 自动装箱</span><span class="token class-name">Integer</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>  <span class="token comment">// 编译器自动转换为：Integer num = Integer.valueOf(100);</span><span class="token comment">// 自动拆箱</span><span class="token keyword">int</span> value <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token comment">// 编译器自动转换为：int value = num.intValue();</span><span class="token comment">// 在集合中的应用</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 自动装箱</span><span class="token keyword">int</span> first <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 自动拆箱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-增强for循环"><a href="#2-增强for循环" class="headerlink" title="2. 增强for循环"></a>2. 增强for循环</h3><p>增强for循环（Enhanced for Loop）也称为foreach循环，是Java 5引入的一个语法糖，用于简化集合和数组的遍历。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 数组遍历</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 集合遍历</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> names <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token string">"Charlie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-字符串switch"><a href="#3-字符串switch" class="headerlink" title="3. 字符串switch"></a>3. 字符串switch</h3><p>Java 7开始支持在switch语句中使用字符串，这是一个很方便的语法糖。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> command <span class="token operator">=</span> <span class="token string">"start"</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>command<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">"start"</span><span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Starting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"stop"</span><span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Stopping..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Unknown command"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="高级语法糖"><a href="#高级语法糖" class="headerlink" title="高级语法糖"></a>高级语法糖</h2><h3 id="1-Lambda表达式"><a href="#1-Lambda表达式" class="headerlink" title="1. Lambda表达式"></a>1. Lambda表达式</h3><p>Java 8引入的Lambda表达式是一个重要的语法糖，它简化了匿名内部类的写法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 传统写法</span><span class="token class-name">Button</span> button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Button clicked!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Lambda表达式</span>button<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Button clicked!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 方法引用</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> names <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token string">"Charlie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>names<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Switch表达式"><a href="#2-Switch表达式" class="headerlink" title="2. Switch表达式"></a>2. Switch表达式</h3><p>Java 14正式引入的Switch表达式提供了更简洁的switch语法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token constant">MONDAY</span><span class="token punctuation">,</span> <span class="token constant">FRIDAY</span><span class="token punctuation">,</span> <span class="token constant">SUNDAY</span> <span class="token operator">-&gt;</span> <span class="token string">"休息日"</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token constant">TUESDAY</span> <span class="token operator">-&gt;</span> <span class="token string">"工作日"</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token constant">THURSDAY</span><span class="token punctuation">,</span> <span class="token constant">SATURDAY</span> <span class="token operator">-&gt;</span> <span class="token string">"学习日"</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token constant">WEDNESDAY</span> <span class="token operator">-&gt;</span> <span class="token string">"运动日"</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token string">"未知"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-Record类型"><a href="#3-Record类型" class="headerlink" title="3. Record类型"></a>3. Record类型</h3><p>Java 16引入的Record类型用于创建不可变的数据类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 等价于以下传统类</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 自动生成getter、equals、hashCode和toString方法</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="语法糖的实现原理"><a href="#语法糖的实现原理" class="headerlink" title="语法糖的实现原理"></a>语法糖的实现原理</h2><h3 id="反编译分析"><a href="#反编译分析" class="headerlink" title="反编译分析"></a>反编译分析</h3><p>让我们通过反编译来看看这些语法糖是如何实现的：</p><ol><li>自动装箱/拆箱</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 源代码</span><span class="token class-name">Integer</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">// 反编译后</span><span class="token class-name">Integer</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>增强for循环</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 源代码</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> str <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 反编译后</span><span class="token class-name">Iterator</span> var2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>var2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>var2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>Lambda表达式</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 源代码</span><span class="token class-name">Runnable</span> r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 反编译后（简化版）</span><span class="token class-name">Runnable</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h2><ol><li><p><strong>合理使用</strong>：语法糖可以提高代码可读性，但过度使用可能导致代码难以理解。</p></li><li><p><strong>了解原理</strong>：理解语法糖的实现原理有助于写出更高效的代码。</p></li><li><p><strong>版本兼容</strong>：使用新版本的语法糖特性时，需要注意目标环境的JDK版本支持情况。</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Java语法糖的设计目的是提高开发效率和代码可读性。通过本文的介绍，我们了解了从基础到高级的各种语法糖特性，以及它们的实现原理。合理使用这些特性，可以帮助我们写出更优雅的代码。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>Java Language Specification</li><li>JDK源码文档</li><li>《Effective Java》第三版</li><li>Java虚拟机规范</li></ul><hr><p>本文介绍了Java中常用的语法糖特性，从基础的自动装箱拆箱到高级的Lambda表达式和Record类型。通过理解这些特性的使用方法和实现原理，我们可以更好地运用它们来提高代码质量。如果您有任何问题或建议，欢迎在评论区讨论！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java语法糖详解&quot;&gt;&lt;a href=&quot;#Java语法糖详解&quot; class=&quot;headerlink&quot; title=&quot;Java语法糖详解&quot;&gt;&lt;/a&gt;Java语法糖详解&lt;/h1&gt;&lt;h2 id=&quot;什么是语法糖？&quot;&gt;&lt;a href=&quot;#什么是语法糖？&quot; class=&quot;he</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.lucky845.top/categories/Java/"/>
    
    <category term="技术笔记" scheme="https://blog.lucky845.top/categories/Java/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Java基础" scheme="https://blog.lucky845.top/categories/Java/%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/Java%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="Java" scheme="https://blog.lucky845.top/tags/Java/"/>
    
    <category term="语法糖" scheme="https://blog.lucky845.top/tags/%E8%AF%AD%E6%B3%95%E7%B3%96/"/>
    
  </entry>
  
</feed>
