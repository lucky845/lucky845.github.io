<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lucky845的博客</title>
  
  <subtitle>lucky845的博客</subtitle>
  <link href="https://lucky845.github.io/atom.xml" rel="self"/>
  
  <link href="https://lucky845.github.io/"/>
  <updated>2025-03-01T09:58:09.655Z</updated>
  <id>https://lucky845.github.io/</id>
  
  <author>
    <name>lucky845</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Redis】线程模型详解：从单线程到多线程的演进</title>
    <link href="https://lucky845.github.io/archives/b55fa587.html"/>
    <id>https://lucky845.github.io/archives/b55fa587.html</id>
    <published>2025-03-01T07:00:00.000Z</published>
    <updated>2025-03-01T09:58:09.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>Redis 作为一个高性能的内存数据库，其线程模型设计一直是开发者关注的焦点。从最初的单线程设计到 Redis 6.0 引入多线程，这一演进过程体现了 Redis 在性能优化和架构设计上的深思熟虑。本文将详细介绍 Redis 的线程模型，解析其设计原理和演进历程。</p><h2 id="1-Redis-是单线程的吗？"><a href="#1-Redis-是单线程的吗？" class="headerlink" title="1. Redis 是单线程的吗？"></a>1. Redis 是单线程的吗？</h2><h3 id="1-1-常见误解"><a href="#1-1-常见误解" class="headerlink" title="1.1 常见误解"></a>1.1 常见误解</h3><p>很多人认为 Redis 是单线程的，这种说法并不完全准确。实际上：</p><ul><li>Redis 的核心网络模型在 6.0 版本之前采用单线程模式</li><li>Redis 的其他功能（如持久化、集群数据同步等）一直是多线程的</li><li>Redis 6.0 之后引入了多线程来处理网络 I/O</li></ul><h3 id="1-2-真实的线程模型"><a href="#1-2-真实的线程模型" class="headerlink" title="1.2 真实的线程模型"></a>1.2 真实的线程模型</h3><p>在 Redis 6.0 之前：</p><ul><li>主线程：处理网络 I/O 和命令执行</li><li>后台线程：处理 RDB 持久化、AOF 重写、异步删除等任务</li></ul><h2 id="2-Redis-单线程模式详解"><a href="#2-Redis-单线程模式详解" class="headerlink" title="2. Redis 单线程模式详解"></a>2. Redis 单线程模式详解</h2><h3 id="2-1-设计原理"><a href="#2-1-设计原理" class="headerlink" title="2.1 设计原理"></a>2.1 设计原理</h3><p>Redis 早期采用单线程模型主要基于以下设计原则：</p><ul><li><strong>简单性</strong>：单线程模型更容易维护，不需要考虑复杂的线程同步问题</li><li><strong>避免竞争</strong>：没有多线程的上下文切换和锁竞争开销</li><li><strong>内存操作速度快</strong>：Redis 的性能瓶颈通常不在 CPU，而在内存和网络 I/O</li></ul><h3 id="2-2-实现机制"><a href="#2-2-实现机制" class="headerlink" title="2.2 实现机制"></a>2.2 实现机制</h3><p>Redis 单线程模型的核心实现基于：</p><ul><li><strong>事件循环</strong>：使用 epoll/kqueue 等高效的 I/O 多路复用技术</li><li><strong>非阻塞 I/O</strong>：所有网络 I/O 操作都是非阻塞的</li><li><strong>命令队列</strong>：按顺序执行命令，避免了并发访问的问题</li></ul><h2 id="3-Redis-6-0-之前为什么用单线程？"><a href="#3-Redis-6-0-之前为什么用单线程？" class="headerlink" title="3. Redis 6.0 之前为什么用单线程？"></a>3. Redis 6.0 之前为什么用单线程？</h2><h3 id="3-1-单线程的优势"><a href="#3-1-单线程的优势" class="headerlink" title="3.1 单线程的优势"></a>3.1 单线程的优势</h3><ul><li><strong>简单可维护</strong>：不需要处理复杂的并发控制</li><li><strong>避免同步开销</strong>：没有线程切换和竞争条件</li><li><strong>充分利用 CPU</strong>：单线程模型下 CPU 利用率通常较高</li></ul><h3 id="3-2-性能考虑"><a href="#3-2-性能考虑" class="headerlink" title="3.2 性能考虑"></a>3.2 性能考虑</h3><ul><li>Redis 的性能瓶颈主要在于内存和网络带宽</li><li>单线程模型下，Redis 仍然可以达到很高的性能（10w+ QPS）</li><li>大多数场景下，单线程已经能满足需求</li></ul><h2 id="4-Redis-6-0-为什么引入多线程？"><a href="#4-Redis-6-0-为什么引入多线程？" class="headerlink" title="4. Redis 6.0 为什么引入多线程？"></a>4. Redis 6.0 为什么引入多线程？</h2><h3 id="4-1-引入原因"><a href="#4-1-引入原因" class="headerlink" title="4.1 引入原因"></a>4.1 引入原因</h3><ul><li><strong>网络 I/O 瓶颈</strong>：随着网络带宽的提升，单线程处理网络 I/O 成为性能瓶颈</li><li><strong>多核利用</strong>：现代服务器普遍是多核的，单线程无法充分利用硬件资源</li><li><strong>大数据包处理</strong>：对于大数据包的解析和组装，多线程可以提供更好的性能</li></ul><h3 id="4-2-多线程实现"><a href="#4-2-多线程实现" class="headerlink" title="4.2 多线程实现"></a>4.2 多线程实现</h3><p>Redis 6.0 的多线程实现特点：</p><ul><li><strong>I/O 多线程</strong>：只针对网络 I/O 实现多线程</li><li><strong>命令处理单线程</strong>：核心命令处理仍然是单线程的</li><li><strong>可配置</strong>：多线程特性可以通过配置开启或关闭</li></ul><h3 id="4-3-性能提升"><a href="#4-3-性能提升" class="headerlink" title="4.3 性能提升"></a>4.3 性能提升</h3><p>多线程带来的性能改进：</p><ul><li>在网络 I/O 密集场景下，性能提升显著（提升 30% - 50%）</li><li>对于小数据包，提升效果可能不明显</li><li>在大数据包场景下，性能提升更为明显</li></ul><h2 id="5-最佳实践建议"><a href="#5-最佳实践建议" class="headerlink" title="5. 最佳实践建议"></a>5. 最佳实践建议</h2><h3 id="5-1-版本选择"><a href="#5-1-版本选择" class="headerlink" title="5.1 版本选择"></a>5.1 版本选择</h3><ul><li>如果主要处理小数据包，Redis 6.0 之前的版本足够使用</li><li>如果有大量网络 I/O 或大数据包处理需求，建议使用 Redis 6.0 及以上版本</li></ul><h3 id="5-2-多线程配置"><a href="#5-2-多线程配置" class="headerlink" title="5.2 多线程配置"></a>5.2 多线程配置</h3><ul><li>根据服务器 CPU 核心数合理配置线程数</li><li>建议线程数不要超过 CPU 核心数</li><li>可以通过压测确定最优的线程数配置</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://redis.io/documentation">Redis 官方文档</a></li><li><a href="https://raw.githubusercontent.com/redis/redis/6.0/00-RELEASENOTES">Redis 6.0 Release Notes</a></li></ul><hr><p>希望这篇文章能帮助您更好地理解 Redis 的线程模型及其演进历程。如果您有任何问题，欢迎在评论区讨论！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;Redis 作为一个高性能的内存数据库，其线程模型设计一直是开发者关注的焦点。从最初的单线程设计到 Redis 6.0 引入</summary>
      
    
    
    
    <category term="数据库" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/"/>
    
    
    <category term="数据库" scheme="https://lucky845.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis" scheme="https://lucky845.github.io/tags/Redis/"/>
    
    <category term="性能优化" scheme="https://lucky845.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="线程模型" scheme="https://lucky845.github.io/tags/%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/"/>
    
    <category term="并发处理" scheme="https://lucky845.github.io/tags/%E5%B9%B6%E5%8F%91%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>【Redis】哨兵模式详解与实践</title>
    <link href="https://lucky845.github.io/archives/c55fa584.html"/>
    <id>https://lucky845.github.io/archives/c55fa584.html</id>
    <published>2025-03-01T06:00:00.000Z</published>
    <updated>2025-03-01T09:54:52.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>Redis 是一个高性能的内存数据库，在生产环境中通常需要保证其高可用性。当使用主从复制时，如果主节点发生故障，需要手动将从节点提升为主节点，这个过程繁琐且容易出错。Redis 哨兵（Sentinel）模式提供了自动故障检测和故障转移功能，能够在主节点故障时自动选举新的主节点，保证系统的高可用性。本文将详细介绍 Redis 哨兵模式的工作原理、配置方法及最佳实践。</p><h2 id="1-Redis-哨兵模式基本概念"><a href="#1-Redis-哨兵模式基本概念" class="headerlink" title="1. Redis 哨兵模式基本概念"></a>1. Redis 哨兵模式基本概念</h2><p>Redis 哨兵是 Redis 高可用性解决方案的核心组件，它是一个独立运行的进程，负责监控 Redis 主从实例的健康状态，并在主节点故障时自动进行故障转移。哨兵模式的主要特点包括：</p><ul><li><strong>自动故障检测</strong>：哨兵会定期检查主节点和从节点的健康状态。</li><li><strong>自动故障转移</strong>：当主节点不可用时，哨兵会自动选举一个从节点作为新的主节点。</li><li><strong>客户端通知</strong>：哨兵会通知客户端新主节点的地址，使客户端能够连接到新的主节点。</li><li><strong>配置提供者</strong>：哨兵可以为客户端提供服务发现功能，帮助客户端找到当前的主节点。</li></ul><h2 id="2-哨兵模式的工作原理"><a href="#2-哨兵模式的工作原理" class="headerlink" title="2. 哨兵模式的工作原理"></a>2. 哨兵模式的工作原理</h2><h3 id="2-1-监控（Monitoring）"><a href="#2-1-监控（Monitoring）" class="headerlink" title="2.1 监控（Monitoring）"></a>2.1 监控（Monitoring）</h3><p>哨兵会定期向主节点和从节点发送 PING 命令，检查它们是否正常运行。如果在指定的时间内没有收到有效回复，哨兵会将该实例标记为「主观下线」（Subjectively Down，简称 SDOWN）。</p><h3 id="2-2-通知（Notification）"><a href="#2-2-通知（Notification）" class="headerlink" title="2.2 通知（Notification）"></a>2.2 通知（Notification）</h3><p>当哨兵发现主节点或从节点处于「主观下线」状态时，会通过发布/订阅机制通知其他哨兵。如果多个哨兵都认为主节点已经下线，那么主节点会被标记为「客观下线」（Objectively Down，简称 ODOWN）。</p><h3 id="2-3-故障转移（Failover）"><a href="#2-3-故障转移（Failover）" class="headerlink" title="2.3 故障转移（Failover）"></a>2.3 故障转移（Failover）</h3><p>当主节点被标记为「客观下线」后，哨兵会进行以下操作：</p><ol><li><strong>选举领导者</strong>：哨兵集群会选举一个领导者来执行故障转移操作。</li><li><strong>选择新的主节点</strong>：领导者会从从节点中选择一个最适合的节点作为新的主节点。</li><li><strong>配置从节点</strong>：将其他从节点重新配置为新主节点的从节点。</li><li><strong>通知客户端</strong>：通知客户端新主节点的地址。</li></ol><h2 id="3-哨兵模式的配置"><a href="#3-哨兵模式的配置" class="headerlink" title="3. 哨兵模式的配置"></a>3. 哨兵模式的配置</h2><h3 id="3-1-环境准备"><a href="#3-1-环境准备" class="headerlink" title="3.1 环境准备"></a>3.1 环境准备</h3><p>在配置哨兵模式之前，您需要准备以下环境：</p><ul><li>一个 Redis 主节点</li><li>至少一个 Redis 从节点（推荐至少两个）</li><li>至少三个哨兵实例（推荐奇数个）</li></ul><h3 id="3-2-配置主从复制"><a href="#3-2-配置主从复制" class="headerlink" title="3.2 配置主从复制"></a>3.2 配置主从复制</h3><p>首先，需要配置 Redis 的主从复制。在从节点的配置文件中添加以下配置：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># 配置主节点的地址和端口replicaof 192.168.1.100 6379# 如果主节点设置了密码，需要配置密码masterauth your_master_password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-配置哨兵"><a href="#3-3-配置哨兵" class="headerlink" title="3.3 配置哨兵"></a>3.3 配置哨兵</h3><p>创建一个 <code>sentinel.conf</code> 配置文件，添加以下配置：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># 监听端口port 26379# 指定工作目录dir /tmp# 监控的主节点# sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;port&gt; &lt;quorum&gt;sentinel monitor mymaster 192.168.1.100 6379 2# 主节点或从节点多久无响应视为下线（毫秒）sentinel down-after-milliseconds mymaster 30000# 故障转移超时时间（毫秒）sentinel failover-timeout mymaster 180000# 同时进行故障转移的从节点数量sentinel parallel-syncs mymaster 1# 如果主节点有密码，需要配置密码sentinel auth-pass mymaster your_master_password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置说明：</p><ul><li><code>sentinel monitor mymaster 192.168.1.100 6379 2</code>：监控名为 mymaster 的主节点，IP 为 192.168.1.100，端口为 6379，当至少有 2 个哨兵认为主节点不可用时，才会进行故障转移。</li><li><code>sentinel down-after-milliseconds mymaster 30000</code>：如果主节点在 30 秒内没有响应，则认为主节点已下线。</li><li><code>sentinel failover-timeout mymaster 180000</code>：故障转移的超时时间为 180 秒。</li><li><code>sentinel parallel-syncs mymaster 1</code>：在故障转移期间，每次只能有 1 个从节点进行同步。</li></ul><h3 id="3-4-启动哨兵"><a href="#3-4-启动哨兵" class="headerlink" title="3.4 启动哨兵"></a>3.4 启动哨兵</h3><p>使用以下命令启动哨兵：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-sentinel /path/to/sentinel.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-server /path/to/sentinel.conf <span class="token parameter variable">--sentinel</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-哨兵模式的实际部署"><a href="#4-哨兵模式的实际部署" class="headerlink" title="4. 哨兵模式的实际部署"></a>4. 哨兵模式的实际部署</h2><h3 id="4-1-Docker-环境下的部署"><a href="#4-1-Docker-环境下的部署" class="headerlink" title="4.1 Docker 环境下的部署"></a>4.1 Docker 环境下的部署</h3><p>在 Docker 环境中部署 Redis 哨兵模式，可以使用 Docker Compose 来简化配置。以下是一个示例的 <code>docker-compose.yml</code> 文件：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">redis-master</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>master    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"6379:6379"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./redis<span class="token punctuation">-</span>master.conf<span class="token punctuation">:</span>/usr/local/etc/redis/redis.conf    <span class="token key atrule">command</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>server /usr/local/etc/redis/redis.conf  <span class="token key atrule">redis-slave-1</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>slave<span class="token punctuation">-</span><span class="token number">1</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"6380:6379"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./redis<span class="token punctuation">-</span>slave<span class="token punctuation">-</span>1.conf<span class="token punctuation">:</span>/usr/local/etc/redis/redis.conf    <span class="token key atrule">command</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>server /usr/local/etc/redis/redis.conf    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> redis<span class="token punctuation">-</span>master  <span class="token key atrule">redis-slave-2</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>slave<span class="token punctuation">-</span><span class="token number">2</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"6381:6379"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./redis<span class="token punctuation">-</span>slave<span class="token punctuation">-</span>2.conf<span class="token punctuation">:</span>/usr/local/etc/redis/redis.conf    <span class="token key atrule">command</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>server /usr/local/etc/redis/redis.conf    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> redis<span class="token punctuation">-</span>master  <span class="token key atrule">redis-sentinel-1</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>sentinel<span class="token punctuation">-</span><span class="token number">1</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"26379:26379"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./sentinel<span class="token punctuation">-</span>1.conf<span class="token punctuation">:</span>/usr/local/etc/redis/sentinel.conf    <span class="token key atrule">command</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>sentinel /usr/local/etc/redis/sentinel.conf    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> redis<span class="token punctuation">-</span>master      <span class="token punctuation">-</span> redis<span class="token punctuation">-</span>slave<span class="token punctuation">-</span><span class="token number">1</span>      <span class="token punctuation">-</span> redis<span class="token punctuation">-</span>slave<span class="token punctuation">-</span><span class="token number">2</span>  <span class="token key atrule">redis-sentinel-2</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>sentinel<span class="token punctuation">-</span><span class="token number">2</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"26380:26379"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./sentinel<span class="token punctuation">-</span>2.conf<span class="token punctuation">:</span>/usr/local/etc/redis/sentinel.conf    <span class="token key atrule">command</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>sentinel /usr/local/etc/redis/sentinel.conf    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> redis<span class="token punctuation">-</span>master      <span class="token punctuation">-</span> redis<span class="token punctuation">-</span>slave<span class="token punctuation">-</span><span class="token number">1</span>      <span class="token punctuation">-</span> redis<span class="token punctuation">-</span>slave<span class="token punctuation">-</span><span class="token number">2</span>  <span class="token key atrule">redis-sentinel-3</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>sentinel<span class="token punctuation">-</span><span class="token number">3</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"26381:26379"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./sentinel<span class="token punctuation">-</span>3.conf<span class="token punctuation">:</span>/usr/local/etc/redis/sentinel.conf    <span class="token key atrule">command</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>sentinel /usr/local/etc/redis/sentinel.conf    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> redis<span class="token punctuation">-</span>master      <span class="token punctuation">-</span> redis<span class="token punctuation">-</span>slave<span class="token punctuation">-</span><span class="token number">1</span>      <span class="token punctuation">-</span> redis<span class="token punctuation">-</span>slave<span class="token punctuation">-</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-客户端连接"><a href="#4-2-客户端连接" class="headerlink" title="4.2 客户端连接"></a>4.2 客户端连接</h3><p>在 Java 应用中使用 Jedis 连接 Redis 哨兵模式的示例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">JedisSentinelPool</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisSentinelExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 配置哨兵信息</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> sentinels <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sentinels<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"192.168.1.100:26379"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sentinels<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"192.168.1.101:26379"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sentinels<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"192.168.1.102:26379"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 创建哨兵连接池</span>        <span class="token class-name">JedisSentinelPool</span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisSentinelPool</span><span class="token punctuation">(</span><span class="token string">"mymaster"</span><span class="token punctuation">,</span> sentinels<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 获取 Jedis 实例</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 执行操作</span>            jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> value <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment">// 关闭连接池</span>            pool<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-哨兵模式的最佳实践"><a href="#5-哨兵模式的最佳实践" class="headerlink" title="5. 哨兵模式的最佳实践"></a>5. 哨兵模式的最佳实践</h2><h3 id="5-1-哨兵数量"><a href="#5-1-哨兵数量" class="headerlink" title="5.1 哨兵数量"></a>5.1 哨兵数量</h3><p>建议至少部署 3 个哨兵实例，并且使用奇数个哨兵，以便在选举过程中避免平票情况。哨兵实例应该部署在不同的物理机器上，以提高可用性。</p><h3 id="5-2-配置优化"><a href="#5-2-配置优化" class="headerlink" title="5.2 配置优化"></a>5.2 配置优化</h3><ul><li><strong>合理设置 down-after-milliseconds</strong>：根据网络环境和业务需求，设置合适的主观下线时间。</li><li><strong>调整 parallel-syncs</strong>：如果从节点较多，可以适当增加 parallel-syncs 的值，加快故障转移速度。</li><li><strong>配置 notification-script</strong>：可以配置通知脚本，在故障转移时发送通知。</li></ul><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">sentinel notification-script mymaster /path/to/notification.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-3-监控与维护"><a href="#5-3-监控与维护" class="headerlink" title="5.3 监控与维护"></a>5.3 监控与维护</h3><ul><li>定期检查哨兵日志，了解哨兵的运行状态。</li><li>使用 Redis 的 INFO 命令监控主从复制的状态。</li><li>定期进行故障演练，确保哨兵能够正常进行故障转移。</li></ul><h2 id="6-哨兵模式与集群模式的比较"><a href="#6-哨兵模式与集群模式的比较" class="headerlink" title="6. 哨兵模式与集群模式的比较"></a>6. 哨兵模式与集群模式的比较</h2><table><thead><tr><th>特性</th><th>哨兵模式</th><th>集群模式</th></tr></thead><tbody><tr><td>数据分片</td><td>不支持</td><td>支持</td></tr><tr><td>自动故障转移</td><td>支持</td><td>支持</td></tr><tr><td>扩展性</td><td>有限</td><td>高</td></tr><tr><td>配置复杂度</td><td>中等</td><td>高</td></tr><tr><td>适用场景</td><td>数据量较小，主要需要高可用性</td><td>数据量大，需要水平扩展</td></tr></tbody></table><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://redis.io/topics/sentinel">Redis Sentinel Documentation</a></li><li><a href="https://redis.io/documentation">Redis 官方文档</a></li><li><a href="https://redis.io/topics/high-availability">Redis 高可用解决方案</a></li></ul><hr><p>希望这篇文章能帮助您更好地理解和配置 Redis 哨兵模式。如果您有任何问题，欢迎在评论区讨论！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;Redis 是一个高性能的内存数据库，在生产环境中通常需要保证其高可用性。当使用主从复制时，如果主节点发生故障，需要手动将从</summary>
      
    
    
    
    <category term="数据库" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/"/>
    
    
    <category term="数据库" scheme="https://lucky845.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis" scheme="https://lucky845.github.io/tags/Redis/"/>
    
    <category term="分布式系统" scheme="https://lucky845.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="哨兵模式" scheme="https://lucky845.github.io/tags/%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="高可用" scheme="https://lucky845.github.io/tags/%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>【Docker】部署RocketMQ完全指南</title>
    <link href="https://lucky845.github.io/archives/d55fa599.html"/>
    <id>https://lucky845.github.io/archives/d55fa599.html</id>
    <published>2025-02-28T09:00:00.000Z</published>
    <updated>2025-02-28T12:52:46.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>RocketMQ 是阿里巴巴开源的分布式消息中间件，具有高吞吐量、低延迟、高可靠性等特点，广泛应用于大规模分布式系统中的消息传递和处理。传统部署 RocketMQ 需要处理复杂的依赖关系和配置，而使用 Docker 可以大幅简化这一过程。本文将详细介绍如何使用 Docker 部署 RocketMQ，包括单节点部署和集群部署方案。</p><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><h3 id="1-1-系统要求"><a href="#1-1-系统要求" class="headerlink" title="1.1 系统要求"></a>1.1 系统要求</h3><ul><li>Docker Engine 19.03+</li><li>Docker Compose 1.25+（可选，用于多容器编排）</li><li>至少 4GB 可用内存（生产环境建议 8GB+）</li><li>足够的磁盘空间（建议 20GB+）</li></ul><h3 id="1-2-RocketMQ-组件介绍"><a href="#1-2-RocketMQ-组件介绍" class="headerlink" title="1.2 RocketMQ 组件介绍"></a>1.2 RocketMQ 组件介绍</h3><p>RocketMQ 主要包含以下几个组件：</p><ul><li><strong>NameServer</strong>：注册中心，存储 Broker 的路由信息</li><li><strong>Broker</strong>：消息存储和转发服务器</li><li><strong>Producer</strong>：消息生产者，负责发送消息</li><li><strong>Consumer</strong>：消息消费者，负责接收和处理消息</li><li><strong>Dashboard</strong>：可视化管理控制台（可选）</li></ul><h2 id="2-单节点部署"><a href="#2-单节点部署" class="headerlink" title="2. 单节点部署"></a>2. 单节点部署</h2><h3 id="2-1-使用-Docker-命令部署-RocketMQ"><a href="#2-1-使用-Docker-命令部署-RocketMQ" class="headerlink" title="2.1 使用 Docker 命令部署 RocketMQ"></a>2.1 使用 Docker 命令部署 RocketMQ</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建数据目录</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/rocketmq/namesrv/logs<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/rocketmq/namesrv/store<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/rocketmq/broker/logs<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/rocketmq/broker/store<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/rocketmq/conf<span class="token comment"># 创建配置文件</span><span class="token function">cat</span> <span class="token operator">&gt;</span> /data/rocketmq/conf/broker.conf <span class="token operator">&lt;&lt;</span> <span class="token string">EOFbrokerClusterName = DefaultClusterbrokerName = broker-abrokerId = 0deleteWhen = 04fileReservedTime = 48brokerRole = ASYNC_MASTERflushDiskType = ASYNC_FLUSH# 设置为当前主机IP，不要使用localhost或127.0.0.1brokerIP1 = 宿主机IP地址EOF</span><span class="token comment"># 运行 NameServer</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--name</span> rmqnamesrv <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">9876</span>:9876 <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /data/rocketmq/namesrv/logs:/root/logs <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /data/rocketmq/namesrv/store:/root/store <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token string">"MAX_HEAP_SIZE=256M"</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token string">"JAVA_OPT_EXT=-Xms128m -Xmx128m -Xmn64m"</span> <span class="token punctuation">\</span>  apache/rocketmq:5.1.0 <span class="token punctuation">\</span>  <span class="token function">sh</span> mqnamesrv<span class="token comment"># 运行 Broker</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--name</span> rmqbroker <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">10909</span>:10909 <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">10911</span>:10911 <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">10912</span>:10912 <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /data/rocketmq/broker/logs:/root/logs <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /data/rocketmq/broker/store:/root/store <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /data/rocketmq/conf/broker.conf:/opt/rocketmq/conf/broker.conf <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token string">"NAMESRV_ADDR=rmqnamesrv:9876"</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token string">"MAX_HEAP_SIZE=512M"</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token string">"JAVA_OPT_EXT=-Xms256m -Xmx256m -Xmn128m"</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--link</span> rmqnamesrv:rmqnamesrv <span class="token punctuation">\</span>  apache/rocketmq:5.1.0 <span class="token punctuation">\</span>  <span class="token function">sh</span> mqbroker <span class="token parameter variable">-c</span> /opt/rocketmq/conf/broker.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明：</p><ul><li><code>-p 9876:9876</code>：NameServer 端口</li><li><code>-p 10909:10909</code>、<code>-p 10911:10911</code>、<code>-p 10912:10912</code>：Broker 端口</li><li><code>-v /data/rocketmq/namesrv/logs:/root/logs</code>：日志持久化</li><li><code>-v /data/rocketmq/namesrv/store:/root/store</code>：数据持久化</li><li><code>-e "MAX_HEAP_SIZE=256M"</code>：设置最大堆内存</li><li><code>-e "JAVA_OPT_EXT=-Xms128m -Xmx128m -Xmn64m"</code>：JVM 参数</li></ul><h3 id="2-2-验证部署"><a href="#2-2-验证部署" class="headerlink" title="2.2 验证部署"></a>2.2 验证部署</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 检查容器是否正常运行</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token operator">|</span> <span class="token function">grep</span> rocketmq<span class="token comment"># 查看 NameServer 日志</span><span class="token function">docker</span> logs rmqnamesrv<span class="token comment"># 查看 Broker 日志</span><span class="token function">docker</span> logs rmqbroker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-使用-Docker-Compose-部署"><a href="#3-使用-Docker-Compose-部署" class="headerlink" title="3. 使用 Docker Compose 部署"></a>3. 使用 Docker Compose 部署</h2><h3 id="3-1-创建-docker-compose-yml"><a href="#3-1-创建-docker-compose-yml" class="headerlink" title="3.1 创建 docker-compose.yml"></a>3.1 创建 docker-compose.yml</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">namesrv</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> apache/rocketmq<span class="token punctuation">:</span>5.1.0    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rmqnamesrv    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 9876<span class="token punctuation">:</span><span class="token number">9876</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./data/namesrv/logs<span class="token punctuation">:</span>/root/logs      <span class="token punctuation">-</span> ./data/namesrv/store<span class="token punctuation">:</span>/root/store    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> MAX_HEAP_SIZE=256M      <span class="token punctuation">-</span> JAVA_OPT_EXT=<span class="token punctuation">-</span>Xms128m <span class="token punctuation">-</span>Xmx128m <span class="token punctuation">-</span>Xmn64m    <span class="token key atrule">command</span><span class="token punctuation">:</span> sh mqnamesrv  <span class="token key atrule">broker</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> apache/rocketmq<span class="token punctuation">:</span>5.1.0    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rmqbroker    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 10909<span class="token punctuation">:</span><span class="token number">10909</span>      <span class="token punctuation">-</span> 10911<span class="token punctuation">:</span><span class="token number">10911</span>      <span class="token punctuation">-</span> 10912<span class="token punctuation">:</span><span class="token number">10912</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./data/broker/logs<span class="token punctuation">:</span>/root/logs      <span class="token punctuation">-</span> ./data/broker/store<span class="token punctuation">:</span>/root/store      <span class="token punctuation">-</span> ./conf/broker.conf<span class="token punctuation">:</span>/opt/rocketmq/conf/broker.conf    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> NAMESRV_ADDR=namesrv<span class="token punctuation">:</span><span class="token number">9876</span>      <span class="token punctuation">-</span> MAX_HEAP_SIZE=512M      <span class="token punctuation">-</span> JAVA_OPT_EXT=<span class="token punctuation">-</span>Xms256m <span class="token punctuation">-</span>Xmx256m <span class="token punctuation">-</span>Xmn128m    <span class="token key atrule">command</span><span class="token punctuation">:</span> sh mqbroker <span class="token punctuation">-</span>c /opt/rocketmq/conf/broker.conf    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> namesrv  <span class="token key atrule">dashboard</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> apacherocketmq/rocketmq<span class="token punctuation">-</span>dashboard<span class="token punctuation">:</span>1.0.0    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rmqdashboard    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 8080<span class="token punctuation">:</span><span class="token number">8080</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> JAVA_OPTS=<span class="token punctuation">-</span>Drocketmq.namesrv.addr=namesrv<span class="token punctuation">:</span><span class="token number">9876</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> namesrv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-创建-broker-conf-配置文件"><a href="#3-2-创建-broker-conf-配置文件" class="headerlink" title="3.2 创建 broker.conf 配置文件"></a>3.2 创建 broker.conf 配置文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> conf<span class="token function">cat</span> <span class="token operator">&gt;</span> conf/broker.conf <span class="token operator">&lt;&lt;</span> <span class="token string">EOFbrokerClusterName = DefaultClusterbrokerName = broker-abrokerId = 0deleteWhen = 04fileReservedTime = 48brokerRole = ASYNC_MASTERflushDiskType = ASYNC_FLUSH# 设置为当前主机IP，不要使用localhost或127.0.0.1brokerIP1 = 宿主机IP地址EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-启动服务"><a href="#3-3-启动服务" class="headerlink" title="3.3 启动服务"></a>3.3 启动服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-4-访问控制台"><a href="#3-4-访问控制台" class="headerlink" title="3.4 访问控制台"></a>3.4 访问控制台</h3><p>在浏览器中打开 <code>http://localhost:8080</code>，即可访问 RocketMQ Dashboard。</p><h2 id="4-RocketMQ-集群部署"><a href="#4-RocketMQ-集群部署" class="headerlink" title="4. RocketMQ 集群部署"></a>4. RocketMQ 集群部署</h2><h3 id="4-1-创建集群的-docker-compose-yml"><a href="#4-1-创建集群的-docker-compose-yml" class="headerlink" title="4.1 创建集群的 docker-compose.yml"></a>4.1 创建集群的 docker-compose.yml</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">namesrv1</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> apache/rocketmq<span class="token punctuation">:</span>5.1.0    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rmqnamesrv1    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 9876<span class="token punctuation">:</span><span class="token number">9876</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./data/namesrv1/logs<span class="token punctuation">:</span>/root/logs      <span class="token punctuation">-</span> ./data/namesrv1/store<span class="token punctuation">:</span>/root/store    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> MAX_HEAP_SIZE=256M      <span class="token punctuation">-</span> JAVA_OPT_EXT=<span class="token punctuation">-</span>Xms128m <span class="token punctuation">-</span>Xmx128m <span class="token punctuation">-</span>Xmn64m    <span class="token key atrule">command</span><span class="token punctuation">:</span> sh mqnamesrv  <span class="token key atrule">namesrv2</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> apache/rocketmq<span class="token punctuation">:</span>5.1.0    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rmqnamesrv2    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 9877<span class="token punctuation">:</span><span class="token number">9876</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./data/namesrv2/logs<span class="token punctuation">:</span>/root/logs      <span class="token punctuation">-</span> ./data/namesrv2/store<span class="token punctuation">:</span>/root/store    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> MAX_HEAP_SIZE=256M      <span class="token punctuation">-</span> JAVA_OPT_EXT=<span class="token punctuation">-</span>Xms128m <span class="token punctuation">-</span>Xmx128m <span class="token punctuation">-</span>Xmn64m    <span class="token key atrule">command</span><span class="token punctuation">:</span> sh mqnamesrv  <span class="token key atrule">broker-a-master</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> apache/rocketmq<span class="token punctuation">:</span>5.1.0    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rmqbroker<span class="token punctuation">-</span>a<span class="token punctuation">-</span>master    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 10909<span class="token punctuation">:</span><span class="token number">10909</span>      <span class="token punctuation">-</span> 10911<span class="token punctuation">:</span><span class="token number">10911</span>      <span class="token punctuation">-</span> 10912<span class="token punctuation">:</span><span class="token number">10912</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./data/broker<span class="token punctuation">-</span>a<span class="token punctuation">-</span>master/logs<span class="token punctuation">:</span>/root/logs      <span class="token punctuation">-</span> ./data/broker<span class="token punctuation">-</span>a<span class="token punctuation">-</span>master/store<span class="token punctuation">:</span>/root/store      <span class="token punctuation">-</span> ./conf/broker<span class="token punctuation">-</span>a<span class="token punctuation">-</span>master.conf<span class="token punctuation">:</span>/opt/rocketmq/conf/broker.conf    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> NAMESRV_ADDR=namesrv1<span class="token punctuation">:</span>9876;namesrv2<span class="token punctuation">:</span><span class="token number">9876</span>      <span class="token punctuation">-</span> MAX_HEAP_SIZE=512M      <span class="token punctuation">-</span> JAVA_OPT_EXT=<span class="token punctuation">-</span>Xms256m <span class="token punctuation">-</span>Xmx256m <span class="token punctuation">-</span>Xmn128m    <span class="token key atrule">command</span><span class="token punctuation">:</span> sh mqbroker <span class="token punctuation">-</span>c /opt/rocketmq/conf/broker.conf    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> namesrv1      <span class="token punctuation">-</span> namesrv2  <span class="token key atrule">broker-a-slave</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> apache/rocketmq<span class="token punctuation">:</span>5.1.0    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rmqbroker<span class="token punctuation">-</span>a<span class="token punctuation">-</span>slave    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 10919<span class="token punctuation">:</span><span class="token number">10909</span>      <span class="token punctuation">-</span> 10921<span class="token punctuation">:</span><span class="token number">10911</span>      <span class="token punctuation">-</span> 10922<span class="token punctuation">:</span><span class="token number">10912</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./data/broker<span class="token punctuation">-</span>a<span class="token punctuation">-</span>slave/logs<span class="token punctuation">:</span>/root/logs      <span class="token punctuation">-</span> ./data/broker<span class="token punctuation">-</span>a<span class="token punctuation">-</span>slave/store<span class="token punctuation">:</span>/root/store      <span class="token punctuation">-</span> ./conf/broker<span class="token punctuation">-</span>a<span class="token punctuation">-</span>slave.conf<span class="token punctuation">:</span>/opt/rocketmq/conf/broker.conf    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> NAMESRV_ADDR=namesrv1<span class="token punctuation">:</span>9876;namesrv2<span class="token punctuation">:</span><span class="token number">9876</span>      <span class="token punctuation">-</span> MAX_HEAP_SIZE=512M      <span class="token punctuation">-</span> JAVA_OPT_EXT=<span class="token punctuation">-</span>Xms256m <span class="token punctuation">-</span>Xmx256m <span class="token punctuation">-</span>Xmn128m    <span class="token key atrule">command</span><span class="token punctuation">:</span> sh mqbroker <span class="token punctuation">-</span>c /opt/rocketmq/conf/broker.conf    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> namesrv1      <span class="token punctuation">-</span> namesrv2      <span class="token punctuation">-</span> broker<span class="token punctuation">-</span>a<span class="token punctuation">-</span>master  <span class="token key atrule">broker-b-master</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> apache/rocketmq<span class="token punctuation">:</span>5.1.0    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rmqbroker<span class="token punctuation">-</span>b<span class="token punctuation">-</span>master    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 10929<span class="token punctuation">:</span><span class="token number">10909</span>      <span class="token punctuation">-</span> 10931<span class="token punctuation">:</span><span class="token number">10911</span>      <span class="token punctuation">-</span> 10932<span class="token punctuation">:</span><span class="token number">10912</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./data/broker<span class="token punctuation">-</span>b<span class="token punctuation">-</span>master/logs<span class="token punctuation">:</span>/root/logs      <span class="token punctuation">-</span> ./data/broker<span class="token punctuation">-</span>b<span class="token punctuation">-</span>master/store<span class="token punctuation">:</span>/root/store      <span class="token punctuation">-</span> ./conf/broker<span class="token punctuation">-</span>b<span class="token punctuation">-</span>master.conf<span class="token punctuation">:</span>/opt/rocketmq/conf/broker.conf    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> NAMESRV_ADDR=namesrv1<span class="token punctuation">:</span>9876;namesrv2<span class="token punctuation">:</span><span class="token number">9876</span>      <span class="token punctuation">-</span> MAX_HEAP_SIZE=512M      <span class="token punctuation">-</span> JAVA_OPT_EXT=<span class="token punctuation">-</span>Xms256m <span class="token punctuation">-</span>Xmx256m <span class="token punctuation">-</span>Xmn128m    <span class="token key atrule">command</span><span class="token punctuation">:</span> sh mqbroker <span class="token punctuation">-</span>c /opt/rocketmq/conf/broker.conf    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> namesrv1      <span class="token punctuation">-</span> namesrv2  <span class="token key atrule">broker-b-slave</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> apache/rocketmq<span class="token punctuation">:</span>5.1.0    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rmqbroker<span class="token punctuation">-</span>b<span class="token punctuation">-</span>slave    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 10939<span class="token punctuation">:</span><span class="token number">10909</span>      <span class="token punctuation">-</span> 10941<span class="token punctuation">:</span><span class="token number">10911</span>      <span class="token punctuation">-</span> 10942<span class="token punctuation">:</span><span class="token number">10912</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./data/broker<span class="token punctuation">-</span>b<span class="token punctuation">-</span>slave/logs<span class="token punctuation">:</span>/root/logs      <span class="token punctuation">-</span> ./data/broker<span class="token punctuation">-</span>b<span class="token punctuation">-</span>slave/store<span class="token punctuation">:</span>/root/store      <span class="token punctuation">-</span> ./conf/broker<span class="token punctuation">-</span>b<span class="token punctuation">-</span>slave.conf<span class="token punctuation">:</span>/opt/rocketmq/conf/broker.conf    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> NAMESRV_ADDR=namesrv1<span class="token punctuation">:</span>9876;namesrv2<span class="token punctuation">:</span><span class="token number">9876</span>      <span class="token punctuation">-</span> MAX_HEAP_SIZE=512M      <span class="token punctuation">-</span> JAVA_OPT_EXT=<span class="token punctuation">-</span>Xms256m <span class="token punctuation">-</span>Xmx256m <span class="token punctuation">-</span>Xmn128m    <span class="token key atrule">command</span><span class="token punctuation">:</span> sh mqbroker <span class="token punctuation">-</span>c /opt/rocketmq/conf/broker.conf    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> namesrv1      <span class="token punctuation">-</span> namesrv2      <span class="token punctuation">-</span> broker<span class="token punctuation">-</span>b<span class="token punctuation">-</span>master  <span class="token key atrule">dashboard</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> apacherocketmq/rocketmq<span class="token punctuation">-</span>dashboard<span class="token punctuation">:</span>1.0.0    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rmqdashboard    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 8080<span class="token punctuation">:</span><span class="token number">8080</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> JAVA_OPTS=<span class="token punctuation">-</span>Drocketmq.namesrv.addr=namesrv1<span class="token punctuation">:</span>9876;namesrv2<span class="token punctuation">:</span><span class="token number">9876</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> namesrv1      <span class="token punctuation">-</span> namesrv2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-创建-Broker-配置文件"><a href="#4-2-创建-Broker-配置文件" class="headerlink" title="4.2 创建 Broker 配置文件"></a>4.2 创建 Broker 配置文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># broker-a-master.conf</span><span class="token function">cat</span> <span class="token operator">&gt;</span> conf/broker-a-master.conf <span class="token operator">&lt;&lt;</span> <span class="token string">EOFbrokerClusterName = DefaultClusterbrokerName = broker-abrokerId = 0deleteWhen = 04fileReservedTime = 48brokerRole = ASYNC_MASTERflushDiskType = ASYNC_FLUSH# 设置为当前主机IP，不要使用localhost或127.0.0.1brokerIP1 = 宿主机IP地址EOF</span><span class="token comment"># broker-a-slave.conf</span><span class="token function">cat</span> <span class="token operator">&gt;</span> conf/broker-a-slave.conf <span class="token operator">&lt;&lt;</span> <span class="token string">EOFbrokerClusterName = DefaultClusterbrokerName = broker-abrokerId = 1deleteWhen = 04fileReservedTime = 48brokerRole = SLAVEflushDiskType = ASYNC_FLUSH# 设置为当前主机IP，不要使用localhost或127.0.0.1brokerIP1 = 宿主机IP地址# 指定主节点地址brokerMasterAddr = 宿主机IP地址:10911EOF</span><span class="token comment"># broker-b-master.conf</span><span class="token function">cat</span> <span class="token operator">&gt;</span> conf/broker-b-master.conf <span class="token operator">&lt;&lt;</span> <span class="token string">EOFbrokerClusterName = DefaultClusterbrokerName = broker-bbrokerId = 0deleteWhen = 04fileReservedTime = 48brokerRole = ASYNC_MASTERflushDiskType = ASYNC_FLUSH# 设置为当前主机IP，不要使用localhost或127.0.0.1brokerIP1 = 宿主机IP地址EOF</span><span class="token comment"># broker-b-slave.conf</span><span class="token function">cat</span> <span class="token operator">&gt;</span> conf/broker-b-slave.conf <span class="token operator">&lt;&lt;</span> <span class="token string">EOFbrokerClusterName = DefaultClusterbrokerName = broker-bbrokerId = 1deleteWhen = 04fileReservedTime = 48brokerRole = SLAVEflushDiskType = ASYNC_FLUSH# 设置为当前主机IP，不要使用localhost或127.0.0.1brokerIP1 = 宿主机IP地址# 指定主节点地址brokerMasterAddr = 宿主机IP地址:10931EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-启动集群"><a href="#4-3-启动集群" class="headerlink" title="4.3 启动集群"></a>4.3 启动集群</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建必要的数据目录</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> data/namesrv1/logs data/namesrv1/store <span class="token punctuation">\</span>         data/namesrv2/logs data/namesrv2/store <span class="token punctuation">\</span>         data/broker-a-master/logs data/broker-a-master/store <span class="token punctuation">\</span>         data/broker-a-slave/logs data/broker-a-slave/store <span class="token punctuation">\</span>         data/broker-b-master/logs data/broker-b-master/store <span class="token punctuation">\</span>         data/broker-b-slave/logs data/broker-b-slave/store<span class="token comment"># 启动集群</span><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-验证集群部署"><a href="#4-4-验证集群部署" class="headerlink" title="4.4 验证集群部署"></a>4.4 验证集群部署</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 检查所有容器是否正常运行</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token operator">|</span> <span class="token function">grep</span> rmq<span class="token comment"># 查看各节点日志</span><span class="token function">docker</span> logs rmqnamesrv1<span class="token function">docker</span> logs rmqbroker-a-master<span class="token function">docker</span> logs rmqbroker-a-slave<span class="token comment"># 使用Dashboard验证集群状态</span><span class="token comment"># 访问 http://localhost:8080</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-常见问题及解决方案"><a href="#5-常见问题及解决方案" class="headerlink" title="5. 常见问题及解决方案"></a>5. 常见问题及解决方案</h2><h3 id="5-1-Broker-无法连接到-NameServer"><a href="#5-1-Broker-无法连接到-NameServer" class="headerlink" title="5.1 Broker 无法连接到 NameServer"></a>5.1 Broker 无法连接到 NameServer</h3><p><strong>症状</strong>：Broker 容器启动后立即退出，或日志中显示无法连接到 NameServer。</p><p><strong>解决方案</strong>：</p><ol><li>检查网络连接，确保容器间可以通信</li><li>检查 <code>NAMESRV_ADDR</code> 环境变量是否正确设置</li><li>确保 NameServer 已经成功启动</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 检查网络连接</span><span class="token function">docker</span> network inspect bridge<span class="token comment"># 手动测试连接</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> rmqbroker <span class="token function">ping</span> rmqnamesrv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-brokerIP1-配置错误"><a href="#5-2-brokerIP1-配置错误" class="headerlink" title="5.2 brokerIP1 配置错误"></a>5.2 brokerIP1 配置错误</h3><p><strong>症状</strong>：Producer 或 Consumer 无法连接到 Broker，或连接后无法正常发送/接收消息。</p><p><strong>解决方案</strong>：</p><ol><li>确保 broker.conf 中的 brokerIP1 设置为宿主机的实际 IP 地址，而不是 127.0.0.1 或 localhost</li><li>修改配置后需要重启 Broker 容器</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 获取宿主机IP地址</span><span class="token function">ifconfig</span> <span class="token operator">|</span> <span class="token function">grep</span> inet<span class="token comment"># 更新配置并重启</span><span class="token function">docker</span> restart rmqbroker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-内存不足"><a href="#5-3-内存不足" class="headerlink" title="5.3 内存不足"></a>5.3 内存不足</h3><p><strong>症状</strong>：容器频繁重启，日志中出现 OutOfMemoryError。</p><p><strong>解决方案</strong>：</p><ol><li>调整 JVM 内存参数</li><li>增加宿主机可用内存</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 调整JVM参数示例</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--name</span> rmqbroker <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token string">"MAX_HEAP_SIZE=1G"</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token string">"JAVA_OPT_EXT=-Xms512m -Xmx512m -Xmn256m"</span> <span class="token punctuation">\</span>  <span class="token punctuation">..</span>. 其他参数 <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-性能调优"><a href="#6-性能调优" class="headerlink" title="6. 性能调优"></a>6. 性能调优</h2><h3 id="6-1-JVM-参数优化"><a href="#6-1-JVM-参数优化" class="headerlink" title="6.1 JVM 参数优化"></a>6.1 JVM 参数优化</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 生产环境推荐JVM参数</span><span class="token parameter variable">-Xms4g</span> <span class="token parameter variable">-Xmx4g</span> <span class="token parameter variable">-Xmn2g</span> <span class="token parameter variable">-XX:+UseG1GC</span> <span class="token parameter variable">-XX:G1HeapRegionSize</span><span class="token operator">=</span>16m <span class="token punctuation">\</span><span class="token parameter variable">-XX:G1ReservePercent</span><span class="token operator">=</span><span class="token number">25</span> <span class="token parameter variable">-XX:InitiatingHeapOccupancyPercent</span><span class="token operator">=</span><span class="token number">30</span> <span class="token punctuation">\</span><span class="token parameter variable">-XX:SoftRefLRUPolicyMSPerMB</span><span class="token operator">=</span><span class="token number">0</span> <span class="token parameter variable">-XX:SurvivorRatio</span><span class="token operator">=</span><span class="token number">8</span> <span class="token punctuation">\</span><span class="token parameter variable">-XX:MaxGCPauseMillis</span><span class="token operator">=</span><span class="token number">200</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-系统参数优化"><a href="#6-2-系统参数优化" class="headerlink" title="6.2 系统参数优化"></a>6.2 系统参数优化</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在宿主机上设置以下系统参数</span><span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">vm.max_map_count</span><span class="token operator">=</span><span class="token number">655360</span><span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">vm.swappiness</span><span class="token operator">=</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-3-Broker-参数优化"><a href="#6-3-Broker-参数优化" class="headerlink" title="6.3 Broker 参数优化"></a>6.3 Broker 参数优化</h3><pre class="line-numbers language-none"><code class="language-none"># broker.conf 性能优化参数flushDiskType = ASYNC_FLUSH  # 异步刷盘提高性能sendMessageThreadPoolNums = 16  # 发送消息线程池大小pullMessageThreadPoolNums = 16  # 拉取消息线程池大小processReplyMessageThreadPoolNums = 16  # 处理回复消息线程池大小<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-生产环境最佳实践"><a href="#7-生产环境最佳实践" class="headerlink" title="7. 生产环境最佳实践"></a>7. 生产环境最佳实践</h2><h3 id="7-1-高可用部署"><a href="#7-1-高可用部署" class="headerlink" title="7.1 高可用部署"></a>7.1 高可用部署</h3><ul><li>至少部署 2 个 NameServer 节点</li><li>每个 Broker 至少有一主一从</li><li>跨机器部署主从节点，避免单点故障</li><li>使用 Docker Swarm 或 Kubernetes 进行容器编排</li></ul><h3 id="7-2-监控告警"><a href="#7-2-监控告警" class="headerlink" title="7.2 监控告警"></a>7.2 监控告警</h3><ul><li>集成 Prometheus 和 Grafana 监控 RocketMQ 指标</li><li>设置关键指标告警，如消息堆积、磁盘使用率等</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Prometheus 配置示例</span><span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'rocketmq'</span>    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'rmqdashboard:8080'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3-数据持久化"><a href="#7-3-数据持久化" class="headerlink" title="7.3 数据持久化"></a>7.3 数据持久化</h3><ul><li>使用高性能存储设备存储消息数据</li><li>定期备份重要数据</li><li>考虑使用数据卷或网络存储提高可靠性</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 使用命名卷示例</span><span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> rocketmq<span class="token punctuation">-</span>namesrv<span class="token punctuation">-</span>data<span class="token punctuation">:</span>/root/store  <span class="token punctuation">-</span> rocketmq<span class="token punctuation">-</span>broker<span class="token punctuation">-</span>data<span class="token punctuation">:</span>/root/store<span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token key atrule">rocketmq-namesrv-data</span><span class="token punctuation">:</span>  rocketmq<span class="token punctuation">-</span>broker<span class="token punctuation">-</span>data<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-4-安全配置"><a href="#7-4-安全配置" class="headerlink" title="7.4 安全配置"></a>7.4 安全配置</h3><ul><li>启用 ACL 访问控制</li><li>配置 TLS 加密通信</li><li>限制容器网络访问</li></ul><pre class="line-numbers language-none"><code class="language-none"># broker.conf 安全配置aclEnable=truesslEnable=true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a>8. 总结</h2><p>本文详细介绍了如何使用 Docker 部署 RocketMQ，包括单节点部署和集群部署方案。通过容器化技术，我们可以快速搭建高可用的 RocketMQ 消息中间件服务，简化了传统部署的复杂性。在生产环境中，建议根据实际业务需求进行性能调优和安全配置，确保消息服务的稳定性和可靠性。</p><hr><p>希望这篇文章能帮助您更好地理解和使用Docker部署RocketMQ。如果您有任何问题，欢迎在评论区讨论！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;RocketMQ 是阿里巴巴开源的分布式消息中间件，具有高吞吐量、低延迟、高可靠性等特点，广泛应用于大规模分布式系统中的消息</summary>
      
    
    
    
    <category term="Linux" scheme="https://lucky845.github.io/categories/Linux/"/>
    
    <category term="Docker" scheme="https://lucky845.github.io/categories/Linux/Docker/"/>
    
    
    <category term="消息队列" scheme="https://lucky845.github.io/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    <category term="Docker" scheme="https://lucky845.github.io/tags/Docker/"/>
    
    <category term="容器化" scheme="https://lucky845.github.io/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
    <category term="RocketMQ" scheme="https://lucky845.github.io/tags/RocketMQ/"/>
    
    <category term="分布式系统" scheme="https://lucky845.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>【Docker】PostgreSQL部署与配置指南</title>
    <link href="https://lucky845.github.io/archives/e55fa599.html"/>
    <id>https://lucky845.github.io/archives/e55fa599.html</id>
    <published>2025-02-28T09:00:00.000Z</published>
    <updated>2025-02-28T12:39:37.119Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>PostgreSQL是一个功能强大的开源关系型数据库系统，以其可靠性、数据完整性和扩展性而闻名。在Docker环境中部署PostgreSQL不仅可以简化安装过程，还能提供更好的环境隔离和资源管理。本文将详细介绍如何使用Docker部署和配置PostgreSQL服务，包括单节点部署、性能优化以及常见问题的解决方案。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>在开始部署之前，请确保您的系统已经安装：</p><ul><li>Docker Engine (版本 20.10.0 或更高)</li><li>Docker Compose (可选，用于多容器部署)</li></ul><h2 id="单节点部署"><a href="#单节点部署" class="headerlink" title="单节点部署"></a>单节点部署</h2><h3 id="1-拉取PostgreSQL镜像"><a href="#1-拉取PostgreSQL镜像" class="headerlink" title="1. 拉取PostgreSQL镜像"></a>1. 拉取PostgreSQL镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 拉取官方PostgreSQL镜像</span><span class="token function">docker</span> pull postgres:15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-创建数据持久化目录"><a href="#2-创建数据持久化目录" class="headerlink" title="2. 创建数据持久化目录"></a>2. 创建数据持久化目录</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建本地目录用于数据持久化</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/postgresql/data<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/postgresql/conf<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/postgresql/logs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-配置PostgreSQL"><a href="#3-配置PostgreSQL" class="headerlink" title="3. 配置PostgreSQL"></a>3. 配置PostgreSQL</h3><p>创建自定义配置文件 <code>/data/postgresql/conf/postgresql.conf</code>：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># 基本配置listen_addresses = '*'max_connections = 100# 内存配置shared_buffers = 256MBwork_mem = 4MBmaintenance_work_mem = 64MB# WAL配置wal_level = replicamax_wal_size = 1GBmin_wal_size = 80MB# 查询优化effective_cache_size = 1GBrandom_page_cost = 1.1# 日志配置log_destination = 'stderr'logging_collector = onlog_directory = '/var/log/postgresql'log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'log_rotation_age = 1dlog_rotation_size = 10MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-启动PostgreSQL容器"><a href="#4-启动PostgreSQL容器" class="headerlink" title="4. 启动PostgreSQL容器"></a>4. 启动PostgreSQL容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 基本启动命令</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--name</span> postgresql <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">5432</span>:5432 <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token assign-left variable">POSTGRES_PASSWORD</span><span class="token operator">=</span>your_password <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token assign-left variable">POSTGRES_USER</span><span class="token operator">=</span>your_user <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token assign-left variable">POSTGRES_DB</span><span class="token operator">=</span>your_db <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /data/postgresql/data:/var/lib/postgresql/data <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /data/postgresql/conf/postgresql.conf:/etc/postgresql/postgresql.conf <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /data/postgresql/logs:/var/log/postgresql <span class="token punctuation">\</span>  <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\</span>  postgres:15 <span class="token punctuation">\</span>  <span class="token parameter variable">-c</span> <span class="token string">'config_file=/etc/postgresql/postgresql.conf'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-验证部署"><a href="#5-验证部署" class="headerlink" title="5. 验证部署"></a>5. 验证部署</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 检查容器状态</span><span class="token function">docker</span> <span class="token function">ps</span><span class="token comment"># 连接到PostgreSQL</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> postgresql psql <span class="token parameter variable">-U</span> your_user <span class="token parameter variable">-d</span> your_db<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="1-内存配置优化"><a href="#1-内存配置优化" class="headerlink" title="1. 内存配置优化"></a>1. 内存配置优化</h3><p>根据服务器可用内存调整以下参数：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># 调整共享缓冲区（建议为系统内存的25%）shared_buffers = 2GB# 调整工作内存（每个会话可用）work_mem = 16MB# 调整维护操作内存maintenance_work_mem = 256MB# 调整有效缓存大小（建议为系统内存的75%）effective_cache_size = 6GB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-并发连接优化"><a href="#2-并发连接优化" class="headerlink" title="2. 并发连接优化"></a>2. 并发连接优化</h3><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># 根据服务器CPU核心数调整max_connections = 200max_worker_processes = 8max_parallel_workers_per_gather = 4max_parallel_workers = 8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-WAL配置优化"><a href="#3-WAL配置优化" class="headerlink" title="3. WAL配置优化"></a>3. WAL配置优化</h3><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># 调整WAL大小和检查点max_wal_size = 2GBcheckpoint_timeout = 15mincheckpoint_completion_target = 0.9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据备份与恢复"><a href="#数据备份与恢复" class="headerlink" title="数据备份与恢复"></a>数据备份与恢复</h2><h3 id="1-创建数据备份"><a href="#1-创建数据备份" class="headerlink" title="1. 创建数据备份"></a>1. 创建数据备份</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用pg_dump创建数据库备份</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> postgresql pg_dump <span class="token parameter variable">-U</span> your_user <span class="token parameter variable">-d</span> your_db <span class="token operator">&gt;</span> backup.sql<span class="token comment"># 使用pg_basebackup创建完整备份</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> postgresql pg_basebackup <span class="token parameter variable">-D</span> /backup <span class="token parameter variable">-U</span> your_user <span class="token parameter variable">-P</span> <span class="token parameter variable">-Ft</span> <span class="token parameter variable">-z</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-数据恢复"><a href="#2-数据恢复" class="headerlink" title="2. 数据恢复"></a>2. 数据恢复</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 从SQL备份恢复</span><span class="token function">cat</span> backup.sql <span class="token operator">|</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-i</span> postgresql psql <span class="token parameter variable">-U</span> your_user <span class="token parameter variable">-d</span> your_db<span class="token comment"># 从基础备份恢复</span><span class="token comment"># 1. 停止容器</span><span class="token function">docker</span> stop postgresql<span class="token comment"># 2. 清空数据目录</span><span class="token function">rm</span> <span class="token parameter variable">-rf</span> /data/postgresql/data/*<span class="token comment"># 3. 解压备份文件到数据目录</span><span class="token function">tar</span> xzf backup.tar.gz <span class="token parameter variable">-C</span> /data/postgresql/data<span class="token comment"># 4. 重启容器</span><span class="token function">docker</span> start postgresql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常见问题解决"><a href="#常见问题解决" class="headerlink" title="常见问题解决"></a>常见问题解决</h2><h3 id="1-连接问题"><a href="#1-连接问题" class="headerlink" title="1. 连接问题"></a>1. 连接问题</h3><p>如果无法连接到PostgreSQL，请检查：</p><ol><li>容器运行状态</li><li>端口映射配置</li><li>PostgreSQL配置文件中的<code>listen_addresses</code>设置</li><li>防火墙规则</li></ol><h3 id="2-性能问题"><a href="#2-性能问题" class="headerlink" title="2. 性能问题"></a>2. 性能问题</h3><p>如果遇到性能问题，可以：</p><ol><li>检查并优化查询</li><li>调整内存配置</li><li>检查是否需要增加索引</li><li>使用EXPLAIN ANALYZE分析查询计划</li></ol><h3 id="3-磁盘空间问题"><a href="#3-磁盘空间问题" class="headerlink" title="3. 磁盘空间问题"></a>3. 磁盘空间问题</h3><p>预防和解决磁盘空间问题：</p><ol><li>定期监控磁盘使用情况</li><li>配置合适的WAL设置</li><li>实施表分区策略</li><li>定期清理无用数据和索引</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过Docker部署PostgreSQL可以显著简化数据库的安装、配置和管理过程。本文介绍了单节点部署、性能优化、数据备份与恢复以及常见问题的解决方案。在生产环境中，建议根据实际需求调整配置参数，并确保数据的安全性和可靠性。</p><hr><p>希望这篇文章能帮助您更好地理解和使用Docker部署PostgreSQL。如果您有任何问题，欢迎在评论区讨论！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;PostgreSQL是一个功能强大的开源关系型数据库系统，以其可靠性、数据完整性和扩展性而闻名。在Docker环境中部署Po</summary>
      
    
    
    
    <category term="Linux" scheme="https://lucky845.github.io/categories/Linux/"/>
    
    <category term="Docker" scheme="https://lucky845.github.io/categories/Linux/Docker/"/>
    
    
    <category term="数据库" scheme="https://lucky845.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="配置" scheme="https://lucky845.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
    <category term="Docker" scheme="https://lucky845.github.io/tags/Docker/"/>
    
    <category term="容器化" scheme="https://lucky845.github.io/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
    <category term="PostgreSQL" scheme="https://lucky845.github.io/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title>【Docker】MySQL部署与配置指南</title>
    <link href="https://lucky845.github.io/archives/e55fa598.html"/>
    <id>https://lucky845.github.io/archives/e55fa598.html</id>
    <published>2025-02-28T08:00:00.000Z</published>
    <updated>2025-02-28T12:32:42.544Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>MySQL是一个流行的关系型数据库管理系统，在Docker环境中部署MySQL可以简化安装过程，提高部署效率，并实现更好的资源隔离和管理。本文将详细介绍如何使用Docker部署和配置MySQL服务，包括单节点部署、Docker Compose配置以及性能优化等内容。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>在开始部署之前，请确保您的系统已经安装：</p><ul><li>Docker Engine (版本 20.10.0 或更高)</li><li>Docker Compose (可选，用于多容器部署)</li></ul><h2 id="单节点部署"><a href="#单节点部署" class="headerlink" title="单节点部署"></a>单节点部署</h2><h3 id="1-拉取MySQL镜像"><a href="#1-拉取MySQL镜像" class="headerlink" title="1. 拉取MySQL镜像"></a>1. 拉取MySQL镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 拉取最新版本的MySQL官方镜像</span><span class="token function">docker</span> pull mysql:8.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-创建数据持久化目录"><a href="#2-创建数据持久化目录" class="headerlink" title="2. 创建数据持久化目录"></a>2. 创建数据持久化目录</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建本地目录用于数据持久化</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/mysql/data<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/mysql/conf<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/mysql/logs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-创建自定义配置文件"><a href="#3-创建自定义配置文件" class="headerlink" title="3. 创建自定义配置文件"></a>3. 创建自定义配置文件</h3><p>创建 <code>/data/mysql/conf/my.cnf</code> 配置文件：</p><pre class="line-numbers language-cnf" data-language="cnf"><code class="language-cnf">[mysqld]character-set-server=utf8mb4collation-server=utf8mb4_unicode_cidefault-time-zone=+8:00max_connections=1000# 日志配置slow_query_log=1slow_query_log_file=/var/log/mysql/slow.loglong_query_time=2# InnoDB配置innodb_buffer_pool_size=1Ginnodb_log_file_size=256Minnodb_flush_log_at_trx_commit=2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-启动MySQL容器"><a href="#4-启动MySQL容器" class="headerlink" title="4. 启动MySQL容器"></a>4. 启动MySQL容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 基本启动命令</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--name</span> mysql <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>your_password <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_DATABASE</span><span class="token operator">=</span>your_db <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /data/mysql/data:/var/lib/mysql <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /data/mysql/conf/my.cnf:/etc/mysql/conf.d/my.cnf <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /data/mysql/logs:/var/log/mysql <span class="token punctuation">\</span>  <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\</span>  mysql:8.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Docker-Compose配置"><a href="#Docker-Compose配置" class="headerlink" title="Docker Compose配置"></a>Docker Compose配置</h2><h3 id="1-创建docker-compose-yml文件"><a href="#1-创建docker-compose-yml文件" class="headerlink" title="1. 创建docker-compose.yml文件"></a>1. 创建docker-compose.yml文件</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.8'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">8.0</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"3306:3306"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> MYSQL_ROOT_PASSWORD=your_password      <span class="token punctuation">-</span> MYSQL_DATABASE=your_db      <span class="token punctuation">-</span> MYSQL_USER=your_user      <span class="token punctuation">-</span> MYSQL_PASSWORD=your_user_password    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /data/mysql/data<span class="token punctuation">:</span>/var/lib/mysql      <span class="token punctuation">-</span> /data/mysql/conf/my.cnf<span class="token punctuation">:</span>/etc/mysql/conf.d/my.cnf      <span class="token punctuation">-</span> /data/mysql/logs<span class="token punctuation">:</span>/var/log/mysql    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>default<span class="token punctuation">-</span>authentication<span class="token punctuation">-</span>plugin=mysql_native_password    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">healthcheck</span><span class="token punctuation">:</span>      <span class="token key atrule">test</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"CMD"</span><span class="token punctuation">,</span> <span class="token string">"mysqladmin"</span><span class="token punctuation">,</span> <span class="token string">"ping"</span><span class="token punctuation">,</span> <span class="token string">"-h"</span><span class="token punctuation">,</span> <span class="token string">"localhost"</span><span class="token punctuation">]</span>      <span class="token key atrule">interval</span><span class="token punctuation">:</span> 10s      <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 5s      <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-启动服务"><a href="#2-启动服务" class="headerlink" title="2. 启动服务"></a>2. 启动服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="MySQL配置优化"><a href="#MySQL配置优化" class="headerlink" title="MySQL配置优化"></a>MySQL配置优化</h2><h3 id="1-内存配置"><a href="#1-内存配置" class="headerlink" title="1. 内存配置"></a>1. 内存配置</h3><p>在my.cnf中添加以下配置：</p><pre class="line-numbers language-cnf" data-language="cnf"><code class="language-cnf"># 缓冲池大小，建议设置为系统内存的50%-70%innodb_buffer_pool_size=4G# 查询缓存query_cache_size=64Mquery_cache_type=1# 排序缓冲区sort_buffer_size=4Mjoin_buffer_size=4M<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-并发配置"><a href="#2-并发配置" class="headerlink" title="2. 并发配置"></a>2. 并发配置</h3><pre class="line-numbers language-cnf" data-language="cnf"><code class="language-cnf"># 最大连接数max_connections=1000# 线程缓存thread_cache_size=16# 表缓存table_open_cache=2000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-日志配置"><a href="#3-日志配置" class="headerlink" title="3. 日志配置"></a>3. 日志配置</h3><pre class="line-numbers language-cnf" data-language="cnf"><code class="language-cnf"># 慢查询日志slow_query_log=1slow_query_log_file=/var/log/mysql/slow.loglong_query_time=2# 错误日志log_error=/var/log/mysql/error.log# 二进制日志log_bin=/var/log/mysql/mysql-bin.logexpire_logs_days=7max_binlog_size=100M<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据备份与恢复"><a href="#数据备份与恢复" class="headerlink" title="数据备份与恢复"></a>数据备份与恢复</h2><h3 id="1-备份数据"><a href="#1-备份数据" class="headerlink" title="1. 备份数据"></a>1. 备份数据</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用Docker执行备份命令</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> mysql <span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">'exec mysqldump -uroot -p"$MYSQL_ROOT_PASSWORD" --all-databases'</span> <span class="token operator">&gt;</span> /path/to/backup.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-恢复数据"><a href="#2-恢复数据" class="headerlink" title="2. 恢复数据"></a>2. 恢复数据</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 恢复数据到容器</span><span class="token function">cat</span> /path/to/backup.sql <span class="token operator">|</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-i</span> mysql <span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">'exec mysql -uroot -p"$MYSQL_ROOT_PASSWORD"'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="多实例部署"><a href="#多实例部署" class="headerlink" title="多实例部署"></a>多实例部署</h2><p>对于需要部署MySQL主从复制的场景，可以使用以下Docker Compose配置：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.8'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">mysql-master</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">8.0</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>master    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"3306:3306"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> MYSQL_ROOT_PASSWORD=master_password    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /data/mysql<span class="token punctuation">-</span>master/data<span class="token punctuation">:</span>/var/lib/mysql      <span class="token punctuation">-</span> /data/mysql<span class="token punctuation">-</span>master/conf/my.cnf<span class="token punctuation">:</span>/etc/mysql/conf.d/my.cnf    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always  <span class="token key atrule">mysql-slave</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">8.0</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>slave    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"3307:3306"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> MYSQL_ROOT_PASSWORD=slave_password    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /data/mysql<span class="token punctuation">-</span>slave/data<span class="token punctuation">:</span>/var/lib/mysql      <span class="token punctuation">-</span> /data/mysql<span class="token punctuation">-</span>slave/conf/my.cnf<span class="token punctuation">:</span>/etc/mysql/conf.d/my.cnf    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> mysql<span class="token punctuation">-</span>master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主服务器配置 <code>/data/mysql-master/conf/my.cnf</code>：</p><pre class="line-numbers language-cnf" data-language="cnf"><code class="language-cnf">[mysqld]server-id=1log_bin=mysql-bingtid_mode=ONenforce_gtid_consistency=ONbinlog_format=ROW<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从服务器配置 <code>/data/mysql-slave/conf/my.cnf</code>：</p><pre class="line-numbers language-cnf" data-language="cnf"><code class="language-cnf">[mysqld]server-id=2log_bin=mysql-bingtid_mode=ONenforce_gtid_consistency=ONread_only=ON<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常见问题与解决方案"><a href="#常见问题与解决方案" class="headerlink" title="常见问题与解决方案"></a>常见问题与解决方案</h2><h3 id="1-容器无法启动"><a href="#1-容器无法启动" class="headerlink" title="1. 容器无法启动"></a>1. 容器无法启动</h3><p>检查日志：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> logs mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常见原因：</p><ul><li>数据目录权限问题</li><li>配置文件格式错误</li><li>端口冲突</li></ul><h3 id="2-连接被拒绝"><a href="#2-连接被拒绝" class="headerlink" title="2. 连接被拒绝"></a>2. 连接被拒绝</h3><p>确保：</p><ul><li>MySQL服务正在运行</li><li>端口映射正确</li><li>防火墙设置允许连接</li><li>用户有正确的访问权限</li></ul><h3 id="3-性能问题"><a href="#3-性能问题" class="headerlink" title="3. 性能问题"></a>3. 性能问题</h3><ul><li>检查容器资源限制</li><li>优化MySQL配置参数</li><li>使用数据卷而非绑定挂载提高I/O性能</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过Docker部署MySQL可以大大简化数据库的安装、配置和管理过程。本文介绍了单节点部署、Docker Compose配置、性能优化以及常见问题的解决方案。在生产环境中，建议根据实际需求调整配置参数，并确保数据的安全性和可靠性。</p><hr><p>希望这篇文章能帮助您更好地理解和使用Docker部署MySQL。如果您有任何问题，欢迎在评论区讨论！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;MySQL是一个流行的关系型数据库管理系统，在Docker环境中部署MySQL可以简化安装过程，提高部署效率，并实现更好的资</summary>
      
    
    
    
    <category term="Linux" scheme="https://lucky845.github.io/categories/Linux/"/>
    
    <category term="Docker" scheme="https://lucky845.github.io/categories/Linux/Docker/"/>
    
    
    <category term="数据库" scheme="https://lucky845.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="配置" scheme="https://lucky845.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
    <category term="Docker" scheme="https://lucky845.github.io/tags/Docker/"/>
    
    <category term="容器化" scheme="https://lucky845.github.io/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
    <category term="MySQL" scheme="https://lucky845.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>【Docker】Redis部署与配置指南</title>
    <link href="https://lucky845.github.io/archives/e55fa597.html"/>
    <id>https://lucky845.github.io/archives/e55fa597.html</id>
    <published>2025-02-28T08:00:00.000Z</published>
    <updated>2025-02-28T12:29:52.056Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>Redis是一个广泛使用的开源内存数据库，在Docker环境中部署Redis可以简化安装过程，提高部署效率，并实现更好的资源隔离。本文将详细介绍如何使用Docker部署和配置Redis服务。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>在开始部署之前，请确保您的系统已经安装：</p><ul><li>Docker Engine (版本 20.10.0 或更高)</li><li>Docker Compose (可选，用于多容器部署)</li></ul><h2 id="单节点部署"><a href="#单节点部署" class="headerlink" title="单节点部署"></a>单节点部署</h2><h3 id="1-拉取Redis镜像"><a href="#1-拉取Redis镜像" class="headerlink" title="1. 拉取Redis镜像"></a>1. 拉取Redis镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 拉取最新版本的Redis官方镜像</span><span class="token function">docker</span> pull redis:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-创建数据持久化目录"><a href="#2-创建数据持久化目录" class="headerlink" title="2. 创建数据持久化目录"></a>2. 创建数据持久化目录</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建本地目录用于数据持久化</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/redis/data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-启动Redis容器"><a href="#3-启动Redis容器" class="headerlink" title="3. 启动Redis容器"></a>3. 启动Redis容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 基本启动命令</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--name</span> redis <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /data/redis/data:/data <span class="token punctuation">\</span>  <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\</span>  redis:latest <span class="token punctuation">\</span>  redis-server <span class="token parameter variable">--appendonly</span> <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Docker-Compose配置"><a href="#Docker-Compose配置" class="headerlink" title="Docker Compose配置"></a>Docker Compose配置</h2><h3 id="1-创建docker-compose-yml文件"><a href="#1-创建docker-compose-yml文件" class="headerlink" title="1. 创建docker-compose.yml文件"></a>1. 创建docker-compose.yml文件</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.8'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> redis    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"6379:6379"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /data/redis/data<span class="token punctuation">:</span>/data      <span class="token punctuation">-</span> /data/redis/conf/redis.conf<span class="token punctuation">:</span>/etc/redis/redis.conf    <span class="token key atrule">command</span><span class="token punctuation">:</span> redis<span class="token punctuation">-</span>server /etc/redis/redis.conf    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-启动服务"><a href="#2-启动服务" class="headerlink" title="2. 启动服务"></a>2. 启动服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Redis配置优化"><a href="#Redis配置优化" class="headerlink" title="Redis配置优化"></a>Redis配置优化</h2><h3 id="1-内存配置"><a href="#1-内存配置" class="headerlink" title="1. 内存配置"></a>1. 内存配置</h3><p>在redis.conf中添加以下配置：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># 设置最大内存限制maxmemory 2gb# 内存淘汰策略maxmemory-policy allkeys-lru<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-持久化配置"><a href="#2-持久化配置" class="headerlink" title="2. 持久化配置"></a>2. 持久化配置</h3><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># 开启AOF持久化appendonly yesappendfsync everysec# 开启RDB持久化save 900 1save 300 10save 60 10000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-网络安全配置"><a href="#3-网络安全配置" class="headerlink" title="3. 网络安全配置"></a>3. 网络安全配置</h3><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># 绑定地址bind 0.0.0.0# 设置访问密码requirepass your_strong_password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="性能优化建议"><a href="#性能优化建议" class="headerlink" title="性能优化建议"></a>性能优化建议</h2><ol><li><p><strong>内存优化</strong>：</p><ul><li>合理设置maxmemory</li><li>选择适当的内存淘汰策略</li><li>定期清理过期键</li></ul></li><li><p><strong>持久化优化</strong>：</p><ul><li>在性能要求高的场景可以关闭AOF</li><li>调整RDB保存频率</li><li>使用单独的存储卷</li></ul></li><li><p><strong>网络优化</strong>：</p><ul><li>使用host网络模式提升性能</li><li>合理设置tcp-backlog值</li><li>调整timeout时间</li></ul></li></ol><h2 id="监控和维护"><a href="#监控和维护" class="headerlink" title="监控和维护"></a>监控和维护</h2><h3 id="1-容器健康检查"><a href="#1-容器健康检查" class="headerlink" title="1. 容器健康检查"></a>1. 容器健康检查</h3><p>在docker-compose.yml中添加健康检查：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">healthcheck</span><span class="token punctuation">:</span>  <span class="token key atrule">test</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"CMD"</span><span class="token punctuation">,</span> <span class="token string">"redis-cli"</span><span class="token punctuation">,</span> <span class="token string">"ping"</span><span class="token punctuation">]</span>  <span class="token key atrule">interval</span><span class="token punctuation">:</span> 30s  <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 10s  <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-日志管理"><a href="#2-日志管理" class="headerlink" title="2. 日志管理"></a>2. 日志管理</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看容器日志</span><span class="token function">docker</span> logs redis<span class="token comment"># 设置日志轮转</span>--log-opt max-size<span class="token operator">=</span>10m <span class="token punctuation">\</span>--log-opt max-file<span class="token operator">=</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常见问题处理"><a href="#常见问题处理" class="headerlink" title="常见问题处理"></a>常见问题处理</h2><ol><li><p><strong>内存溢出</strong>：</p><ul><li>检查maxmemory设置</li><li>查看内存使用情况</li><li>适当调整内存淘汰策略</li></ul></li><li><p><strong>持久化失败</strong>：</p><ul><li>确保存储卷权限正确</li><li>检查磁盘空间</li><li>查看错误日志</li></ul></li><li><p><strong>连接超时</strong>：</p><ul><li>检查网络配置</li><li>调整timeout参数</li><li>验证防火墙设置</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过Docker部署Redis不仅简化了安装和配置过程，还提供了更好的隔离性和可移植性。合理的配置和优化可以确保Redis在Docker环境中稳定高效运行。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://redis.io/documentation">Redis官方文档</a></li><li><a href="https://hub.docker.com/_/redis">Docker Hub Redis</a></li><li><a href="https://redis.io/topics/admin">Redis配置最佳实践</a></li></ul><hr><p>希望这篇文章能帮助您更好地在Docker环境中部署和配置Redis。如果您有任何问题，欢迎在评论区讨论！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;Redis是一个广泛使用的开源内存数据库，在Docker环境中部署Redis可以简化安装过程，提高部署效率，并实现更好的资源</summary>
      
    
    
    
    <category term="Linux" scheme="https://lucky845.github.io/categories/Linux/"/>
    
    <category term="Docker" scheme="https://lucky845.github.io/categories/Linux/Docker/"/>
    
    
    <category term="数据库" scheme="https://lucky845.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis" scheme="https://lucky845.github.io/tags/Redis/"/>
    
    <category term="配置" scheme="https://lucky845.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
    <category term="Docker" scheme="https://lucky845.github.io/tags/Docker/"/>
    
    <category term="容器化" scheme="https://lucky845.github.io/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>【Docker】部署RabbitMQ及配置延时队列完全指南</title>
    <link href="https://lucky845.github.io/archives/d55fa598.html"/>
    <id>https://lucky845.github.io/archives/d55fa598.html</id>
    <published>2025-02-28T07:00:00.000Z</published>
    <updated>2025-02-28T12:23:25.366Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>RabbitMQ 是一个开源的消息代理软件，它实现了高级消息队列协议(AMQP)，提供可靠的消息传递机制。在微服务架构和分布式系统中，RabbitMQ 扮演着重要角色。传统部署 RabbitMQ 需要处理复杂的依赖关系和配置，而使用 Docker 可以大幅简化这一过程。本文将详细介绍如何使用 Docker 部署 RabbitMQ，以及如何配置和使用延时队列功能。</p><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><h3 id="1-1-系统要求"><a href="#1-1-系统要求" class="headerlink" title="1.1 系统要求"></a>1.1 系统要求</h3><ul><li>Docker Engine 19.03+</li><li>Docker Compose 1.25+（可选，用于多容器编排）</li><li>至少 2GB 可用内存（生产环境建议 4GB+）</li><li>足够的磁盘空间（建议 10GB+）</li></ul><h3 id="1-2-镜像选择"><a href="#1-2-镜像选择" class="headerlink" title="1.2 镜像选择"></a>1.2 镜像选择</h3><p>RabbitMQ 官方提供了多种 Docker 镜像，最常用的有：</p><ul><li><code>rabbitmq:3.12-management</code>：包含管理界面的 RabbitMQ 3.12 版本</li><li><code>rabbitmq:3.12</code>：不包含管理界面的基础版本</li></ul><p>本文主要使用带管理界面的版本，便于可视化操作和监控。</p><h2 id="2-单节点部署"><a href="#2-单节点部署" class="headerlink" title="2. 单节点部署"></a>2. 单节点部署</h2><h3 id="2-1-使用-Docker-命令部署-RabbitMQ"><a href="#2-1-使用-Docker-命令部署-RabbitMQ" class="headerlink" title="2.1 使用 Docker 命令部署 RabbitMQ"></a>2.1 使用 Docker 命令部署 RabbitMQ</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建数据和日志目录</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/rabbitmq/data<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/rabbitmq/log<span class="token comment"># 运行 RabbitMQ 容器</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--name</span> rabbitmq <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">5672</span>:5672 <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">15672</span>:15672 <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_USER</span><span class="token operator">=</span>admin <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token assign-left variable">RABBITMQ_DEFAULT_PASS</span><span class="token operator">=</span>admin123 <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /data/rabbitmq/data:/var/lib/rabbitmq <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /data/rabbitmq/log:/var/log/rabbitmq <span class="token punctuation">\</span>  <span class="token parameter variable">--hostname</span> my-rabbit <span class="token punctuation">\</span>  rabbitmq:3.12-management<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明：</p><ul><li><code>-p 5672:5672</code>：AMQP 协议端口</li><li><code>-p 15672:15672</code>：管理界面端口</li><li><code>-e RABBITMQ_DEFAULT_USER=admin</code>：设置默认用户名</li><li><code>-e RABBITMQ_DEFAULT_PASS=admin123</code>：设置默认密码</li><li><code>-v /data/rabbitmq/data:/var/lib/rabbitmq</code>：数据持久化</li><li><code>-v /data/rabbitmq/log:/var/log/rabbitmq</code>：日志持久化</li><li><code>--hostname my-rabbit</code>：设置容器主机名（对集群很重要）</li></ul><h3 id="2-2-验证部署"><a href="#2-2-验证部署" class="headerlink" title="2.2 验证部署"></a>2.2 验证部署</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 检查容器是否正常运行</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token operator">|</span> <span class="token function">grep</span> rabbitmq<span class="token comment"># 查看日志</span><span class="token function">docker</span> logs rabbitmq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问管理界面：在浏览器中打开 <code>http://localhost:15672</code>，使用设置的用户名和密码登录。</p><h2 id="3-使用-Docker-Compose-部署"><a href="#3-使用-Docker-Compose-部署" class="headerlink" title="3. 使用 Docker Compose 部署"></a>3. 使用 Docker Compose 部署</h2><h3 id="3-1-创建-docker-compose-yml-文件"><a href="#3-1-创建-docker-compose-yml-文件" class="headerlink" title="3.1 创建 docker-compose.yml 文件"></a>3.1 创建 docker-compose.yml 文件</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> rabbitmq<span class="token punctuation">:</span>3.12<span class="token punctuation">-</span>management    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> rabbitmq    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>rabbit    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"5672:5672"</span>   <span class="token comment"># AMQP 端口</span>      <span class="token punctuation">-</span> <span class="token string">"15672:15672"</span> <span class="token comment"># 管理界面端口</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> RABBITMQ_DEFAULT_USER=admin      <span class="token punctuation">-</span> RABBITMQ_DEFAULT_PASS=admin123    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./data<span class="token punctuation">:</span>/var/lib/rabbitmq      <span class="token punctuation">-</span> ./logs<span class="token punctuation">:</span>/var/log/rabbitmq    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-启动服务"><a href="#3-2-启动服务" class="headerlink" title="3.2 启动服务"></a>3.2 启动服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-RabbitMQ-集群部署"><a href="#4-RabbitMQ-集群部署" class="headerlink" title="4. RabbitMQ 集群部署"></a>4. RabbitMQ 集群部署</h2><h3 id="4-1-创建集群的-docker-compose-yml"><a href="#4-1-创建集群的-docker-compose-yml" class="headerlink" title="4.1 创建集群的 docker-compose.yml"></a>4.1 创建集群的 docker-compose.yml</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">rabbitmq1</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> rabbitmq<span class="token punctuation">:</span>3.12<span class="token punctuation">-</span>management    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> rabbitmq1    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"5672:5672"</span>      <span class="token punctuation">-</span> <span class="token string">"15672:15672"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> RABBITMQ_ERLANG_COOKIE=SWQOKODSQALRPCLNMEQG      <span class="token punctuation">-</span> RABBITMQ_DEFAULT_USER=admin      <span class="token punctuation">-</span> RABBITMQ_DEFAULT_PASS=admin123    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./rabbitmq1/data<span class="token punctuation">:</span>/var/lib/rabbitmq      <span class="token punctuation">-</span> ./rabbitmq1/log<span class="token punctuation">:</span>/var/log/rabbitmq  <span class="token key atrule">rabbitmq2</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> rabbitmq<span class="token punctuation">:</span>3.12<span class="token punctuation">-</span>management    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> rabbitmq2    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"5673:5672"</span>      <span class="token punctuation">-</span> <span class="token string">"15673:15672"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> RABBITMQ_ERLANG_COOKIE=SWQOKODSQALRPCLNMEQG      <span class="token punctuation">-</span> RABBITMQ_DEFAULT_USER=admin      <span class="token punctuation">-</span> RABBITMQ_DEFAULT_PASS=admin123    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./rabbitmq2/data<span class="token punctuation">:</span>/var/lib/rabbitmq      <span class="token punctuation">-</span> ./rabbitmq2/log<span class="token punctuation">:</span>/var/log/rabbitmq    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> rabbitmq1  <span class="token key atrule">rabbitmq3</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> rabbitmq<span class="token punctuation">:</span>3.12<span class="token punctuation">-</span>management    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> rabbitmq3    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"5674:5672"</span>      <span class="token punctuation">-</span> <span class="token string">"15674:15672"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> RABBITMQ_ERLANG_COOKIE=SWQOKODSQALRPCLNMEQG      <span class="token punctuation">-</span> RABBITMQ_DEFAULT_USER=admin      <span class="token punctuation">-</span> RABBITMQ_DEFAULT_PASS=admin123    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./rabbitmq3/data<span class="token punctuation">:</span>/var/lib/rabbitmq      <span class="token punctuation">-</span> ./rabbitmq3/log<span class="token punctuation">:</span>/var/log/rabbitmq    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> rabbitmq1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-配置集群"><a href="#4-2-配置集群" class="headerlink" title="4.2 配置集群"></a>4.2 配置集群</h3><p>启动容器后，需要将节点加入集群：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入第二个节点</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> rabbitmq2 <span class="token function">bash</span><span class="token comment"># 停止应用</span>rabbitmqctl stop_app<span class="token comment"># 重置节点</span>rabbitmqctl reset<span class="token comment"># 加入集群</span>rabbitmqctl join_cluster rabbit@rabbitmq1<span class="token comment"># 启动应用</span>rabbitmqctl start_app<span class="token comment"># 退出容器</span><span class="token builtin class-name">exit</span><span class="token comment"># 对第三个节点重复上述操作</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> rabbitmq3 <span class="token function">bash</span>rabbitmqctl stop_apprabbitmqctl resetrabbitmqctl join_cluster rabbit@rabbitmq1rabbitmqctl start_app<span class="token builtin class-name">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-延时队列配置"><a href="#5-延时队列配置" class="headerlink" title="5. 延时队列配置"></a>5. 延时队列配置</h2><h3 id="5-1-延时队列概念"><a href="#5-1-延时队列概念" class="headerlink" title="5.1 延时队列概念"></a>5.1 延时队列概念</h3><p>延时队列是指消息在发送到队列后，不会立即被消费，而是在指定的时间后才能被消费。RabbitMQ 本身并没有直接提供延时队列功能，但可以通过以下两种方式实现：</p><ol><li>使用 Dead Letter Exchange (DLX) 和消息 TTL</li><li>使用 rabbitmq_delayed_message_exchange 插件</li></ol><h3 id="5-2-使用-Dead-Letter-Exchange-实现延时队列"><a href="#5-2-使用-Dead-Letter-Exchange-实现延时队列" class="headerlink" title="5.2 使用 Dead Letter Exchange 实现延时队列"></a>5.2 使用 Dead Letter Exchange 实现延时队列</h3><h4 id="5-2-1-原理"><a href="#5-2-1-原理" class="headerlink" title="5.2.1 原理"></a>5.2.1 原理</h4><p>当消息在队列中的存活时间超过设定的 TTL（Time To Live）值时，或者队列长度超过最大长度时，消息会被发送到与队列绑定的死信交换机（Dead Letter Exchange），然后路由到另一个队列，这个队列就是我们真正消费消息的队列。</p><h4 id="5-2-2-配置步骤"><a href="#5-2-2-配置步骤" class="headerlink" title="5.2.2 配置步骤"></a>5.2.2 配置步骤</h4><ol><li>进入 RabbitMQ 容器：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> rabbitmq <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>使用 rabbitmqadmin 创建所需的交换机和队列：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建死信交换机</span>rabbitmqadmin <span class="token builtin class-name">declare</span> exchange <span class="token assign-left variable">name</span><span class="token operator">=</span>dlx_exchange <span class="token assign-left variable">type</span><span class="token operator">=</span>direct<span class="token comment"># 创建实际消费队列</span>rabbitmqadmin <span class="token builtin class-name">declare</span> queue <span class="token assign-left variable">name</span><span class="token operator">=</span>actual_queue<span class="token comment"># 将实际消费队列绑定到死信交换机</span>rabbitmqadmin <span class="token builtin class-name">declare</span> binding <span class="token assign-left variable">source</span><span class="token operator">=</span>dlx_exchange <span class="token assign-left variable">destination</span><span class="token operator">=</span>actual_queue <span class="token assign-left variable">routing_key</span><span class="token operator">=</span>dlx_routing_key<span class="token comment"># 创建延时队列，设置消息 TTL 和死信交换机</span>rabbitmqadmin <span class="token builtin class-name">declare</span> queue <span class="token assign-left variable">name</span><span class="token operator">=</span>delay_queue <span class="token assign-left variable">arguments</span><span class="token operator">=</span><span class="token string">'{"x-dead-letter-exchange":"dlx_exchange","x-dead-letter-routing-key":"dlx_routing_key","x-message-ttl":10000}'</span><span class="token comment"># 创建普通交换机</span>rabbitmqadmin <span class="token builtin class-name">declare</span> exchange <span class="token assign-left variable">name</span><span class="token operator">=</span>normal_exchange <span class="token assign-left variable">type</span><span class="token operator">=</span>direct<span class="token comment"># 将延时队列绑定到普通交换机</span>rabbitmqadmin <span class="token builtin class-name">declare</span> binding <span class="token assign-left variable">source</span><span class="token operator">=</span>normal_exchange <span class="token assign-left variable">destination</span><span class="token operator">=</span>delay_queue <span class="token assign-left variable">routing_key</span><span class="token operator">=</span>delay_routing_key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述配置创建了一个延时为 10 秒（10000 毫秒）的队列。</p><h3 id="5-3-使用-rabbitmq-delayed-message-exchange-插件"><a href="#5-3-使用-rabbitmq-delayed-message-exchange-插件" class="headerlink" title="5.3 使用 rabbitmq_delayed_message_exchange 插件"></a>5.3 使用 rabbitmq_delayed_message_exchange 插件</h3><h4 id="5-3-1-安装插件"><a href="#5-3-1-安装插件" class="headerlink" title="5.3.1 安装插件"></a>5.3.1 安装插件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入容器</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> rabbitmq <span class="token function">bash</span><span class="token comment"># 启用插件</span>rabbitmq-plugins <span class="token builtin class-name">enable</span> rabbitmq_delayed_message_exchange<span class="token comment"># 退出容器</span><span class="token builtin class-name">exit</span><span class="token comment"># 重启容器使插件生效</span><span class="token function">docker</span> restart rabbitmq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-3-2-配置延时交换机"><a href="#5-3-2-配置延时交换机" class="headerlink" title="5.3.2 配置延时交换机"></a>5.3.2 配置延时交换机</h4><p>通过管理界面或命令行创建延时交换机：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入容器</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> rabbitmq <span class="token function">bash</span><span class="token comment"># 创建延时交换机</span>rabbitmqadmin <span class="token builtin class-name">declare</span> exchange <span class="token assign-left variable">name</span><span class="token operator">=</span>delayed_exchange <span class="token assign-left variable">type</span><span class="token operator">=</span>x-delayed-message <span class="token assign-left variable">arguments</span><span class="token operator">=</span><span class="token string">'{"x-delayed-type":"direct"}'</span><span class="token comment"># 创建队列</span>rabbitmqadmin <span class="token builtin class-name">declare</span> queue <span class="token assign-left variable">name</span><span class="token operator">=</span>delayed_queue<span class="token comment"># 绑定队列到延时交换机</span>rabbitmqadmin <span class="token builtin class-name">declare</span> binding <span class="token assign-left variable">source</span><span class="token operator">=</span>delayed_exchange <span class="token assign-left variable">destination</span><span class="token operator">=</span>delayed_queue <span class="token assign-left variable">routing_key</span><span class="token operator">=</span>delayed_routing_key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-延时队列的使用示例"><a href="#6-延时队列的使用示例" class="headerlink" title="6. 延时队列的使用示例"></a>6. 延时队列的使用示例</h2><h3 id="6-1-使用-Dead-Letter-Exchange-方式"><a href="#6-1-使用-Dead-Letter-Exchange-方式" class="headerlink" title="6.1 使用 Dead Letter Exchange 方式"></a>6.1 使用 Dead Letter Exchange 方式</h3><h4 id="Java-代码示例"><a href="#Java-代码示例" class="headerlink" title="Java 代码示例"></a>Java 代码示例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Channel</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">ConnectionFactory</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayQueueProducer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"admin123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">"Hello, delayed message!"</span><span class="token punctuation">;</span>                        <span class="token comment">// 发送消息到普通交换机，路由到延时队列</span>            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">"normal_exchange"</span><span class="token punctuation">,</span> <span class="token string">"delay_routing_key"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Sent message: '"</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">"', will be delivered in 10 seconds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="消费者代码"><a href="#消费者代码" class="headerlink" title="消费者代码"></a>消费者代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayQueueConsumer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"admin123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 消费实际队列中的消息</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"actual_queue"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span> delivery<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>delivery<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Received delayed message: '"</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> consumerTag <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Waiting for delayed messages..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-使用-rabbitmq-delayed-message-exchange-插件"><a href="#6-2-使用-rabbitmq-delayed-message-exchange-插件" class="headerlink" title="6.2 使用 rabbitmq_delayed_message_exchange 插件"></a>6.2 使用 rabbitmq_delayed_message_exchange 插件</h3><h4 id="Java-代码示例-1"><a href="#Java-代码示例-1" class="headerlink" title="Java 代码示例"></a>Java 代码示例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">AMQP</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Channel</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">ConnectionFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayedPluginProducer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"admin123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">"Hello, delayed message!"</span><span class="token punctuation">;</span>                        <span class="token comment">// 设置消息头，指定延迟时间（毫秒）</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            headers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-delay"</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10秒延迟</span>                        <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 发送消息到延时交换机</span>            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">"delayed_exchange"</span><span class="token punctuation">,</span> <span class="token string">"delayed_routing_key"</span><span class="token punctuation">,</span> props<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Sent message: '"</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">"', will be delivered in 10 seconds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="消费者代码-1"><a href="#消费者代码-1" class="headerlink" title="消费者代码"></a>消费者代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayedPluginConsumer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"admin123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 消费延时队列中的消息</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token string">"delayed_queue"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span> delivery<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>delivery<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Received delayed message: '"</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> consumerTag <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Waiting for delayed messages..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-延时队列应用场景"><a href="#7-延时队列应用场景" class="headerlink" title="7. 延时队列应用场景"></a>7. 延时队列应用场景</h2><p>延时队列在实际业务中有很多应用场景，例如：</p><ol><li><strong>订单超时取消</strong>：用户下单后，如果在指定时间内未支付，系统自动取消订单</li><li><strong>定时任务调度</strong>：定时执行某些任务，如定时发送邮件、短信等</li><li><strong>消息重试机制</strong>：消息消费失败后，延迟一段时间再次投递</li><li><strong>限时优惠活动</strong>：优惠券到期提醒、活动结束通知等</li><li><strong>预约系统</strong>：提前预约后，到指定时间自动通知用户</li></ol><h2 id="8-常见问题与解决方案"><a href="#8-常见问题与解决方案" class="headerlink" title="8. 常见问题与解决方案"></a>8. 常见问题与解决方案</h2><h3 id="8-1-消息堆积问题"><a href="#8-1-消息堆积问题" class="headerlink" title="8.1 消息堆积问题"></a>8.1 消息堆积问题</h3><p>当生产速度大于消费速度时，可能导致消息堆积：</p><ul><li>增加消费者数量</li><li>优化消费者处理逻辑</li><li>增加硬件资源</li><li>使用集群模式分担负载</li></ul><h3 id="8-2-插件安装失败"><a href="#8-2-插件安装失败" class="headerlink" title="8.2 插件安装失败"></a>8.2 插件安装失败</h3><p>如果插件安装失败，可以尝试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看可用插件列表</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> rabbitmq rabbitmq-plugins list<span class="token comment"># 确保容器有足够权限</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token parameter variable">--user</span> root rabbitmq <span class="token function">bash</span><span class="token comment"># 手动下载插件并放入插件目录</span><span class="token builtin class-name">cd</span> /plugins<span class="token function">wget</span> https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases/download/v3.12.0/rabbitmq_delayed_message_exchange-3.12.0.ez<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-3-集群节点同步问题"><a href="#8-3-集群节点同步问题" class="headerlink" title="8.3 集群节点同步问题"></a>8.3 集群节点同步问题</h3><p>集群节点之间可能出现同步问题：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 检查集群状态</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> rabbitmq1 rabbitmqctl cluster_status<span class="token comment"># 如果节点状态异常，可以尝试重新加入集群</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> rabbitmq2 <span class="token function">bash</span>rabbitmqctl stop_apprabbitmqctl resetrabbitmqctl join_cluster rabbit@rabbitmq1rabbitmqctl start_app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-总结"><a href="#9-总结" class="headerlink" title="9. 总结"></a>9. 总结</h2><p>Docker 部署 RabbitMQ 极大地简化了环境配置和管理工作。通过本文介绍的方法，可以快速部署单节点或集群模式的 RabbitMQ 服务，并配置延时队列功能。延时队列作为 RabbitMQ 的重要功能扩展，在实际业务中有着广泛的应用场景。</p><p>无论是使用死信队列方式还是插件方式实现延时队列，都能满足大多数业务场景的需求。在选择实现方式时，可以根据具体需求和系统架构进行选择。</p><hr><h2 id="希望这篇文章能帮助您更好地理解如何使用-Docker-部署-RabbitMQ-并配置延时队列。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解如何使用-Docker-部署-RabbitMQ-并配置延时队列。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解如何使用 Docker 部署 RabbitMQ 并配置延时队列。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解如何使用 Docker 部署 RabbitMQ 并配置延时队列。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;RabbitMQ 是一个开源的消息代理软件，它实现了高级消息队列协议(AMQP)，提供可靠的消息传递机制。在微服务架构和分布</summary>
      
    
    
    
    <category term="Linux" scheme="https://lucky845.github.io/categories/Linux/"/>
    
    <category term="Docker" scheme="https://lucky845.github.io/categories/Linux/Docker/"/>
    
    
    <category term="消息队列" scheme="https://lucky845.github.io/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    <category term="Docker" scheme="https://lucky845.github.io/tags/Docker/"/>
    
    <category term="容器化" scheme="https://lucky845.github.io/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
    <category term="RabbitMQ" scheme="https://lucky845.github.io/tags/RabbitMQ/"/>
    
    <category term="延时队列" scheme="https://lucky845.github.io/tags/%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>【Docker】部署Elasticsearch与Kibana完全指南</title>
    <link href="https://lucky845.github.io/archives/d55fa597.html"/>
    <id>https://lucky845.github.io/archives/d55fa597.html</id>
    <published>2025-02-28T06:00:00.000Z</published>
    <updated>2025-02-28T12:14:02.645Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>Elasticsearch 和 Kibana 是强大的数据存储、搜索和可视化工具，但传统部署方式复杂且依赖较多。使用 Docker 容器化技术可以大幅简化部署流程，提高环境一致性。本文将详细介绍如何使用 Docker 部署 Elasticsearch 和 Kibana，包括单节点部署、集群配置、安全设置以及常见问题解决方案。</p><h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><h3 id="1-1-系统要求"><a href="#1-1-系统要求" class="headerlink" title="1.1 系统要求"></a>1.1 系统要求</h3><ul><li>Docker Engine 19.03+</li><li>Docker Compose 1.25+（可选，用于多容器编排）</li><li>至少 4GB 可用内存（生产环境建议 8GB+）</li><li>足够的磁盘空间（建议 20GB+）</li></ul><h3 id="1-2-系统参数调整"><a href="#1-2-系统参数调整" class="headerlink" title="1.2 系统参数调整"></a>1.2 系统参数调整</h3><p>在 Linux 系统上，需要调整一些系统参数以确保 Elasticsearch 正常运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 临时调整（重启后失效）</span><span class="token function">sysctl</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">vm.max_map_count</span><span class="token operator">=</span><span class="token number">262144</span><span class="token comment"># 永久调整</span><span class="token builtin class-name">echo</span> <span class="token string">"vm.max_map_count=262144"</span> <span class="token operator">&gt;&gt;</span> /etc/sysctl.conf<span class="token function">sysctl</span> <span class="token parameter variable">-p</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-单节点部署"><a href="#2-单节点部署" class="headerlink" title="2. 单节点部署"></a>2. 单节点部署</h2><h3 id="2-1-使用-Docker-命令部署-Elasticsearch"><a href="#2-1-使用-Docker-命令部署-Elasticsearch" class="headerlink" title="2.1 使用 Docker 命令部署 Elasticsearch"></a>2.1 使用 Docker 命令部署 Elasticsearch</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建网络</span><span class="token function">docker</span> network create elastic<span class="token comment"># 创建数据目录</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/elasticsearch/data<span class="token comment"># 设置目录权限</span><span class="token function">chmod</span> <span class="token number">777</span> /data/elasticsearch/data<span class="token comment"># 运行 Elasticsearch 容器</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--name</span> elasticsearch <span class="token punctuation">\</span>  <span class="token parameter variable">--net</span> elastic <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">9200</span>:9200 <span class="token parameter variable">-p</span> <span class="token number">9300</span>:9300 <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token string">"discovery.type=single-node"</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /data/elasticsearch/data:/usr/share/elasticsearch/data <span class="token punctuation">\</span>  elasticsearch:8.11.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-部署-Kibana"><a href="#2-2-部署-Kibana" class="headerlink" title="2.2 部署 Kibana"></a>2.2 部署 Kibana</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 运行 Kibana 容器</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--name</span> kibana <span class="token punctuation">\</span>  <span class="token parameter variable">--net</span> elastic <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">5601</span>:5601 <span class="token punctuation">\</span>  <span class="token parameter variable">-e</span> <span class="token string">"ELASTICSEARCH_HOSTS=http://elasticsearch:9200"</span> <span class="token punctuation">\</span>  kibana:8.11.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-验证部署"><a href="#2-3-验证部署" class="headerlink" title="2.3 验证部署"></a>2.3 验证部署</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 检查 Elasticsearch 是否正常运行</span><span class="token function">curl</span> http://localhost:9200<span class="token comment"># 访问 Kibana</span><span class="token comment"># 在浏览器中打开 http://localhost:5601</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-使用-Docker-Compose-部署"><a href="#3-使用-Docker-Compose-部署" class="headerlink" title="3. 使用 Docker Compose 部署"></a>3. 使用 Docker Compose 部署</h2><h3 id="3-1-创建-docker-compose-yml-文件"><a href="#3-1-创建-docker-compose-yml-文件" class="headerlink" title="3.1 创建 docker-compose.yml 文件"></a>3.1 创建 docker-compose.yml 文件</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">elasticsearch</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">:</span>8.11.1    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> elasticsearch    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> discovery.type=single<span class="token punctuation">-</span>node      <span class="token punctuation">-</span> ES_JAVA_OPTS=<span class="token punctuation">-</span>Xms512m <span class="token punctuation">-</span>Xmx512m      <span class="token punctuation">-</span> xpack.security.enabled=true      <span class="token punctuation">-</span> ELASTIC_PASSWORD=changeme    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> es_data<span class="token punctuation">:</span>/usr/share/elasticsearch/data    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"9200:9200"</span>      <span class="token punctuation">-</span> <span class="token string">"9300:9300"</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> elastic    <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped  <span class="token key atrule">kibana</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> kibana<span class="token punctuation">:</span>8.11.1    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> kibana    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ELASTICSEARCH_HOSTS=http<span class="token punctuation">:</span>//elasticsearch<span class="token punctuation">:</span><span class="token number">9200</span>      <span class="token punctuation">-</span> ELASTICSEARCH_USERNAME=elastic      <span class="token punctuation">-</span> ELASTICSEARCH_PASSWORD=changeme    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"5601:5601"</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> elastic    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> elasticsearch    <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped<span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">elastic</span><span class="token punctuation">:</span>    <span class="token key atrule">driver</span><span class="token punctuation">:</span> bridge<span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token key atrule">es_data</span><span class="token punctuation">:</span>    <span class="token key atrule">driver</span><span class="token punctuation">:</span> local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-启动服务"><a href="#3-2-启动服务" class="headerlink" title="3.2 启动服务"></a>3.2 启动服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-Elasticsearch-配置详解"><a href="#4-Elasticsearch-配置详解" class="headerlink" title="4. Elasticsearch 配置详解"></a>4. Elasticsearch 配置详解</h2><h3 id="4-1-内存配置"><a href="#4-1-内存配置" class="headerlink" title="4.1 内存配置"></a>4.1 内存配置</h3><p>Elasticsearch 是内存密集型应用，合理配置内存对性能至关重要：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">environment</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> ES_JAVA_OPTS=<span class="token punctuation">-</span>Xms1g <span class="token punctuation">-</span>Xmx1g  <span class="token comment"># 设置JVM堆内存大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-2-集群配置"><a href="#4-2-集群配置" class="headerlink" title="4.2 集群配置"></a>4.2 集群配置</h3><p>部署 Elasticsearch 集群：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">es01</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">:</span>8.11.1    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> es01    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> node.name=es01      <span class="token punctuation">-</span> cluster.name=es<span class="token punctuation">-</span>docker<span class="token punctuation">-</span>cluster      <span class="token punctuation">-</span> discovery.seed_hosts=es02<span class="token punctuation">,</span>es03      <span class="token punctuation">-</span> cluster.initial_master_nodes=es01<span class="token punctuation">,</span>es02<span class="token punctuation">,</span>es03      <span class="token punctuation">-</span> bootstrap.memory_lock=true      <span class="token punctuation">-</span> ES_JAVA_OPTS=<span class="token punctuation">-</span>Xms512m <span class="token punctuation">-</span>Xmx512m    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> es01_data<span class="token punctuation">:</span>/usr/share/elasticsearch/data    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"9200:9200"</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> elastic    <span class="token key atrule">ulimits</span><span class="token punctuation">:</span>      <span class="token key atrule">memlock</span><span class="token punctuation">:</span>        <span class="token key atrule">soft</span><span class="token punctuation">:</span> <span class="token number">-1</span>        <span class="token key atrule">hard</span><span class="token punctuation">:</span> <span class="token number">-1</span>  <span class="token key atrule">es02</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">:</span>8.11.1    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> es02    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> node.name=es02      <span class="token punctuation">-</span> cluster.name=es<span class="token punctuation">-</span>docker<span class="token punctuation">-</span>cluster      <span class="token punctuation">-</span> discovery.seed_hosts=es01<span class="token punctuation">,</span>es03      <span class="token punctuation">-</span> cluster.initial_master_nodes=es01<span class="token punctuation">,</span>es02<span class="token punctuation">,</span>es03      <span class="token punctuation">-</span> bootstrap.memory_lock=true      <span class="token punctuation">-</span> ES_JAVA_OPTS=<span class="token punctuation">-</span>Xms512m <span class="token punctuation">-</span>Xmx512m    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> es02_data<span class="token punctuation">:</span>/usr/share/elasticsearch/data    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> elastic    <span class="token key atrule">ulimits</span><span class="token punctuation">:</span>      <span class="token key atrule">memlock</span><span class="token punctuation">:</span>        <span class="token key atrule">soft</span><span class="token punctuation">:</span> <span class="token number">-1</span>        <span class="token key atrule">hard</span><span class="token punctuation">:</span> <span class="token number">-1</span>  <span class="token key atrule">es03</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">:</span>8.11.1    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> es03    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> node.name=es03      <span class="token punctuation">-</span> cluster.name=es<span class="token punctuation">-</span>docker<span class="token punctuation">-</span>cluster      <span class="token punctuation">-</span> discovery.seed_hosts=es01<span class="token punctuation">,</span>es02      <span class="token punctuation">-</span> cluster.initial_master_nodes=es01<span class="token punctuation">,</span>es02<span class="token punctuation">,</span>es03      <span class="token punctuation">-</span> bootstrap.memory_lock=true      <span class="token punctuation">-</span> ES_JAVA_OPTS=<span class="token punctuation">-</span>Xms512m <span class="token punctuation">-</span>Xmx512m    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> es03_data<span class="token punctuation">:</span>/usr/share/elasticsearch/data    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> elastic    <span class="token key atrule">ulimits</span><span class="token punctuation">:</span>      <span class="token key atrule">memlock</span><span class="token punctuation">:</span>        <span class="token key atrule">soft</span><span class="token punctuation">:</span> <span class="token number">-1</span>        <span class="token key atrule">hard</span><span class="token punctuation">:</span> <span class="token number">-1</span>  <span class="token key atrule">kibana</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> kibana<span class="token punctuation">:</span>8.11.1    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> kibana    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ELASTICSEARCH_HOSTS=http<span class="token punctuation">:</span>//es01<span class="token punctuation">:</span><span class="token number">9200</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"5601:5601"</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> elastic    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> es01<span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">elastic</span><span class="token punctuation">:</span>    <span class="token key atrule">driver</span><span class="token punctuation">:</span> bridge<span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token key atrule">es01_data</span><span class="token punctuation">:</span>    <span class="token key atrule">driver</span><span class="token punctuation">:</span> local  <span class="token key atrule">es02_data</span><span class="token punctuation">:</span>    <span class="token key atrule">driver</span><span class="token punctuation">:</span> local  <span class="token key atrule">es03_data</span><span class="token punctuation">:</span>    <span class="token key atrule">driver</span><span class="token punctuation">:</span> local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-安全配置"><a href="#4-3-安全配置" class="headerlink" title="4.3 安全配置"></a>4.3 安全配置</h3><p>启用 X-Pack 安全功能：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">environment</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> xpack.security.enabled=true  <span class="token punctuation">-</span> ELASTIC_PASSWORD=your_secure_password  <span class="token punctuation">-</span> xpack.security.transport.ssl.enabled=true  <span class="token punctuation">-</span> xpack.security.transport.ssl.verification_mode=certificate  <span class="token punctuation">-</span> xpack.security.transport.ssl.keystore.path=/usr/share/elasticsearch/config/elastic<span class="token punctuation">-</span>certificates.p12  <span class="token punctuation">-</span> xpack.security.transport.ssl.truststore.path=/usr/share/elasticsearch/config/elastic<span class="token punctuation">-</span>certificates.p12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-日志配置"><a href="#4-4-日志配置" class="headerlink" title="4.4 日志配置"></a>4.4 日志配置</h3><p>配置 Elasticsearch 日志：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">environment</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> logger.level=INFO  <span class="token punctuation">-</span> logger.discovery=DEBUG<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="5-Kibana-配置详解"><a href="#5-Kibana-配置详解" class="headerlink" title="5. Kibana 配置详解"></a>5. Kibana 配置详解</h2><h3 id="5-1-基本配置"><a href="#5-1-基本配置" class="headerlink" title="5.1 基本配置"></a>5.1 基本配置</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">environment</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> ELASTICSEARCH_HOSTS=http<span class="token punctuation">:</span>//elasticsearch<span class="token punctuation">:</span><span class="token number">9200</span>  <span class="token punctuation">-</span> SERVER_NAME=kibana  <span class="token punctuation">-</span> SERVER_HOST=0.0.0.0  <span class="token punctuation">-</span> ELASTICSEARCH_USERNAME=elastic  <span class="token punctuation">-</span> ELASTICSEARCH_PASSWORD=your_secure_password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-插件配置"><a href="#5-2-插件配置" class="headerlink" title="5.2 插件配置"></a>5.2 插件配置</h3><p>预装插件的 Kibana 配置：</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> kibana:8.11.1</span><span class="token instruction"><span class="token keyword">RUN</span> bin/kibana-plugin install plugin_name</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="6-数据持久化"><a href="#6-数据持久化" class="headerlink" title="6. 数据持久化"></a>6. 数据持久化</h2><h3 id="6-1-使用命名卷"><a href="#6-1-使用命名卷" class="headerlink" title="6.1 使用命名卷"></a>6.1 使用命名卷</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> es_data<span class="token punctuation">:</span>/usr/share/elasticsearch/data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-2-使用绑定挂载"><a href="#6-2-使用绑定挂载" class="headerlink" title="6.2 使用绑定挂载"></a>6.2 使用绑定挂载</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> /path/on/host<span class="token punctuation">:</span>/usr/share/elasticsearch/data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="7-常见问题与解决方案"><a href="#7-常见问题与解决方案" class="headerlink" title="7. 常见问题与解决方案"></a>7. 常见问题与解决方案</h2><h3 id="7-1-内存不足"><a href="#7-1-内存不足" class="headerlink" title="7.1 内存不足"></a>7.1 内存不足</h3><p><strong>问题</strong>：Elasticsearch 容器启动失败，日志显示内存不足。</p><p><strong>解决方案</strong>：</p><ol><li>增加主机内存</li><li>调整 ES_JAVA_OPTS 参数，减少内存分配</li><li>检查系统其他进程占用</li></ol><h3 id="7-2-权限问题"><a href="#7-2-权限问题" class="headerlink" title="7.2 权限问题"></a>7.2 权限问题</h3><p><strong>问题</strong>：数据目录权限错误</p><p><strong>解决方案</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> <span class="token parameter variable">-R</span> <span class="token number">1000</span>:1000 /path/to/elasticsearch/data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-3-集群无法形成"><a href="#7-3-集群无法形成" class="headerlink" title="7.3 集群无法形成"></a>7.3 集群无法形成</h3><p><strong>问题</strong>：节点无法发现彼此</p><p><strong>解决方案</strong>：</p><ol><li>检查网络配置</li><li>确保 discovery.seed_hosts 配置正确</li><li>验证所有节点使用相同的 cluster.name</li></ol><h3 id="7-4-Kibana-无法连接-Elasticsearch"><a href="#7-4-Kibana-无法连接-Elasticsearch" class="headerlink" title="7.4 Kibana 无法连接 Elasticsearch"></a>7.4 Kibana 无法连接 Elasticsearch</h3><p><strong>问题</strong>：Kibana 页面显示无法连接到 Elasticsearch</p><p><strong>解决方案</strong>：</p><ol><li>确保 Elasticsearch 已启动并正常运行</li><li>检查 ELASTICSEARCH_HOSTS 配置是否正确</li><li>如果启用了安全功能，验证用户名和密码是否正确</li></ol><h2 id="8-性能优化"><a href="#8-性能优化" class="headerlink" title="8. 性能优化"></a>8. 性能优化</h2><h3 id="8-1-JVM-堆大小调整"><a href="#8-1-JVM-堆大小调整" class="headerlink" title="8.1 JVM 堆大小调整"></a>8.1 JVM 堆大小调整</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">environment</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> ES_JAVA_OPTS=<span class="token punctuation">-</span>Xms2g <span class="token punctuation">-</span>Xmx2g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="8-2-索引性能优化"><a href="#8-2-索引性能优化" class="headerlink" title="8.2 索引性能优化"></a>8.2 索引性能优化</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json">PUT /my_index<span class="token punctuation">{</span>  <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"number_of_shards"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token property">"number_of_replicas"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"refresh_interval"</span><span class="token operator">:</span> <span class="token string">"30s"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-3-系统级优化"><a href="#8-3-系统级优化" class="headerlink" title="8.3 系统级优化"></a>8.3 系统级优化</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 增加文件描述符限制</span><span class="token builtin class-name">ulimit</span> <span class="token parameter variable">-n</span> <span class="token number">65535</span><span class="token comment"># 禁用交换分区</span>swapoff <span class="token parameter variable">-a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-监控与维护"><a href="#9-监控与维护" class="headerlink" title="9. 监控与维护"></a>9. 监控与维护</h2><h3 id="9-1-使用-Metricbeat-监控"><a href="#9-1-使用-Metricbeat-监控" class="headerlink" title="9.1 使用 Metricbeat 监控"></a>9.1 使用 Metricbeat 监控</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">metricbeat</span><span class="token punctuation">:</span>  <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.elastic.co/beats/metricbeat<span class="token punctuation">:</span>8.11.1  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> /var/run/docker.sock<span class="token punctuation">:</span>/var/run/docker.sock<span class="token punctuation">:</span>ro    <span class="token punctuation">-</span> ./metricbeat.yml<span class="token punctuation">:</span>/usr/share/metricbeat/metricbeat.yml<span class="token punctuation">:</span>ro  <span class="token key atrule">networks</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> elastic  <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> elasticsearch    <span class="token punctuation">-</span> kibana<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-2-备份与恢复"><a href="#9-2-备份与恢复" class="headerlink" title="9.2 备份与恢复"></a>9.2 备份与恢复</h3><p>使用 Elasticsearch 快照功能：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"># 注册快照仓库PUT /_snapshot/my_backup<span class="token punctuation">{</span>  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"fs"</span><span class="token punctuation">,</span>  <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"location"</span><span class="token operator">:</span> <span class="token string">"/usr/share/elasticsearch/data/snapshots"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span># 创建快照PUT /_snapshot/my_backup/snapshot_1# 恢复快照POST /_snapshot/my_backup/snapshot_1/_restore<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-生产环境最佳实践"><a href="#10-生产环境最佳实践" class="headerlink" title="10. 生产环境最佳实践"></a>10. 生产环境最佳实践</h2><ol><li><strong>高可用性</strong>：部署至少三个主节点，确保集群稳定性</li><li><strong>安全性</strong>：启用 X-Pack 安全功能，设置强密码，使用 TLS/SSL 加密</li><li><strong>资源隔离</strong>：为 Elasticsearch 节点分配足够且独立的资源</li><li><strong>监控</strong>：实施全面的监控策略，及时发现潜在问题</li><li><strong>备份</strong>：定期备份数据，测试恢复流程</li><li><strong>日志管理</strong>：配置适当的日志轮转策略，避免磁盘空间耗尽</li><li><strong>网络隔离</strong>：使用专用网络，限制外部访问</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过 Docker 部署 Elasticsearch 和 Kibana 可以大幅简化安装和配置过程，提高环境一致性和可移植性。本文详细介绍了从单节点部署到集群配置的完整流程，涵盖了安全设置、性能优化和常见问题解决方案。通过遵循这些最佳实践，您可以构建一个稳定、高效、安全的 Elasticsearch</p><hr><h2 id="希望这篇文章能帮助您了解Docker部署Elasticsearch-和-Kibana的问题。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您了解Docker部署Elasticsearch-和-Kibana的问题。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您了解Docker部署Elasticsearch 和 Kibana的问题。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您了解Docker部署Elasticsearch 和 Kibana的问题。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;Elasticsearch 和 Kibana 是强大的数据存储、搜索和可视化工具，但传统部署方式复杂且依赖较多。使用 Doc</summary>
      
    
    
    
    <category term="Linux" scheme="https://lucky845.github.io/categories/Linux/"/>
    
    <category term="Docker" scheme="https://lucky845.github.io/categories/Linux/Docker/"/>
    
    
    <category term="Docker" scheme="https://lucky845.github.io/tags/Docker/"/>
    
    <category term="容器化" scheme="https://lucky845.github.io/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
    <category term="Elasticsearch" scheme="https://lucky845.github.io/tags/Elasticsearch/"/>
    
    <category term="Kibana" scheme="https://lucky845.github.io/tags/Kibana/"/>
    
    <category term="数据分析" scheme="https://lucky845.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>【Docker】日志过大导致磁盘占用高的清理指南</title>
    <link href="https://lucky845.github.io/archives/d55fa596.html"/>
    <id>https://lucky845.github.io/archives/d55fa596.html</id>
    <published>2025-02-28T05:00:00.000Z</published>
    <updated>2025-02-28T11:45:16.853Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>Docker容器在运行过程中会产生大量日志，尤其是在生产环境中长时间运行的容器。如果没有合理配置日志管理策略，这些日志文件会不断增长，最终导致磁盘空间不足，影响系统稳定性和性能。本文将介绍如何识别Docker日志占用问题，以及多种清理和管理Docker日志的方法。</p><h2 id="1-了解Docker日志存储机制"><a href="#1-了解Docker日志存储机制" class="headerlink" title="1. 了解Docker日志存储机制"></a>1. 了解Docker日志存储机制</h2><h3 id="1-1-默认日志驱动"><a href="#1-1-默认日志驱动" class="headerlink" title="1.1 默认日志驱动"></a>1.1 默认日志驱动</h3><p>Docker默认使用<code>json-file</code>日志驱动，将容器的标准输出和标准错误输出保存为JSON格式的文件。这些日志文件通常存储在以下位置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/var/lib/docker/containers/<span class="token operator">&lt;</span>container-id<span class="token operator">&gt;</span>/<span class="token operator">&lt;</span>container-id<span class="token operator">&gt;</span>-json.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2-日志驱动类型"><a href="#1-2-日志驱动类型" class="headerlink" title="1.2 日志驱动类型"></a>1.2 日志驱动类型</h3><p>Docker支持多种日志驱动，包括：</p><ul><li><code>json-file</code>：默认驱动，将日志存储为JSON文件</li><li><code>local</code>：优化的本地文件存储</li><li><code>syslog</code>：将日志发送到syslog</li><li><code>journald</code>：将日志发送到journald</li><li><code>splunk</code>：将日志发送到Splunk</li><li><code>awslogs</code>：将日志发送到Amazon CloudWatch Logs</li><li><code>none</code>：禁用容器日志</li></ul><h2 id="2-查看Docker日志占用情况"><a href="#2-查看Docker日志占用情况" class="headerlink" title="2. 查看Docker日志占用情况"></a>2. 查看Docker日志占用情况</h2><h3 id="2-1-查看磁盘使用情况"><a href="#2-1-查看磁盘使用情况" class="headerlink" title="2.1 查看磁盘使用情况"></a>2.1 查看磁盘使用情况</h3><p>首先，使用<code>df</code>命令查看整体磁盘使用情况：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">df</span> <span class="token parameter variable">-h</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2-查找Docker数据目录"><a href="#2-2-查找Docker数据目录" class="headerlink" title="2.2 查找Docker数据目录"></a>2.2 查找Docker数据目录</h3><p>查看Docker数据目录的大小：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">du</span> <span class="token parameter variable">-sh</span> /var/lib/docker/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3-查找占用空间最大的容器日志"><a href="#2-3-查找占用空间最大的容器日志" class="headerlink" title="2.3 查找占用空间最大的容器日志"></a>2.3 查找占用空间最大的容器日志</h3><p>使用以下命令查找占用空间最大的容器日志文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> /var/lib/docker/containers/ <span class="token parameter variable">-name</span> <span class="token string">"*-json.log"</span> <span class="token parameter variable">-exec</span> <span class="token function">ls</span> <span class="token parameter variable">-sh</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">\</span><span class="token punctuation">;</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-hr</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者使用以下命令查看所有容器的日志大小：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">container</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-qa</span><span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>  <span class="token assign-left variable">log_file</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> inspect <span class="token parameter variable">--format</span><span class="token operator">=</span><span class="token string">'{{.LogPath}}'</span> $container<span class="token variable">)</span></span>  <span class="token assign-left variable">log_size</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span> <span class="token parameter variable">-sh</span> $log_file <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print $1}'</span><span class="token variable">)</span></span>  <span class="token assign-left variable">container_name</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> inspect <span class="token parameter variable">--format</span><span class="token operator">=</span><span class="token string">'{{.Name}}'</span> $container <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/^\///'</span><span class="token variable">)</span></span>  <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$container_name</span>: <span class="token variable">$log_size</span>"</span><span class="token keyword">done</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-hr</span> <span class="token parameter variable">-k2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-清理Docker日志的方法"><a href="#3-清理Docker日志的方法" class="headerlink" title="3. 清理Docker日志的方法"></a>3. 清理Docker日志的方法</h2><h3 id="3-1-手动清理容器日志"><a href="#3-1-手动清理容器日志" class="headerlink" title="3.1 手动清理容器日志"></a>3.1 手动清理容器日志</h3><h4 id="3-1-1-清空特定容器的日志文件"><a href="#3-1-1-清空特定容器的日志文件" class="headerlink" title="3.1.1 清空特定容器的日志文件"></a>3.1.1 清空特定容器的日志文件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 获取容器日志文件路径</span><span class="token assign-left variable">log_file</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> inspect <span class="token parameter variable">--format</span><span class="token operator">=</span><span class="token string">'{{.LogPath}}'</span> <span class="token operator">&lt;</span>container_name_or_id<span class="token operator">&gt;</span><span class="token variable">)</span></span><span class="token comment"># 清空日志文件</span><span class="token function">sudo</span> <span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"truncate -s 0 <span class="token variable">$log_file</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-2-清空所有容器的日志文件"><a href="#3-1-2-清空所有容器的日志文件" class="headerlink" title="3.1.2 清空所有容器的日志文件"></a>3.1.2 清空所有容器的日志文件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"truncate -s 0 /var/lib/docker/containers/*/*-json.log"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者使用循环清空所有容器的日志：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">container</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-qa</span><span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>  <span class="token assign-left variable">log_file</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> inspect <span class="token parameter variable">--format</span><span class="token operator">=</span><span class="token string">'{{.LogPath}}'</span> $container<span class="token variable">)</span></span>  <span class="token function">sudo</span> <span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">"truncate -s 0 <span class="token variable">$log_file</span>"</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-配置Docker日志轮转"><a href="#3-2-配置Docker日志轮转" class="headerlink" title="3.2 配置Docker日志轮转"></a>3.2 配置Docker日志轮转</h3><h4 id="3-2-1-全局配置（daemon-json）"><a href="#3-2-1-全局配置（daemon-json）" class="headerlink" title="3.2.1 全局配置（daemon.json）"></a>3.2.1 全局配置（daemon.json）</h4><p>编辑Docker守护进程配置文件<code>/etc/docker/daemon.json</code>：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"log-driver"</span><span class="token operator">:</span> <span class="token string">"json-file"</span><span class="token punctuation">,</span>  <span class="token property">"log-opts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"max-size"</span><span class="token operator">:</span> <span class="token string">"10m"</span><span class="token punctuation">,</span>    <span class="token property">"max-file"</span><span class="token operator">:</span> <span class="token string">"3"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置说明：</p><ul><li><code>max-size</code>：单个日志文件的最大大小，超过后会创建新文件</li><li><code>max-file</code>：最多保留的日志文件数量</li></ul><p>修改配置后，重启Docker服务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-2-单个容器配置"><a href="#3-2-2-单个容器配置" class="headerlink" title="3.2.2 单个容器配置"></a>3.2.2 单个容器配置</h4><p>在启动容器时指定日志选项：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>  --log-driver json-file <span class="token punctuation">\</span>  --log-opt max-size<span class="token operator">=</span>10m <span class="token punctuation">\</span>  --log-opt max-file<span class="token operator">=</span><span class="token number">3</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--name</span> myapp <span class="token punctuation">\</span>  nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-3-Docker-Compose配置"><a href="#3-2-3-Docker-Compose配置" class="headerlink" title="3.2.3 Docker Compose配置"></a>3.2.3 Docker Compose配置</h4><p>在<code>docker-compose.yml</code>文件中配置日志选项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">webapp</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">logging</span><span class="token punctuation">:</span>      <span class="token key atrule">driver</span><span class="token punctuation">:</span> <span class="token string">"json-file"</span>      <span class="token key atrule">options</span><span class="token punctuation">:</span>        <span class="token key atrule">max-size</span><span class="token punctuation">:</span> <span class="token string">"10m"</span>        <span class="token key atrule">max-file</span><span class="token punctuation">:</span> <span class="token string">"3"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-使用不同的日志驱动"><a href="#3-3-使用不同的日志驱动" class="headerlink" title="3.3 使用不同的日志驱动"></a>3.3 使用不同的日志驱动</h3><h4 id="3-3-1-使用local日志驱动"><a href="#3-3-1-使用local日志驱动" class="headerlink" title="3.3.1 使用local日志驱动"></a>3.3.1 使用local日志驱动</h4><p><code>local</code>日志驱动比<code>json-file</code>更高效，并且默认支持日志轮转：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>  --log-driver <span class="token builtin class-name">local</span> <span class="token punctuation">\</span>  --log-opt max-size<span class="token operator">=</span>10m <span class="token punctuation">\</span>  --log-opt max-file<span class="token operator">=</span><span class="token number">3</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--name</span> myapp <span class="token punctuation">\</span>  nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-2-使用syslog日志驱动"><a href="#3-3-2-使用syslog日志驱动" class="headerlink" title="3.3.2 使用syslog日志驱动"></a>3.3.2 使用syslog日志驱动</h4><p>将容器日志发送到系统日志：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>  --log-driver syslog <span class="token punctuation">\</span>  <span class="token parameter variable">--name</span> myapp <span class="token punctuation">\</span>  nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-3-禁用容器日志"><a href="#3-3-3-禁用容器日志" class="headerlink" title="3.3.3 禁用容器日志"></a>3.3.3 禁用容器日志</h4><p>对于不需要记录日志的容器，可以完全禁用日志：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>  --log-driver none <span class="token punctuation">\</span>  <span class="token parameter variable">--name</span> myapp <span class="token punctuation">\</span>  nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-防止日志再次过大的最佳实践"><a href="#4-防止日志再次过大的最佳实践" class="headerlink" title="4. 防止日志再次过大的最佳实践"></a>4. 防止日志再次过大的最佳实践</h2><h3 id="4-1-应用程序日志管理"><a href="#4-1-应用程序日志管理" class="headerlink" title="4.1 应用程序日志管理"></a>4.1 应用程序日志管理</h3><ul><li>在应用程序内部实现日志轮转</li><li>避免在容器内将日志写入文件，而是输出到标准输出和标准错误</li><li>考虑使用专门的日志收集工具，如ELK Stack、Fluentd或Loki</li></ul><h3 id="4-2-容器配置最佳实践"><a href="#4-2-容器配置最佳实践" class="headerlink" title="4.2 容器配置最佳实践"></a>4.2 容器配置最佳实践</h3><ul><li>为每个容器设置合理的日志大小限制</li><li>定期检查容器日志大小</li><li>使用数据卷挂载日志目录，便于管理</li></ul><h3 id="4-3-监控和告警"><a href="#4-3-监控和告警" class="headerlink" title="4.3 监控和告警"></a>4.3 监控和告警</h3><ul><li>设置磁盘使用率监控</li><li>配置告警阈值，在磁盘使用率达到一定程度时发出警告</li><li>实现自动化脚本定期清理过大的日志文件</li></ul><h2 id="5-使用Docker日志管理工具"><a href="#5-使用Docker日志管理工具" class="headerlink" title="5. 使用Docker日志管理工具"></a>5. 使用Docker日志管理工具</h2><h3 id="5-1-Logrotate与Docker结合"><a href="#5-1-Logrotate与Docker结合" class="headerlink" title="5.1 Logrotate与Docker结合"></a>5.1 Logrotate与Docker结合</h3><p>可以使用系统的<code>logrotate</code>工具管理Docker日志。创建配置文件<code>/etc/logrotate.d/docker-container</code>：</p><pre class="line-numbers language-none"><code class="language-none">/var/lib/docker/containers/*/*.log {    daily    rotate 7    compress    delaycompress    missingok    copytruncate}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-使用第三方日志管理工具"><a href="#5-2-使用第三方日志管理工具" class="headerlink" title="5.2 使用第三方日志管理工具"></a>5.2 使用第三方日志管理工具</h3><ul><li><strong>Fluentd/Fluent Bit</strong>：轻量级日志收集器</li><li><strong>Logspout</strong>：简单的Docker日志收集工具</li><li><strong>ELK Stack</strong>：Elasticsearch、Logstash和Kibana组合</li><li><strong>Graylog</strong>：集中式日志管理平台</li></ul><h2 id="6-实际案例分析"><a href="#6-实际案例分析" class="headerlink" title="6. 实际案例分析"></a>6. 实际案例分析</h2><h3 id="6-1-问题场景"><a href="#6-1-问题场景" class="headerlink" title="6.1 问题场景"></a>6.1 问题场景</h3><p>某生产环境中的Docker容器运行了几个月后，系统磁盘使用率达到95%，导致服务不稳定。</p><h3 id="6-2-问题诊断"><a href="#6-2-问题诊断" class="headerlink" title="6.2 问题诊断"></a>6.2 问题诊断</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看磁盘使用情况</span><span class="token function">df</span> <span class="token parameter variable">-h</span><span class="token comment"># 查找大文件</span><span class="token function">du</span> <span class="token parameter variable">-sh</span> /var/lib/docker/* <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-hr</span><span class="token comment"># 发现容器日志占用了大量空间</span><span class="token function">find</span> /var/lib/docker/containers/ <span class="token parameter variable">-name</span> <span class="token string">"*-json.log"</span> <span class="token parameter variable">-exec</span> <span class="token function">ls</span> <span class="token parameter variable">-sh</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">\</span><span class="token punctuation">;</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-hr</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-解决方案"><a href="#6-3-解决方案" class="headerlink" title="6.3 解决方案"></a>6.3 解决方案</h3><ol><li>紧急清理：清空最大的几个日志文件</li><li>配置日志轮转：修改<code>daemon.json</code>设置日志大小限制</li><li>重启Docker服务应用新配置</li><li>设置监控和定期清理脚本</li></ol><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h2><p>Docker日志过大是一个常见问题，但通过合理的配置和管理策略，可以有效避免磁盘空间被耗尽。关键措施包括：</p><ol><li>配置适当的日志驱动和日志轮转策略</li><li>定期监控和清理容器日志</li><li>实施日志管理最佳实践</li><li>考虑使用专业的日志管理工具</li></ol><p>通过这些方法，可以在保留必要日志信息的同时，有效控制磁盘空间使用，确保Docker环境的稳定运行。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.docker.com/config/containers/logging/configure/">Docker日志驱动文档</a></li><li><a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/">Docker配置最佳实践</a></li><li><a href="https://linux.die.net/man/8/logrotate">Logrotate文档</a></li></ul><hr><h2 id="希望这篇文章能帮助您解决Docker日志导致的磁盘占用问题。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您解决Docker日志导致的磁盘占用问题。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您解决Docker日志导致的磁盘占用问题。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您解决Docker日志导致的磁盘占用问题。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;Docker容器在运行过程中会产生大量日志，尤其是在生产环境中长时间运行的容器。如果没有合理配置日志管理策略，这些日志文件会</summary>
      
    
    
    
    <category term="Linux" scheme="https://lucky845.github.io/categories/Linux/"/>
    
    <category term="Docker" scheme="https://lucky845.github.io/categories/Linux/Docker/"/>
    
    
    <category term="性能优化" scheme="https://lucky845.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="系统管理" scheme="https://lucky845.github.io/tags/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
    
    <category term="磁盘清理" scheme="https://lucky845.github.io/tags/%E7%A3%81%E7%9B%98%E6%B8%85%E7%90%86/"/>
    
    <category term="Docker" scheme="https://lucky845.github.io/tags/Docker/"/>
    
    <category term="日志管理" scheme="https://lucky845.github.io/tags/%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>【Docker】Compose使用与配置指南</title>
    <link href="https://lucky845.github.io/archives/d55fa596.html"/>
    <id>https://lucky845.github.io/archives/d55fa596.html</id>
    <published>2025-02-28T04:00:00.000Z</published>
    <updated>2025-02-28T11:40:34.353Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>随着容器化应用的增多，单独管理多个容器变得越来越复杂。Docker Compose 是一个用于定义和运行多容器 Docker 应用程序的工具，通过一个 YAML 文件配置应用的服务，然后使用一个命令创建并启动所有服务。本文将详细介绍 Docker Compose 的使用方法与配置技巧。</p><h2 id="1-Docker-Compose-简介"><a href="#1-Docker-Compose-简介" class="headerlink" title="1. Docker Compose 简介"></a>1. Docker Compose 简介</h2><h3 id="1-1-什么是-Docker-Compose"><a href="#1-1-什么是-Docker-Compose" class="headerlink" title="1.1 什么是 Docker Compose"></a>1.1 什么是 Docker Compose</h3><p>Docker Compose 是 Docker 官方提供的开源项目，用于定义和运行由多个容器组成的应用。使用 Compose，您可以通过一个 YAML 文件定义一个多容器的应用，然后使用一个命令完成应用的创建和启动。</p><h3 id="1-2-Docker-Compose-的主要优势"><a href="#1-2-Docker-Compose-的主要优势" class="headerlink" title="1.2 Docker Compose 的主要优势"></a>1.2 Docker Compose 的主要优势</h3><ul><li><strong>简化配置</strong>：通过 YAML 文件声明式地定义应用服务</li><li><strong>单一命令管理</strong>：使用一条命令完成环境的创建和启动</li><li><strong>环境隔离</strong>：每个项目可以有独立的环境</li><li><strong>保持容器数据卷</strong>：Compose 可以保存数据卷中的数据</li><li><strong>仅重新创建已更改的容器</strong>：Compose 会检测配置变化，只重新创建变更的容器</li><li><strong>变量支持</strong>：支持环境变量和配置文件中的变量替换</li></ul><h2 id="2-安装-Docker-Compose"><a href="#2-安装-Docker-Compose" class="headerlink" title="2. 安装 Docker Compose"></a>2. 安装 Docker Compose</h2><h3 id="2-1-在-Linux-上安装"><a href="#2-1-在-Linux-上安装" class="headerlink" title="2.1 在 Linux 上安装"></a>2.1 在 Linux 上安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载 Docker Compose 二进制文件</span><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">"https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>"</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose<span class="token comment"># 添加可执行权限</span><span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose<span class="token comment"># 验证安装</span><span class="token function">docker-compose</span> <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-在-macOS-上安装"><a href="#2-2-在-macOS-上安装" class="headerlink" title="2.2 在 macOS 上安装"></a>2.2 在 macOS 上安装</h3><p>如果已经安装了 Docker Desktop for Mac，则 Docker Compose 已经包含在其中。</p><h3 id="2-3-在-Windows-上安装"><a href="#2-3-在-Windows-上安装" class="headerlink" title="2.3 在 Windows 上安装"></a>2.3 在 Windows 上安装</h3><p>如果已经安装了 Docker Desktop for Windows，则 Docker Compose 已经包含在其中。</p><h2 id="3-Docker-Compose-文件结构"><a href="#3-Docker-Compose-文件结构" class="headerlink" title="3. Docker Compose 文件结构"></a>3. Docker Compose 文件结构</h2><h3 id="3-1-docker-compose-yml-基本结构"><a href="#3-1-docker-compose-yml-基本结构" class="headerlink" title="3.1 docker-compose.yml 基本结构"></a>3.1 docker-compose.yml 基本结构</h3><p>Docker Compose 使用 YAML 文件（通常命名为 <code>docker-compose.yml</code>）来定义服务配置：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span>  <span class="token comment"># Compose 文件版本</span><span class="token key atrule">services</span><span class="token punctuation">:</span>      <span class="token comment"># 定义服务</span>  <span class="token key atrule">web</span><span class="token punctuation">:</span>         <span class="token comment"># 服务名称</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>latest  <span class="token comment"># 使用的镜像</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>     <span class="token comment"># 端口映射</span>      <span class="token punctuation">-</span> <span class="token string">"80:80"</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>   <span class="token comment"># 挂载卷</span>      <span class="token punctuation">-</span> ./html<span class="token punctuation">:</span>/usr/share/nginx/html    <span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token comment"># 网络配置</span>      <span class="token punctuation">-</span> frontend  <span class="token key atrule">db</span><span class="token punctuation">:</span>          <span class="token comment"># 另一个服务</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">5.7</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span> <span class="token comment"># 环境变量</span>      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> example    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> db_data<span class="token punctuation">:</span>/var/lib/mysql    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> backend<span class="token key atrule">volumes</span><span class="token punctuation">:</span>       <span class="token comment"># 定义卷</span>  <span class="token key atrule">db_data</span><span class="token punctuation">:</span>     <span class="token comment"># 卷名称</span><span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token comment"># 定义网络</span>  <span class="token key atrule">frontend</span><span class="token punctuation">:</span>    <span class="token comment"># 网络名称</span>  backend<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-主要配置项说明"><a href="#3-2-主要配置项说明" class="headerlink" title="3.2 主要配置项说明"></a>3.2 主要配置项说明</h3><ol><li><strong>version</strong>：指定 Compose 文件格式版本</li><li><strong>services</strong>：定义应用的各个服务</li><li><strong>volumes</strong>：定义数据卷</li><li><strong>networks</strong>：定义网络</li></ol><h2 id="4-Docker-Compose-核心配置项"><a href="#4-Docker-Compose-核心配置项" class="headerlink" title="4. Docker Compose 核心配置项"></a>4. Docker Compose 核心配置项</h2><h3 id="4-1-服务配置"><a href="#4-1-服务配置" class="headerlink" title="4.1 服务配置"></a>4.1 服务配置</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">webapp</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>latest  <span class="token comment"># 使用现有镜像</span>    <span class="token comment"># 或者使用 Dockerfile 构建</span>    <span class="token key atrule">build</span><span class="token punctuation">:</span>       <span class="token key atrule">context</span><span class="token punctuation">:</span> ./dir  <span class="token comment"># 构建上下文路径</span>      <span class="token key atrule">dockerfile</span><span class="token punctuation">:</span> Dockerfile<span class="token punctuation">-</span>alternate  <span class="token comment"># 指定 Dockerfile</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>web<span class="token punctuation">-</span>container  <span class="token comment"># 容器名称</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always  <span class="token comment"># 重启策略</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>  <span class="token comment"># 端口映射</span>      <span class="token punctuation">-</span> <span class="token string">"80:80"</span>      <span class="token punctuation">-</span> <span class="token string">"443:443"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>  <span class="token comment"># 环境变量</span>      <span class="token punctuation">-</span> NODE_ENV=production    <span class="token key atrule">env_file</span><span class="token punctuation">:</span>  <span class="token comment"># 从文件加载环境变量</span>      <span class="token punctuation">-</span> ./common.env    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>  <span class="token comment"># 依赖关系</span>      <span class="token punctuation">-</span> db      <span class="token punctuation">-</span> redis    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token comment"># 数据卷</span>      <span class="token punctuation">-</span> ./data<span class="token punctuation">:</span>/data      <span class="token punctuation">-</span> logs<span class="token punctuation">:</span>/var/log    <span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token comment"># 网络</span>      <span class="token punctuation">-</span> frontend    <span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token comment"># 部署配置（Swarm 模式）</span>      <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">2</span>      <span class="token key atrule">resources</span><span class="token punctuation">:</span>        <span class="token key atrule">limits</span><span class="token punctuation">:</span>          <span class="token key atrule">cpus</span><span class="token punctuation">:</span> <span class="token string">'0.5'</span>          <span class="token key atrule">memory</span><span class="token punctuation">:</span> 50M<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-网络配置"><a href="#4-2-网络配置" class="headerlink" title="4.2 网络配置"></a>4.2 网络配置</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">frontend</span><span class="token punctuation">:</span>    <span class="token key atrule">driver</span><span class="token punctuation">:</span> bridge  <span class="token comment"># 网络驱动</span>    <span class="token key atrule">driver_opts</span><span class="token punctuation">:</span>  <span class="token comment"># 驱动选项</span>      <span class="token key atrule">com.docker.network.bridge.name</span><span class="token punctuation">:</span> frontend    <span class="token key atrule">ipam</span><span class="token punctuation">:</span>  <span class="token comment"># IP 地址管理</span>      <span class="token key atrule">driver</span><span class="token punctuation">:</span> default      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">subnet</span><span class="token punctuation">:</span> 172.28.0.0/16  <span class="token key atrule">backend</span><span class="token punctuation">:</span>    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 使用已存在的外部网络</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-数据卷配置"><a href="#4-3-数据卷配置" class="headerlink" title="4.3 数据卷配置"></a>4.3 数据卷配置</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token key atrule">db_data</span><span class="token punctuation">:</span>  <span class="token comment"># 普通卷</span>  <span class="token key atrule">cached_data</span><span class="token punctuation">:</span>    <span class="token key atrule">driver</span><span class="token punctuation">:</span> local  <span class="token comment"># 卷驱动</span>    <span class="token key atrule">driver_opts</span><span class="token punctuation">:</span>  <span class="token comment"># 驱动选项</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> none      <span class="token key atrule">device</span><span class="token punctuation">:</span> /path/on/host      <span class="token key atrule">o</span><span class="token punctuation">:</span> bind  <span class="token key atrule">external_data</span><span class="token punctuation">:</span>    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 使用已存在的外部卷</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-Docker-Compose-常用命令"><a href="#5-Docker-Compose-常用命令" class="headerlink" title="5. Docker Compose 常用命令"></a>5. Docker Compose 常用命令</h2><h3 id="5-1-启动和停止服务"><a href="#5-1-启动和停止服务" class="headerlink" title="5.1 启动和停止服务"></a>5.1 启动和停止服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建并启动所有服务</span><span class="token function">docker-compose</span> up<span class="token comment"># 后台运行服务</span><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span><span class="token comment"># 停止并移除所有服务</span><span class="token function">docker-compose</span> down<span class="token comment"># 停止服务但不移除容器、网络等</span><span class="token function">docker-compose</span> stop<span class="token comment"># 启动已停止的服务</span><span class="token function">docker-compose</span> start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-服务管理"><a href="#5-2-服务管理" class="headerlink" title="5.2 服务管理"></a>5.2 服务管理</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看服务状态</span><span class="token function">docker-compose</span> <span class="token function">ps</span><span class="token comment"># 查看服务日志</span><span class="token function">docker-compose</span> logs<span class="token comment"># 实时查看特定服务的日志</span><span class="token function">docker-compose</span> logs <span class="token parameter variable">-f</span> service_name<span class="token comment"># 在指定服务中执行命令</span><span class="token function">docker-compose</span> <span class="token builtin class-name">exec</span> service_name <span class="token builtin class-name">command</span><span class="token comment"># 重新构建服务</span><span class="token function">docker-compose</span> build service_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-扩展服务实例"><a href="#5-3-扩展服务实例" class="headerlink" title="5.3 扩展服务实例"></a>5.3 扩展服务实例</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将 worker 服务扩展到 3 个实例</span><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span> <span class="token parameter variable">--scale</span> <span class="token assign-left variable">worker</span><span class="token operator">=</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="6-实际应用案例"><a href="#6-实际应用案例" class="headerlink" title="6. 实际应用案例"></a>6. 实际应用案例</h2><h3 id="6-1-Web-应用-数据库-Redis-缓存"><a href="#6-1-Web-应用-数据库-Redis-缓存" class="headerlink" title="6.1 Web 应用 + 数据库 + Redis 缓存"></a>6.1 Web 应用 + 数据库 + Redis 缓存</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">web</span><span class="token punctuation">:</span>    <span class="token key atrule">build</span><span class="token punctuation">:</span> ./web    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"8000:8000"</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> db      <span class="token punctuation">-</span> redis    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> DATABASE_URL=postgres<span class="token punctuation">:</span>//postgres<span class="token punctuation">:</span>postgres@db<span class="token punctuation">:</span>5432/app      <span class="token punctuation">-</span> REDIS_URL=redis<span class="token punctuation">:</span>//redis<span class="token punctuation">:</span>6379/0    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always  <span class="token key atrule">db</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> postgres<span class="token punctuation">:</span><span class="token number">13</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> postgres_data<span class="token punctuation">:</span>/var/lib/postgresql/data    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> POSTGRES_USER=postgres      <span class="token punctuation">-</span> POSTGRES_PASSWORD=postgres      <span class="token punctuation">-</span> POSTGRES_DB=app  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span><span class="token number">6</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> redis_data<span class="token punctuation">:</span>/data<span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token key atrule">postgres_data</span><span class="token punctuation">:</span>  redis_data<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-WordPress-MySQL"><a href="#6-2-WordPress-MySQL" class="headerlink" title="6.2 WordPress + MySQL"></a>6.2 WordPress + MySQL</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">wordpress</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> wordpress<span class="token punctuation">:</span>latest    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"8080:80"</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">WORDPRESS_DB_HOST</span><span class="token punctuation">:</span> db      <span class="token key atrule">WORDPRESS_DB_USER</span><span class="token punctuation">:</span> wordpress      <span class="token key atrule">WORDPRESS_DB_PASSWORD</span><span class="token punctuation">:</span> wordpress      <span class="token key atrule">WORDPRESS_DB_NAME</span><span class="token punctuation">:</span> wordpress    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> wordpress_data<span class="token punctuation">:</span>/var/www/html  <span class="token key atrule">db</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">5.7</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">MYSQL_DATABASE</span><span class="token punctuation">:</span> wordpress      <span class="token key atrule">MYSQL_USER</span><span class="token punctuation">:</span> wordpress      <span class="token key atrule">MYSQL_PASSWORD</span><span class="token punctuation">:</span> wordpress      <span class="token key atrule">MYSQL_RANDOM_ROOT_PASSWORD</span><span class="token punctuation">:</span> <span class="token string">'1'</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> db_data<span class="token punctuation">:</span>/var/lib/mysql<span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token key atrule">wordpress_data</span><span class="token punctuation">:</span>  db_data<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-Docker-Compose-最佳实践"><a href="#7-Docker-Compose-最佳实践" class="headerlink" title="7. Docker Compose 最佳实践"></a>7. Docker Compose 最佳实践</h2><ol><li><strong>使用版本控制</strong>：将 docker-compose.yml 文件纳入版本控制系统</li><li><strong>环境变量分离</strong>：使用 .env 文件或环境变量管理敏感信息</li><li><strong>合理组织服务</strong>：相关服务放在同一个 Compose 文件中，不相关的分开</li><li><strong>使用健康检查</strong>：为服务配置健康检查，确保依赖服务正常运行</li><li><strong>资源限制</strong>：为服务设置资源限制，避免单个服务消耗过多资源</li><li><strong>日志管理</strong>：配置适当的日志驱动和轮转策略</li><li><strong>网络隔离</strong>：使用多个网络隔离不同服务组</li><li><strong>数据持久化</strong>：使用命名卷而非绑定挂载来持久化数据</li></ol><h2 id="8-常见问题与解决方案"><a href="#8-常见问题与解决方案" class="headerlink" title="8. 常见问题与解决方案"></a>8. 常见问题与解决方案</h2><h3 id="8-1-服务启动顺序问题"><a href="#8-1-服务启动顺序问题" class="headerlink" title="8.1 服务启动顺序问题"></a>8.1 服务启动顺序问题</h3><p>虽然 <code>depends_on</code> 可以控制服务启动顺序，但它不会等待服务就绪。解决方案：</p><ol><li>使用健康检查：</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">web</span><span class="token punctuation">:</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token key atrule">db</span><span class="token punctuation">:</span>        <span class="token key atrule">condition</span><span class="token punctuation">:</span> service_healthy  <span class="token key atrule">db</span><span class="token punctuation">:</span>    <span class="token key atrule">healthcheck</span><span class="token punctuation">:</span>      <span class="token key atrule">test</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"CMD"</span><span class="token punctuation">,</span> <span class="token string">"pg_isready"</span><span class="token punctuation">,</span> <span class="token string">"-U"</span><span class="token punctuation">,</span> <span class="token string">"postgres"</span><span class="token punctuation">]</span>      <span class="token key atrule">interval</span><span class="token punctuation">:</span> 5s      <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 5s      <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>使用等待脚本：</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">web</span><span class="token punctuation">:</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"./wait-for-it.sh"</span><span class="token punctuation">,</span> <span class="token string">"db:5432"</span><span class="token punctuation">,</span> <span class="token string">"--"</span><span class="token punctuation">,</span> <span class="token string">"python"</span><span class="token punctuation">,</span> <span class="token string">"app.py"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="8-2-网络连接问题"><a href="#8-2-网络连接问题" class="headerlink" title="8.2 网络连接问题"></a>8.2 网络连接问题</h3><p>服务间通信使用服务名作为主机名，确保在同一网络中。</p><h3 id="8-3-数据持久化问题"><a href="#8-3-数据持久化问题" class="headerlink" title="8.3 数据持久化问题"></a>8.3 数据持久化问题</h3><p>使用命名卷而非匿名卷，并在需要时使用外部卷。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Docker Compose 是管理多容器应用的强大工具，通过简单的 YAML 配置文件和命令行工具，可以大大简化容器化应用的部署和管理。掌握 Docker Compose 的使用与配置，能够帮助开发者更高效地构建、测试和部署复杂的应用系统。</p><hr><h2 id="希望这篇文章能帮助您更好地理解和使用-Docker-Compose。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和使用-Docker-Compose。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和使用 Docker Compose。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和使用 Docker Compose。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;随着容器化应用的增多，单独管理多个容器变得越来越复杂。Docker Compose 是一个用于定义和运行多容器 Docker</summary>
      
    
    
    
    <category term="Linux" scheme="https://lucky845.github.io/categories/Linux/"/>
    
    <category term="Docker" scheme="https://lucky845.github.io/categories/Linux/Docker/"/>
    
    
    <category term="配置" scheme="https://lucky845.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
    <category term="系统管理" scheme="https://lucky845.github.io/tags/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
    
    <category term="Docker" scheme="https://lucky845.github.io/tags/Docker/"/>
    
    <category term="容器化" scheme="https://lucky845.github.io/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
    <category term="Docker Compose" scheme="https://lucky845.github.io/tags/Docker-Compose/"/>
    
  </entry>
  
  <entry>
    <title>【Docker】高级配置指南</title>
    <link href="https://lucky845.github.io/archives/c55fa595.html"/>
    <id>https://lucky845.github.io/archives/c55fa595.html</id>
    <published>2025-02-28T03:00:00.000Z</published>
    <updated>2025-02-28T11:31:22.131Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-高级配置指南"><a href="#Docker-高级配置指南" class="headerlink" title="Docker 高级配置指南"></a>Docker 高级配置指南</h1><h2 id="Docker-Daemon-配置"><a href="#Docker-Daemon-配置" class="headerlink" title="Docker Daemon 配置"></a>Docker Daemon 配置</h2><h3 id="daemon-json-配置文件"><a href="#daemon-json-配置文件" class="headerlink" title="daemon.json 配置文件"></a>daemon.json 配置文件</h3><p>Docker daemon 的配置文件通常位于 <code>/etc/docker/daemon.json</code>，用于配置 Docker 引擎的行为：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"https://mirror.ccs.tencentyun.com"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"data-root"</span><span class="token operator">:</span> <span class="token string">"/var/lib/docker"</span><span class="token punctuation">,</span>  <span class="token property">"log-driver"</span><span class="token operator">:</span> <span class="token string">"json-file"</span><span class="token punctuation">,</span>  <span class="token property">"log-opts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"max-size"</span><span class="token operator">:</span> <span class="token string">"100m"</span><span class="token punctuation">,</span>    <span class="token property">"max-file"</span><span class="token operator">:</span> <span class="token string">"3"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"default-ulimits"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"nofile"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"Name"</span><span class="token operator">:</span> <span class="token string">"nofile"</span><span class="token punctuation">,</span>      <span class="token property">"Hard"</span><span class="token operator">:</span> <span class="token number">64000</span><span class="token punctuation">,</span>      <span class="token property">"Soft"</span><span class="token operator">:</span> <span class="token number">64000</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="主要配置项说明"><a href="#主要配置项说明" class="headerlink" title="主要配置项说明"></a>主要配置项说明</h3><ol><li><strong>registry-mirrors</strong>: 配置 Docker 镜像加速器</li><li><strong>data-root</strong>: 指定 Docker 数据存储位置</li><li><strong>log-driver</strong>: 设置容器日志驱动</li><li><strong>log-opts</strong>: 配置日志相关选项</li><li><strong>default-ulimits</strong>: 设置容器的系统资源限制</li></ol><h2 id="容器运行时配置"><a href="#容器运行时配置" class="headerlink" title="容器运行时配置"></a>容器运行时配置</h2><h3 id="资源限制配置"><a href="#资源限制配置" class="headerlink" title="资源限制配置"></a>资源限制配置</h3><p>使用 <code>docker run</code> 命令时可以配置容器的资源限制：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 限制 CPU 和内存使用</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--cpus</span><span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--memory</span><span class="token operator">=</span>2g <span class="token punctuation">\</span>  --memory-swap<span class="token operator">=</span>4g <span class="token punctuation">\</span>  <span class="token parameter variable">--name</span> myapp <span class="token punctuation">\</span>  nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重启策略配置"><a href="#重启策略配置" class="headerlink" title="重启策略配置"></a>重启策略配置</h3><p>配置容器的自动重启策略：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置容器总是自动重启</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token punctuation">\</span>  <span class="token parameter variable">--name</span> myapp <span class="token punctuation">\</span>  nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><h3 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h3><p>创建和使用自定义网络：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建自定义网络</span><span class="token function">docker</span> network create <span class="token parameter variable">--driver</span> bridge mynetwork<span class="token comment"># 将容器连接到自定义网络</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>  <span class="token parameter variable">--network</span> mynetwork <span class="token punctuation">\</span>  <span class="token parameter variable">--name</span> myapp <span class="token punctuation">\</span>  nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h3><p>配置容器端口映射：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 映射多个端口</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">443</span>:443 <span class="token punctuation">\</span>  <span class="token parameter variable">--name</span> myapp <span class="token punctuation">\</span>  nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="存储配置"><a href="#存储配置" class="headerlink" title="存储配置"></a>存储配置</h2><h3 id="数据卷配置"><a href="#数据卷配置" class="headerlink" title="数据卷配置"></a>数据卷配置</h3><p>创建和使用数据卷：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建数据卷</span><span class="token function">docker</span> volume create mydata<span class="token comment"># 使用数据卷</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> mydata:/data <span class="token punctuation">\</span>  <span class="token parameter variable">--name</span> myapp <span class="token punctuation">\</span>  nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="绑定挂载"><a href="#绑定挂载" class="headerlink" title="绑定挂载"></a>绑定挂载</h3><p>将主机目录挂载到容器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 挂载主机目录</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /host/path:/container/path <span class="token punctuation">\</span>  <span class="token parameter variable">--name</span> myapp <span class="token punctuation">\</span>  nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安全配置"><a href="#安全配置" class="headerlink" title="安全配置"></a>安全配置</h2><h3 id="用户命名空间"><a href="#用户命名空间" class="headerlink" title="用户命名空间"></a>用户命名空间</h3><p>启用用户命名空间映射：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"userns-remap"</span><span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="安全选项"><a href="#安全选项" class="headerlink" title="安全选项"></a>安全选项</h3><p>配置容器安全选项：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 以非特权模式运行容器</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>  --security-opt<span class="token operator">=</span>no-new-privileges <span class="token punctuation">\</span>  --cap-drop<span class="token operator">=</span>ALL <span class="token punctuation">\</span>  <span class="token parameter variable">--name</span> myapp <span class="token punctuation">\</span>  nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h2><h3 id="日志驱动配置"><a href="#日志驱动配置" class="headerlink" title="日志驱动配置"></a>日志驱动配置</h3><p>配置容器的日志驱动：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 syslog 日志驱动</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span>  --log-driver<span class="token operator">=</span>syslog <span class="token punctuation">\</span>  --log-opt syslog-address<span class="token operator">=</span>udp://1.2.3.4:1111 <span class="token punctuation">\</span>  <span class="token parameter variable">--name</span> myapp <span class="token punctuation">\</span>  nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol><li><strong>资源限制</strong>: 始终为生产环境的容器设置资源限制</li><li><strong>日志轮转</strong>: 配置适当的日志轮转策略避免磁盘空间耗尽</li><li><strong>网络隔离</strong>: 使用自定义网络实现容器间的网络隔离</li><li><strong>数据持久化</strong>: 使用数据卷而不是绑定挂载来持久化数据</li><li><strong>安全加固</strong>: 遵循最小权限原则配置容器</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Docker 的高级配置涉及多个方面，包括 daemon 配置、容器运行时配置、网络配置、存储配置等。通过合理配置这些选项，可以构建更安全、更高效、更可靠的容器化环境。掌握这些配置选项对于在生产环境中部署和管理 Docker 容器至关重要。</p><hr><h2 id="希望这篇文章能帮助您更好地理解-Docker-的高级配置。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解-Docker-的高级配置。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解 Docker 的高级配置。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解 Docker 的高级配置。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker-高级配置指南&quot;&gt;&lt;a href=&quot;#Docker-高级配置指南&quot; class=&quot;headerlink&quot; title=&quot;Docker 高级配置指南&quot;&gt;&lt;/a&gt;Docker 高级配置指南&lt;/h1&gt;&lt;h2 id=&quot;Docker-Daemon-配置&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="Linux" scheme="https://lucky845.github.io/categories/Linux/"/>
    
    <category term="Docker" scheme="https://lucky845.github.io/categories/Linux/Docker/"/>
    
    
    <category term="配置" scheme="https://lucky845.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
    <category term="系统管理" scheme="https://lucky845.github.io/tags/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
    
    <category term="Docker" scheme="https://lucky845.github.io/tags/Docker/"/>
    
    <category term="容器化" scheme="https://lucky845.github.io/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>【Docker】基础命令介绍</title>
    <link href="https://lucky845.github.io/archives/b55fa594.html"/>
    <id>https://lucky845.github.io/archives/b55fa594.html</id>
    <published>2025-02-28T03:00:00.000Z</published>
    <updated>2025-02-28T11:24:22.453Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 或 Windows 机器上。掌握 Docker 的基础命令是使用和管理容器化应用的关键。本文将介绍一些常用的 Docker 基础命令及其用法。</p><h2 id="1-Docker-环境管理命令"><a href="#1-Docker-环境管理命令" class="headerlink" title="1. Docker 环境管理命令"></a>1. Docker 环境管理命令</h2><h3 id="1-1-docker-version"><a href="#1-1-docker-version" class="headerlink" title="1.1 docker version"></a>1.1 <code>docker version</code></h3><p>显示 Docker 版本信息。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2-docker-info"><a href="#1-2-docker-info" class="headerlink" title="1.2 docker info"></a>1.2 <code>docker info</code></h3><p>显示 Docker 系统信息，包括镜像和容器数量。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-3-docker-login"><a href="#1-3-docker-login" class="headerlink" title="1.3 docker login"></a>1.3 <code>docker login</code></h3><p>登录到 Docker 仓库。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> login <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> <span class="token punctuation">[</span>SERVER<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-镜像管理命令"><a href="#2-镜像管理命令" class="headerlink" title="2. 镜像管理命令"></a>2. 镜像管理命令</h2><h3 id="2-1-docker-images"><a href="#2-1-docker-images" class="headerlink" title="2.1 docker images"></a>2.1 <code>docker images</code></h3><p>列出本地镜像。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> images          <span class="token comment"># 列出所有镜像</span><span class="token function">docker</span> images <span class="token parameter variable">-a</span>       <span class="token comment"># 列出所有镜像（包括中间层镜像）</span><span class="token function">docker</span> images <span class="token parameter variable">--digests</span> <span class="token comment"># 显示摘要信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-2-docker-pull"><a href="#2-2-docker-pull" class="headerlink" title="2.2 docker pull"></a>2.2 <code>docker pull</code></h3><p>从镜像仓库拉取镜像。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull ubuntu:20.04  <span class="token comment"># 拉取指定标签的镜像</span><span class="token function">docker</span> pull ubuntu        <span class="token comment"># 拉取最新版本的镜像</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-3-docker-rmi"><a href="#2-3-docker-rmi" class="headerlink" title="2.3 docker rmi"></a>2.3 <code>docker rmi</code></h3><p>删除本地镜像。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> rmi image_id          <span class="token comment"># 删除指定 ID 的镜像</span><span class="token function">docker</span> rmi ubuntu:20.04      <span class="token comment"># 删除指定标签的镜像</span><span class="token function">docker</span> rmi <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> images <span class="token parameter variable">-q</span><span class="token variable">)</span></span> <span class="token comment"># 删除所有镜像</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-4-docker-build"><a href="#2-4-docker-build" class="headerlink" title="2.4 docker build"></a>2.4 <code>docker build</code></h3><p>从 Dockerfile 构建镜像。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build <span class="token parameter variable">-t</span> myimage:tag <span class="token builtin class-name">.</span>  <span class="token comment"># 在当前目录构建镜像</span><span class="token function">docker</span> build <span class="token parameter variable">-f</span> Dockerfile.dev <span class="token parameter variable">-t</span> myimage:dev <span class="token builtin class-name">.</span>  <span class="token comment"># 使用指定的 Dockerfile</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-5-docker-tag"><a href="#2-5-docker-tag" class="headerlink" title="2.5 docker tag"></a>2.5 <code>docker tag</code></h3><p>为镜像添加标签。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> tag source_image:tag target_image:tag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-6-docker-save"><a href="#2-6-docker-save" class="headerlink" title="2.6 docker save"></a>2.6 <code>docker save</code></h3><p>将镜像保存为 tar 归档文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> save <span class="token parameter variable">-o</span> myimage.tar myimage:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-7-docker-load"><a href="#2-7-docker-load" class="headerlink" title="2.7 docker load"></a>2.7 <code>docker load</code></h3><p>从 tar 归档文件加载镜像。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> load <span class="token parameter variable">-i</span> myimage.tar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-容器管理命令"><a href="#3-容器管理命令" class="headerlink" title="3. 容器管理命令"></a>3. 容器管理命令</h2><h3 id="3-1-docker-run"><a href="#3-1-docker-run" class="headerlink" title="3.1 docker run"></a>3.1 <code>docker run</code></h3><p>创建并启动一个新容器。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-it</span> ubuntu:20.04 /bin/bash  <span class="token comment"># 交互式启动容器</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> nginx                    <span class="token comment"># 后台运行容器</span><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">8080</span>:80 nginx            <span class="token comment"># 端口映射</span><span class="token function">docker</span> run <span class="token parameter variable">-v</span> /host/path:/container/path nginx  <span class="token comment"># 挂载卷</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-docker-ps"><a href="#3-2-docker-ps" class="headerlink" title="3.2 docker ps"></a>3.2 <code>docker ps</code></h3><p>列出运行中的容器。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">ps</span>          <span class="token comment"># 列出运行中的容器</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span>       <span class="token comment"># 列出所有容器（包括已停止的）</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-q</span>       <span class="token comment"># 只显示容器 ID</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-3-docker-start-stop-restart"><a href="#3-3-docker-start-stop-restart" class="headerlink" title="3.3 docker start/stop/restart"></a>3.3 <code>docker start/stop/restart</code></h3><p>启动、停止或重启容器。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> start container_id    <span class="token comment"># 启动容器</span><span class="token function">docker</span> stop container_id     <span class="token comment"># 停止容器</span><span class="token function">docker</span> restart container_id  <span class="token comment"># 重启容器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-4-docker-exec"><a href="#3-4-docker-exec" class="headerlink" title="3.4 docker exec"></a>3.4 <code>docker exec</code></h3><p>在运行中的容器中执行命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> container_id /bin/bash  <span class="token comment"># 进入容器交互式终端</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> container_id <span class="token function">ls</span> /app        <span class="token comment"># 在容器中执行命令</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-5-docker-rm"><a href="#3-5-docker-rm" class="headerlink" title="3.5 docker rm"></a>3.5 <code>docker rm</code></h3><p>删除容器。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">rm</span> container_id          <span class="token comment"># 删除指定容器</span><span class="token function">docker</span> <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-aq</span><span class="token variable">)</span></span>      <span class="token comment"># 删除所有容器</span><span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> container_id       <span class="token comment"># 强制删除运行中的容器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-6-docker-logs"><a href="#3-6-docker-logs" class="headerlink" title="3.6 docker logs"></a>3.6 <code>docker logs</code></h3><p>查看容器日志。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> logs container_id        <span class="token comment"># 查看容器日志</span><span class="token function">docker</span> logs <span class="token parameter variable">-f</span> container_id     <span class="token comment"># 实时查看日志</span><span class="token function">docker</span> logs <span class="token parameter variable">--tail</span> <span class="token number">100</span> container_id  <span class="token comment"># 查看最后 100 行日志</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-7-docker-inspect"><a href="#3-7-docker-inspect" class="headerlink" title="3.7 docker inspect"></a>3.7 <code>docker inspect</code></h3><p>查看容器或镜像的详细信息。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> inspect container_id     <span class="token comment"># 查看容器详情</span><span class="token function">docker</span> inspect image_id         <span class="token comment"># 查看镜像详情</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-8-docker-stats"><a href="#3-8-docker-stats" class="headerlink" title="3.8 docker stats"></a>3.8 <code>docker stats</code></h3><p>显示容器资源使用统计信息。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> stats                    <span class="token comment"># 显示所有容器的统计信息</span><span class="token function">docker</span> stats container_id       <span class="token comment"># 显示指定容器的统计信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-网络管理命令"><a href="#4-网络管理命令" class="headerlink" title="4. 网络管理命令"></a>4. 网络管理命令</h2><h3 id="4-1-docker-network-ls"><a href="#4-1-docker-network-ls" class="headerlink" title="4.1 docker network ls"></a>4.1 <code>docker network ls</code></h3><p>列出 Docker 网络。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> network <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-2-docker-network-create"><a href="#4-2-docker-network-create" class="headerlink" title="4.2 docker network create"></a>4.2 <code>docker network create</code></h3><p>创建 Docker 网络。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> network create mynetwork<span class="token function">docker</span> network create <span class="token parameter variable">--driver</span> bridge mynetwork<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-3-docker-network-connect-disconnect"><a href="#4-3-docker-network-connect-disconnect" class="headerlink" title="4.3 docker network connect/disconnect"></a>4.3 <code>docker network connect/disconnect</code></h3><p>将容器连接到网络或断开连接。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> network connect mynetwork container_id<span class="token function">docker</span> network disconnect mynetwork container_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="5-数据卷管理命令"><a href="#5-数据卷管理命令" class="headerlink" title="5. 数据卷管理命令"></a>5. 数据卷管理命令</h2><h3 id="5-1-docker-volume-ls"><a href="#5-1-docker-volume-ls" class="headerlink" title="5.1 docker volume ls"></a>5.1 <code>docker volume ls</code></h3><p>列出 Docker 数据卷。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> volume <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-2-docker-volume-create"><a href="#5-2-docker-volume-create" class="headerlink" title="5.2 docker volume create"></a>5.2 <code>docker volume create</code></h3><p>创建 Docker 数据卷。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> volume create myvolume<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-3-docker-volume-rm"><a href="#5-3-docker-volume-rm" class="headerlink" title="5.3 docker volume rm"></a>5.3 <code>docker volume rm</code></h3><p>删除 Docker 数据卷。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> volume <span class="token function">rm</span> myvolume<span class="token function">docker</span> volume <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> volume <span class="token function">ls</span> <span class="token parameter variable">-q</span><span class="token variable">)</span></span>  <span class="token comment"># 删除所有未使用的数据卷</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="6-Docker-Compose-命令"><a href="#6-Docker-Compose-命令" class="headerlink" title="6. Docker Compose 命令"></a>6. Docker Compose 命令</h2><h3 id="6-1-docker-compose-up"><a href="#6-1-docker-compose-up" class="headerlink" title="6.1 docker-compose up"></a>6.1 <code>docker-compose up</code></h3><p>创建并启动 Docker Compose 定义的服务。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up        <span class="token comment"># 启动服务</span><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span>     <span class="token comment"># 后台启动服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-2-docker-compose-down"><a href="#6-2-docker-compose-down" class="headerlink" title="6.2 docker-compose down"></a>6.2 <code>docker-compose down</code></h3><p>停止并删除 Docker Compose 定义的服务。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> down      <span class="token comment"># 停止并删除服务</span><span class="token function">docker-compose</span> down <span class="token parameter variable">-v</span>   <span class="token comment"># 同时删除卷</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-3-docker-compose-ps"><a href="#6-3-docker-compose-ps" class="headerlink" title="6.3 docker-compose ps"></a>6.3 <code>docker-compose ps</code></h3><p>列出 Docker Compose 定义的服务状态。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> <span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-4-docker-compose-logs"><a href="#6-4-docker-compose-logs" class="headerlink" title="6.4 docker-compose logs"></a>6.4 <code>docker-compose logs</code></h3><p>查看 Docker Compose 服务的日志。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> logs<span class="token function">docker-compose</span> logs <span class="token parameter variable">-f</span> service_name  <span class="token comment"># 实时查看指定服务的日志</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="7-Docker-系统清理命令"><a href="#7-Docker-系统清理命令" class="headerlink" title="7. Docker 系统清理命令"></a>7. Docker 系统清理命令</h2><h3 id="7-1-docker-system-prune"><a href="#7-1-docker-system-prune" class="headerlink" title="7.1 docker system prune"></a>7.1 <code>docker system prune</code></h3><p>清理未使用的 Docker 对象（容器、镜像、网络和卷）。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> system prune       <span class="token comment"># 清理未使用的对象</span><span class="token function">docker</span> system prune <span class="token parameter variable">-a</span>    <span class="token comment"># 清理所有未使用的对象（包括未标记的镜像）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-2-docker-container-prune"><a href="#7-2-docker-container-prune" class="headerlink" title="7.2 docker container prune"></a>7.2 <code>docker container prune</code></h3><p>清理所有已停止的容器。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> container prune<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-3-docker-image-prune"><a href="#7-3-docker-image-prune" class="headerlink" title="7.3 docker image prune"></a>7.3 <code>docker image prune</code></h3><p>清理未使用的镜像。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> image prune        <span class="token comment"># 清理悬空镜像</span><span class="token function">docker</span> image prune <span class="token parameter variable">-a</span>     <span class="token comment"># 清理所有未使用的镜像</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a>8. 总结</h2><p>掌握 Docker 的基础命令是使用和管理容器化应用的基础。通过熟悉这些命令，您可以更高效地进行镜像管理、容器操作、网络配置和数据卷管理。Docker 的命令行工具提供了丰富的功能，可以满足从开发到部署的各种需求。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.docker.com/">Docker 官方文档</a></li><li><a href="https://docs.docker.com/engine/reference/commandline/cli/">Docker 命令行参考</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解-Docker-的基础命令。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解-Docker-的基础命令。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解 Docker 的基础命令。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解 Docker 的基础命令。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Li</summary>
      
    
    
    
    <category term="Linux" scheme="https://lucky845.github.io/categories/Linux/"/>
    
    <category term="Docker" scheme="https://lucky845.github.io/categories/Linux/Docker/"/>
    
    
    <category term="基础" scheme="https://lucky845.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
    <category term="系统管理" scheme="https://lucky845.github.io/tags/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
    
    <category term="Docker" scheme="https://lucky845.github.io/tags/Docker/"/>
    
    <category term="容器化" scheme="https://lucky845.github.io/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>【Linux】软件源配置详解</title>
    <link href="https://lucky845.github.io/archives/b55fa603.html"/>
    <id>https://lucky845.github.io/archives/b55fa603.html</id>
    <published>2025-02-27T02:00:00.000Z</published>
    <updated>2025-02-27T11:44:59.978Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在使用 Linux 系统时，软件源（Package Repository）的配置对系统的软件管理至关重要。合理配置软件源可以提高软件下载速度，确保系统安全性。本文将详细介绍如何在主流 Linux 发行版中配置软件源。</p><h2 id="1-什么是软件源"><a href="#1-什么是软件源" class="headerlink" title="1. 什么是软件源"></a>1. 什么是软件源</h2><p>软件源是 Linux 系统中用于存放软件包的远程仓库。系统通过包管理器（如 apt、yum、dnf）从这些仓库中下载和安装软件。</p><h3 id="1-1-软件源的作用"><a href="#1-1-软件源的作用" class="headerlink" title="1.1 软件源的作用"></a>1.1 软件源的作用</h3><ul><li>提供软件包下载</li><li>管理软件依赖关系</li><li>确保软件包的安全性</li><li>提供软件更新服务</li></ul><h2 id="2-Ubuntu-软件源配置"><a href="#2-Ubuntu-软件源配置" class="headerlink" title="2. Ubuntu 软件源配置"></a>2. Ubuntu 软件源配置</h2><h3 id="2-1-软件源文件位置"><a href="#2-1-软件源文件位置" class="headerlink" title="2.1 软件源文件位置"></a>2.1 软件源文件位置</h3><p>Ubuntu 的软件源配置文件位于：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/apt/sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2-备份原有配置"><a href="#2-2-备份原有配置" class="headerlink" title="2.2 备份原有配置"></a>2.2 备份原有配置</h3><p>在修改之前，建议先备份原有配置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> /etc/apt/sources.list /etc/apt/sources.list.backup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3-修改软件源"><a href="#2-3-修改软件源" class="headerlink" title="2.3 修改软件源"></a>2.3 修改软件源</h3><p>编辑软件源配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /etc/apt/sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>替换为阿里云镜像源（Ubuntu 22.04 LTS 示例）：</p><pre class="line-numbers language-none"><code class="language-none">deb https://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiversedeb https://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiversedeb https://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiversedeb https://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-更新软件源"><a href="#2-4-更新软件源" class="headerlink" title="2.4 更新软件源"></a>2.4 更新软件源</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-CentOS-软件源配置"><a href="#3-CentOS-软件源配置" class="headerlink" title="3. CentOS 软件源配置"></a>3. CentOS 软件源配置</h2><h3 id="3-1-软件源文件位置"><a href="#3-1-软件源文件位置" class="headerlink" title="3.1 软件源文件位置"></a>3.1 软件源文件位置</h3><p>CentOS 的软件源配置文件位于：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/yum.repos.d/CentOS-Base.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-备份原有配置"><a href="#3-2-备份原有配置" class="headerlink" title="3.2 备份原有配置"></a>3.2 备份原有配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-3-下载新的软件源配置"><a href="#3-3-下载新的软件源配置" class="headerlink" title="3.3 下载新的软件源配置"></a>3.3 下载新的软件源配置</h3><p>对于 CentOS 7：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-o</span> /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于 CentOS 8：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-o</span> /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-8.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-4-更新软件源缓存"><a href="#3-4-更新软件源缓存" class="headerlink" title="3.4 更新软件源缓存"></a>3.4 更新软件源缓存</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum clean all<span class="token function">sudo</span> yum makecache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-Debian-软件源配置"><a href="#4-Debian-软件源配置" class="headerlink" title="4. Debian 软件源配置"></a>4. Debian 软件源配置</h2><h3 id="4-1-软件源文件位置"><a href="#4-1-软件源文件位置" class="headerlink" title="4.1 软件源文件位置"></a>4.1 软件源文件位置</h3><p>Debian 的软件源配置文件位于：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/apt/sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-2-备份原有配置"><a href="#4-2-备份原有配置" class="headerlink" title="4.2 备份原有配置"></a>4.2 备份原有配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> /etc/apt/sources.list /etc/apt/sources.list.backup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-3-修改软件源"><a href="#4-3-修改软件源" class="headerlink" title="4.3 修改软件源"></a>4.3 修改软件源</h3><p>编辑软件源配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /etc/apt/sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>替换为阿里云镜像源（Debian 11 示例）：</p><pre class="line-numbers language-none"><code class="language-none">deb https://mirrors.aliyun.com/debian/ bullseye main non-free contribdeb https://mirrors.aliyun.com/debian/ bullseye-updates main non-free contribdeb https://mirrors.aliyun.com/debian/ bullseye-backports main non-free contribdeb https://mirrors.aliyun.com/debian-security bullseye-security main non-free contrib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-更新软件源"><a href="#4-4-更新软件源" class="headerlink" title="4.4 更新软件源"></a>4.4 更新软件源</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="5-常见问题解决"><a href="#5-常见问题解决" class="headerlink" title="5. 常见问题解决"></a>5. 常见问题解决</h2><h3 id="5-1-GPG-密钥错误"><a href="#5-1-GPG-密钥错误" class="headerlink" title="5.1 GPG 密钥错误"></a>5.1 GPG 密钥错误</h3><p>如果遇到 GPG 密钥错误，可以尝试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Ubuntu/Debian</span><span class="token function">sudo</span> apt-key adv <span class="token parameter variable">--keyserver</span> keyserver.ubuntu.com --recv-keys 密钥ID<span class="token comment"># CentOS</span><span class="token function">sudo</span> <span class="token function">rpm</span> <span class="token parameter variable">--import</span> 密钥URL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-软件源更新失败"><a href="#5-2-软件源更新失败" class="headerlink" title="5.2 软件源更新失败"></a>5.2 软件源更新失败</h3><p>如果更新失败，请检查：</p><ul><li>网络连接是否正常</li><li>软件源地址是否正确</li><li>系统版本是否与软件源匹配</li></ul><h2 id="6-推荐的国内镜像源"><a href="#6-推荐的国内镜像源" class="headerlink" title="6. 推荐的国内镜像源"></a>6. 推荐的国内镜像源</h2><ul><li>阿里云镜像：<a href="https://mirrors.aliyun.com/">https://mirrors.aliyun.com</a></li><li>清华大学镜像：<a href="https://mirrors.tuna.tsinghua.edu.cn/">https://mirrors.tuna.tsinghua.edu.cn</a></li><li>中科大镜像：<a href="https://mirrors.ustc.edu.cn/">https://mirrors.ustc.edu.cn</a></li><li>华为云镜像：<a href="https://mirrors.huaweicloud.com/">https://mirrors.huaweicloud.com</a></li></ul><h2 id="7-Fedora-软件源配置"><a href="#7-Fedora-软件源配置" class="headerlink" title="7. Fedora 软件源配置"></a>7. Fedora 软件源配置</h2><h3 id="7-1-软件源文件位置"><a href="#7-1-软件源文件位置" class="headerlink" title="7.1 软件源文件位置"></a>7.1 软件源文件位置</h3><p>Fedora 的软件源配置文件位于：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/yum.repos.d/fedora.repo/etc/yum.repos.d/fedora-updates.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-2-备份原有配置"><a href="#7-2-备份原有配置" class="headerlink" title="7.2 备份原有配置"></a>7.2 备份原有配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> /etc/yum.repos.d/fedora.repo /etc/yum.repos.d/fedora.repo.backup<span class="token function">sudo</span> <span class="token function">cp</span> /etc/yum.repos.d/fedora-updates.repo /etc/yum.repos.d/fedora-updates.repo.backup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-3-修改软件源"><a href="#7-3-修改软件源" class="headerlink" title="7.3 修改软件源"></a>7.3 修改软件源</h3><p>创建新的配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /etc/yum.repos.d/fedora.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加阿里云镜像源内容（以 Fedora 38 为例）：</p><pre class="line-numbers language-none"><code class="language-none">[fedora]name=Fedora $releasever - $basearchbaseurl=https://mirrors.aliyun.com/fedora/releases/$releasever/Everything/$basearch/os/enabled=1gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$releasever-$basearch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-4-更新软件源缓存"><a href="#7-4-更新软件源缓存" class="headerlink" title="7.4 更新软件源缓存"></a>7.4 更新软件源缓存</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dnf clean all<span class="token function">sudo</span> dnf makecache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="8-OpenSUSE-软件源配置"><a href="#8-OpenSUSE-软件源配置" class="headerlink" title="8. OpenSUSE 软件源配置"></a>8. OpenSUSE 软件源配置</h2><h3 id="8-1-软件源管理"><a href="#8-1-软件源管理" class="headerlink" title="8.1 软件源管理"></a>8.1 软件源管理</h3><p>OpenSUSE 使用 zypper 包管理器，可以通过以下命令管理软件源：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">zypper</span> lr    <span class="token comment"># 列出当前软件源</span><span class="token function">sudo</span> <span class="token function">zypper</span> mr <span class="token parameter variable">-d</span> <span class="token comment"># 禁用所有软件源</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="8-2-添加阿里云镜像源"><a href="#8-2-添加阿里云镜像源" class="headerlink" title="8.2 添加阿里云镜像源"></a>8.2 添加阿里云镜像源</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加阿里云镜像源（以 OpenSUSE Leap 15.5 为例）</span><span class="token function">sudo</span> <span class="token function">zypper</span> ar <span class="token parameter variable">-fcg</span> https://mirrors.aliyun.com/opensuse/distribution/leap/15.5/repo/oss aliyun-oss<span class="token function">sudo</span> <span class="token function">zypper</span> ar <span class="token parameter variable">-fcg</span> https://mirrors.aliyun.com/opensuse/distribution/leap/15.5/repo/non-oss aliyun-non-oss<span class="token function">sudo</span> <span class="token function">zypper</span> ar <span class="token parameter variable">-fcg</span> https://mirrors.aliyun.com/opensuse/update/leap/15.5/oss aliyun-update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-3-更新软件源"><a href="#8-3-更新软件源" class="headerlink" title="8.3 更新软件源"></a>8.3 更新软件源</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">zypper</span> refresh<span class="token function">sudo</span> <span class="token function">zypper</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="9-Arch-Linux-软件源配置"><a href="#9-Arch-Linux-软件源配置" class="headerlink" title="9. Arch Linux 软件源配置"></a>9. Arch Linux 软件源配置</h2><h3 id="9-1-软件源文件位置"><a href="#9-1-软件源文件位置" class="headerlink" title="9.1 软件源文件位置"></a>9.1 软件源文件位置</h3><p>Arch Linux 的软件源配置文件位于：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/pacman.d/mirrorlist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="9-2-备份原有配置"><a href="#9-2-备份原有配置" class="headerlink" title="9.2 备份原有配置"></a>9.2 备份原有配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="9-3-修改软件源"><a href="#9-3-修改软件源" class="headerlink" title="9.3 修改软件源"></a>9.3 修改软件源</h3><p>编辑软件源配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /etc/pacman.d/mirrorlist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加国内镜像源（建议放在文件开头）：</p><pre class="line-numbers language-none"><code class="language-none">Server = https://mirrors.aliyun.com/archlinux/$repo/os/$archServer = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$archServer = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="9-4-更新软件源"><a href="#9-4-更新软件源" class="headerlink" title="9.4 更新软件源"></a>9.4 更新软件源</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman <span class="token parameter variable">-Syy</span>  <span class="token comment"># 强制更新软件源</span><span class="token function">sudo</span> pacman <span class="token parameter variable">-Syu</span>  <span class="token comment"># 更新系统</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>合理配置软件源可以显著提升系统软件管理的效率。建议选择地理位置较近的镜像源，并定期更新系统软件包以确保系统安全性。如果您在配置过程中遇到问题，欢迎在评论区讨论！</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">Ubuntu 镜像使用帮助</a></li><li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/centos/">CentOS 镜像使用帮助</a></li><li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/debian/">Debian 镜像使用帮助</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和配置-Linux-系统的软件源。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和配置-Linux-系统的软件源。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和配置 Linux 系统的软件源。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和配置 Linux 系统的软件源。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;在使用 Linux 系统时，软件源（Package Repository）的配置对系统的软件管理至关重要。合理配置软件源可以</summary>
      
    
    
    
    <category term="Linux" scheme="https://lucky845.github.io/categories/Linux/"/>
    
    
    <category term="配置" scheme="https://lucky845.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
    <category term="Linux" scheme="https://lucky845.github.io/tags/Linux/"/>
    
    <category term="系统管理" scheme="https://lucky845.github.io/tags/%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86/"/>
    
    <category term="软件源" scheme="https://lucky845.github.io/tags/%E8%BD%AF%E4%BB%B6%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>【Linux】服务器定时任务故障排查指南</title>
    <link href="https://lucky845.github.io/archives/b55fa604.html"/>
    <id>https://lucky845.github.io/archives/b55fa604.html</id>
    <published>2025-02-27T02:00:00.000Z</published>
    <updated>2025-02-27T11:55:22.481Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在Linux服务器运维中，定时任务（Crontab）是一个非常重要的功能，用于自动执行周期性的任务，如数据备份、日志清理等。然而，有时定时任务可能会出现无法正常运行的情况，这会影响到系统的正常运作。本文将详细介绍如何排查和解决定时任务相关的问题。</p><h2 id="1-基础检查"><a href="#1-基础检查" class="headerlink" title="1. 基础检查"></a>1. 基础检查</h2><h3 id="1-1-Crontab-服务状态检查"><a href="#1-1-Crontab-服务状态检查" class="headerlink" title="1.1 Crontab 服务状态检查"></a>1.1 Crontab 服务状态检查</h3><p>首先确认 crond 服务是否正常运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 检查服务状态</span>systemctl status crond<span class="token comment"># 如果服务未运行，启动服务</span>systemctl start crond<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-Crontab-配置语法检查"><a href="#1-2-Crontab-配置语法检查" class="headerlink" title="1.2 Crontab 配置语法检查"></a>1.2 Crontab 配置语法检查</h3><ul><li><p>检查crontab配置文件的语法是否正确：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">crontab</span> <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>常见语法错误：</p><ul><li>时间格式错误</li><li>命令路径不正确</li><li>特殊字符使用不当</li></ul></li></ul><h2 id="2-日志分析"><a href="#2-日志分析" class="headerlink" title="2. 日志分析"></a>2. 日志分析</h2><h3 id="2-1-系统日志检查"><a href="#2-1-系统日志检查" class="headerlink" title="2.1 系统日志检查"></a>2.1 系统日志检查</h3><p>查看系统日志中与 cron 相关的信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看 cron 日志</span><span class="token function">grep</span> CRON /var/log/syslog<span class="token comment"># 或</span><span class="token function">grep</span> CRON /var/log/messages<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-任务执行日志"><a href="#2-2-任务执行日志" class="headerlink" title="2.2 任务执行日志"></a>2.2 任务执行日志</h3><p>建议为重要的定时任务添加日志输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># crontab 配置示例</span><span class="token number">0</span> <span class="token number">2</span> * * * /path/to/script.sh <span class="token operator">&gt;&gt;</span> /var/log/script.log <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-权限问题排查"><a href="#3-权限问题排查" class="headerlink" title="3. 权限问题排查"></a>3. 权限问题排查</h2><h3 id="3-1-文件权限检查"><a href="#3-1-文件权限检查" class="headerlink" title="3.1 文件权限检查"></a>3.1 文件权限检查</h3><ul><li><p>检查脚本文件权限：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-l</span> /path/to/script.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>确保脚本具有执行权限：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x /path/to/script.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="3-2-用户权限验证"><a href="#3-2-用户权限验证" class="headerlink" title="3.2 用户权限验证"></a>3.2 用户权限验证</h3><ul><li>确认当前用户是否有权限执行相关命令</li><li>检查是否需要 sudo 权限</li><li>验证用户是否在 cron.allow 列表中（如果存在）</li></ul><h2 id="4-环境变量问题"><a href="#4-环境变量问题" class="headerlink" title="4. 环境变量问题"></a>4. 环境变量问题</h2><h3 id="4-1-环境变量设置"><a href="#4-1-环境变量设置" class="headerlink" title="4.1 环境变量设置"></a>4.1 环境变量设置</h3><p>定时任务执行时的环境变量与交互式shell不同，需要注意：</p><ul><li>在脚本开头添加必要的环境变量：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>en_US.UTF-8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="4-2-路径问题处理"><a href="#4-2-路径问题处理" class="headerlink" title="4.2 路径问题处理"></a>4.2 路径问题处理</h3><ul><li>使用绝对路径调用命令</li><li>在脚本中 cd 到正确的工作目录</li><li>确保依赖的文件路径正确</li></ul><h2 id="5-常见问题及解决方案"><a href="#5-常见问题及解决方案" class="headerlink" title="5. 常见问题及解决方案"></a>5. 常见问题及解决方案</h2><h3 id="5-1-任务未按预期时间执行"><a href="#5-1-任务未按预期时间执行" class="headerlink" title="5.1 任务未按预期时间执行"></a>5.1 任务未按预期时间执行</h3><ul><li>检查系统时间是否正确</li><li>验证 crontab 时间格式</li><li>确认时区设置</li></ul><h3 id="5-2-任务执行失败"><a href="#5-2-任务执行失败" class="headerlink" title="5.2 任务执行失败"></a>5.2 任务执行失败</h3><ul><li>检查命令或脚本是否存在语法错误</li><li>验证所需资源是否可用</li><li>确认网络连接（如果任务需要网络访问）</li></ul><h2 id="6-最佳实践建议"><a href="#6-最佳实践建议" class="headerlink" title="6. 最佳实践建议"></a>6. 最佳实践建议</h2><h3 id="6-1-配置规范"><a href="#6-1-配置规范" class="headerlink" title="6.1 配置规范"></a>6.1 配置规范</h3><ul><li>使用清晰的注释说明任务用途</li><li>合理设置执行频率</li><li>避免任务时间冲突</li></ul><h3 id="6-2-监控和告警"><a href="#6-2-监控和告警" class="headerlink" title="6.2 监控和告警"></a>6.2 监控和告警</h3><ul><li>实施日志轮转策略</li><li>设置关键任务的监控告警</li><li>定期检查任务执行状态</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>定时任务故障排查需要从多个角度进行分析，包括服务状态、配置语法、权限设置、环境变量等方面。通过系统的排查步骤和合理的配置管理，可以有效预防和解决定时任务相关的问题。建议运维人员建立规范的定时任务管理制度，定期检查和维护，确保系统的稳定运行。</p><hr><h2 id="希望这篇文章能帮助您更好地理解服务器定时任务故障排查指南，如果您在处理定时任务问题时遇到其他困难，欢迎在评论区讨论交流！"><a href="#希望这篇文章能帮助您更好地理解服务器定时任务故障排查指南，如果您在处理定时任务问题时遇到其他困难，欢迎在评论区讨论交流！" class="headerlink" title="希望这篇文章能帮助您更好地理解服务器定时任务故障排查指南，如果您在处理定时任务问题时遇到其他困难，欢迎在评论区讨论交流！"></a>希望这篇文章能帮助您更好地理解服务器定时任务故障排查指南，如果您在处理定时任务问题时遇到其他困难，欢迎在评论区讨论交流！</h2>]]></content>
    
    
    <summary type="html">本文详细介绍了Linux服务器定时任务的常见故障及其排查方法，包括配置检查、日志分析、权限验证等关键步骤，以及相应的解决方案和最佳实践建议。</summary>
    
    
    
    <category term="Linux" scheme="https://lucky845.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://lucky845.github.io/tags/Linux/"/>
    
    <category term="故障排查" scheme="https://lucky845.github.io/tags/%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5/"/>
    
    <category term="定时任务" scheme="https://lucky845.github.io/tags/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
    <category term="Crontab" scheme="https://lucky845.github.io/tags/Crontab/"/>
    
  </entry>
  
  <entry>
    <title>【Linux】服务器安全漏洞排查指南</title>
    <link href="https://lucky845.github.io/archives/b55fa604.html"/>
    <id>https://lucky845.github.io/archives/b55fa604.html</id>
    <published>2025-02-27T02:00:00.000Z</published>
    <updated>2025-02-27T11:55:38.935Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着网络安全威胁的不断增加，服务器安全已成为系统运维中的重要课题。当服务器出现安全漏洞或遭受攻击时，及时有效的问题排查和处理显得尤为重要。本文将详细介绍服务器安全漏洞的排查方法和应对策略。</p><h2 id="1-问题识别与初步评估"><a href="#1-问题识别与初步评估" class="headerlink" title="1. 问题识别与初步评估"></a>1. 问题识别与初步评估</h2><h3 id="1-1-确认安全漏洞"><a href="#1-1-确认安全漏洞" class="headerlink" title="1.1 确认安全漏洞"></a>1.1 确认安全漏洞</h3><ul><li>使用专业的漏洞扫描工具（如Nessus、OpenVAS）进行全面扫描</li><li>检查系统和应用程序的已知漏洞信息</li><li>评估漏洞的严重程度和潜在影响</li></ul><h3 id="1-2-收集初步信息"><a href="#1-2-收集初步信息" class="headerlink" title="1.2 收集初步信息"></a>1.2 收集初步信息</h3><ul><li>记录问题发现的时间和现象</li><li>整理受影响的系统和服务范围</li><li>评估是否需要立即采取紧急措施</li></ul><h2 id="2-日志分析与追踪"><a href="#2-日志分析与追踪" class="headerlink" title="2. 日志分析与追踪"></a>2. 日志分析与追踪</h2><h3 id="2-1-系统日志检查"><a href="#2-1-系统日志检查" class="headerlink" title="2.1 系统日志检查"></a>2.1 系统日志检查</h3><ul><li>查看 <code>/var/log/secure</code> 或 <code>/var/log/auth.log</code> 中的认证日志</li><li>分析 <code>/var/log/messages</code> 或 <code>/var/log/syslog</code> 中的系统日志</li><li>检查应用程序的特定日志文件</li></ul><h3 id="2-2-关注重点信息"><a href="#2-2-关注重点信息" class="headerlink" title="2.2 关注重点信息"></a>2.2 关注重点信息</h3><ul><li>异常的登录尝试和访问记录</li><li>权限变更和系统配置修改</li><li>可疑的进程活动和网络连接</li></ul><h2 id="3-系统完整性检查"><a href="#3-系统完整性检查" class="headerlink" title="3. 系统完整性检查"></a>3. 系统完整性检查</h2><h3 id="3-1-文件系统检查"><a href="#3-1-文件系统检查" class="headerlink" title="3.1 文件系统检查"></a>3.1 文件系统检查</h3><ul><li>使用文件完整性监控工具（如Tripwire、AIDE）</li><li>检查关键系统文件的修改时间和权限</li><li>验证重要配置文件的完整性</li></ul><h3 id="3-2-进程和服务检查"><a href="#3-2-进程和服务检查" class="headerlink" title="3.2 进程和服务检查"></a>3.2 进程和服务检查</h3><ul><li>检查正在运行的进程和服务</li><li>识别异常或未知的进程</li><li>验证系统服务的配置状态</li></ul><h2 id="4-网络连接分析"><a href="#4-网络连接分析" class="headerlink" title="4. 网络连接分析"></a>4. 网络连接分析</h2><h3 id="4-1-网络流量监控"><a href="#4-1-网络流量监控" class="headerlink" title="4.1 网络流量监控"></a>4.1 网络流量监控</h3><ul><li>使用 tcpdump 或 Wireshark 分析网络数据包</li><li>检查异常的网络连接和流量模式</li><li>识别可疑的数据传输活动</li></ul><h3 id="4-2-防火墙日志分析"><a href="#4-2-防火墙日志分析" class="headerlink" title="4.2 防火墙日志分析"></a>4.2 防火墙日志分析</h3><ul><li>检查防火墙规则和访问记录</li><li>分析被拦截的连接尝试</li><li>评估现有防火墙规则的有效性</li></ul><h2 id="5-安全加固措施"><a href="#5-安全加固措施" class="headerlink" title="5. 安全加固措施"></a>5. 安全加固措施</h2><h3 id="5-1-即时修复措施"><a href="#5-1-即时修复措施" class="headerlink" title="5.1 即时修复措施"></a>5.1 即时修复措施</h3><ul><li>安装系统和应用程序的安全补丁</li><li>更新防火墙规则和访问控制策略</li><li>清理可疑文件和进程</li></ul><h3 id="5-2-长期防护策略"><a href="#5-2-长期防护策略" class="headerlink" title="5.2 长期防护策略"></a>5.2 长期防护策略</h3><ul><li>实施强密码策略和定期密码更新</li><li>配置入侵检测系统（IDS）</li><li>建立定期安全审计机制</li></ul><h2 id="6-事后总结与预防"><a href="#6-事后总结与预防" class="headerlink" title="6. 事后总结与预防"></a>6. 事后总结与预防</h2><h3 id="6-1-事件复盘"><a href="#6-1-事件复盘" class="headerlink" title="6.1 事件复盘"></a>6.1 事件复盘</h3><ul><li>记录完整的问题处理过程</li><li>分析漏洞产生的原因</li><li>评估现有安全措施的有效性</li></ul><h3 id="6-2-预防措施"><a href="#6-2-预防措施" class="headerlink" title="6.2 预防措施"></a>6.2 预防措施</h3><ul><li>制定定期安全检查计划</li><li>建立安全事件响应机制</li><li>加强团队安全意识培训</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>服务器安全漏洞的排查是一个系统性的工作，需要从多个维度进行分析和处理。通过建立完善的排查流程和防护机制，可以有效降低安全风险，保障系统的稳定运行。在日常运维中，预防性的安全措施同样重要，应该建立起完整的安全管理体系，定期进行安全评估和更新。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>Linux系统安全指南</li><li>网络安全最佳实践</li><li>服务器安全漏洞防护手册</li></ol><hr><h2 id="希望这篇文章能帮助您更好地理解-服务器安全漏洞排查指南。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解-服务器安全漏洞排查指南。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解 服务器安全漏洞排查指南。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解 服务器安全漏洞排查指南。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
    <summary type="html">本文详细介绍了服务器安全漏洞的排查方法，包括问题识别、日志分析、系统检查等关键步骤，以及相应的解决方案和预防措施。</summary>
    
    
    
    <category term="Linux" scheme="https://lucky845.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://lucky845.github.io/tags/Linux/"/>
    
    <category term="服务器安全" scheme="https://lucky845.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E5%85%A8/"/>
    
    <category term="漏洞排查" scheme="https://lucky845.github.io/tags/%E6%BC%8F%E6%B4%9E%E6%8E%92%E6%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>【Redis】基于 Redis 实现在线游戏积分排行榜</title>
    <link href="https://lucky845.github.io/archives/b55fa592.html"/>
    <id>https://lucky845.github.io/archives/b55fa592.html</id>
    <published>2025-02-26T15:00:00.000Z</published>
    <updated>2025-02-26T05:28:05.230Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在在线游戏中，积分排行榜是一个重要的功能，可以激励玩家竞争并提高游戏的参与度。Redis 提供了高效的数据结构和操作，适合用于实现实时的积分排行榜。本文将介绍如何使用 Redis 实现在线游戏的积分排行榜。</p><h2 id="1-Redis-有序集合（Sorted-Set）"><a href="#1-Redis-有序集合（Sorted-Set）" class="headerlink" title="1. Redis 有序集合（Sorted Set）"></a>1. Redis 有序集合（Sorted Set）</h2><p>Redis 的有序集合（Sorted Set）是实现排行榜的理想数据结构。每个元素都有一个分数（score），可以根据分数进行排序。使用有序集合，我们可以轻松地实现积分的增减、排名查询等功能。</p><h3 id="1-1-有序集合的基本命令"><a href="#1-1-有序集合的基本命令" class="headerlink" title="1.1 有序集合的基本命令"></a>1.1 有序集合的基本命令</h3><ul><li><strong>添加元素</strong>：<code>ZADD key score member</code></li><li><strong>获取排名</strong>：<code>ZRANK key member</code></li><li><strong>获取分数</strong>：<code>ZSCORE key member</code></li><li><strong>获取前 N 名</strong>：<code>ZRANGE key start stop WITHSCORES</code></li><li><strong>获取指定分数范围的成员</strong>：<code>ZRANGEBYSCORE key min max WITHSCORES</code></li></ul><h2 id="2-实现积分排行榜"><a href="#2-实现积分排行榜" class="headerlink" title="2. 实现积分排行榜"></a>2. 实现积分排行榜</h2><h3 id="2-1-添加玩家积分"><a href="#2-1-添加玩家积分" class="headerlink" title="2.1 添加玩家积分"></a>2.1 添加玩家积分</h3><p>当玩家在游戏中获得积分时，可以使用 <code>ZADD</code> 命令将其积分添加到排行榜中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Scoreboard</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Jedis</span> jedis<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Scoreboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addScore</span><span class="token punctuation">(</span><span class="token class-name">String</span> player<span class="token punctuation">,</span> <span class="token keyword">int</span> score<span class="token punctuation">)</span> <span class="token punctuation">{</span>        jedis<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span><span class="token string">"game:scoreboard"</span><span class="token punctuation">,</span> score<span class="token punctuation">,</span> player<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-获取玩家排名"><a href="#2-2-获取玩家排名" class="headerlink" title="2.2 获取玩家排名"></a>2.2 获取玩家排名</h3><p>可以使用 <code>ZRANK</code> 命令获取玩家的排名。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">getPlayerRank</span><span class="token punctuation">(</span><span class="token class-name">String</span> player<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> jedis<span class="token punctuation">.</span><span class="token function">zrank</span><span class="token punctuation">(</span><span class="token string">"game:scoreboard"</span><span class="token punctuation">,</span> player<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-3-获取玩家分数"><a href="#2-3-获取玩家分数" class="headerlink" title="2.3 获取玩家分数"></a>2.3 获取玩家分数</h3><p>使用 <code>ZSCORE</code> 命令获取玩家的当前分数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Double</span> <span class="token function">getPlayerScore</span><span class="token punctuation">(</span><span class="token class-name">String</span> player<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> jedis<span class="token punctuation">.</span><span class="token function">zscore</span><span class="token punctuation">(</span><span class="token string">"game:scoreboard"</span><span class="token punctuation">,</span> player<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-4-获取前-N-名玩家"><a href="#2-4-获取前-N-名玩家" class="headerlink" title="2.4 获取前 N 名玩家"></a>2.4 获取前 N 名玩家</h3><p>使用 <code>ZRANGE</code> 命令获取前 N 名玩家及其分数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getTopPlayers</span><span class="token punctuation">(</span><span class="token keyword">int</span> topN<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> jedis<span class="token punctuation">.</span><span class="token function">zrevrange</span><span class="token punctuation">(</span><span class="token string">"game:scoreboard"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> topN <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> <span class="token function">getTopPlayersWithScores</span><span class="token punctuation">(</span><span class="token keyword">int</span> topN<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple</span><span class="token punctuation">&gt;</span></span> topPlayers <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">zrevrangeWithScores</span><span class="token punctuation">(</span><span class="token string">"game:scoreboard"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> topN <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Tuple</span> tuple <span class="token operator">:</span> topPlayers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tuple<span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tuple<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-示例代码"><a href="#2-5-示例代码" class="headerlink" title="2.5 示例代码"></a>2.5 示例代码</h3><p>以下是一个完整的示例，演示如何使用 Redis 实现在线游戏积分排行榜：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Tuple</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Scoreboard</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Jedis</span> jedis<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Scoreboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addScore</span><span class="token punctuation">(</span><span class="token class-name">String</span> player<span class="token punctuation">,</span> <span class="token keyword">int</span> score<span class="token punctuation">)</span> <span class="token punctuation">{</span>        jedis<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span><span class="token string">"game:scoreboard"</span><span class="token punctuation">,</span> score<span class="token punctuation">,</span> player<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">getPlayerRank</span><span class="token punctuation">(</span><span class="token class-name">String</span> player<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> jedis<span class="token punctuation">.</span><span class="token function">zrank</span><span class="token punctuation">(</span><span class="token string">"game:scoreboard"</span><span class="token punctuation">,</span> player<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Double</span> <span class="token function">getPlayerScore</span><span class="token punctuation">(</span><span class="token class-name">String</span> player<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> jedis<span class="token punctuation">.</span><span class="token function">zscore</span><span class="token punctuation">(</span><span class="token string">"game:scoreboard"</span><span class="token punctuation">,</span> player<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getTopPlayers</span><span class="token punctuation">(</span><span class="token keyword">int</span> topN<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> jedis<span class="token punctuation">.</span><span class="token function">zrevrange</span><span class="token punctuation">(</span><span class="token string">"game:scoreboard"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> topN <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> <span class="token function">getTopPlayersWithScores</span><span class="token punctuation">(</span><span class="token keyword">int</span> topN<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple</span><span class="token punctuation">&gt;</span></span> topPlayers <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">zrevrangeWithScores</span><span class="token punctuation">(</span><span class="token string">"game:scoreboard"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> topN <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Tuple</span> tuple <span class="token operator">:</span> topPlayers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tuple<span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tuple<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scoreboard</span> scoreboard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scoreboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scoreboard<span class="token punctuation">.</span><span class="token function">addScore</span><span class="token punctuation">(</span><span class="token string">"Player1"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scoreboard<span class="token punctuation">.</span><span class="token function">addScore</span><span class="token punctuation">(</span><span class="token string">"Player2"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scoreboard<span class="token punctuation">.</span><span class="token function">addScore</span><span class="token punctuation">(</span><span class="token string">"Player3"</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Player1 Rank: "</span> <span class="token operator">+</span> scoreboard<span class="token punctuation">.</span><span class="token function">getPlayerRank</span><span class="token punctuation">(</span><span class="token string">"Player1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Player2 Score: "</span> <span class="token operator">+</span> scoreboard<span class="token punctuation">.</span><span class="token function">getPlayerScore</span><span class="token punctuation">(</span><span class="token string">"Player2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> topPlayers <span class="token operator">=</span> scoreboard<span class="token punctuation">.</span><span class="token function">getTopPlayersWithScores</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Top Players: "</span> <span class="token operator">+</span> topPlayers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>通过使用 Redis 的有序集合，我们可以轻松实现在线游戏的积分排行榜。Redis 提供的高效数据结构和操作，使得排行榜的实现变得简单而高效。通过合理设计，可以为玩家提供实时的积分排名，增强游戏的互动性和竞争性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://redis.io/documentation">Redis 官方文档</a></li><li><a href="https://redis.io/topics/data-types#sorted-sets">Redis 有序集合</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解如何基于-Redis-实现在线游戏积分排行榜。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解如何基于-Redis-实现在线游戏积分排行榜。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解如何基于 Redis 实现在线游戏积分排行榜。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解如何基于 Redis 实现在线游戏积分排行榜。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;在在线游戏中，积分排行榜是一个重要的功能，可以激励玩家竞争并提高游戏的参与度。Redis 提供了高效的数据结构和操作，适合用</summary>
      
    
    
    
    <category term="数据库" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/"/>
    
    
    <category term="数据库" scheme="https://lucky845.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis" scheme="https://lucky845.github.io/tags/Redis/"/>
    
    <category term="排行榜" scheme="https://lucky845.github.io/tags/%E6%8E%92%E8%A1%8C%E6%A6%9C/"/>
    
    <category term="游戏" scheme="https://lucky845.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>【Redis】功能扩展：Lua 脚本及其使用方法</title>
    <link href="https://lucky845.github.io/archives/b55fa591.html"/>
    <id>https://lucky845.github.io/archives/b55fa591.html</id>
    <published>2025-02-26T14:00:00.000Z</published>
    <updated>2025-02-26T05:25:32.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>Redis 提供了强大的 Lua 脚本支持，允许用户在服务器端执行复杂的操作。通过 Lua 脚本，用户可以将多个 Redis 命令组合在一起，减少网络往返次数，提高性能。本文将介绍 Redis 的 Lua 脚本功能，重点讲解 <code>EVAL</code> 命令、<code>redis.call</code> 和 <code>redis.pcall</code> 的使用方法及其作用。</p><h2 id="1-Lua-脚本简介"><a href="#1-Lua-脚本简介" class="headerlink" title="1. Lua 脚本简介"></a>1. Lua 脚本简介</h2><p>Lua 是一种轻量级的脚本语言，Redis 内置了 Lua 解释器，允许用户在 Redis 服务器上执行 Lua 脚本。通过 Lua 脚本，用户可以实现原子操作、复杂逻辑和数据处理。</p><h2 id="2-EVAL-命令"><a href="#2-EVAL-命令" class="headerlink" title="2. EVAL 命令"></a>2. EVAL 命令</h2><h3 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h3><p><code>EVAL</code> 命令用于执行 Lua 脚本。其基本语法如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">EVAL script numkeys key1 key2 <span class="token punctuation">..</span>. arg1 arg2 <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>script</code>：要执行的 Lua 脚本。</li><li><code>numkeys</code>：后续参数中键的数量。</li><li><code>key1</code>, <code>key2</code>：要操作的 Redis 键。</li><li><code>arg1</code>, <code>arg2</code>：传递给脚本的参数。</li></ul><h3 id="2-2-示例"><a href="#2-2-示例" class="headerlink" title="2.2 示例"></a>2.2 示例</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">EVAL <span class="token string">"return redis.call('GET', KEYS[1])"</span> <span class="token number">1</span> mykey<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个命令将返回键 <code>mykey</code> 的值。</p><h2 id="3-redis-call-和-redis-pcall"><a href="#3-redis-call-和-redis-pcall" class="headerlink" title="3. redis.call 和 redis.pcall"></a>3. redis.call 和 redis.pcall</h2><h3 id="3-1-redis-call"><a href="#3-1-redis-call" class="headerlink" title="3.1 redis.call"></a>3.1 redis.call</h3><p><code>redis.call</code> 用于在 Lua 脚本中调用 Redis 命令。它会立即执行命令并返回结果。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> value <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-2-redis-pcall"><a href="#3-2-redis-pcall" class="headerlink" title="3.2 redis.pcall"></a>3.2 redis.pcall</h3><p><code>redis.pcall</code> 与 <code>redis.call</code> 类似，但它会捕获错误并返回错误信息，而不会导致脚本执行中断。这在处理可能失败的命令时非常有用。</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> status<span class="token punctuation">,</span> err <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">pcall</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token keyword">not</span> status <span class="token keyword">then</span>    <span class="token keyword">return</span> <span class="token string">"Error: "</span> <span class="token operator">..</span> err<span class="token keyword">end</span><span class="token keyword">return</span> status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-Lua-脚本的作用"><a href="#4-Lua-脚本的作用" class="headerlink" title="4. Lua 脚本的作用"></a>4. Lua 脚本的作用</h2><ul><li><strong>原子性</strong>：Lua 脚本在 Redis 中是原子执行的，确保脚本中的所有命令要么全部成功，要么全部失败。</li><li><strong>减少网络延迟</strong>：通过将多个命令组合在一起，减少与 Redis 服务器的网络往返次数，提高性能。</li><li><strong>复杂逻辑处理</strong>：可以在脚本中实现复杂的业务逻辑，如条件判断、循环等。</li></ul><h2 id="5-使用场景"><a href="#5-使用场景" class="headerlink" title="5. 使用场景"></a>5. 使用场景</h2><ul><li><strong>计数器</strong>：使用 Lua 脚本实现高效的计数器，避免并发问题。</li><li><strong>批量操作</strong>：在一个脚本中执行多个 Redis 命令，减少网络延迟。</li><li><strong>数据验证</strong>：在写入数据之前，使用 Lua 脚本进行数据验证。</li></ul><h2 id="6-示例代码"><a href="#6-示例代码" class="headerlink" title="6. 示例代码"></a>6. 示例代码</h2><p>以下是一个完整的 Lua 脚本示例，演示如何使用 <code>EVAL</code>、<code>redis.call</code> 和 <code>redis.pcall</code>：</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- Lua 脚本：获取键的值并增加计数</span><span class="token keyword">local</span> key <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">local</span> increment <span class="token operator">=</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">-- 获取当前值</span><span class="token keyword">local</span> current_value <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token comment">-- 如果值不存在，初始化为 0</span><span class="token keyword">if</span> <span class="token keyword">not</span> current_value <span class="token keyword">then</span>    current_value <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">end</span><span class="token comment">-- 增加计数</span><span class="token keyword">local</span> new_value <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>current_value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>increment<span class="token punctuation">)</span><span class="token comment">-- 设置新值</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'SET'</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> new_value<span class="token punctuation">)</span><span class="token keyword">return</span> new_value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">EVAL <span class="token string">"local key = KEYS[1]; local increment = ARGV[1]; local current_value = redis.call('GET', key); if not current_value then current_value = 0; end; local new_value = tonumber(current_value) + tonumber(increment); redis.call('SET', key, new_value); return new_value;"</span> <span class="token number">1</span> mycounter <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h2><p>Redis 的 Lua 脚本功能为用户提供了强大的扩展能力，允许在服务器端执行复杂的操作。通过合理使用 <code>EVAL</code>、<code>redis.call</code> 和 <code>redis.pcall</code>，可以提高 Redis 的性能和灵活性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://redis.io/topics/script">Redis 官方文档 - Lua 脚本</a></li><li><a href="https://www.lua.org/manual/5.1/">Lua 官方文档</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解-Redis-的-Lua-脚本及其使用方法。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解-Redis-的-Lua-脚本及其使用方法。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解 Redis 的 Lua 脚本及其使用方法。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解 Redis 的 Lua 脚本及其使用方法。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;Redis 提供了强大的 Lua 脚本支持，允许用户在服务器端执行复杂的操作。通过 Lua 脚本，用户可以将多个 Redis</summary>
      
    
    
    
    <category term="数据库" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/"/>
    
    
    <category term="Redis" scheme="https://lucky845.github.io/tags/Redis/"/>
    
    <category term="Lua" scheme="https://lucky845.github.io/tags/Lua/"/>
    
    <category term="脚本" scheme="https://lucky845.github.io/tags/%E8%84%9A%E6%9C%AC/"/>
    
    <category term="扩展" scheme="https://lucky845.github.io/tags/%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>【Redis】RDB 和 AOF 持久化方式的区别及使用场景</title>
    <link href="https://lucky845.github.io/archives/b55fa590.html"/>
    <id>https://lucky845.github.io/archives/b55fa590.html</id>
    <published>2025-02-26T13:00:00.000Z</published>
    <updated>2025-02-26T05:23:38.641Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>Redis 是一个高性能的键值存储数据库，支持多种持久化方式来确保数据的安全性和可靠性。最常用的两种持久化方式是 RDB（快照）和 AOF（追加文件）。本文将详细介绍这两种持久化方式的区别、优缺点及使用场景。</p><h2 id="1-RDB（快照）"><a href="#1-RDB（快照）" class="headerlink" title="1. RDB（快照）"></a>1. RDB（快照）</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p>RDB（Redis Database Backup）是 Redis 的一种持久化方式，通过定期将内存中的数据快照保存到磁盘上。RDB 文件是一个二进制文件，包含了 Redis 数据库的完整状态。</p><h3 id="1-2-工作原理"><a href="#1-2-工作原理" class="headerlink" title="1.2 工作原理"></a>1.2 工作原理</h3><ul><li>Redis 会在指定的时间间隔内（如每 60 秒）自动生成 RDB 快照。</li><li>快照生成时，Redis 会 fork 一个子进程，将当前内存数据写入到磁盘。</li><li>生成的 RDB 文件可以用于数据恢复。</li></ul><h3 id="1-3-优缺点"><a href="#1-3-优缺点" class="headerlink" title="1.3 优缺点"></a>1.3 优缺点</h3><ul><li><p><strong>优点</strong>:</p><ul><li>快速：RDB 文件是二进制格式，加载速度快。</li><li>占用空间小：RDB 文件通常比 AOF 文件小。</li><li>适合备份：RDB 文件可以方便地用于数据备份和迁移。</li></ul></li><li><p><strong>缺点</strong>:</p><ul><li>数据丢失风险：在生成快照的时间间隔内，可能会丢失数据。</li><li>不支持高频率的写入：对于高频率写入的场景，RDB 可能不够及时。</li></ul></li></ul><h3 id="1-4-使用场景"><a href="#1-4-使用场景" class="headerlink" title="1.4 使用场景"></a>1.4 使用场景</h3><ul><li>适合对数据一致性要求不高的场景，如缓存、临时数据存储。</li><li>适合定期备份和数据迁移的场景。</li></ul><h2 id="2-AOF（追加文件）"><a href="#2-AOF（追加文件）" class="headerlink" title="2. AOF（追加文件）"></a>2. AOF（追加文件）</h2><h3 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h3><p>AOF（Append Only File）是 Redis 的另一种持久化方式，通过记录所有写操作的命令来实现数据持久化。每当执行写操作时，Redis 会将相应的命令追加到 AOF 文件中。</p><h3 id="2-2-工作原理"><a href="#2-2-工作原理" class="headerlink" title="2.2 工作原理"></a>2.2 工作原理</h3><ul><li>Redis 会在每次写操作后，将命令追加到 AOF 文件。</li><li>AOF 文件可以通过重放命令来恢复数据。</li><li>Redis 提供了多种 AOF 重写策略，以减少 AOF 文件的大小。</li></ul><h3 id="2-3-优缺点"><a href="#2-3-优缺点" class="headerlink" title="2.3 优缺点"></a>2.3 优缺点</h3><ul><li><p><strong>优点</strong>:</p><ul><li>数据安全性高：AOF 可以实现更高的数据安全性，几乎不会丢失数据。</li><li>支持实时写入：适合高频率写入的场景。</li></ul></li><li><p><strong>缺点</strong>:</p><ul><li>文件较大：AOF 文件通常比 RDB 文件大，且随着时间推移可能会变得更大。</li><li>启动速度慢：AOF 文件在启动时需要重放所有命令，加载速度相对较慢。</li></ul></li></ul><h3 id="2-4-使用场景"><a href="#2-4-使用场景" class="headerlink" title="2.4 使用场景"></a>2.4 使用场景</h3><ul><li>适合对数据一致性要求高的场景，如金融系统、订单系统等。</li><li>适合需要实时数据持久化的场景。</li></ul><h2 id="3-RDB-和-AOF-的比较"><a href="#3-RDB-和-AOF-的比较" class="headerlink" title="3. RDB 和 AOF 的比较"></a>3. RDB 和 AOF 的比较</h2><table><thead><tr><th>特性</th><th>RDB</th><th>AOF</th></tr></thead><tbody><tr><td>数据安全性</td><td>较低，可能丢失最近的写操作</td><td>较高，几乎不丢失数据</td></tr><tr><td>文件大小</td><td>较小</td><td>较大</td></tr><tr><td>启动速度</td><td>快</td><td>慢</td></tr><tr><td>适用场景</td><td>数据一致性要求不高的场景</td><td>数据一致性要求高的场景</td></tr><tr><td>频率</td><td>定期生成快照</td><td>实时记录写操作</td></tr></tbody></table><h2 id="4-选择合适的持久化方式"><a href="#4-选择合适的持久化方式" class="headerlink" title="4. 选择合适的持久化方式"></a>4. 选择合适的持久化方式</h2><p>在选择 RDB 或 AOF 时，应根据具体的业务需求和场景进行选择：</p><ul><li>如果对数据一致性要求不高，且需要快速恢复，可以选择 RDB。</li><li>如果对数据一致性要求高，且需要实时持久化，可以选择 AOF。</li><li>也可以结合使用 RDB 和 AOF，以实现更高的性能和数据安全性。</li></ul><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>Redis 提供了 RDB 和 AOF 两种持久化方式，各有优缺点和适用场景。通过合理选择持久化方式，可以有效提高数据的安全性和可靠性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://redis.io/documentation">Redis 官方文档</a></li><li><a href="https://redis.io/topics/persistence">Redis 持久化机制</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解-Redis-的-RDB-和-AOF-持久化方式及其使用场景。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解-Redis-的-RDB-和-AOF-持久化方式及其使用场景。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解 Redis 的 RDB 和 AOF 持久化方式及其使用场景。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解 Redis 的 RDB 和 AOF 持久化方式及其使用场景。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;Redis 是一个高性能的键值存储数据库，支持多种持久化方式来确保数据的安全性和可靠性。最常用的两种持久化方式是 RDB（快</summary>
      
    
    
    
    <category term="数据库" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/"/>
    
    
    <category term="Redis" scheme="https://lucky845.github.io/tags/Redis/"/>
    
    <category term="持久化" scheme="https://lucky845.github.io/tags/%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
    <category term="RDB" scheme="https://lucky845.github.io/tags/RDB/"/>
    
    <category term="AOF" scheme="https://lucky845.github.io/tags/AOF/"/>
    
  </entry>
  
  <entry>
    <title>【Redisson】Redis Java 客户端的使用方法</title>
    <link href="https://lucky845.github.io/archives/b55fa589.html"/>
    <id>https://lucky845.github.io/archives/b55fa589.html</id>
    <published>2025-02-26T12:00:00.000Z</published>
    <updated>2025-02-26T05:22:05.699Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>Redisson 是一个功能强大的 Redis Java 客户端，提供了丰富的功能和易用的 API。它不仅支持基本的 Redis 操作，还提供了分布式对象、分布式锁、消息队列等高级功能。本文将介绍 Redisson 的基本概念、安装方法以及常用操作。</p><h2 id="1-Redisson-简介"><a href="#1-Redisson-简介" class="headerlink" title="1. Redisson 简介"></a>1. Redisson 简介</h2><p>Redisson 是一个开源的 Redis 客户端，基于 Redis 的数据结构，提供了 Java 对象的分布式实现。它支持多种数据结构，如分布式集合、分布式映射、分布式队列等，适合用于构建分布式应用。</p><h2 id="2-安装-Redisson"><a href="#2-安装-Redisson" class="headerlink" title="2. 安装 Redisson"></a>2. 安装 Redisson</h2><p>在使用 Redisson 之前，您需要将其添加到项目的依赖中。如果您使用 Maven，可以在 <code>pom.xml</code> 中添加以下依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.16.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 请根据需要选择版本 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果您使用 Gradle，可以在 <code>build.gradle</code> 中添加：</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">implementation <span class="token string">'org.redisson:redisson:3.16.1'</span> <span class="token comment">// 请根据需要选择版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-创建-Redisson-实例"><a href="#3-创建-Redisson-实例" class="headerlink" title="3. 创建 Redisson 实例"></a>3. 创建 Redisson 实例</h2><p>在使用 Redisson 之前，您需要创建一个 Redisson 实例并连接到 Redis 服务器。</p><h3 id="3-1-连接到-Redis"><a href="#3-1-连接到-Redis" class="headerlink" title="3.1 连接到 Redis"></a>3.1 连接到 Redis</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span></span><span class="token class-name">Redisson</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">Config</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedissonExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建配置</span>        <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"redis://localhost:6379"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建 Redisson 实例</span>        <span class="token class-name">Redisson</span> redisson <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Redisson</span><span class="token punctuation">)</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 验证连接</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接成功: "</span> <span class="token operator">+</span> redisson<span class="token punctuation">.</span><span class="token function">getKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 关闭连接</span>        redisson<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-常用操作"><a href="#4-常用操作" class="headerlink" title="4. 常用操作"></a>4. 常用操作</h2><h3 id="4-1-字符串操作"><a href="#4-1-字符串操作" class="headerlink" title="4.1 字符串操作"></a>4.1 字符串操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取 RBucket 对象</span><span class="token class-name">RBucket</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> bucket <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getBucket</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置值</span>bucket<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取值</span><span class="token class-name">String</span> value <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取的值: "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-列表操作"><a href="#4-2-列表操作" class="headerlink" title="4.2 列表操作"></a>4.2 列表操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取 RList 对象</span><span class="token class-name">RList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token string">"mylist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加元素</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取列表元素</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> values <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">readAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"列表元素: "</span> <span class="token operator">+</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-集合操作"><a href="#4-3-集合操作" class="headerlink" title="4.3 集合操作"></a>4.3 集合操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取 RSet 对象</span><span class="token class-name">RSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getSet</span><span class="token punctuation">(</span><span class="token string">"myset"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加元素</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取集合成员</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> members <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">readAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合成员: "</span> <span class="token operator">+</span> members<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-哈希操作"><a href="#4-4-哈希操作" class="headerlink" title="4.4 哈希操作"></a>4.4 哈希操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取 RMap 对象</span><span class="token class-name">RMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getMap</span><span class="token punctuation">(</span><span class="token string">"user:1001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置哈希字段</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"30"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取哈希字段</span><span class="token class-name">String</span> name <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户姓名: "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-分布式锁"><a href="#4-5-分布式锁" class="headerlink" title="4.5 分布式锁"></a>4.5 分布式锁</h3><p>Redisson 提供了简单易用的分布式锁功能。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取 RLock 对象</span><span class="token class-name">RLock</span> lock <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token string">"myLock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment">// 加锁</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 执行需要保护的代码</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取到锁，执行任务..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token comment">// 释放锁</span>    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-使用连接池"><a href="#5-使用连接池" class="headerlink" title="5. 使用连接池"></a>5. 使用连接池</h2><p>Redisson 支持连接池，可以在高并发场景下使用。</p><h3 id="5-1-创建连接池"><a href="#5-1-创建连接池" class="headerlink" title="5.1 创建连接池"></a>5.1 创建连接池</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"redis://localhost:6379"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建 Redisson 实例</span><span class="token class-name">Redisson</span> redisson <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Redisson</span><span class="token punctuation">)</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用 Redisson 实例</span><span class="token class-name">RBucket</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> bucket <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getBucket</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bucket<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 关闭连接池</span>redisson<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>Redisson 是一个功能强大的 Redis Java 客户端，提供了丰富的 API 来与 Redis 进行交互。通过合理使用 Redisson，您可以高效地管理 Redis 数据库中的数据，并利用其分布式特性构建高性能的应用。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/redisson/redisson">Redisson GitHub 仓库</a></li><li><a href="https://redis.io/documentation">Redis 官方文档</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解-Redisson-及其使用方法。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解-Redisson-及其使用方法。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解 Redisson 及其使用方法。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解 Redisson 及其使用方法。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;Redisson 是一个功能强大的 Redis Java 客户端，提供了丰富的功能和易用的 API。它不仅支持基本的 Red</summary>
      
    
    
    
    <category term="数据库" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/"/>
    
    
    <category term="Java" scheme="https://lucky845.github.io/tags/Java/"/>
    
    <category term="Redis" scheme="https://lucky845.github.io/tags/Redis/"/>
    
    <category term="客户端" scheme="https://lucky845.github.io/tags/%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    
    <category term="Redisson" scheme="https://lucky845.github.io/tags/Redisson/"/>
    
  </entry>
  
  <entry>
    <title>【Jedis】Redis Java 客户端的使用方法</title>
    <link href="https://lucky845.github.io/archives/b55fa588.html"/>
    <id>https://lucky845.github.io/archives/b55fa588.html</id>
    <published>2025-02-26T11:00:00.000Z</published>
    <updated>2025-02-26T05:20:47.210Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>Jedis 是一个简单易用的 Redis Java 客户端，提供了对 Redis 数据库的高效访问。它支持 Redis 的所有基本操作，并且具有良好的性能和易用性。本文将介绍 Jedis 的基本概念、安装方法以及常用操作。</p><h2 id="1-Jedis-简介"><a href="#1-Jedis-简介" class="headerlink" title="1. Jedis 简介"></a>1. Jedis 简介</h2><p>Jedis 是一个开源的 Java 客户端库，用于与 Redis 进行交互。它提供了简单的 API 来执行 Redis 命令，并支持连接池、事务、管道等功能。</p><h2 id="2-安装-Jedis"><a href="#2-安装-Jedis" class="headerlink" title="2. 安装 Jedis"></a>2. 安装 Jedis</h2><p>在使用 Jedis 之前，您需要将其添加到项目的依赖中。如果您使用 Maven，可以在 <code>pom.xml</code> 中添加以下依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 请根据需要选择版本 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果您使用 Gradle，可以在 <code>build.gradle</code> 中添加：</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">implementation <span class="token string">'redis.clients:jedis:4.0.1'</span> <span class="token comment">// 请根据需要选择版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-创建-Jedis-实例"><a href="#3-创建-Jedis-实例" class="headerlink" title="3. 创建 Jedis 实例"></a>3. 创建 Jedis 实例</h2><p>在使用 Jedis 之前，您需要创建一个 Jedis 实例并连接到 Redis 服务器。</p><h3 id="3-1-连接到-Redis"><a href="#3-1-连接到-Redis" class="headerlink" title="3.1 连接到 Redis"></a>3.1 连接到 Redis</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建 Jedis 实例，连接到 Redis 服务器</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 验证连接</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接成功: "</span> <span class="token operator">+</span> jedis<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 关闭连接</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-常用操作"><a href="#4-常用操作" class="headerlink" title="4. 常用操作"></a>4. 常用操作</h2><h3 id="4-1-字符串操作"><a href="#4-1-字符串操作" class="headerlink" title="4.1 字符串操作"></a>4.1 字符串操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 设置键值对</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取值</span><span class="token class-name">String</span> value <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取的值: "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 原子递增</span>jedis<span class="token punctuation">.</span><span class="token function">incr</span><span class="token punctuation">(</span><span class="token string">"counter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-列表操作"><a href="#4-2-列表操作" class="headerlink" title="4.2 列表操作"></a>4.2 列表操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 从左侧插入元素</span>jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"mylist"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"mylist"</span><span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 从右侧插入元素</span>jedis<span class="token punctuation">.</span><span class="token function">rpush</span><span class="token punctuation">(</span><span class="token string">"mylist"</span><span class="token punctuation">,</span> <span class="token string">"value3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取列表长度</span><span class="token keyword">long</span> length <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">llen</span><span class="token punctuation">(</span><span class="token string">"mylist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"列表长度: "</span> <span class="token operator">+</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取列表元素</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"mylist"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"列表元素: "</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-集合操作"><a href="#4-3-集合操作" class="headerlink" title="4.3 集合操作"></a>4.3 集合操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 添加元素到集合</span>jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">"myset"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">"myset"</span><span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取集合成员</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> members <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"myset"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合成员: "</span> <span class="token operator">+</span> members<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-哈希操作"><a href="#4-4-哈希操作" class="headerlink" title="4.4 哈希操作"></a>4.4 哈希操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 设置哈希字段</span>jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"user:1001"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"user:1001"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"30"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取哈希字段</span><span class="token class-name">String</span> name <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">hget</span><span class="token punctuation">(</span><span class="token string">"user:1001"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户姓名: "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-使用连接池"><a href="#5-使用连接池" class="headerlink" title="5. 使用连接池"></a>5. 使用连接池</h2><p>在高并发场景下，建议使用 Jedis 连接池来管理连接。</p><h3 id="5-1-创建连接池"><a href="#5-1-创建连接池" class="headerlink" title="5.1 创建连接池"></a>5.1 创建连接池</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">JedisPool</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">JedisPoolConfig</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisPoolExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建连接池配置</span>        <span class="token class-name">JedisPoolConfig</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最大连接数</span>        config<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最大空闲连接数</span>        config<span class="token punctuation">.</span><span class="token function">setMinIdle</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最小空闲连接数</span>        <span class="token comment">// 创建连接池</span>        <span class="token class-name">JedisPool</span> jedisPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 从连接池获取 Jedis 实例</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> jedisPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接成功: "</span> <span class="token operator">+</span> jedis<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 关闭连接池</span>        jedisPool<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>Jedis 是一个功能强大的 Redis Java 客户端，提供了简单易用的 API 来与 Redis 进行交互。通过合理使用 Jedis，您可以高效地管理 Redis 数据库中的数据。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/redis/jedis">Jedis GitHub 仓库</a></li><li><a href="https://redis.io/documentation">Redis 官方文档</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解-Jedis-及其使用方法。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解-Jedis-及其使用方法。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解 Jedis 及其使用方法。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解 Jedis 及其使用方法。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题背景&quot;&gt;&lt;a href=&quot;#问题背景&quot; class=&quot;headerlink&quot; title=&quot;问题背景&quot;&gt;&lt;/a&gt;问题背景&lt;/h2&gt;&lt;p&gt;Jedis 是一个简单易用的 Redis Java 客户端，提供了对 Redis 数据库的高效访问。它支持 Redis 的所</summary>
      
    
    
    
    <category term="数据库" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis" scheme="https://lucky845.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/Redis/"/>
    
    
    <category term="Java" scheme="https://lucky845.github.io/tags/Java/"/>
    
    <category term="Redis" scheme="https://lucky845.github.io/tags/Redis/"/>
    
    <category term="Jedis" scheme="https://lucky845.github.io/tags/Jedis/"/>
    
    <category term="客户端" scheme="https://lucky845.github.io/tags/%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    
  </entry>
  
</feed>
