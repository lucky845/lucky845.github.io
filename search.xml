<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【Redis】基于 Redis 实现在线游戏积分排行榜</title>
      <link href="/archives/b55fa592.html"/>
      <url>/archives/b55fa592.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在在线游戏中，积分排行榜是一个重要的功能，可以激励玩家竞争并提高游戏的参与度。Redis 提供了高效的数据结构和操作，适合用于实现实时的积分排行榜。本文将介绍如何使用 Redis 实现在线游戏的积分排行榜。</p><h2 id="1-Redis-有序集合（Sorted-Set）"><a href="#1-Redis-有序集合（Sorted-Set）" class="headerlink" title="1. Redis 有序集合（Sorted Set）"></a>1. Redis 有序集合（Sorted Set）</h2><p>Redis 的有序集合（Sorted Set）是实现排行榜的理想数据结构。每个元素都有一个分数（score），可以根据分数进行排序。使用有序集合，我们可以轻松地实现积分的增减、排名查询等功能。</p><h3 id="1-1-有序集合的基本命令"><a href="#1-1-有序集合的基本命令" class="headerlink" title="1.1 有序集合的基本命令"></a>1.1 有序集合的基本命令</h3><ul><li><strong>添加元素</strong>：<code>ZADD key score member</code></li><li><strong>获取排名</strong>：<code>ZRANK key member</code></li><li><strong>获取分数</strong>：<code>ZSCORE key member</code></li><li><strong>获取前 N 名</strong>：<code>ZRANGE key start stop WITHSCORES</code></li><li><strong>获取指定分数范围的成员</strong>：<code>ZRANGEBYSCORE key min max WITHSCORES</code></li></ul><h2 id="2-实现积分排行榜"><a href="#2-实现积分排行榜" class="headerlink" title="2. 实现积分排行榜"></a>2. 实现积分排行榜</h2><h3 id="2-1-添加玩家积分"><a href="#2-1-添加玩家积分" class="headerlink" title="2.1 添加玩家积分"></a>2.1 添加玩家积分</h3><p>当玩家在游戏中获得积分时，可以使用 <code>ZADD</code> 命令将其积分添加到排行榜中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Scoreboard</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Jedis</span> jedis<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Scoreboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addScore</span><span class="token punctuation">(</span><span class="token class-name">String</span> player<span class="token punctuation">,</span> <span class="token keyword">int</span> score<span class="token punctuation">)</span> <span class="token punctuation">{</span>        jedis<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span><span class="token string">"game:scoreboard"</span><span class="token punctuation">,</span> score<span class="token punctuation">,</span> player<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-获取玩家排名"><a href="#2-2-获取玩家排名" class="headerlink" title="2.2 获取玩家排名"></a>2.2 获取玩家排名</h3><p>可以使用 <code>ZRANK</code> 命令获取玩家的排名。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">getPlayerRank</span><span class="token punctuation">(</span><span class="token class-name">String</span> player<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> jedis<span class="token punctuation">.</span><span class="token function">zrank</span><span class="token punctuation">(</span><span class="token string">"game:scoreboard"</span><span class="token punctuation">,</span> player<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-3-获取玩家分数"><a href="#2-3-获取玩家分数" class="headerlink" title="2.3 获取玩家分数"></a>2.3 获取玩家分数</h3><p>使用 <code>ZSCORE</code> 命令获取玩家的当前分数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Double</span> <span class="token function">getPlayerScore</span><span class="token punctuation">(</span><span class="token class-name">String</span> player<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> jedis<span class="token punctuation">.</span><span class="token function">zscore</span><span class="token punctuation">(</span><span class="token string">"game:scoreboard"</span><span class="token punctuation">,</span> player<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-4-获取前-N-名玩家"><a href="#2-4-获取前-N-名玩家" class="headerlink" title="2.4 获取前 N 名玩家"></a>2.4 获取前 N 名玩家</h3><p>使用 <code>ZRANGE</code> 命令获取前 N 名玩家及其分数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getTopPlayers</span><span class="token punctuation">(</span><span class="token keyword">int</span> topN<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> jedis<span class="token punctuation">.</span><span class="token function">zrevrange</span><span class="token punctuation">(</span><span class="token string">"game:scoreboard"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> topN <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> <span class="token function">getTopPlayersWithScores</span><span class="token punctuation">(</span><span class="token keyword">int</span> topN<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple</span><span class="token punctuation">&gt;</span></span> topPlayers <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">zrevrangeWithScores</span><span class="token punctuation">(</span><span class="token string">"game:scoreboard"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> topN <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Tuple</span> tuple <span class="token operator">:</span> topPlayers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tuple<span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tuple<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-示例代码"><a href="#2-5-示例代码" class="headerlink" title="2.5 示例代码"></a>2.5 示例代码</h3><p>以下是一个完整的示例，演示如何使用 Redis 实现在线游戏积分排行榜：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Tuple</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Scoreboard</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Jedis</span> jedis<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Scoreboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addScore</span><span class="token punctuation">(</span><span class="token class-name">String</span> player<span class="token punctuation">,</span> <span class="token keyword">int</span> score<span class="token punctuation">)</span> <span class="token punctuation">{</span>        jedis<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span><span class="token string">"game:scoreboard"</span><span class="token punctuation">,</span> score<span class="token punctuation">,</span> player<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">getPlayerRank</span><span class="token punctuation">(</span><span class="token class-name">String</span> player<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> jedis<span class="token punctuation">.</span><span class="token function">zrank</span><span class="token punctuation">(</span><span class="token string">"game:scoreboard"</span><span class="token punctuation">,</span> player<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Double</span> <span class="token function">getPlayerScore</span><span class="token punctuation">(</span><span class="token class-name">String</span> player<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> jedis<span class="token punctuation">.</span><span class="token function">zscore</span><span class="token punctuation">(</span><span class="token string">"game:scoreboard"</span><span class="token punctuation">,</span> player<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getTopPlayers</span><span class="token punctuation">(</span><span class="token keyword">int</span> topN<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> jedis<span class="token punctuation">.</span><span class="token function">zrevrange</span><span class="token punctuation">(</span><span class="token string">"game:scoreboard"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> topN <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> <span class="token function">getTopPlayersWithScores</span><span class="token punctuation">(</span><span class="token keyword">int</span> topN<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple</span><span class="token punctuation">&gt;</span></span> topPlayers <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">zrevrangeWithScores</span><span class="token punctuation">(</span><span class="token string">"game:scoreboard"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> topN <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Tuple</span> tuple <span class="token operator">:</span> topPlayers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tuple<span class="token punctuation">.</span><span class="token function">getElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tuple<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Scoreboard</span> scoreboard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scoreboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scoreboard<span class="token punctuation">.</span><span class="token function">addScore</span><span class="token punctuation">(</span><span class="token string">"Player1"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scoreboard<span class="token punctuation">.</span><span class="token function">addScore</span><span class="token punctuation">(</span><span class="token string">"Player2"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scoreboard<span class="token punctuation">.</span><span class="token function">addScore</span><span class="token punctuation">(</span><span class="token string">"Player3"</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Player1 Rank: "</span> <span class="token operator">+</span> scoreboard<span class="token punctuation">.</span><span class="token function">getPlayerRank</span><span class="token punctuation">(</span><span class="token string">"Player1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Player2 Score: "</span> <span class="token operator">+</span> scoreboard<span class="token punctuation">.</span><span class="token function">getPlayerScore</span><span class="token punctuation">(</span><span class="token string">"Player2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> topPlayers <span class="token operator">=</span> scoreboard<span class="token punctuation">.</span><span class="token function">getTopPlayersWithScores</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Top Players: "</span> <span class="token operator">+</span> topPlayers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>通过使用 Redis 的有序集合，我们可以轻松实现在线游戏的积分排行榜。Redis 提供的高效数据结构和操作，使得排行榜的实现变得简单而高效。通过合理设计，可以为玩家提供实时的积分排名，增强游戏的互动性和竞争性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://redis.io/documentation">Redis 官方文档</a></li><li><a href="https://redis.io/topics/data-types#sorted-sets">Redis 有序集合</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解如何基于-Redis-实现在线游戏积分排行榜。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解如何基于-Redis-实现在线游戏积分排行榜。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解如何基于 Redis 实现在线游戏积分排行榜。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解如何基于 Redis 实现在线游戏积分排行榜。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Redis </tag>
            
            <tag> 排行榜 </tag>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Redis】功能扩展：Lua 脚本及其使用方法</title>
      <link href="/archives/b55fa591.html"/>
      <url>/archives/b55fa591.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>Redis 提供了强大的 Lua 脚本支持，允许用户在服务器端执行复杂的操作。通过 Lua 脚本，用户可以将多个 Redis 命令组合在一起，减少网络往返次数，提高性能。本文将介绍 Redis 的 Lua 脚本功能，重点讲解 <code>EVAL</code> 命令、<code>redis.call</code> 和 <code>redis.pcall</code> 的使用方法及其作用。</p><h2 id="1-Lua-脚本简介"><a href="#1-Lua-脚本简介" class="headerlink" title="1. Lua 脚本简介"></a>1. Lua 脚本简介</h2><p>Lua 是一种轻量级的脚本语言，Redis 内置了 Lua 解释器，允许用户在 Redis 服务器上执行 Lua 脚本。通过 Lua 脚本，用户可以实现原子操作、复杂逻辑和数据处理。</p><h2 id="2-EVAL-命令"><a href="#2-EVAL-命令" class="headerlink" title="2. EVAL 命令"></a>2. EVAL 命令</h2><h3 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h3><p><code>EVAL</code> 命令用于执行 Lua 脚本。其基本语法如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">EVAL script numkeys key1 key2 <span class="token punctuation">..</span>. arg1 arg2 <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>script</code>：要执行的 Lua 脚本。</li><li><code>numkeys</code>：后续参数中键的数量。</li><li><code>key1</code>, <code>key2</code>：要操作的 Redis 键。</li><li><code>arg1</code>, <code>arg2</code>：传递给脚本的参数。</li></ul><h3 id="2-2-示例"><a href="#2-2-示例" class="headerlink" title="2.2 示例"></a>2.2 示例</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">EVAL <span class="token string">"return redis.call('GET', KEYS[1])"</span> <span class="token number">1</span> mykey<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个命令将返回键 <code>mykey</code> 的值。</p><h2 id="3-redis-call-和-redis-pcall"><a href="#3-redis-call-和-redis-pcall" class="headerlink" title="3. redis.call 和 redis.pcall"></a>3. redis.call 和 redis.pcall</h2><h3 id="3-1-redis-call"><a href="#3-1-redis-call" class="headerlink" title="3.1 redis.call"></a>3.1 redis.call</h3><p><code>redis.call</code> 用于在 Lua 脚本中调用 Redis 命令。它会立即执行命令并返回结果。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> value <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-2-redis-pcall"><a href="#3-2-redis-pcall" class="headerlink" title="3.2 redis.pcall"></a>3.2 redis.pcall</h3><p><code>redis.pcall</code> 与 <code>redis.call</code> 类似，但它会捕获错误并返回错误信息，而不会导致脚本执行中断。这在处理可能失败的命令时非常有用。</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> status<span class="token punctuation">,</span> err <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">pcall</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token keyword">not</span> status <span class="token keyword">then</span>    <span class="token keyword">return</span> <span class="token string">"Error: "</span> <span class="token operator">..</span> err<span class="token keyword">end</span><span class="token keyword">return</span> status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-Lua-脚本的作用"><a href="#4-Lua-脚本的作用" class="headerlink" title="4. Lua 脚本的作用"></a>4. Lua 脚本的作用</h2><ul><li><strong>原子性</strong>：Lua 脚本在 Redis 中是原子执行的，确保脚本中的所有命令要么全部成功，要么全部失败。</li><li><strong>减少网络延迟</strong>：通过将多个命令组合在一起，减少与 Redis 服务器的网络往返次数，提高性能。</li><li><strong>复杂逻辑处理</strong>：可以在脚本中实现复杂的业务逻辑，如条件判断、循环等。</li></ul><h2 id="5-使用场景"><a href="#5-使用场景" class="headerlink" title="5. 使用场景"></a>5. 使用场景</h2><ul><li><strong>计数器</strong>：使用 Lua 脚本实现高效的计数器，避免并发问题。</li><li><strong>批量操作</strong>：在一个脚本中执行多个 Redis 命令，减少网络延迟。</li><li><strong>数据验证</strong>：在写入数据之前，使用 Lua 脚本进行数据验证。</li></ul><h2 id="6-示例代码"><a href="#6-示例代码" class="headerlink" title="6. 示例代码"></a>6. 示例代码</h2><p>以下是一个完整的 Lua 脚本示例，演示如何使用 <code>EVAL</code>、<code>redis.call</code> 和 <code>redis.pcall</code>：</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token comment">-- Lua 脚本：获取键的值并增加计数</span><span class="token keyword">local</span> key <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">local</span> increment <span class="token operator">=</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">-- 获取当前值</span><span class="token keyword">local</span> current_value <span class="token operator">=</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token comment">-- 如果值不存在，初始化为 0</span><span class="token keyword">if</span> <span class="token keyword">not</span> current_value <span class="token keyword">then</span>    current_value <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">end</span><span class="token comment">-- 增加计数</span><span class="token keyword">local</span> new_value <span class="token operator">=</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>current_value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">tonumber</span><span class="token punctuation">(</span>increment<span class="token punctuation">)</span><span class="token comment">-- 设置新值</span>redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">'SET'</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> new_value<span class="token punctuation">)</span><span class="token keyword">return</span> new_value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="执行脚本"><a href="#执行脚本" class="headerlink" title="执行脚本"></a>执行脚本</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">EVAL <span class="token string">"local key = KEYS[1]; local increment = ARGV[1]; local current_value = redis.call('GET', key); if not current_value then current_value = 0; end; local new_value = tonumber(current_value) + tonumber(increment); redis.call('SET', key, new_value); return new_value;"</span> <span class="token number">1</span> mycounter <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h2><p>Redis 的 Lua 脚本功能为用户提供了强大的扩展能力，允许在服务器端执行复杂的操作。通过合理使用 <code>EVAL</code>、<code>redis.call</code> 和 <code>redis.pcall</code>，可以提高 Redis 的性能和灵活性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://redis.io/topics/script">Redis 官方文档 - Lua 脚本</a></li><li><a href="https://www.lua.org/manual/5.1/">Lua 官方文档</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解-Redis-的-Lua-脚本及其使用方法。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解-Redis-的-Lua-脚本及其使用方法。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解 Redis 的 Lua 脚本及其使用方法。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解 Redis 的 Lua 脚本及其使用方法。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Lua </tag>
            
            <tag> 脚本 </tag>
            
            <tag> 扩展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Redis】RDB 和 AOF 持久化方式的区别及使用场景</title>
      <link href="/archives/b55fa590.html"/>
      <url>/archives/b55fa590.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>Redis 是一个高性能的键值存储数据库，支持多种持久化方式来确保数据的安全性和可靠性。最常用的两种持久化方式是 RDB（快照）和 AOF（追加文件）。本文将详细介绍这两种持久化方式的区别、优缺点及使用场景。</p><h2 id="1-RDB（快照）"><a href="#1-RDB（快照）" class="headerlink" title="1. RDB（快照）"></a>1. RDB（快照）</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p>RDB（Redis Database Backup）是 Redis 的一种持久化方式，通过定期将内存中的数据快照保存到磁盘上。RDB 文件是一个二进制文件，包含了 Redis 数据库的完整状态。</p><h3 id="1-2-工作原理"><a href="#1-2-工作原理" class="headerlink" title="1.2 工作原理"></a>1.2 工作原理</h3><ul><li>Redis 会在指定的时间间隔内（如每 60 秒）自动生成 RDB 快照。</li><li>快照生成时，Redis 会 fork 一个子进程，将当前内存数据写入到磁盘。</li><li>生成的 RDB 文件可以用于数据恢复。</li></ul><h3 id="1-3-优缺点"><a href="#1-3-优缺点" class="headerlink" title="1.3 优缺点"></a>1.3 优缺点</h3><ul><li><p><strong>优点</strong>:</p><ul><li>快速：RDB 文件是二进制格式，加载速度快。</li><li>占用空间小：RDB 文件通常比 AOF 文件小。</li><li>适合备份：RDB 文件可以方便地用于数据备份和迁移。</li></ul></li><li><p><strong>缺点</strong>:</p><ul><li>数据丢失风险：在生成快照的时间间隔内，可能会丢失数据。</li><li>不支持高频率的写入：对于高频率写入的场景，RDB 可能不够及时。</li></ul></li></ul><h3 id="1-4-使用场景"><a href="#1-4-使用场景" class="headerlink" title="1.4 使用场景"></a>1.4 使用场景</h3><ul><li>适合对数据一致性要求不高的场景，如缓存、临时数据存储。</li><li>适合定期备份和数据迁移的场景。</li></ul><h2 id="2-AOF（追加文件）"><a href="#2-AOF（追加文件）" class="headerlink" title="2. AOF（追加文件）"></a>2. AOF（追加文件）</h2><h3 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h3><p>AOF（Append Only File）是 Redis 的另一种持久化方式，通过记录所有写操作的命令来实现数据持久化。每当执行写操作时，Redis 会将相应的命令追加到 AOF 文件中。</p><h3 id="2-2-工作原理"><a href="#2-2-工作原理" class="headerlink" title="2.2 工作原理"></a>2.2 工作原理</h3><ul><li>Redis 会在每次写操作后，将命令追加到 AOF 文件。</li><li>AOF 文件可以通过重放命令来恢复数据。</li><li>Redis 提供了多种 AOF 重写策略，以减少 AOF 文件的大小。</li></ul><h3 id="2-3-优缺点"><a href="#2-3-优缺点" class="headerlink" title="2.3 优缺点"></a>2.3 优缺点</h3><ul><li><p><strong>优点</strong>:</p><ul><li>数据安全性高：AOF 可以实现更高的数据安全性，几乎不会丢失数据。</li><li>支持实时写入：适合高频率写入的场景。</li></ul></li><li><p><strong>缺点</strong>:</p><ul><li>文件较大：AOF 文件通常比 RDB 文件大，且随着时间推移可能会变得更大。</li><li>启动速度慢：AOF 文件在启动时需要重放所有命令，加载速度相对较慢。</li></ul></li></ul><h3 id="2-4-使用场景"><a href="#2-4-使用场景" class="headerlink" title="2.4 使用场景"></a>2.4 使用场景</h3><ul><li>适合对数据一致性要求高的场景，如金融系统、订单系统等。</li><li>适合需要实时数据持久化的场景。</li></ul><h2 id="3-RDB-和-AOF-的比较"><a href="#3-RDB-和-AOF-的比较" class="headerlink" title="3. RDB 和 AOF 的比较"></a>3. RDB 和 AOF 的比较</h2><table><thead><tr><th>特性</th><th>RDB</th><th>AOF</th></tr></thead><tbody><tr><td>数据安全性</td><td>较低，可能丢失最近的写操作</td><td>较高，几乎不丢失数据</td></tr><tr><td>文件大小</td><td>较小</td><td>较大</td></tr><tr><td>启动速度</td><td>快</td><td>慢</td></tr><tr><td>适用场景</td><td>数据一致性要求不高的场景</td><td>数据一致性要求高的场景</td></tr><tr><td>频率</td><td>定期生成快照</td><td>实时记录写操作</td></tr></tbody></table><h2 id="4-选择合适的持久化方式"><a href="#4-选择合适的持久化方式" class="headerlink" title="4. 选择合适的持久化方式"></a>4. 选择合适的持久化方式</h2><p>在选择 RDB 或 AOF 时，应根据具体的业务需求和场景进行选择：</p><ul><li>如果对数据一致性要求不高，且需要快速恢复，可以选择 RDB。</li><li>如果对数据一致性要求高，且需要实时持久化，可以选择 AOF。</li><li>也可以结合使用 RDB 和 AOF，以实现更高的性能和数据安全性。</li></ul><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>Redis 提供了 RDB 和 AOF 两种持久化方式，各有优缺点和适用场景。通过合理选择持久化方式，可以有效提高数据的安全性和可靠性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://redis.io/documentation">Redis 官方文档</a></li><li><a href="https://redis.io/topics/persistence">Redis 持久化机制</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解-Redis-的-RDB-和-AOF-持久化方式及其使用场景。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解-Redis-的-RDB-和-AOF-持久化方式及其使用场景。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解 Redis 的 RDB 和 AOF 持久化方式及其使用场景。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解 Redis 的 RDB 和 AOF 持久化方式及其使用场景。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 持久化 </tag>
            
            <tag> RDB </tag>
            
            <tag> AOF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Redisson】Redis Java 客户端的使用方法</title>
      <link href="/archives/b55fa589.html"/>
      <url>/archives/b55fa589.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>Redisson 是一个功能强大的 Redis Java 客户端，提供了丰富的功能和易用的 API。它不仅支持基本的 Redis 操作，还提供了分布式对象、分布式锁、消息队列等高级功能。本文将介绍 Redisson 的基本概念、安装方法以及常用操作。</p><h2 id="1-Redisson-简介"><a href="#1-Redisson-简介" class="headerlink" title="1. Redisson 简介"></a>1. Redisson 简介</h2><p>Redisson 是一个开源的 Redis 客户端，基于 Redis 的数据结构，提供了 Java 对象的分布式实现。它支持多种数据结构，如分布式集合、分布式映射、分布式队列等，适合用于构建分布式应用。</p><h2 id="2-安装-Redisson"><a href="#2-安装-Redisson" class="headerlink" title="2. 安装 Redisson"></a>2. 安装 Redisson</h2><p>在使用 Redisson 之前，您需要将其添加到项目的依赖中。如果您使用 Maven，可以在 <code>pom.xml</code> 中添加以下依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.16.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 请根据需要选择版本 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果您使用 Gradle，可以在 <code>build.gradle</code> 中添加：</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">implementation <span class="token string">'org.redisson:redisson:3.16.1'</span> <span class="token comment">// 请根据需要选择版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-创建-Redisson-实例"><a href="#3-创建-Redisson-实例" class="headerlink" title="3. 创建 Redisson 实例"></a>3. 创建 Redisson 实例</h2><p>在使用 Redisson 之前，您需要创建一个 Redisson 实例并连接到 Redis 服务器。</p><h3 id="3-1-连接到-Redis"><a href="#3-1-连接到-Redis" class="headerlink" title="3.1 连接到 Redis"></a>3.1 连接到 Redis</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span></span><span class="token class-name">Redisson</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">Config</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedissonExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建配置</span>        <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"redis://localhost:6379"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建 Redisson 实例</span>        <span class="token class-name">Redisson</span> redisson <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Redisson</span><span class="token punctuation">)</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 验证连接</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接成功: "</span> <span class="token operator">+</span> redisson<span class="token punctuation">.</span><span class="token function">getKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 关闭连接</span>        redisson<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-常用操作"><a href="#4-常用操作" class="headerlink" title="4. 常用操作"></a>4. 常用操作</h2><h3 id="4-1-字符串操作"><a href="#4-1-字符串操作" class="headerlink" title="4.1 字符串操作"></a>4.1 字符串操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取 RBucket 对象</span><span class="token class-name">RBucket</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> bucket <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getBucket</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置值</span>bucket<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取值</span><span class="token class-name">String</span> value <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取的值: "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-列表操作"><a href="#4-2-列表操作" class="headerlink" title="4.2 列表操作"></a>4.2 列表操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取 RList 对象</span><span class="token class-name">RList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token string">"mylist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加元素</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取列表元素</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> values <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">readAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"列表元素: "</span> <span class="token operator">+</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-集合操作"><a href="#4-3-集合操作" class="headerlink" title="4.3 集合操作"></a>4.3 集合操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取 RSet 对象</span><span class="token class-name">RSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getSet</span><span class="token punctuation">(</span><span class="token string">"myset"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加元素</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取集合成员</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> members <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">readAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合成员: "</span> <span class="token operator">+</span> members<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-哈希操作"><a href="#4-4-哈希操作" class="headerlink" title="4.4 哈希操作"></a>4.4 哈希操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取 RMap 对象</span><span class="token class-name">RMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getMap</span><span class="token punctuation">(</span><span class="token string">"user:1001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置哈希字段</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"30"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取哈希字段</span><span class="token class-name">String</span> name <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户姓名: "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-分布式锁"><a href="#4-5-分布式锁" class="headerlink" title="4.5 分布式锁"></a>4.5 分布式锁</h3><p>Redisson 提供了简单易用的分布式锁功能。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取 RLock 对象</span><span class="token class-name">RLock</span> lock <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token string">"myLock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment">// 加锁</span>    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 执行需要保护的代码</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取到锁，执行任务..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token comment">// 释放锁</span>    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-使用连接池"><a href="#5-使用连接池" class="headerlink" title="5. 使用连接池"></a>5. 使用连接池</h2><p>Redisson 支持连接池，可以在高并发场景下使用。</p><h3 id="5-1-创建连接池"><a href="#5-1-创建连接池" class="headerlink" title="5.1 创建连接池"></a>5.1 创建连接池</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"redis://localhost:6379"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建 Redisson 实例</span><span class="token class-name">Redisson</span> redisson <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Redisson</span><span class="token punctuation">)</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用 Redisson 实例</span><span class="token class-name">RBucket</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> bucket <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getBucket</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bucket<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 关闭连接池</span>redisson<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>Redisson 是一个功能强大的 Redis Java 客户端，提供了丰富的 API 来与 Redis 进行交互。通过合理使用 Redisson，您可以高效地管理 Redis 数据库中的数据，并利用其分布式特性构建高性能的应用。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/redisson/redisson">Redisson GitHub 仓库</a></li><li><a href="https://redis.io/documentation">Redis 官方文档</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解-Redisson-及其使用方法。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解-Redisson-及其使用方法。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解 Redisson 及其使用方法。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解 Redisson 及其使用方法。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Redis </tag>
            
            <tag> 客户端 </tag>
            
            <tag> Redisson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Jedis】Redis Java 客户端的使用方法</title>
      <link href="/archives/b55fa588.html"/>
      <url>/archives/b55fa588.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>Jedis 是一个简单易用的 Redis Java 客户端，提供了对 Redis 数据库的高效访问。它支持 Redis 的所有基本操作，并且具有良好的性能和易用性。本文将介绍 Jedis 的基本概念、安装方法以及常用操作。</p><h2 id="1-Jedis-简介"><a href="#1-Jedis-简介" class="headerlink" title="1. Jedis 简介"></a>1. Jedis 简介</h2><p>Jedis 是一个开源的 Java 客户端库，用于与 Redis 进行交互。它提供了简单的 API 来执行 Redis 命令，并支持连接池、事务、管道等功能。</p><h2 id="2-安装-Jedis"><a href="#2-安装-Jedis" class="headerlink" title="2. 安装 Jedis"></a>2. 安装 Jedis</h2><p>在使用 Jedis 之前，您需要将其添加到项目的依赖中。如果您使用 Maven，可以在 <code>pom.xml</code> 中添加以下依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 请根据需要选择版本 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果您使用 Gradle，可以在 <code>build.gradle</code> 中添加：</p><pre class="line-numbers language-groovy" data-language="groovy"><code class="language-groovy">implementation <span class="token string">'redis.clients:jedis:4.0.1'</span> <span class="token comment">// 请根据需要选择版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-创建-Jedis-实例"><a href="#3-创建-Jedis-实例" class="headerlink" title="3. 创建 Jedis 实例"></a>3. 创建 Jedis 实例</h2><p>在使用 Jedis 之前，您需要创建一个 Jedis 实例并连接到 Redis 服务器。</p><h3 id="3-1-连接到-Redis"><a href="#3-1-连接到-Redis" class="headerlink" title="3.1 连接到 Redis"></a>3.1 连接到 Redis</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建 Jedis 实例，连接到 Redis 服务器</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 验证连接</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接成功: "</span> <span class="token operator">+</span> jedis<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 关闭连接</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-常用操作"><a href="#4-常用操作" class="headerlink" title="4. 常用操作"></a>4. 常用操作</h2><h3 id="4-1-字符串操作"><a href="#4-1-字符串操作" class="headerlink" title="4.1 字符串操作"></a>4.1 字符串操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 设置键值对</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取值</span><span class="token class-name">String</span> value <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取的值: "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 原子递增</span>jedis<span class="token punctuation">.</span><span class="token function">incr</span><span class="token punctuation">(</span><span class="token string">"counter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-列表操作"><a href="#4-2-列表操作" class="headerlink" title="4.2 列表操作"></a>4.2 列表操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 从左侧插入元素</span>jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"mylist"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"mylist"</span><span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 从右侧插入元素</span>jedis<span class="token punctuation">.</span><span class="token function">rpush</span><span class="token punctuation">(</span><span class="token string">"mylist"</span><span class="token punctuation">,</span> <span class="token string">"value3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取列表长度</span><span class="token keyword">long</span> length <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">llen</span><span class="token punctuation">(</span><span class="token string">"mylist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"列表长度: "</span> <span class="token operator">+</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取列表元素</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"mylist"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"列表元素: "</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-集合操作"><a href="#4-3-集合操作" class="headerlink" title="4.3 集合操作"></a>4.3 集合操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 添加元素到集合</span>jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">"myset"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">"myset"</span><span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取集合成员</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> members <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"myset"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"集合成员: "</span> <span class="token operator">+</span> members<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-哈希操作"><a href="#4-4-哈希操作" class="headerlink" title="4.4 哈希操作"></a>4.4 哈希操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 设置哈希字段</span>jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"user:1001"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"user:1001"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"30"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取哈希字段</span><span class="token class-name">String</span> name <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">hget</span><span class="token punctuation">(</span><span class="token string">"user:1001"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户姓名: "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-使用连接池"><a href="#5-使用连接池" class="headerlink" title="5. 使用连接池"></a>5. 使用连接池</h2><p>在高并发场景下，建议使用 Jedis 连接池来管理连接。</p><h3 id="5-1-创建连接池"><a href="#5-1-创建连接池" class="headerlink" title="5.1 创建连接池"></a>5.1 创建连接池</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">JedisPool</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">JedisPoolConfig</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisPoolExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建连接池配置</span>        <span class="token class-name">JedisPoolConfig</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最大连接数</span>        config<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最大空闲连接数</span>        config<span class="token punctuation">.</span><span class="token function">setMinIdle</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最小空闲连接数</span>        <span class="token comment">// 创建连接池</span>        <span class="token class-name">JedisPool</span> jedisPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 从连接池获取 Jedis 实例</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> jedisPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接成功: "</span> <span class="token operator">+</span> jedis<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 关闭连接池</span>        jedisPool<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>Jedis 是一个功能强大的 Redis Java 客户端，提供了简单易用的 API 来与 Redis 进行交互。通过合理使用 Jedis，您可以高效地管理 Redis 数据库中的数据。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/redis/jedis">Jedis GitHub 仓库</a></li><li><a href="https://redis.io/documentation">Redis 官方文档</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解-Jedis-及其使用方法。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解-Jedis-及其使用方法。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解 Jedis 及其使用方法。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解 Jedis 及其使用方法。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Redis </tag>
            
            <tag> Jedis </tag>
            
            <tag> 客户端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Redis】数据类型详解及其使用方法</title>
      <link href="/archives/b55fa587.html"/>
      <url>/archives/b55fa587.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>Redis 是一个开源的高性能键值存储数据库，支持多种数据类型，包括字符串、列表、集合、有序集合和哈希等。了解这些数据类型及其使用方法，对于正确使用 Redis 来实现各种功能至关重要。本文将详细介绍 Redis 的各种数据类型及其使用命令和场景。</p><h2 id="1-字符串（String）"><a href="#1-字符串（String）" class="headerlink" title="1. 字符串（String）"></a>1. 字符串（String）</h2><p>字符串是 Redis 中最基本的数据类型，可以存储文本、数字或二进制数据。</p><h3 id="1-1-基本命令"><a href="#1-1-基本命令" class="headerlink" title="1.1 基本命令"></a>1.1 基本命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置键值对</span>SET key value<span class="token comment"># 获取值</span>GET key<span class="token comment"># 设置键值对，并指定过期时间（单位：秒）</span>SETEX key seconds value<span class="token comment"># 原子递增</span>INCR key<span class="token comment"># 原子递减</span>DECR key<span class="token comment"># 批量设置</span>MSET key1 value1 key2 value2<span class="token comment"># 批量获取</span>MGET key1 key2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-使用场景"><a href="#1-2-使用场景" class="headerlink" title="1.2 使用场景"></a>1.2 使用场景</h3><ul><li><strong>缓存</strong>: 存储用户信息、页面内容等数据。</li><li><strong>计数器</strong>: 如网站访问量、文章阅读量等。</li><li><strong>分布式锁</strong>: 通过 SETNX 实现简单的分布式锁。</li><li><strong>会话管理</strong>: 存储用户会话信息。</li></ul><h3 id="1-3-实际示例"><a href="#1-3-实际示例" class="headerlink" title="1.3 实际示例"></a>1.3 实际示例</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 存储用户信息</span>SET user:1001 <span class="token string">'{"name":"张三","age":30,"email":"zhang@example.com"}'</span><span class="token comment"># 设置计数器</span>SET page_view <span class="token number">0</span>INCR page_view   <span class="token comment"># 返回 1</span>INCR page_view   <span class="token comment"># 返回 2</span><span class="token comment"># 设置带过期时间的会话</span>SETEX session:user:1001 <span class="token number">3600</span> <span class="token string">'{"login_time":"2025-02-25T18:00:00Z"}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-列表（List）"><a href="#2-列表（List）" class="headerlink" title="2. 列表（List）"></a>2. 列表（List）</h2><p>列表是一个有序的字符串集合，可以从头部或尾部添加元素。</p><h3 id="2-1-基本命令"><a href="#2-1-基本命令" class="headerlink" title="2.1 基本命令"></a>2.1 基本命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 从左侧（头部）插入一个或多个元素</span>LPUSH key value <span class="token punctuation">[</span>value <span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment"># 从右侧（尾部）插入一个或多个元素</span>RPUSH key value <span class="token punctuation">[</span>value <span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment"># 从左侧（头部）弹出元素</span>LPOP key<span class="token comment"># 从右侧（尾部）弹出元素</span>RPOP key<span class="token comment"># 获取列表长度</span>LLEN key<span class="token comment"># 获取指定范围内的元素</span>LRANGE key start stop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-使用场景"><a href="#2-2-使用场景" class="headerlink" title="2.2 使用场景"></a>2.2 使用场景</h3><ul><li><strong>消息队列</strong>: 生产者通过 RPUSH 放入消息，消费者通过 LPOP 获取消息。</li><li><strong>最新活动</strong>: 如用户的最近操作、最新评论等。</li><li><strong>分页列表</strong>: 存储分页数据。</li></ul><h3 id="2-3-实际示例"><a href="#2-3-实际示例" class="headerlink" title="2.3 实际示例"></a>2.3 实际示例</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建消息队列</span>RPUSH task_queue <span class="token string">"Task 1"</span>   <span class="token comment"># 返回 1</span>RPUSH task_queue <span class="token string">"Task 2"</span>   <span class="token comment"># 返回 2</span>RPUSH task_queue <span class="token string">"Task 3"</span>   <span class="token comment"># 返回 3</span><span class="token comment"># 消费消息</span>LPOP task_queue   <span class="token comment"># 返回 "Task 1"</span><span class="token comment"># 获取所有任务</span>LRANGE task_queue <span class="token number">0</span> <span class="token parameter variable">-1</span>   <span class="token comment"># 返回 ["Task 2", "Task 3"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-集合（Set）"><a href="#3-集合（Set）" class="headerlink" title="3. 集合（Set）"></a>3. 集合（Set）</h2><p>集合是一个无序的字符串集合，每个元素都是唯一的。</p><h3 id="3-1-基本命令"><a href="#3-1-基本命令" class="headerlink" title="3.1 基本命令"></a>3.1 基本命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加一个或多个成员</span>SADD key member <span class="token punctuation">[</span>member <span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment"># 获取所有成员</span>SMEMBERS key<span class="token comment"># 判断成员是否存在</span>SISMEMBER key member<span class="token comment"># 获取集合中成员的数量</span>SCARD key<span class="token comment"># 获取多个集合的交集</span>SINTER key <span class="token punctuation">[</span>key <span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment"># 获取多个集合的并集</span>SUNION key <span class="token punctuation">[</span>key <span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment"># 获取多个集合的差集</span>SDIFF key <span class="token punctuation">[</span>key <span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment"># 随机获取一个成员</span>SRANDMEMBER key <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token comment"># 随机弹出一个成员</span>SPOP key <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-使用场景"><a href="#3-2-使用场景" class="headerlink" title="3.2 使用场景"></a>3.2 使用场景</h3><ul><li><strong>标签系统</strong>: 为用户或内容添加标签。</li><li><strong>唯一计数</strong>: 如网站的独立访客统计。</li><li><strong>关系管理</strong>: 如好友关系、粉丝关系等。</li><li><strong>随机抽奖</strong>: 利用 SRANDMEMBER 或 SPOP 实现。</li></ul><h3 id="3-3-实际示例"><a href="#3-3-实际示例" class="headerlink" title="3.3 实际示例"></a>3.3 实际示例</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 为用户添加标签</span>SADD user:1001:tags <span class="token string">"coding"</span> <span class="token string">"reading"</span> <span class="token string">"music"</span><span class="token comment"># 为文章添加标签</span>SADD article:100:tags <span class="token string">"redis"</span> <span class="token string">"database"</span> <span class="token string">"nosql"</span><span class="token comment"># 查找同时喜欢音乐和阅读的用户</span>SINTER user:1001:tags user:1002:tags   <span class="token comment"># 返回交集部分</span><span class="token comment"># 随机抽取一名幸运用户</span>SRANDMEMBER active_users<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-有序集合（Sorted-Set）"><a href="#4-有序集合（Sorted-Set）" class="headerlink" title="4. 有序集合（Sorted Set）"></a>4. 有序集合（Sorted Set）</h2><p>有序集合是集合的一种扩展，每个成员关联一个分数，根据分数排序。</p><h3 id="4-1-基本命令"><a href="#4-1-基本命令" class="headerlink" title="4.1 基本命令"></a>4.1 基本命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加一个或多个成员及其分数</span>ZADD key score member <span class="token punctuation">[</span>score member <span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment"># 获取指定范围内的成员（从小到大排序）</span>ZRANGE key start stop <span class="token punctuation">[</span>WITHSCORES<span class="token punctuation">]</span><span class="token comment"># 获取指定范围内的成员（从大到小排序）</span>ZREVRANGE key start stop <span class="token punctuation">[</span>WITHSCORES<span class="token punctuation">]</span><span class="token comment"># 获取成员数量</span>ZCARD key<span class="token comment"># 获取成员的分数</span>ZSCORE key member<span class="token comment"># 获取成员的排名（从小到大，0为第一名）</span>ZRANK key member<span class="token comment"># 获取成员的排名（从大到小，0为第一名）</span>ZREVRANK key member<span class="token comment"># 删除一个或多个成员</span>ZREM key member <span class="token punctuation">[</span>member <span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment"># 增加成员的分数</span>ZINCRBY key increment member<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-使用场景"><a href="#4-2-使用场景" class="headerlink" title="4.2 使用场景"></a>4.2 使用场景</h3><ul><li><strong>排行榜</strong>: 如游戏积分排行、文章热度排行等。</li><li><strong>优先级队列</strong>: 根据优先级处理任务。</li><li><strong>带权重的数据集</strong>: 如搜索结果的相关性排序。</li><li><strong>延迟队列</strong>: 使用时间戳作为分数，实现定时任务。</li></ul><h3 id="4-3-实际示例"><a href="#4-3-实际示例" class="headerlink" title="4.3 实际示例"></a>4.3 实际示例</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建积分排行榜</span>ZADD leaderboard <span class="token number">100</span> <span class="token string">"user:1001"</span>ZADD leaderboard <span class="token number">85</span> <span class="token string">"user:1002"</span>ZADD leaderboard <span class="token number">95</span> <span class="token string">"user:1003"</span><span class="token comment"># 获取前三名</span>ZREVRANGE leaderboard <span class="token number">0</span> <span class="token number">2</span> WITHSCORES   <span class="token comment"># 返回 ["user:1001", 100, "user:1003", 95, "user:1002", 85]</span><span class="token comment"># 增加用户积分</span>ZINCRBY leaderboard <span class="token number">10</span> <span class="token string">"user:1002"</span>   <span class="token comment"># 返回 95</span><span class="token comment"># 获取用户排名</span>ZREVRANK leaderboard <span class="token string">"user:1002"</span>   <span class="token comment"># 返回用户的排名（从0开始计数）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-哈希（Hash）"><a href="#5-哈希（Hash）" class="headerlink" title="5. 哈希（Hash）"></a>5. 哈希（Hash）</h2><p>哈希是一个字符串字段和字符串值之间的映射，适合存储对象数据。</p><h3 id="5-1-基本命令"><a href="#5-1-基本命令" class="headerlink" title="5.1 基本命令"></a>5.1 基本命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置一个字段的值</span>HSET key field value<span class="token comment"># 获取一个字段的值</span>HGET key field<span class="token comment"># 设置多个字段的值</span>HMSET key field1 value1 field2 value2<span class="token comment"># 获取多个字段的值</span>HMGET key field1 field2<span class="token comment"># 获取所有字段和值</span>HGETALL key<span class="token comment"># 判断字段是否存在</span>HEXISTS key field<span class="token comment"># 删除一个或多个字段</span>HDEL key field <span class="token punctuation">[</span>field <span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment"># 获取字段数量</span>HLEN key<span class="token comment"># 获取所有字段名</span>HKEYS key<span class="token comment"># 获取所有字段值</span>HVALS key<span class="token comment"># 对字段的值进行递增</span>HINCRBY key field increment<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-使用场景"><a href="#5-2-使用场景" class="headerlink" title="5.2 使用场景"></a>5.2 使用场景</h3><ul><li><strong>用户信息</strong>: 存储用户的各种属性。</li><li><strong>配置信息</strong>: 存储应用配置的各个参数。</li><li><strong>商品信息</strong>: 存储商品的各种属性。</li><li><strong>计数器集合</strong>: 一组相关的计数器。</li></ul><h3 id="5-3-实际示例"><a href="#5-3-实际示例" class="headerlink" title="5.3 实际示例"></a>5.3 实际示例</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 存储用户信息</span>HMSET user:1001 name <span class="token string">"张三"</span> age <span class="token number">30</span> email <span class="token string">"zhang@example.com"</span> active <span class="token boolean">true</span><span class="token comment"># 获取用户年龄</span>HGET user:1001 age   <span class="token comment"># 返回 "30"</span><span class="token comment"># 增加用户年龄</span>HINCRBY user:1001 age <span class="token number">1</span>   <span class="token comment"># 返回 31</span><span class="token comment"># 获取所有用户信息</span>HGETALL user:1001   <span class="token comment"># 返回所有字段和值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-其他数据类型"><a href="#6-其他数据类型" class="headerlink" title="6. 其他数据类型"></a>6. 其他数据类型</h2><h3 id="6-1-位图（Bitmap）"><a href="#6-1-位图（Bitmap）" class="headerlink" title="6.1 位图（Bitmap）"></a>6.1 位图（Bitmap）</h3><p>位图是字符串的一种特殊形式，可以对字符串中的单个位进行操作。</p><h4 id="6-1-1-基本命令"><a href="#6-1-1-基本命令" class="headerlink" title="6.1.1 基本命令"></a>6.1.1 基本命令</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置位的值</span>SETBIT key offset value<span class="token comment"># 获取位的值</span>GETBIT key offset<span class="token comment"># 获取位图中值为1的位的数量</span>BITCOUNT key <span class="token punctuation">[</span>start end<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-1-2-使用场景"><a href="#6-1-2-使用场景" class="headerlink" title="6.1.2 使用场景"></a>6.1.2 使用场景</h4><ul><li><strong>用户在线状态</strong>: 使用位图表示用户的在线/离线状态。</li><li><strong>签到记录</strong>: 每天一位，记录用户是否签到。</li><li><strong>布隆过滤器</strong>: 用于快速判断元素是否存在。</li></ul><h3 id="6-2-HyperLogLog"><a href="#6-2-HyperLogLog" class="headerlink" title="6.2 HyperLogLog"></a>6.2 HyperLogLog</h3><p>HyperLogLog 是一种概率数据结构，用于计算基数（不重复元素的数量）。</p><h4 id="6-2-1-基本命令"><a href="#6-2-1-基本命令" class="headerlink" title="6.2.1 基本命令"></a>6.2.1 基本命令</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加元素</span>PFADD key element <span class="token punctuation">[</span>element <span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment"># 获取基数估算值</span>PFCOUNT key <span class="token punctuation">[</span>key <span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment"># 合并多个 HyperLogLog</span>PFMERGE destkey sourcekey <span class="token punctuation">[</span>sourcekey <span class="token punctuation">..</span>.<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2-2-使用场景"><a href="#6-2-2-使用场景" class="headerlink" title="6.2.2 使用场景"></a>6.2.2 使用场景</h4><ul><li><strong>UV 统计</strong>: 网站的独立访客数。</li><li><strong>搜索词统计</strong>: 不同搜索词的数量。</li></ul><h3 id="6-3-地理空间（Geospatial）"><a href="#6-3-地理空间（Geospatial）" class="headerlink" title="6.3 地理空间（Geospatial）"></a>6.3 地理空间（Geospatial）</h3><p>地理空间数据类型用于存储地理位置信息。</p><h4 id="6-3-1-基本命令"><a href="#6-3-1-基本命令" class="headerlink" title="6.3.1 基本命令"></a>6.3.1 基本命令</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加地理位置</span>GEOADD key longitude latitude member <span class="token punctuation">[</span>longitude latitude member <span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment"># 计算两个位置之间的距离</span>GEODIST key member1 member2 <span class="token punctuation">[</span>unit<span class="token punctuation">]</span><span class="token comment"># 获取指定范围内的位置</span>GEORADIUS key longitude latitude radius m<span class="token operator">|</span>km<span class="token operator">|</span>ft<span class="token operator">|</span>mi <span class="token punctuation">[</span>WITHCOORD<span class="token punctuation">]</span> <span class="token punctuation">[</span>WITHDIST<span class="token punctuation">]</span> <span class="token punctuation">[</span>WITHHASH<span class="token punctuation">]</span> <span class="token punctuation">[</span>COUNT count<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-3-2-使用场景"><a href="#6-3-2-使用场景" class="headerlink" title="6.3.2 使用场景"></a>6.3.2 使用场景</h4><ul><li><strong>附近的人</strong>: 查找附近的用户、商家等。</li><li><strong>位置服务</strong>: 基于位置的服务和推荐。</li></ul><h2 id="7-选择合适的数据类型"><a href="#7-选择合适的数据类型" class="headerlink" title="7. 选择合适的数据类型"></a>7. 选择合适的数据类型</h2><p>在选择 Redis 数据类型时，应考虑以下因素：</p><ul><li><strong>数据结构</strong>: 选择最符合数据自然结构的类型。</li><li><strong>访问模式</strong>: 考虑如何访问和操作数据。</li><li><strong>内存使用</strong>: 不同数据类型对内存使用效率不同。</li><li><strong>性能需求</strong>: 考虑操作的时间复杂度。</li></ul><h2 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a>8. 总结</h2><p>Redis 提供了丰富的数据类型，每种数据类型都有其特定的使用场景和命令集。通过合理选择数据类型，可以优化数据存储和访问效率，提高应用性能。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://redis.io/documentation">Redis 官方文档</a></li><li><a href="https://redis.io/commands">Redis 命令参考</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解-Redis-的各种数据类型及其使用方法。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解-Redis-的各种数据类型及其使用方法。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解 Redis 的各种数据类型及其使用方法。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解 Redis 的各种数据类型及其使用方法。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Redis </tag>
            
            <tag> 数据类型 </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Redis】的各种用途与使用场景</title>
      <link href="/archives/b55fa586.html"/>
      <url>/archives/b55fa586.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>Redis 是一个开源的高性能键值存储数据库，广泛应用于缓存、消息队列、实时分析等场景。由于其高效的读写性能和丰富的数据结构，Redis 成为现代应用程序中不可或缺的一部分。本文将介绍 Redis 的各种用途与使用场景。</p><h2 id="1-缓存"><a href="#1-缓存" class="headerlink" title="1. 缓存"></a>1. 缓存</h2><h3 id="1-1-用途"><a href="#1-1-用途" class="headerlink" title="1.1 用途"></a>1.1 用途</h3><p>Redis 最常见的用途是作为缓存，帮助提高应用程序的性能。通过将频繁访问的数据存储在内存中，Redis 可以显著减少数据库的访问压力。</p><h3 id="1-2-使用场景"><a href="#1-2-使用场景" class="headerlink" title="1.2 使用场景"></a>1.2 使用场景</h3><ul><li><strong>页面缓存</strong>：将生成的 HTML 页面缓存到 Redis 中，减少服务器的计算负担。</li><li><strong>数据查询缓存</strong>：将数据库查询结果缓存到 Redis 中，避免重复查询，提高响应速度。</li></ul><h2 id="2-会话存储"><a href="#2-会话存储" class="headerlink" title="2. 会话存储"></a>2. 会话存储</h2><h3 id="2-1-用途"><a href="#2-1-用途" class="headerlink" title="2.1 用途"></a>2.1 用途</h3><p>Redis 可以用作会话存储，保存用户的会话信息。由于 Redis 的高性能，能够快速读取和写入会话数据。</p><h3 id="2-2-使用场景"><a href="#2-2-使用场景" class="headerlink" title="2.2 使用场景"></a>2.2 使用场景</h3><ul><li><strong>用户登录会话</strong>：在用户登录后，将会话信息存储在 Redis 中，支持快速访问和验证。</li><li><strong>购物车信息</strong>：将用户的购物车信息存储在 Redis 中，支持跨设备访问。</li></ul><h2 id="3-消息队列"><a href="#3-消息队列" class="headerlink" title="3. 消息队列"></a>3. 消息队列</h2><h3 id="3-1-用途"><a href="#3-1-用途" class="headerlink" title="3.1 用途"></a>3.1 用途</h3><p>Redis 支持发布/订阅（Pub/Sub）模式，可以用作消息队列，处理异步任务和事件通知。</p><h3 id="3-2-使用场景"><a href="#3-2-使用场景" class="headerlink" title="3.2 使用场景"></a>3.2 使用场景</h3><ul><li><strong>任务调度</strong>：将任务消息推送到 Redis 队列，后台工作进程从队列中获取任务并处理。</li><li><strong>实时通知</strong>：通过 Redis 的发布/订阅功能，实时推送消息到用户。</li></ul><h2 id="4-实时数据分析"><a href="#4-实时数据分析" class="headerlink" title="4. 实时数据分析"></a>4. 实时数据分析</h2><h3 id="4-1-用途"><a href="#4-1-用途" class="headerlink" title="4.1 用途"></a>4.1 用途</h3><p>Redis 的数据结构支持高效的实时数据分析，能够快速处理大量数据。</p><h3 id="4-2-使用场景"><a href="#4-2-使用场景" class="headerlink" title="4.2 使用场景"></a>4.2 使用场景</h3><ul><li><strong>实时统计</strong>：使用 Redis 统计用户访问量、订单数量等实时数据。</li><li><strong>排行榜</strong>：利用 Redis 的有序集合（Sorted Set）实现实时排行榜功能。</li></ul><h2 id="5-分布式锁"><a href="#5-分布式锁" class="headerlink" title="5. 分布式锁"></a>5. 分布式锁</h2><h3 id="5-1-用途"><a href="#5-1-用途" class="headerlink" title="5.1 用途"></a>5.1 用途</h3><p>Redis 可以用作分布式锁，确保在分布式系统中对共享资源的安全访问。</p><h3 id="5-2-使用场景"><a href="#5-2-使用场景" class="headerlink" title="5.2 使用场景"></a>5.2 使用场景</h3><ul><li><strong>防止重复提交</strong>：在处理用户请求时，使用 Redis 锁防止重复提交。</li><li><strong>资源控制</strong>：在多个服务实例中，使用 Redis 锁控制对共享资源的访问。</li></ul><h2 id="6-数据持久化"><a href="#6-数据持久化" class="headerlink" title="6. 数据持久化"></a>6. 数据持久化</h2><h3 id="6-1-用途"><a href="#6-1-用途" class="headerlink" title="6.1 用途"></a>6.1 用途</h3><p>Redis 支持数据持久化，可以将内存中的数据定期保存到磁盘，确保数据的安全性。</p><h3 id="6-2-使用场景"><a href="#6-2-使用场景" class="headerlink" title="6.2 使用场景"></a>6.2 使用场景</h3><ul><li><strong>数据备份</strong>：定期将 Redis 数据备份到磁盘，防止数据丢失。</li><li><strong>恢复机制</strong>：在系统故障时，可以从持久化数据中恢复 Redis 的状态。</li></ul><h2 id="7-其他用途"><a href="#7-其他用途" class="headerlink" title="7. 其他用途"></a>7. 其他用途</h2><ul><li><strong>地理位置服务</strong>：使用 Redis 的地理空间索引功能，存储和查询地理位置信息。</li><li><strong>计数器</strong>：使用 Redis 的原子操作实现高效的计数器功能，如点赞、访问量等。</li></ul><h2 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a>8. 总结</h2><p>Redis 是一个功能强大的键值存储数据库，广泛应用于缓存、会话存储、消息队列、实时数据分析等场景。通过合理利用 Redis 的特性，可以显著提高系统的性能和可扩展性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://redis.io/documentation">Redis 官方文档</a></li><li><a href="https://www.jianshu.com/p/8c1c1c1c1c1c">Redis 使用场景分析</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解-Redis-的各种用途与使用场景。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解-Redis-的各种用途与使用场景。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解 Redis 的各种用途与使用场景。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解 Redis 的各种用途与使用场景。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Redis </tag>
            
            <tag> 缓存 </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Redis】与数据库一致性的问题及解决办法</title>
      <link href="/archives/b55fa585.html"/>
      <url>/archives/b55fa585.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在现代应用中，Redis 常被用作缓存，以提高系统的性能和响应速度。然而，使用 Redis 作为缓存时，可能会面临与数据库之间的一致性问题。本文将探讨 Redis 与数据库一致性的问题及其解决办法。</p><h2 id="1-一致性问题的定义"><a href="#1-一致性问题的定义" class="headerlink" title="1. 一致性问题的定义"></a>1. 一致性问题的定义</h2><p>一致性问题主要指的是在数据更新时，Redis 中的数据与数据库中的数据不一致。这种不一致可能会导致数据错误、业务逻辑异常等问题。</p><h3 id="1-1-常见的一致性问题"><a href="#1-1-常见的一致性问题" class="headerlink" title="1.1 常见的一致性问题"></a>1.1 常见的一致性问题</h3><ul><li><strong>缓存击穿</strong>：当缓存中的数据失效，导致大量请求直接访问数据库，可能导致数据库负载过高。</li><li><strong>缓存穿透</strong>：请求的数据在缓存和数据库中都不存在，导致每次请求都直接访问数据库。</li><li><strong>缓存雪崩</strong>：多个缓存同时失效，导致大量请求直接访问数据库，造成数据库压力过大。</li><li><strong>数据更新延迟</strong>：在更新数据时，Redis 和数据库之间的数据更新可能存在延迟，导致短时间内数据不一致。</li></ul><h2 id="2-一致性问题的成因"><a href="#2-一致性问题的成因" class="headerlink" title="2. 一致性问题的成因"></a>2. 一致性问题的成因</h2><ul><li><strong>异步更新</strong>：在某些场景下，数据更新可能是异步的，导致 Redis 和数据库之间的数据不同步。</li><li><strong>网络延迟</strong>：网络问题可能导致数据在 Redis 和数据库之间传输延迟。</li><li><strong>并发操作</strong>：高并发情况下，多个请求同时更新数据，可能导致数据不一致。</li></ul><h2 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3. 解决方案"></a>3. 解决方案</h2><h3 id="3-1-使用一致性哈希"><a href="#3-1-使用一致性哈希" class="headerlink" title="3.1 使用一致性哈希"></a>3.1 使用一致性哈希</h3><p>一致性哈希可以帮助将数据均匀分布到多个 Redis 节点上，减少缓存击穿和雪崩的风险。通过合理设计数据分布，可以提高系统的可用性和一致性。</p><h3 id="3-2-采用双写策略"><a href="#3-2-采用双写策略" class="headerlink" title="3.2 采用双写策略"></a>3.2 采用双写策略</h3><p>在更新数据时，同时更新 Redis 和数据库。虽然这种方式会增加写操作的复杂性，但可以确保数据的一致性。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateData</span><span class="token punctuation">(</span><span class="token class-name">Data</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 更新数据库</span>    database<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 更新缓存</span>    redis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-使用消息队列"><a href="#3-3-使用消息队列" class="headerlink" title="3.3 使用消息队列"></a>3.3 使用消息队列</h3><p>在数据更新时，将更新操作发送到消息队列，异步处理 Redis 和数据库的更新。这样可以减少直接的依赖，提高系统的解耦性。</p><h3 id="3-4-设置合理的过期时间"><a href="#3-4-设置合理的过期时间" class="headerlink" title="3.4 设置合理的过期时间"></a>3.4 设置合理的过期时间</h3><p>为缓存设置合理的过期时间，避免缓存中的数据长时间不更新。可以根据业务需求动态调整过期时间。</p><h3 id="3-5-采用分布式锁"><a href="#3-5-采用分布式锁" class="headerlink" title="3.5 采用分布式锁"></a>3.5 采用分布式锁</h3><p>在高并发场景下，使用分布式锁来控制对 Redis 和数据库的访问，确保在同一时间只有一个请求能更新数据。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateDataWithLock</span><span class="token punctuation">(</span><span class="token class-name">Data</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 获取分布式锁</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>distributedLock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 更新数据库</span>            database<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 更新缓存</span>            redis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment">// 释放锁</span>            distributedLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>在使用 Redis 作为缓存时，确保与数据库之间的一致性是非常重要的。通过合理的设计和优化，可以有效解决 Redis 与数据库之间的一致性问题，提高系统的稳定性和可靠性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://redis.io/documentation">Redis 官方文档</a></li><li><a href="https://www.infoq.cn/article/1c8e1c8e1c8e1c8e1c8e">分布式系统一致性问题</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解-Redis-与数据库一致性的问题及其解决办法。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解-Redis-与数据库一致性的问题及其解决办法。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解 Redis 与数据库一致性的问题及其解决办法。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解 Redis 与数据库一致性的问题及其解决办法。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Redis </tag>
            
            <tag> 一致性 </tag>
            
            <tag> 数据管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Redis】缓存击穿、缓存穿透与缓存雪崩的常见问题及解决方案</title>
      <link href="/archives/b55fa584.html"/>
      <url>/archives/b55fa584.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在使用 Redis 作为缓存时，可能会遇到一些常见的问题，如缓存击穿、缓存穿透和缓存雪崩。这些问题会导致系统性能下降，甚至引发数据库崩溃。本文将介绍这三种问题的定义、成因以及解决方案。</p><h2 id="1-缓存穿透"><a href="#1-缓存穿透" class="headerlink" title="1. 缓存穿透"></a>1. 缓存穿透</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p>缓存穿透是指请求的数据在缓存和数据库中都不存在，导致每次请求都直接访问数据库。由于没有缓存，数据库会承受大量的请求压力。</p><h3 id="1-2-成因"><a href="#1-2-成因" class="headerlink" title="1.2 成因"></a>1.2 成因</h3><ul><li>用户请求的数据在数据库中不存在（如非法请求）。</li><li>缓存未命中，且数据未被写入缓存。</li></ul><h3 id="1-3-解决方案"><a href="#1-3-解决方案" class="headerlink" title="1.3 解决方案"></a>1.3 解决方案</h3><ul><li><p><strong>使用布隆过滤器</strong>：在请求到达数据库之前，先通过布隆过滤器判断请求的数据是否存在。如果不存在，则直接返回，不再查询数据库。</p></li><li><p><strong>参数校验</strong>：对用户输入的参数进行校验，过滤掉非法请求。</p></li></ul><h2 id="2-缓存击穿"><a href="#2-缓存击穿" class="headerlink" title="2. 缓存击穿"></a>2. 缓存击穿</h2><h3 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h3><p>缓存击穿是指某个热点数据在缓存中失效，导致大量请求同时访问数据库，造成数据库压力骤增。</p><h3 id="2-2-成因"><a href="#2-2-成因" class="headerlink" title="2.2 成因"></a>2.2 成因</h3><ul><li>热点数据的缓存过期，导致大量请求同时查询数据库。</li><li>数据库无法承受瞬间的高并发请求。</li></ul><h3 id="2-3-解决方案"><a href="#2-3-解决方案" class="headerlink" title="2.3 解决方案"></a>2.3 解决方案</h3><ul><li><p><strong>加锁机制</strong>：在缓存失效时，使用分布式锁（如 Redis 的 SETNX 命令）来控制对数据库的访问，确保只有一个请求能查询数据库并更新缓存，其他请求等待。</p></li><li><p><strong>设置合理的过期时间</strong>：对热点数据设置较长的过期时间，避免频繁失效。</p></li><li><p><strong>预热缓存</strong>：在系统启动时，提前将热点数据加载到缓存中，避免首次请求时直接访问数据库。</p></li></ul><h2 id="3-缓存雪崩"><a href="#3-缓存雪崩" class="headerlink" title="3. 缓存雪崩"></a>3. 缓存雪崩</h2><h3 id="3-1-定义"><a href="#3-1-定义" class="headerlink" title="3.1 定义"></a>3.1 定义</h3><p>缓存雪崩是指在某个时间点，多个缓存同时失效，导致大量请求直接访问数据库，造成数据库压力过大。</p><h3 id="3-2-成因"><a href="#3-2-成因" class="headerlink" title="3.2 成因"></a>3.2 成因</h3><ul><li>大量缓存设置了相同的过期时间，导致在同一时间失效。</li><li>系统负载过高，导致缓存服务不可用。</li></ul><h3 id="3-3-解决方案"><a href="#3-3-解决方案" class="headerlink" title="3.3 解决方案"></a>3.3 解决方案</h3><ul><li><p><strong>随机过期时间</strong>：为缓存设置随机的过期时间，避免在同一时间失效。</p></li><li><p><strong>使用双缓存</strong>：在缓存中使用双缓存策略（如主缓存和备份缓存），在主缓存失效时，备份缓存可以继续提供服务。</p></li><li><p><strong>监控与报警</strong>：对缓存的使用情况进行监控，及时发现异常并进行处理。</p></li></ul><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>在使用 Redis 作为缓存时，了解缓存穿透、缓存击穿和缓存雪崩等常见问题及其解决方案是非常重要的。通过合理的设计和优化，可以有效提高系统的性能和稳定性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://redis.io/documentation">Redis 官方文档</a></li><li><a href="https://www.jianshu.com/p/8c1c1c1c1c1c">缓存穿透、击穿与雪崩的解决方案</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解-Redis-的缓存问题及其解决方案。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解-Redis-的缓存问题及其解决方案。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解 Redis 的缓存问题及其解决方案。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解 Redis 的缓存问题及其解决方案。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Redis </tag>
            
            <tag> 缓存 </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Redis】如何配置 Redis 集群</title>
      <link href="/archives/a55fa583.html"/>
      <url>/archives/a55fa583.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>Redis 集群是一种分布式架构，能够将数据分散存储在多个 Redis 实例中，从而提高系统的可扩展性和可用性。通过 Redis 集群，您可以实现数据的分片和高可用性，本文将介绍如何配置 Redis 集群。</p><h2 id="1-Redis-集群的基本概念"><a href="#1-Redis-集群的基本概念" class="headerlink" title="1. Redis 集群的基本概念"></a>1. Redis 集群的基本概念</h2><p>Redis 集群通过将数据分片存储在多个节点上来实现高可用性和可扩展性。每个节点负责一部分数据，并且可以通过哈希槽（hash slot）来管理数据的分布。Redis 集群的主要特点包括：</p><ul><li><strong>数据分片</strong>：将数据分散存储在多个节点上。</li><li><strong>高可用性</strong>：支持主从复制，确保在主节点故障时可以快速切换到从节点。</li><li><strong>自动故障转移</strong>：当主节点出现故障时，集群会自动将从节点提升为主节点。</li></ul><h2 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2. 环境准备"></a>2. 环境准备</h2><p>在配置 Redis 集群之前，您需要准备以下环境：</p><ul><li>至少 3 个 Redis 实例作为主节点。</li><li>至少 3 个 Redis 实例作为从节点（可选，但推荐）。</li><li>确保 Redis 版本为 3.0 及以上。</li></ul><h2 id="3-启动-Redis-实例"><a href="#3-启动-Redis-实例" class="headerlink" title="3. 启动 Redis 实例"></a>3. 启动 Redis 实例</h2><p>在每个 Redis 实例的配置文件中，确保以下配置项：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># 启用集群模式cluster-enabled yes# 指定集群配置文件cluster-config-file nodes.conf# 启用集群节点间的通信cluster-node-timeout 5000# 其他配置项...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动-Redis-实例"><a href="#启动-Redis-实例" class="headerlink" title="启动 Redis 实例"></a>启动 Redis 实例</h3><p>在每个 Redis 实例的目录下，使用以下命令启动 Redis：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-server /path/to/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-创建-Redis-集群"><a href="#4-创建-Redis-集群" class="headerlink" title="4. 创建 Redis 集群"></a>4. 创建 Redis 集群</h2><p>使用 <code>redis-cli</code> 工具创建 Redis 集群。可以使用以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli <span class="token parameter variable">--cluster</span> create <span class="token punctuation">\</span><span class="token operator">&lt;</span>主节点1的IP<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>端口<span class="token operator">&gt;</span> <span class="token punctuation">\</span><span class="token operator">&lt;</span>主节点2的IP<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>端口<span class="token operator">&gt;</span> <span class="token punctuation">\</span><span class="token operator">&lt;</span>主节点3的IP<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>端口<span class="token operator">&gt;</span> <span class="token punctuation">\</span>--cluster-replicas <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如，如果您有三个主节点，分别为 <code>192.168.1.1:7000</code>、<code>192.168.1.2:7000</code> 和 <code>192.168.1.3:7000</code>，可以使用以下命令创建集群：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli <span class="token parameter variable">--cluster</span> create <span class="token punctuation">\</span><span class="token number">192.168</span>.1.1:7000 <span class="token punctuation">\</span><span class="token number">192.168</span>.1.2:7000 <span class="token punctuation">\</span><span class="token number">192.168</span>.1.3:7000 <span class="token punctuation">\</span>--cluster-replicas <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个命令中，<code>--cluster-replicas 1</code> 表示为每个主节点创建一个从节点。</p><h2 id="5-验证集群配置"><a href="#5-验证集群配置" class="headerlink" title="5. 验证集群配置"></a>5. 验证集群配置</h2><p>创建集群后，可以使用以下命令验证集群的状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli <span class="token parameter variable">-c</span> <span class="token parameter variable">-h</span> <span class="token operator">&lt;</span>主节点IP<span class="token operator">&gt;</span> <span class="token parameter variable">-p</span> <span class="token operator">&lt;</span>端口<span class="token operator">&gt;</span> cluster info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您应该能够看到集群的状态信息，包括节点数量、槽数量等。</p><h2 id="6-使用-Redis-集群"><a href="#6-使用-Redis-集群" class="headerlink" title="6. 使用 Redis 集群"></a>6. 使用 Redis 集群</h2><p>在应用程序中使用 Redis 集群时，确保使用支持集群的 Redis 客户端库。例如，在 Java 中，可以使用 Jedis 或 Lettuce 客户端。</p><h3 id="使用-Jedis-客户端示例"><a href="#使用-Jedis-客户端示例" class="headerlink" title="使用 Jedis 客户端示例"></a>使用 Jedis 客户端示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">JedisCluster</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisClusterExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"192.168.1.1:7000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"192.168.1.2:7000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"192.168.1.3:7000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JedisCluster</span> jedisCluster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisCluster</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用 Redis 集群</span>        jedisCluster<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> value <span class="token operator">=</span> jedisCluster<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取的值: "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 关闭连接</span>        jedisCluster<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-注意事项"><a href="#7-注意事项" class="headerlink" title="7. 注意事项"></a>7. 注意事项</h2><ol><li><strong>节点数量</strong>：建议至少使用 6 个节点（3 个主节点和 3 个从节点）以确保高可用性。</li><li><strong>网络配置</strong>：确保所有节点之间的网络连接正常，防火墙设置允许节点间的通信。</li><li><strong>数据迁移</strong>：在集群创建后，数据会自动分配到各个节点，您可以使用 <code>CLUSTER ADDSLOTS</code> 命令手动分配槽。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上步骤，您可以成功配置 Redis 集群，实现数据的分片和高可用性。合理的集群配置可以提高系统的性能和稳定性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://redis.io/topics/cluster-tutorial">Redis Cluster Documentation</a></li><li><a href="https://redis.io/documentation">Redis 官方文档</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和配置-Redis-集群。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和配置-Redis-集群。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和配置 Redis 集群。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和配置 Redis 集群。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Redis </tag>
            
            <tag> 集群 </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring Boot】解决跨域问题的几种方式</title>
      <link href="/archives/b55fa605.html"/>
      <url>/archives/b55fa605.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在现代 Web 开发中，跨域资源共享（CORS）是一个常见的问题。当前端应用程序尝试从不同的域名、协议或端口访问后端 API 时，浏览器会阻止这种请求以保护用户的安全。本文将介绍在 Spring Boot 中解决跨域问题的几种常见方式。</p><h2 id="1-使用-CrossOrigin-注解"><a href="#1-使用-CrossOrigin-注解" class="headerlink" title="1. 使用 @CrossOrigin 注解"></a>1. 使用 <code>@CrossOrigin</code> 注解</h2><p>Spring Boot 提供了 <code>@CrossOrigin</code> 注解，可以方便地在控制器或方法上启用 CORS。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">CrossOrigin</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@CrossOrigin</span><span class="token punctuation">(</span>origins <span class="token operator">=</span> <span class="token string">"http://example.com"</span><span class="token punctuation">)</span> <span class="token comment">// 允许来自指定域的请求</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/api/data"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello, World!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul><li><code>@CrossOrigin</code> 注解可以放在类级别或方法级别。</li><li><code>origins</code> 属性指定允许的源，可以是单个域名或多个域名。</li></ul><h2 id="2-全局配置-CORS"><a href="#2-全局配置-CORS" class="headerlink" title="2. 全局配置 CORS"></a>2. 全局配置 CORS</h2><p>如果希望为整个应用程序配置 CORS，可以通过实现 <code>WebMvcConfigurer</code> 接口来进行全局配置。</p><h3 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">CorsRegistry</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebMvcConfigurer</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span><span class="token class-name">CorsRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span> <span class="token comment">// 允许所有路径</span>                <span class="token punctuation">.</span><span class="token function">allowedOrigins</span><span class="token punctuation">(</span><span class="token string">"http://example.com"</span><span class="token punctuation">)</span> <span class="token comment">// 允许的源</span>                <span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"PUT"</span><span class="token punctuation">,</span> <span class="token string">"DELETE"</span><span class="token punctuation">)</span> <span class="token comment">// 允许的请求方法</span>                <span class="token punctuation">.</span><span class="token function">allowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 允许携带凭证</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><ul><li><code>addMapping("/**")</code> 表示允许所有路径的跨域请求。</li><li><code>allowedMethods</code> 可以指定允许的 HTTP 方法。</li></ul><h2 id="3-使用-Filter-进行-CORS-处理"><a href="#3-使用-Filter-进行-CORS-处理" class="headerlink" title="3. 使用 Filter 进行 CORS 处理"></a>3. 使用 Filter 进行 CORS 处理</h2><p>另一种方式是通过自定义 Filter 来处理 CORS 请求。</p><h3 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">Filter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">FilterChain</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">FilterConfig</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>        <span class="token class-name">HttpServletResponse</span> httpResponse <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> response<span class="token punctuation">;</span>        httpResponse<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span> <span class="token string">"http://example.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        httpResponse<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Methods"</span><span class="token punctuation">,</span> <span class="token string">"GET, POST, PUT, DELETE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        httpResponse<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Headers"</span><span class="token punctuation">,</span> <span class="token string">"Content-Type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h3><ul><li>通过设置响应头来允许跨域请求。</li><li>这种方式适用于需要更复杂的 CORS 处理逻辑的场景。</li></ul><h2 id="4-使用-Spring-Security-配置-CORS"><a href="#4-使用-Spring-Security-配置-CORS" class="headerlink" title="4. 使用 Spring Security 配置 CORS"></a>4. 使用 Spring Security 配置 CORS</h2><p>如果您的应用程序使用了 Spring Security，可以在安全配置中添加 CORS 支持。</p><h3 id="示例代码-3"><a href="#示例代码-3" class="headerlink" title="示例代码"></a>示例代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">HttpSecurity</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span></span><span class="token class-name">EnableWebSecurity</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span></span><span class="token class-name">WebSecurityConfigurerAdapter</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        http<span class="token punctuation">.</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 启用 CORS</span>            <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 根据需要禁用 CSRF</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CorsConfigurationSource</span> <span class="token function">corsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CorsConfiguration</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configuration<span class="token punctuation">.</span><span class="token function">setAllowedOrigins</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"http://example.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configuration<span class="token punctuation">.</span><span class="token function">setAllowedMethods</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"PUT"</span><span class="token punctuation">,</span> <span class="token string">"DELETE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configuration<span class="token punctuation">.</span><span class="token function">setAllowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UrlBasedCorsConfigurationSource</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span> configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> source<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h3><ul><li>在 Spring Security 配置中启用 CORS。</li><li>通过 <code>CorsConfigurationSource</code> 定义允许的源和方法。</li></ul><h2 id="5-使用-Nginx-处理-CORS"><a href="#5-使用-Nginx-处理-CORS" class="headerlink" title="5. 使用 Nginx 处理 CORS"></a>5. 使用 Nginx 处理 CORS</h2><p>如果您的应用程序通过 Nginx 进行反向代理，可以在 Nginx 配置中添加 CORS 支持。</p><h3 id="示例配置"><a href="#示例配置" class="headerlink" title="示例配置"></a>示例配置</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server_name</span> example.com</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">add_header</span> <span class="token string">'Access-Control-Allow-Origin'</span> <span class="token string">'http://example.com'</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">add_header</span> <span class="token string">'Access-Control-Allow-Methods'</span> <span class="token string">'GET, POST, OPTIONS'</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">add_header</span> <span class="token string">'Access-Control-Allow-Headers'</span> <span class="token string">'Content-Type'</span></span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">if</span> (<span class="token variable">$request_method</span> = <span class="token string">'OPTIONS'</span>)</span> <span class="token punctuation">{</span>            <span class="token directive"><span class="token keyword">add_header</span> <span class="token string">'Access-Control-Max-Age'</span> <span class="token number">86400</span></span><span class="token punctuation">;</span>            <span class="token directive"><span class="token keyword">add_header</span> <span class="token string">'Content-Length'</span> <span class="token number">0</span></span><span class="token punctuation">;</span>            <span class="token directive"><span class="token keyword">return</span> <span class="token number">204</span></span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">proxy_pass</span> http://localhost:8080</span><span class="token punctuation">;</span> <span class="token comment"># 代理到 Spring Boot 应用</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="说明-4"><a href="#说明-4" class="headerlink" title="说明"></a>说明</h3><ul><li>在 Nginx 配置中使用 <code>add_header</code> 指令添加 CORS 相关的响应头。</li><li>处理 <code>OPTIONS</code> 请求以支持预检请求。</li></ul><h2 id="6-前端解决跨域问题"><a href="#6-前端解决跨域问题" class="headerlink" title="6. 前端解决跨域问题"></a>6. 前端解决跨域问题</h2><p>在某些情况下，前端可以通过 JSONP 或使用代理服务器来解决跨域问题。</p><h3 id="示例代码（使用代理）"><a href="#示例代码（使用代理）" class="headerlink" title="示例代码（使用代理）"></a>示例代码（使用代理）</h3><p>在开发环境中，可以使用 Webpack 的代理功能：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token string-property property">'/api'</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'http://localhost:8080'</span><span class="token punctuation">,</span>                <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="说明-5"><a href="#说明-5" class="headerlink" title="说明"></a>说明</h3><ul><li>通过代理将请求转发到后端，避免跨域问题。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在 Spring Boot 中解决跨域问题有多种方式，开发者可以根据具体需求选择合适的方法。无论是使用注解、全局配置、Filter、Spring Security、Nginx 还是前端代理，正确配置 CORS 都能确保前后端的顺利交互。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-cors">Spring Boot CORS Documentation</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">MDN Web Docs - CORS</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和解决-Spring-Boot-中的跨域问题。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和解决-Spring-Boot-中的跨域问题。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和解决 Spring Boot 中的跨域问题。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和解决 Spring Boot 中的跨域问题。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 跨域 </tag>
            
            <tag> CORS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】运维常见故障与解决方案</title>
      <link href="/archives/b55fa604.html"/>
      <url>/archives/b55fa604.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在 Linux 运维过程中，管理员常常会遇到各种故障。了解这些常见故障及其解决方案，可以帮助运维人员快速定位问题并恢复系统的正常运行。本文将总结一些常见的 Linux 运维故障及其解决方案。</p><h2 id="1-系统无法启动"><a href="#1-系统无法启动" class="headerlink" title="1. 系统无法启动"></a>1. 系统无法启动</h2><h3 id="故障现象"><a href="#故障现象" class="headerlink" title="故障现象"></a>故障现象</h3><p>系统启动时停留在 GRUB 界面或出现内核错误。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li><p>检查 BIOS 设置，确保启动顺序正确。</p></li><li><p>使用 Live CD 或 USB 启动系统，检查文件系统是否损坏。</p></li><li><p>通过 <code>fsck</code> 命令修复文件系统：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">fsck</span> /dev/sda1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="2-网络连接问题"><a href="#2-网络连接问题" class="headerlink" title="2. 网络连接问题"></a>2. 网络连接问题</h2><h3 id="故障现象-1"><a href="#故障现象-1" class="headerlink" title="故障现象"></a>故障现象</h3><p>无法访问外部网络或内部服务。</p><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li><p>使用 <code>ping</code> 命令检查网络连通性：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ping</span> <span class="token number">8.8</span>.8.8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>检查网络配置文件（如 <code>/etc/network/interfaces</code> 或 <code>/etc/sysconfig/network-scripts/ifcfg-eth0</code>）是否正确。</p></li><li><p>使用 <code>ifconfig</code> 或 <code>ip addr</code> 命令查看网络接口状态。</p></li></ul><h2 id="3-磁盘空间不足"><a href="#3-磁盘空间不足" class="headerlink" title="3. 磁盘空间不足"></a>3. 磁盘空间不足</h2><h3 id="故障现象-2"><a href="#故障现象-2" class="headerlink" title="故障现象"></a>故障现象</h3><p>系统提示磁盘空间不足，无法写入数据。</p><h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>使用 <code>df -h</code> 命令查看磁盘使用情况。</li><li>使用 <code>du -sh /path/to/directory/*</code> 命令查找占用空间较大的目录。</li><li>清理不必要的文件或使用 <code>ncdu</code> 工具进行磁盘使用分析。</li></ul><h2 id="4-服务无法启动"><a href="#4-服务无法启动" class="headerlink" title="4. 服务无法启动"></a>4. 服务无法启动</h2><h3 id="故障现象-3"><a href="#故障现象-3" class="headerlink" title="故障现象"></a>故障现象</h3><p>某个服务无法启动，系统日志中出现错误信息。</p><h3 id="解决方案-3"><a href="#解决方案-3" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>使用 <code>systemctl status service_name</code> 命令查看服务状态和错误日志。</li><li>检查服务配置文件是否正确，必要时使用 <code>journalctl -xe</code> 查看详细日志。</li><li>尝试重启服务并观察是否有错误信息。</li></ul><h2 id="5-SSH-无法连接"><a href="#5-SSH-无法连接" class="headerlink" title="5. SSH 无法连接"></a>5. SSH 无法连接</h2><h3 id="故障现象-4"><a href="#故障现象-4" class="headerlink" title="故障现象"></a>故障现象</h3><p>无法通过 SSH 连接到服务器。</p><h3 id="解决方案-4"><a href="#解决方案-4" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li><p>检查 SSH 服务是否正在运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl status sshd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>确保防火墙允许 SSH 端口（默认 22）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> iptables <span class="token parameter variable">-L</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>检查网络连接和 DNS 配置。</p></li></ul><h2 id="6-应用程序崩溃"><a href="#6-应用程序崩溃" class="headerlink" title="6. 应用程序崩溃"></a>6. 应用程序崩溃</h2><h3 id="故障现象-5"><a href="#故障现象-5" class="headerlink" title="故障现象"></a>故障现象</h3><p>某个应用程序频繁崩溃或无法启动。</p><h3 id="解决方案-5"><a href="#解决方案-5" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>查看应用程序的日志文件，通常位于 <code>/var/log</code> 目录下。</li><li>检查系统资源（CPU、内存、磁盘）是否充足。</li><li>更新应用程序或其依赖项，确保使用最新版本。</li></ul><h2 id="7-权限问题"><a href="#7-权限问题" class="headerlink" title="7. 权限问题"></a>7. 权限问题</h2><h3 id="故障现象-6"><a href="#故障现象-6" class="headerlink" title="故障现象"></a>故障现象</h3><p>用户无法访问某些文件或目录。</p><h3 id="解决方案-6"><a href="#解决方案-6" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li><p>使用 <code>ls -l</code> 命令查看文件或目录的权限。</p></li><li><p>使用 <code>chmod</code> 和 <code>chown</code> 命令修改权限和所有者：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">755</span> /path/to/file<span class="token function">sudo</span> <span class="token function">chown</span> user:group /path/to/file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过了解这些常见的 Linux 运维故障及其解决方案，运维人员可以更高效地处理问题，确保系统的稳定运行。如果您在运维过程中遇到其他问题，欢迎在评论区讨论！</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.linux.com/">Linux Troubleshooting Guide</a></li><li><a href="https://linuxcommand.org/">Linux Command Line Documentation</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和解决-Linux-运维中的常见故障。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和解决-Linux-运维中的常见故障。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和解决 Linux 运维中的常见故障。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和解决 Linux 运维中的常见故障。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 运维 </tag>
            
            <tag> 故障排查 </tag>
            
            <tag> 解决方案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】软件源配置详解</title>
      <link href="/archives/b55fa603.html"/>
      <url>/archives/b55fa603.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在使用 Linux 系统时，软件源（Package Repository）的配置对系统的软件管理至关重要。合理配置软件源可以提高软件下载速度，确保系统安全性。本文将详细介绍如何在主流 Linux 发行版中配置软件源。</p><h2 id="1-什么是软件源"><a href="#1-什么是软件源" class="headerlink" title="1. 什么是软件源"></a>1. 什么是软件源</h2><p>软件源是 Linux 系统中用于存放软件包的远程仓库。系统通过包管理器（如 apt、yum、dnf）从这些仓库中下载和安装软件。</p><h3 id="1-1-软件源的作用"><a href="#1-1-软件源的作用" class="headerlink" title="1.1 软件源的作用"></a>1.1 软件源的作用</h3><ul><li>提供软件包下载</li><li>管理软件依赖关系</li><li>确保软件包的安全性</li><li>提供软件更新服务</li></ul><h2 id="2-Ubuntu-软件源配置"><a href="#2-Ubuntu-软件源配置" class="headerlink" title="2. Ubuntu 软件源配置"></a>2. Ubuntu 软件源配置</h2><h3 id="2-1-软件源文件位置"><a href="#2-1-软件源文件位置" class="headerlink" title="2.1 软件源文件位置"></a>2.1 软件源文件位置</h3><p>Ubuntu 的软件源配置文件位于：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/apt/sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2-备份原有配置"><a href="#2-2-备份原有配置" class="headerlink" title="2.2 备份原有配置"></a>2.2 备份原有配置</h3><p>在修改之前，建议先备份原有配置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> /etc/apt/sources.list /etc/apt/sources.list.backup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3-修改软件源"><a href="#2-3-修改软件源" class="headerlink" title="2.3 修改软件源"></a>2.3 修改软件源</h3><p>编辑软件源配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /etc/apt/sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>替换为阿里云镜像源（Ubuntu 22.04 LTS 示例）：</p><pre class="line-numbers language-none"><code class="language-none">deb https://mirrors.aliyun.com/ubuntu/ jammy main restricted universe multiversedeb https://mirrors.aliyun.com/ubuntu/ jammy-security main restricted universe multiversedeb https://mirrors.aliyun.com/ubuntu/ jammy-updates main restricted universe multiversedeb https://mirrors.aliyun.com/ubuntu/ jammy-backports main restricted universe multiverse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-更新软件源"><a href="#2-4-更新软件源" class="headerlink" title="2.4 更新软件源"></a>2.4 更新软件源</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-CentOS-软件源配置"><a href="#3-CentOS-软件源配置" class="headerlink" title="3. CentOS 软件源配置"></a>3. CentOS 软件源配置</h2><h3 id="3-1-软件源文件位置"><a href="#3-1-软件源文件位置" class="headerlink" title="3.1 软件源文件位置"></a>3.1 软件源文件位置</h3><p>CentOS 的软件源配置文件位于：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/yum.repos.d/CentOS-Base.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-备份原有配置"><a href="#3-2-备份原有配置" class="headerlink" title="3.2 备份原有配置"></a>3.2 备份原有配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-3-下载新的软件源配置"><a href="#3-3-下载新的软件源配置" class="headerlink" title="3.3 下载新的软件源配置"></a>3.3 下载新的软件源配置</h3><p>对于 CentOS 7：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-o</span> /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于 CentOS 8：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-o</span> /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-8.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-4-更新软件源缓存"><a href="#3-4-更新软件源缓存" class="headerlink" title="3.4 更新软件源缓存"></a>3.4 更新软件源缓存</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum clean all<span class="token function">sudo</span> yum makecache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-Debian-软件源配置"><a href="#4-Debian-软件源配置" class="headerlink" title="4. Debian 软件源配置"></a>4. Debian 软件源配置</h2><h3 id="4-1-软件源文件位置"><a href="#4-1-软件源文件位置" class="headerlink" title="4.1 软件源文件位置"></a>4.1 软件源文件位置</h3><p>Debian 的软件源配置文件位于：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/apt/sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-2-备份原有配置"><a href="#4-2-备份原有配置" class="headerlink" title="4.2 备份原有配置"></a>4.2 备份原有配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> /etc/apt/sources.list /etc/apt/sources.list.backup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-3-修改软件源"><a href="#4-3-修改软件源" class="headerlink" title="4.3 修改软件源"></a>4.3 修改软件源</h3><p>编辑软件源配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /etc/apt/sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>替换为阿里云镜像源（Debian 11 示例）：</p><pre class="line-numbers language-none"><code class="language-none">deb https://mirrors.aliyun.com/debian/ bullseye main non-free contribdeb https://mirrors.aliyun.com/debian/ bullseye-updates main non-free contribdeb https://mirrors.aliyun.com/debian/ bullseye-backports main non-free contribdeb https://mirrors.aliyun.com/debian-security bullseye-security main non-free contrib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-更新软件源"><a href="#4-4-更新软件源" class="headerlink" title="4.4 更新软件源"></a>4.4 更新软件源</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="5-常见问题解决"><a href="#5-常见问题解决" class="headerlink" title="5. 常见问题解决"></a>5. 常见问题解决</h2><h3 id="5-1-GPG-密钥错误"><a href="#5-1-GPG-密钥错误" class="headerlink" title="5.1 GPG 密钥错误"></a>5.1 GPG 密钥错误</h3><p>如果遇到 GPG 密钥错误，可以尝试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Ubuntu/Debian</span><span class="token function">sudo</span> apt-key adv <span class="token parameter variable">--keyserver</span> keyserver.ubuntu.com --recv-keys 密钥ID<span class="token comment"># CentOS</span><span class="token function">sudo</span> <span class="token function">rpm</span> <span class="token parameter variable">--import</span> 密钥URL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-软件源更新失败"><a href="#5-2-软件源更新失败" class="headerlink" title="5.2 软件源更新失败"></a>5.2 软件源更新失败</h3><p>如果更新失败，请检查：</p><ul><li>网络连接是否正常</li><li>软件源地址是否正确</li><li>系统版本是否与软件源匹配</li></ul><h2 id="6-推荐的国内镜像源"><a href="#6-推荐的国内镜像源" class="headerlink" title="6. 推荐的国内镜像源"></a>6. 推荐的国内镜像源</h2><ul><li>阿里云镜像：<a href="https://mirrors.aliyun.com/">https://mirrors.aliyun.com</a></li><li>清华大学镜像：<a href="https://mirrors.tuna.tsinghua.edu.cn/">https://mirrors.tuna.tsinghua.edu.cn</a></li><li>中科大镜像：<a href="https://mirrors.ustc.edu.cn/">https://mirrors.ustc.edu.cn</a></li><li>华为云镜像：<a href="https://mirrors.huaweicloud.com/">https://mirrors.huaweicloud.com</a></li></ul><h2 id="7-Fedora-软件源配置"><a href="#7-Fedora-软件源配置" class="headerlink" title="7. Fedora 软件源配置"></a>7. Fedora 软件源配置</h2><h3 id="7-1-软件源文件位置"><a href="#7-1-软件源文件位置" class="headerlink" title="7.1 软件源文件位置"></a>7.1 软件源文件位置</h3><p>Fedora 的软件源配置文件位于：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/yum.repos.d/fedora.repo/etc/yum.repos.d/fedora-updates.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-2-备份原有配置"><a href="#7-2-备份原有配置" class="headerlink" title="7.2 备份原有配置"></a>7.2 备份原有配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> /etc/yum.repos.d/fedora.repo /etc/yum.repos.d/fedora.repo.backup<span class="token function">sudo</span> <span class="token function">cp</span> /etc/yum.repos.d/fedora-updates.repo /etc/yum.repos.d/fedora-updates.repo.backup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-3-修改软件源"><a href="#7-3-修改软件源" class="headerlink" title="7.3 修改软件源"></a>7.3 修改软件源</h3><p>创建新的配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /etc/yum.repos.d/fedora.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加阿里云镜像源内容（以 Fedora 38 为例）：</p><pre class="line-numbers language-none"><code class="language-none">[fedora]name=Fedora $releasever - $basearchbaseurl=https://mirrors.aliyun.com/fedora/releases/$releasever/Everything/$basearch/os/enabled=1gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-$releasever-$basearch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-4-更新软件源缓存"><a href="#7-4-更新软件源缓存" class="headerlink" title="7.4 更新软件源缓存"></a>7.4 更新软件源缓存</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dnf clean all<span class="token function">sudo</span> dnf makecache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="8-OpenSUSE-软件源配置"><a href="#8-OpenSUSE-软件源配置" class="headerlink" title="8. OpenSUSE 软件源配置"></a>8. OpenSUSE 软件源配置</h2><h3 id="8-1-软件源管理"><a href="#8-1-软件源管理" class="headerlink" title="8.1 软件源管理"></a>8.1 软件源管理</h3><p>OpenSUSE 使用 zypper 包管理器，可以通过以下命令管理软件源：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">zypper</span> lr    <span class="token comment"># 列出当前软件源</span><span class="token function">sudo</span> <span class="token function">zypper</span> mr <span class="token parameter variable">-d</span> <span class="token comment"># 禁用所有软件源</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="8-2-添加阿里云镜像源"><a href="#8-2-添加阿里云镜像源" class="headerlink" title="8.2 添加阿里云镜像源"></a>8.2 添加阿里云镜像源</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加阿里云镜像源（以 OpenSUSE Leap 15.5 为例）</span><span class="token function">sudo</span> <span class="token function">zypper</span> ar <span class="token parameter variable">-fcg</span> https://mirrors.aliyun.com/opensuse/distribution/leap/15.5/repo/oss aliyun-oss<span class="token function">sudo</span> <span class="token function">zypper</span> ar <span class="token parameter variable">-fcg</span> https://mirrors.aliyun.com/opensuse/distribution/leap/15.5/repo/non-oss aliyun-non-oss<span class="token function">sudo</span> <span class="token function">zypper</span> ar <span class="token parameter variable">-fcg</span> https://mirrors.aliyun.com/opensuse/update/leap/15.5/oss aliyun-update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-3-更新软件源"><a href="#8-3-更新软件源" class="headerlink" title="8.3 更新软件源"></a>8.3 更新软件源</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">zypper</span> refresh<span class="token function">sudo</span> <span class="token function">zypper</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="9-Arch-Linux-软件源配置"><a href="#9-Arch-Linux-软件源配置" class="headerlink" title="9. Arch Linux 软件源配置"></a>9. Arch Linux 软件源配置</h2><h3 id="9-1-软件源文件位置"><a href="#9-1-软件源文件位置" class="headerlink" title="9.1 软件源文件位置"></a>9.1 软件源文件位置</h3><p>Arch Linux 的软件源配置文件位于：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/pacman.d/mirrorlist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="9-2-备份原有配置"><a href="#9-2-备份原有配置" class="headerlink" title="9.2 备份原有配置"></a>9.2 备份原有配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="9-3-修改软件源"><a href="#9-3-修改软件源" class="headerlink" title="9.3 修改软件源"></a>9.3 修改软件源</h3><p>编辑软件源配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /etc/pacman.d/mirrorlist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加国内镜像源（建议放在文件开头）：</p><pre class="line-numbers language-none"><code class="language-none">Server = https://mirrors.aliyun.com/archlinux/$repo/os/$archServer = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$archServer = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="9-4-更新软件源"><a href="#9-4-更新软件源" class="headerlink" title="9.4 更新软件源"></a>9.4 更新软件源</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pacman <span class="token parameter variable">-Syy</span>  <span class="token comment"># 强制更新软件源</span><span class="token function">sudo</span> pacman <span class="token parameter variable">-Syu</span>  <span class="token comment"># 更新系统</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>合理配置软件源可以显著提升系统软件管理的效率。建议选择地理位置较近的镜像源，并定期更新系统软件包以确保系统安全性。如果您在配置过程中遇到问题，欢迎在评论区讨论！</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">Ubuntu 镜像使用帮助</a></li><li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/centos/">CentOS 镜像使用帮助</a></li><li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/debian/">Debian 镜像使用帮助</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和配置-Linux-系统的软件源。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和配置-Linux-系统的软件源。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和配置 Linux 系统的软件源。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和配置 Linux 系统的软件源。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置 </tag>
            
            <tag> Linux </tag>
            
            <tag> 系统管理 </tag>
            
            <tag> 软件源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】常见问题解答</title>
      <link href="/archives/b55fa602.html"/>
      <url>/archives/b55fa602.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在使用 Linux 系统的过程中，用户常常会遇到各种各样的问题。本文将解答一些常见的 Linux 问题，帮助用户更好地管理和使用系统。</p><h2 id="1-如何查看系统内核的版本"><a href="#1-如何查看系统内核的版本" class="headerlink" title="1. 如何查看系统内核的版本"></a>1. 如何查看系统内核的版本</h2><p>要查看当前系统的内核版本，可以使用以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">uname</span> <span class="token parameter variable">-r</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该命令将输出内核的版本号，例如：</p><pre class="line-numbers language-none"><code class="language-none">5.4.0-42-generic<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-如何查看系统当前的-IP-地址"><a href="#2-如何查看系统当前的-IP-地址" class="headerlink" title="2. 如何查看系统当前的 IP 地址"></a>2. 如何查看系统当前的 IP 地址</h2><p>要查看当前系统的 IP 地址，可以使用以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ip</span> addr show<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者使用更简洁的命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">hostname</span> <span class="token parameter variable">-I</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将显示系统的所有 IP 地址。</p><h2 id="3-如何查看磁盘还有多少剩余空间"><a href="#3-如何查看磁盘还有多少剩余空间" class="headerlink" title="3. 如何查看磁盘还有多少剩余空间"></a>3. 如何查看磁盘还有多少剩余空间</h2><p>要查看磁盘的剩余空间，可以使用以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">df</span> <span class="token parameter variable">-h</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该命令将以人类可读的格式显示各个分区的使用情况和剩余空间。</p><h2 id="4-如何在系统中管理服务"><a href="#4-如何在系统中管理服务" class="headerlink" title="4. 如何在系统中管理服务"></a>4. 如何在系统中管理服务</h2><p>在 Linux 中，您可以使用 <code>systemctl</code> 命令来管理服务。例如，启动、停止和重启服务的命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动服务</span><span class="token function">sudo</span> systemctl start service_name<span class="token comment"># 停止服务</span><span class="token function">sudo</span> systemctl stop service_name<span class="token comment"># 重启服务</span><span class="token function">sudo</span> systemctl restart service_name<span class="token comment"># 查看服务状态</span><span class="token function">sudo</span> systemctl status service_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-如何查看一个目录的大小"><a href="#5-如何查看一个目录的大小" class="headerlink" title="5. 如何查看一个目录的大小"></a>5. 如何查看一个目录的大小</h2><p>要查看某个目录的大小，可以使用 <code>du</code> 命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">du</span> <span class="token parameter variable">-sh</span> /path/to/directory<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该命令将以人类可读的格式显示目录的总大小。</p><h2 id="6-如何查看你系统中开放的端口号"><a href="#6-如何查看你系统中开放的端口号" class="headerlink" title="6. 如何查看你系统中开放的端口号"></a>6. 如何查看你系统中开放的端口号</h2><p>要查看系统中开放的端口号，可以使用以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">netstat</span> <span class="token parameter variable">-tuln</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者使用 <code>ss</code> 命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ss <span class="token parameter variable">-tuln</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将列出所有正在监听的 TCP 和 UDP 端口。</p><h2 id="7-如何查看某个进程对-CPU-的使用情况"><a href="#7-如何查看某个进程对-CPU-的使用情况" class="headerlink" title="7. 如何查看某个进程对 CPU 的使用情况"></a>7. 如何查看某个进程对 CPU 的使用情况</h2><p>要查看某个进程对 CPU 的使用情况，可以使用 <code>top</code> 命令，按 <code>P</code> 键按 CPU 使用率排序。或者使用 <code>ps</code> 命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux <span class="token parameter variable">--sort</span><span class="token operator">=</span>-%cpu <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将显示 CPU 使用率最高的前 10 个进程。</p><h2 id="8-Linux-里如何来做挂载"><a href="#8-Linux-里如何来做挂载" class="headerlink" title="8. Linux 里如何来做挂载"></a>8. Linux 里如何来做挂载</h2><p>要挂载一个文件系统，可以使用 <code>mount</code> 命令。例如，挂载一个 USB 驱动器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mount</span> /dev/sdb1 /mnt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>确保 <code>/mnt</code> 目录存在，并且 <code>/dev/sdb1</code> 是要挂载的设备。</p><h2 id="9-如何查看一些你不太熟悉的命令"><a href="#9-如何查看一些你不太熟悉的命令" class="headerlink" title="9. 如何查看一些你不太熟悉的命令"></a>9. 如何查看一些你不太熟悉的命令</h2><p>要查看某个命令的用法，可以使用 <code>man</code> 命令。例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">man</span> command_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将打开该命令的手册页，提供详细的用法和选项。</p><h2 id="10-如果使用了-man-命令还是找不到答案怎么办"><a href="#10-如果使用了-man-命令还是找不到答案怎么办" class="headerlink" title="10. 如果使用了 man 命令还是找不到答案怎么办"></a>10. 如果使用了 man 命令还是找不到答案怎么办</h2><p>如果 <code>man</code> 命令没有找到相关信息，可以尝试使用 <code>--help</code> 选项：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">command_name <span class="token parameter variable">--help</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此外，您还可以在网上搜索相关文档或使用 <code>info</code> 命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">info command_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="11-如何查看当前磁盘某个目录下最大的-n-个文件"><a href="#11-如何查看当前磁盘某个目录下最大的-n-个文件" class="headerlink" title="11. 如何查看当前磁盘某个目录下最大的 n 个文件"></a>11. 如何查看当前磁盘某个目录下最大的 n 个文件</h2><p>要查看某个目录下最大的 n 个文件，可以使用以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">du</span> <span class="token parameter variable">-ah</span> /path/to/directory <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-rh</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将列出指定目录下最大的 10 个文件。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过掌握这些常见问题的解决方法，您可以更高效地管理和使用 Linux 系统。如果您在使用过程中遇到其他问题，欢迎在评论区讨论！</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://linuxcommand.org/">Linux Command Line Documentation</a></li><li><a href="https://man7.org/linux/man-pages/">Linux Man Pages</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和解决-Linux-中的常见问题。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和解决-Linux-中的常见问题。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和解决 Linux 中的常见问题。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和解决 Linux 中的常见问题。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 系统管理 </tag>
            
            <tag> 常见问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】实现禁用境外 IP 的脚本</title>
      <link href="/archives/b55fa601.html"/>
      <url>/archives/b55fa601.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在 Linux 服务器上，出于安全考虑，管理员可能希望禁用来自境外 IP 的访问，以防止潜在的攻击和未授权访问。然而，某些情况下，SSH 使用者的 IP 需要被排除在外，以确保管理员能够远程访问服务器。本文将介绍如何编写一个脚本来实现这一功能。</p><h2 id="1-脚本功能概述"><a href="#1-脚本功能概述" class="headerlink" title="1. 脚本功能概述"></a>1. 脚本功能概述</h2><p>该脚本将执行以下操作：</p><ul><li>获取当前 SSH 使用者的 IP 地址。</li><li>使用 <code>iptables</code> 规则禁用境外 IP 的访问。</li><li>确保 SSH 使用者的 IP 地址不被禁用。</li></ul><h2 id="2-脚本实现"><a href="#2-脚本实现" class="headerlink" title="2. 脚本实现"></a>2. 脚本实现</h2><h3 id="2-1-创建脚本文件"><a href="#2-1-创建脚本文件" class="headerlink" title="2.1 创建脚本文件"></a>2.1 创建脚本文件</h3><p>在您的 Linux 服务器上，创建一个名为 <code>disable_foreign_ip.sh</code> 的文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> disable_foreign_ip.sh<span class="token function">chmod</span> +x disable_foreign_ip.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-2-编写脚本内容"><a href="#2-2-编写脚本内容" class="headerlink" title="2.2 编写脚本内容"></a>2.2 编写脚本内容</h3><p>将以下内容复制到 <code>disable_foreign_ip.sh</code> 文件中：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 获取当前 SSH 使用者的 IP 地址</span><span class="token assign-left variable">SSH_IP</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">who</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'pts'</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print $NF}'</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-I</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token function">ip</span> route get <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'NR==1 {print $NF}'</span><span class="token variable">)</span></span><span class="token comment"># 定义允许的国家 IP 范围（示例：仅允许中国 IP）</span><span class="token assign-left variable">ALLOWED_COUNTRIES</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"CN"</span><span class="token punctuation">)</span><span class="token comment"># 获取当前的所有 IP 地址</span><span class="token assign-left variable">ALL_IPS</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-s</span> https://ipinfo.io/ip<span class="token variable">)</span></span><span class="token comment"># 禁用境外 IP</span><span class="token keyword">for</span> <span class="token for-or-select variable">ip</span> <span class="token keyword">in</span> <span class="token variable">$ALL_IPS</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token comment"># 检查 IP 是否在允许的国家范围内</span>    <span class="token keyword">if</span> <span class="token operator">!</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">${ALLOWED_COUNTRIES<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>"</span> <span class="token operator">=~</span> <span class="token string">"<span class="token variable">${ip}</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token comment"># 检查是否为 SSH 使用者的 IP</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$ip</span>"</span> <span class="token operator">!=</span> <span class="token string">"<span class="token variable">$SSH_IP</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>            <span class="token builtin class-name">echo</span> <span class="token string">"禁用 IP: <span class="token variable">$ip</span>"</span>            iptables <span class="token parameter variable">-A</span> INPUT <span class="token parameter variable">-s</span> <span class="token variable">$ip</span> <span class="token parameter variable">-j</span> DROP        <span class="token keyword">fi</span>    <span class="token keyword">fi</span><span class="token keyword">done</span><span class="token builtin class-name">echo</span> <span class="token string">"境外 IP 禁用完成，SSH 使用者 IP 被排除在外。"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-脚本说明"><a href="#2-3-脚本说明" class="headerlink" title="2.3 脚本说明"></a>2.3 脚本说明</h3><ul><li><strong>获取 SSH 使用者的 IP 地址</strong>：使用 <code>who</code> 命令获取当前 SSH 使用者的 IP 地址。</li><li><strong>定义允许的国家 IP 范围</strong>：在示例中，您可以根据需要修改允许的国家 IP 范围。</li><li><strong>禁用境外 IP</strong>：使用 <code>iptables</code> 命令禁用不在允许范围内的 IP 地址，确保 SSH 使用者的 IP 不被禁用。</li></ul><h2 id="3-运行脚本"><a href="#3-运行脚本" class="headerlink" title="3. 运行脚本"></a>3. 运行脚本</h2><p>在终端中运行脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ./disable_foreign_ip.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a>4. 注意事项</h2><ul><li><strong>iptables 权限</strong>：确保您有足够的权限来修改 <code>iptables</code> 规则。</li><li><strong>IP 地址更新</strong>：如果您的 SSH 使用者 IP 地址发生变化，您需要重新运行脚本以更新规则。</li><li><strong>测试环境</strong>：在生产环境中使用前，建议在测试环境中验证脚本的有效性。</li></ul><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>通过编写一个简单的脚本，您可以在 Linux 服务器上实现禁用境外 IP 的功能，同时确保 SSH 使用者的 IP 不受影响。这种方法可以有效提高服务器的安全性，防止潜在的攻击。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.netfilter.org/documentation/index.html">iptables 官方文档</a></li><li><a href="https://tldp.org/LDP/Bash-Beginners-Guide/html/">Linux Shell 脚本编程</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解如何在-Linux-中实现禁用境外-IP-的脚本。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解如何在-Linux-中实现禁用境外-IP-的脚本。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解如何在 Linux 中实现禁用境外 IP 的脚本。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解如何在 Linux 中实现禁用境外 IP 的脚本。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 脚本编程 </tag>
            
            <tag> 网络安全 </tag>
            
            <tag> IP 过滤 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】磁盘清理指南</title>
      <link href="/archives/b55fa600.html"/>
      <url>/archives/b55fa600.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>随着时间的推移，Linux 系统中的磁盘空间可能会被临时文件、日志文件和不再使用的程序占用。定期清理磁盘可以帮助释放空间，提高系统性能。本文将介绍一些常用的磁盘清理方法和工具。</p><h2 id="1-查看磁盘使用情况"><a href="#1-查看磁盘使用情况" class="headerlink" title="1. 查看磁盘使用情况"></a>1. 查看磁盘使用情况</h2><p>在开始清理之前，首先需要查看磁盘的使用情况。可以使用 <code>df</code> 命令查看各个分区的使用情况：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">df</span> <span class="token parameter variable">-h</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出示例：</p><pre class="line-numbers language-none"><code class="language-none">Filesystem      Size  Used Avail Use% Mounted on/dev/sda1       100G   80G   15G  85% /<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-清理临时文件"><a href="#2-清理临时文件" class="headerlink" title="2. 清理临时文件"></a>2. 清理临时文件</h2><h3 id="2-1-使用-tmpwatch"><a href="#2-1-使用-tmpwatch" class="headerlink" title="2.1 使用 tmpwatch"></a>2.1 使用 <code>tmpwatch</code></h3><p><code>tmpwatch</code> 是一个用于清理临时文件的工具，可以删除在指定时间内未被访问的文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> tmpreaper  <span class="token comment"># Debian/Ubuntu</span><span class="token function">sudo</span> yum <span class="token function">install</span> tmpwatch    <span class="token comment"># RHEL/CentOS</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> tmpwatch <span class="token parameter variable">--mtime</span> <span class="token number">24</span> /tmp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将删除 <code>/tmp</code> 目录中 24 小时内未被访问的文件。</p><h3 id="2-2-手动清理"><a href="#2-2-手动清理" class="headerlink" title="2.2 手动清理"></a>2.2 手动清理</h3><p>您也可以手动清理 <code>/tmp</code> 目录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /tmp/*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-清理日志文件"><a href="#3-清理日志文件" class="headerlink" title="3. 清理日志文件"></a>3. 清理日志文件</h2><h3 id="3-1-使用-logrotate"><a href="#3-1-使用-logrotate" class="headerlink" title="3.1 使用 logrotate"></a>3.1 使用 <code>logrotate</code></h3><p><code>logrotate</code> 是一个用于管理日志文件的工具，可以自动轮换、压缩和删除旧的日志文件。确保您的系统已安装并配置 <code>logrotate</code>。</p><h3 id="3-2-手动清理"><a href="#3-2-手动清理" class="headerlink" title="3.2 手动清理"></a>3.2 手动清理</h3><p>您可以手动查看和清理 <code>/var/log</code> 目录中的日志文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">du</span> <span class="token parameter variable">-sh</span> /var/log/*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 <code>rm</code> 命令删除不再需要的日志文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> /var/log/old-log-file.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-清理包管理器缓存"><a href="#4-清理包管理器缓存" class="headerlink" title="4. 清理包管理器缓存"></a>4. 清理包管理器缓存</h2><h3 id="4-1-Debian-Ubuntu"><a href="#4-1-Debian-Ubuntu" class="headerlink" title="4.1 Debian/Ubuntu"></a>4.1 Debian/Ubuntu</h3><p>使用以下命令清理 APT 缓存：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-2-RHEL-CentOS"><a href="#4-2-RHEL-CentOS" class="headerlink" title="4.2 RHEL/CentOS"></a>4.2 RHEL/CentOS</h3><p>使用以下命令清理 YUM 缓存：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum clean all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-查找和删除大文件"><a href="#5-查找和删除大文件" class="headerlink" title="5. 查找和删除大文件"></a>5. 查找和删除大文件</h2><h3 id="5-1-使用-find"><a href="#5-1-使用-find" class="headerlink" title="5.1 使用 find"></a>5.1 使用 <code>find</code></h3><p>使用 <code>find</code> 命令查找大于 100MB 的文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-type</span> f <span class="token parameter variable">-size</span> +100M<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-2-删除不需要的文件"><a href="#5-2-删除不需要的文件" class="headerlink" title="5.2 删除不需要的文件"></a>5.2 删除不需要的文件</h3><p>在确认不再需要的文件后，可以使用 <code>rm</code> 命令删除它们：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> /path/to/large-file<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6-使用-ncdu-进行磁盘使用分析"><a href="#6-使用-ncdu-进行磁盘使用分析" class="headerlink" title="6. 使用 ncdu 进行磁盘使用分析"></a>6. 使用 <code>ncdu</code> 进行磁盘使用分析</h2><p><code>ncdu</code> 是一个基于文本的磁盘使用分析工具，可以帮助您快速找到占用磁盘空间的文件和目录。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ncdu  <span class="token comment"># Debian/Ubuntu</span><span class="token function">sudo</span> yum <span class="token function">install</span> ncdu  <span class="token comment"># RHEL/CentOS</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ncdu /<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h2><p>定期清理 Linux 磁盘可以帮助释放空间，提高系统性能。通过使用上述工具和方法，您可以有效地管理磁盘空间，保持系统的整洁和高效运行。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.tecmint.com/clean-linux-disk-space/">Linux Disk Cleanup Guide</a></li><li><a href="https://linux.die.net/man/8/logrotate">Logrotate Documentation</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解如何清理-Linux-磁盘。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解如何清理-Linux-磁盘。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解如何清理 Linux 磁盘。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解如何清理 Linux 磁盘。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
            <tag> Linux </tag>
            
            <tag> 系统管理 </tag>
            
            <tag> 磁盘清理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】系统监控与性能优化</title>
      <link href="/archives/b55fa599.html"/>
      <url>/archives/b55fa599.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在 Linux 系统中，监控系统性能和资源使用情况是确保系统稳定性和高效运行的重要任务。通过有效的监控和优化，管理员可以及时发现问题并采取措施，提升系统性能。本文将介绍 Linux 系统监控的常用工具和方法，以及性能优化的基本策略。</p><h2 id="1-系统监控工具"><a href="#1-系统监控工具" class="headerlink" title="1. 系统监控工具"></a>1. 系统监控工具</h2><h3 id="1-1-top"><a href="#1-1-top" class="headerlink" title="1.1 top"></a>1.1 <code>top</code></h3><p><code>top</code> 是一个实时监控系统资源使用情况的命令行工具。它显示了 CPU、内存、进程等信息。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">top</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>top</code> 界面中，您可以按 <code>M</code> 按内存使用排序，按 <code>P</code> 按 CPU 使用排序。</p><h3 id="1-2-htop"><a href="#1-2-htop" class="headerlink" title="1.2 htop"></a>1.2 <code>htop</code></h3><p><code>htop</code> 是 <code>top</code> 的增强版，提供了更友好的用户界面和交互功能。您可以使用箭头键选择进程，并可以直接杀死进程。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">htop</span>  <span class="token comment"># 安装 htop</span><span class="token function">htop</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-3-vmstat"><a href="#1-3-vmstat" class="headerlink" title="1.3 vmstat"></a>1.3 <code>vmstat</code></h3><p><code>vmstat</code> 用于报告虚拟内存、进程、CPU 活动等信息。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vmstat</span> <span class="token number">1</span> <span class="token number">5</span>  <span class="token comment"># 每秒报告一次，共报告 5 次</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-4-iostat"><a href="#1-4-iostat" class="headerlink" title="1.4 iostat"></a>1.4 <code>iostat</code></h3><p><code>iostat</code> 用于监控系统输入/输出设备和 CPU 的使用情况。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iostat <span class="token parameter variable">-x</span> <span class="token number">1</span> <span class="token number">5</span>  <span class="token comment"># 每秒报告一次，共报告 5 次</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-5-netstat"><a href="#1-5-netstat" class="headerlink" title="1.5 netstat"></a>1.5 <code>netstat</code></h3><p><code>netstat</code> 用于显示网络连接、路由表和网络接口统计信息。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> <span class="token parameter variable">-tuln</span>  <span class="token comment"># 显示所有监听的 TCP 和 UDP 端口</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-6-sar"><a href="#1-6-sar" class="headerlink" title="1.6 sar"></a>1.6 <code>sar</code></h3><p><code>sar</code> 是一个强大的系统活动报告工具，可以收集、报告和保存系统活动信息。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sar <span class="token parameter variable">-u</span> <span class="token number">1</span> <span class="token number">5</span>  <span class="token comment"># 每秒报告一次 CPU 使用情况，共报告 5 次</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-性能优化策略"><a href="#2-性能优化策略" class="headerlink" title="2. 性能优化策略"></a>2. 性能优化策略</h2><h3 id="2-1-优化-CPU-使用"><a href="#2-1-优化-CPU-使用" class="headerlink" title="2.1 优化 CPU 使用"></a>2.1 优化 CPU 使用</h3><ul><li><strong>监控 CPU 使用情况</strong>：使用 <code>top</code> 或 <code>htop</code> 监控 CPU 使用率，识别高 CPU 使用的进程。</li><li><strong>调整进程优先级</strong>：使用 <code>nice</code> 和 <code>renice</code> 命令调整进程的优先级。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nice</span> <span class="token parameter variable">-n</span> <span class="token number">10</span> <span class="token builtin class-name">command</span>  <span class="token comment"># 以较低优先级运行命令</span><span class="token function">renice</span> <span class="token parameter variable">-n</span> <span class="token number">5</span> <span class="token parameter variable">-p</span> PID  <span class="token comment"># 调整进程 PID 的优先级</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-2-优化内存使用"><a href="#2-2-优化内存使用" class="headerlink" title="2.2 优化内存使用"></a>2.2 优化内存使用</h3><ul><li><strong>监控内存使用情况</strong>：使用 <code>free -h</code> 查看内存使用情况。</li><li><strong>清理缓存</strong>：使用 <code>sync; echo 3 &gt; /proc/sys/vm/drop_caches</code> 清理文件系统缓存。</li></ul><h3 id="2-3-优化磁盘-I-O"><a href="#2-3-优化磁盘-I-O" class="headerlink" title="2.3 优化磁盘 I/O"></a>2.3 优化磁盘 I/O</h3><ul><li><strong>监控磁盘 I/O</strong>：使用 <code>iostat</code> 和 <code>iotop</code> 监控磁盘 I/O 性能。</li><li><strong>使用 SSD</strong>：如果可能，使用固态硬盘（SSD）替代传统硬盘，以提高读写速度。</li></ul><h3 id="2-4-优化网络性能"><a href="#2-4-优化网络性能" class="headerlink" title="2.4 优化网络性能"></a>2.4 优化网络性能</h3><ul><li><strong>监控网络流量</strong>：使用 <code>iftop</code> 或 <code>nload</code> 监控网络流量。</li><li><strong>调整 TCP 参数</strong>：根据需要调整 <code>/etc/sysctl.conf</code> 中的 TCP 参数，例如：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">net.core.somaxconn <span class="token operator">=</span> <span class="token number">1024</span>net.ipv4.tcp_max_syn_backlog <span class="token operator">=</span> <span class="token number">2048</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-5-定期更新和维护"><a href="#2-5-定期更新和维护" class="headerlink" title="2.5 定期更新和维护"></a>2.5 定期更新和维护</h3><ul><li><strong>更新系统</strong>：定期更新系统和软件包，以获得最新的性能改进和安全修复。</li><li><strong>清理不必要的文件</strong>：定期清理临时文件和不再使用的文件，以释放磁盘空间。</li></ul><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>Linux 系统监控与性能优化是确保系统高效运行的重要任务。通过使用合适的监控工具，及时发现性能瓶颈，并采取相应的优化措施，您可以提升系统的稳定性和响应速度。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.redhat.com/en/topics/performance">Linux Performance Tuning</a></li><li><a href="https://www.tecmint.com/linux-system-monitoring-tools/">Linux System Monitoring Tools</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解-Linux-的系统监控与性能优化。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解-Linux-的系统监控与性能优化。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解 Linux 的系统监控与性能优化。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解 Linux 的系统监控与性能优化。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
            <tag> Linux </tag>
            
            <tag> 系统管理 </tag>
            
            <tag> 系统监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】Shell 脚本编程入门</title>
      <link href="/archives/b55fa598.html"/>
      <url>/archives/b55fa598.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>Shell 脚本是 Linux 系统中用于自动化任务和管理系统的重要工具。通过编写 Shell 脚本，用户可以将一系列命令组合在一起，简化日常操作，提高工作效率。本文将介绍 Shell 脚本的基本概念、语法、常用命令以及编写技巧。</p><h2 id="1-什么是-Shell-脚本"><a href="#1-什么是-Shell-脚本" class="headerlink" title="1. 什么是 Shell 脚本"></a>1. 什么是 Shell 脚本</h2><p>Shell 脚本是一种文本文件，其中包含一系列可以在命令行中执行的命令。Shell 脚本通常以 <code>.sh</code> 为扩展名，可以在 Linux 的各种 Shell 环境中运行，如 Bash、Zsh 等。</p><h2 id="2-创建和运行-Shell-脚本"><a href="#2-创建和运行-Shell-脚本" class="headerlink" title="2. 创建和运行 Shell 脚本"></a>2. 创建和运行 Shell 脚本</h2><h3 id="2-1-创建-Shell-脚本"><a href="#2-1-创建-Shell-脚本" class="headerlink" title="2.1 创建 Shell 脚本"></a>2.1 创建 Shell 脚本</h3><p>使用文本编辑器（如 <code>nano</code> 或 <code>vim</code>）创建一个新的 Shell 脚本文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nano</span> myscript.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在文件的第一行添加 Shebang，指定使用的 Shell：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在文件中添加要执行的命令，例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">echo</span> <span class="token string">"Hello, World!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-2-赋予执行权限"><a href="#2-2-赋予执行权限" class="headerlink" title="2.2 赋予执行权限"></a>2.2 赋予执行权限</h3><p>在运行脚本之前，需要为脚本文件赋予执行权限：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x myscript.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3-运行-Shell-脚本"><a href="#2-3-运行-Shell-脚本" class="headerlink" title="2.3 运行 Shell 脚本"></a>2.3 运行 Shell 脚本</h3><p>使用以下命令运行脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./myscript.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-Shell-脚本的基本语法"><a href="#3-Shell-脚本的基本语法" class="headerlink" title="3. Shell 脚本的基本语法"></a>3. Shell 脚本的基本语法</h2><h3 id="3-1-变量"><a href="#3-1-变量" class="headerlink" title="3.1 变量"></a>3.1 变量</h3><p>在 Shell 脚本中，可以使用变量存储数据：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"Alice"</span><span class="token builtin class-name">echo</span> <span class="token string">"Hello, <span class="token variable">$name</span>!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-2-条件语句"><a href="#3-2-条件语句" class="headerlink" title="3.2 条件语句"></a>3.2 条件语句</h3><p>使用 <code>if</code> 语句进行条件判断：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$name</span>"</span> <span class="token operator">==</span> <span class="token string">"Alice"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Welcome, Alice!"</span><span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Who are you?"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-循环"><a href="#3-3-循环" class="headerlink" title="3.3 循环"></a>3.3 循环</h3><p>使用 <code>for</code> 和 <code>while</code> 循环执行重复操作：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># for 循环</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Number: <span class="token variable">$i</span>"</span><span class="token keyword">done</span><span class="token comment"># while 循环</span><span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">1</span><span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable">$count</span> <span class="token parameter variable">-le</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Count: <span class="token variable">$count</span>"</span>    <span class="token variable"><span class="token punctuation">((</span>count<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-函数"><a href="#3-4-函数" class="headerlink" title="3.4 函数"></a>3.4 函数</h3><p>定义和调用函数：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> <span class="token function-name function">greet</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Hello, <span class="token variable">$1</span>!"</span><span class="token punctuation">}</span>greet <span class="token string">"Bob"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-常用命令"><a href="#4-常用命令" class="headerlink" title="4. 常用命令"></a>4. 常用命令</h2><p>在 Shell 脚本中，可以使用许多常用命令，例如：</p><ul><li><code>echo</code>：输出文本。</li><li><code>read</code>：从用户输入读取数据。</li><li><code>grep</code>：搜索文本。</li><li><code>awk</code>：文本处理工具。</li><li><code>sed</code>：流编辑器。</li></ul><h2 id="5-错误处理"><a href="#5-错误处理" class="headerlink" title="5. 错误处理"></a>5. 错误处理</h2><p>在编写 Shell 脚本时，处理错误是非常重要的。可以使用 <code>$?</code> 检查上一个命令的退出状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">command</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Command failed!"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-脚本调试"><a href="#6-脚本调试" class="headerlink" title="6. 脚本调试"></a>6. 脚本调试</h2><p>在调试脚本时，可以使用 <code>-x</code> 选项运行脚本，以显示每个命令的执行过程：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> <span class="token parameter variable">-x</span> myscript.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h2><p>Shell 脚本编程是 Linux 系统管理的重要技能，通过掌握基本语法、常用命令和编写技巧，您可以有效地自动化任务，提高工作效率。无论是简单的脚本还是复杂的自动化工具，Shell 脚本都能为您提供强大的支持。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://tldp.org/LDP/Bash-Beginners-Guide/html/">Bash Scripting Guide</a></li><li><a href="https://tldp.org/LDP/abs/html/">Advanced Bash-Scripting Guide</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解-Linux-的-Shell-脚本编程。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解-Linux-的-Shell-脚本编程。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解 Linux 的 Shell 脚本编程。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解 Linux 的 Shell 脚本编程。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 系统管理 </tag>
            
            <tag> Shell </tag>
            
            <tag> 脚本编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】网络配置详解</title>
      <link href="/archives/b55fa597.html"/>
      <url>/archives/b55fa597.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在 Linux 系统中，网络配置是确保系统能够正常连接到网络和其他设备的关键。掌握 Linux 的网络配置方法，可以帮助管理员有效管理网络连接、提高系统的可用性和安全性。本文将介绍 Linux 网络配置的基本概念、常用命令以及配置方法。</p><h2 id="1-网络接口"><a href="#1-网络接口" class="headerlink" title="1. 网络接口"></a>1. 网络接口</h2><h3 id="1-1-查看网络接口"><a href="#1-1-查看网络接口" class="headerlink" title="1.1 查看网络接口"></a>1.1 查看网络接口</h3><p>使用 <code>ip</code> 命令查看当前网络接口信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ip</span> addr show<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您将看到类似以下的输出：</p><pre class="line-numbers language-none"><code class="language-none">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000    link/ether 00:1a:2b:3c:4d:5e brd ff:ff:ff:ff:ff:ff    inet 192.168.1.100/24 brd 192.168.1.255 scope global dynamic eth0       valid_lft 86399sec preferred_lft 86399sec<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-启用或禁用网络接口"><a href="#1-2-启用或禁用网络接口" class="headerlink" title="1.2 启用或禁用网络接口"></a>1.2 启用或禁用网络接口</h3><p>使用 <code>ip</code> 命令启用或禁用网络接口：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启用接口</span><span class="token function">sudo</span> <span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> eth0 up<span class="token comment"># 禁用接口</span><span class="token function">sudo</span> <span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> eth0 down<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-配置静态-IP-地址"><a href="#2-配置静态-IP-地址" class="headerlink" title="2. 配置静态 IP 地址"></a>2. 配置静态 IP 地址</h2><h3 id="2-1-编辑网络配置文件"><a href="#2-1-编辑网络配置文件" class="headerlink" title="2.1 编辑网络配置文件"></a>2.1 编辑网络配置文件</h3><p>在大多数 Linux 发行版中，网络配置文件位于 <code>/etc/network/interfaces</code> 或 <code>/etc/sysconfig/network-scripts/ifcfg-eth0</code>。</p><h4 id="Debian-Ubuntu-示例"><a href="#Debian-Ubuntu-示例" class="headerlink" title="Debian/Ubuntu 示例"></a>Debian/Ubuntu 示例</h4><p>编辑 <code>/etc/network/interfaces</code> 文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /etc/network/interfaces<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加以下内容以配置静态 IP 地址：</p><pre class="line-numbers language-none"><code class="language-none">auto eth0iface eth0 inet static    address 192.168.1.100    netmask 255.255.255.0    gateway 192.168.1.1    dns-nameservers 8.8.8.8 8.8.4.4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="RHEL-CentOS-示例"><a href="#RHEL-CentOS-示例" class="headerlink" title="RHEL/CentOS 示例"></a>RHEL/CentOS 示例</h4><p>编辑 <code>/etc/sysconfig/network-scripts/ifcfg-eth0</code> 文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /etc/sysconfig/network-scripts/ifcfg-eth0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加或修改以下内容：</p><pre class="line-numbers language-none"><code class="language-none">DEVICE=eth0BOOTPROTO=noneONBOOT=yesIPADDR=192.168.1.100NETMASK=255.255.255.0GATEWAY=192.168.1.1DNS1=8.8.8.8DNS2=8.8.4.4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-重启网络服务"><a href="#2-2-重启网络服务" class="headerlink" title="2.2 重启网络服务"></a>2.2 重启网络服务</h3><p>在修改配置文件后，重启网络服务以应用更改：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Debian/Ubuntu</span><span class="token function">sudo</span> systemctl restart networking<span class="token comment"># RHEL/CentOS</span><span class="token function">sudo</span> systemctl restart network<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-配置动态-IP-地址（DHCP）"><a href="#3-配置动态-IP-地址（DHCP）" class="headerlink" title="3. 配置动态 IP 地址（DHCP）"></a>3. 配置动态 IP 地址（DHCP）</h2><h3 id="3-1-使用-DHCP-客户端"><a href="#3-1-使用-DHCP-客户端" class="headerlink" title="3.1 使用 DHCP 客户端"></a>3.1 使用 DHCP 客户端</h3><p>在大多数 Linux 发行版中，您可以使用 <code>dhclient</code> 命令获取动态 IP 地址：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> dhclient eth0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-编辑网络配置文件"><a href="#3-2-编辑网络配置文件" class="headerlink" title="3.2 编辑网络配置文件"></a>3.2 编辑网络配置文件</h3><p>如果您希望在启动时自动获取 DHCP 地址，请编辑网络配置文件。</p><h4 id="Debian-Ubuntu-示例-1"><a href="#Debian-Ubuntu-示例-1" class="headerlink" title="Debian/Ubuntu 示例"></a>Debian/Ubuntu 示例</h4><p>编辑 <code>/etc/network/interfaces</code> 文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /etc/network/interfaces<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加以下内容：</p><pre class="line-numbers language-none"><code class="language-none">auto eth0iface eth0 inet dhcp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="RHEL-CentOS-示例-1"><a href="#RHEL-CentOS-示例-1" class="headerlink" title="RHEL/CentOS 示例"></a>RHEL/CentOS 示例</h4><p>编辑 <code>/etc/sysconfig/network-scripts/ifcfg-eth0</code> 文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /etc/sysconfig/network-scripts/ifcfg-eth0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加或修改以下内容：</p><pre class="line-numbers language-none"><code class="language-none">BOOTPROTO=dhcpONBOOT=yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-配置-DNS"><a href="#4-配置-DNS" class="headerlink" title="4. 配置 DNS"></a>4. 配置 DNS</h2><h3 id="4-1-编辑-etc-resolv-conf"><a href="#4-1-编辑-etc-resolv-conf" class="headerlink" title="4.1 编辑 /etc/resolv.conf"></a>4.1 编辑 <code>/etc/resolv.conf</code></h3><p>使用 <code>nano</code> 或其他文本编辑器编辑 <code>/etc/resolv.conf</code> 文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /etc/resolv.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加 DNS 服务器地址：</p><pre class="line-numbers language-none"><code class="language-none">nameserver 8.8.8.8nameserver 8.8.4.4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-2-使用-NetworkManager"><a href="#4-2-使用-NetworkManager" class="headerlink" title="4.2 使用 NetworkManager"></a>4.2 使用 NetworkManager</h3><p>如果您使用 NetworkManager 管理网络，可以通过 <code>nmcli</code> 命令配置 DNS：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmcli con mod <span class="token string">"System eth0"</span> ipv4.dns <span class="token string">"8.8.8.8 8.8.4.4"</span>nmcli con up <span class="token string">"System eth0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="5-测试网络连接"><a href="#5-测试网络连接" class="headerlink" title="5. 测试网络连接"></a>5. 测试网络连接</h2><h3 id="5-1-使用-ping-命令"><a href="#5-1-使用-ping-命令" class="headerlink" title="5.1 使用 ping 命令"></a>5.1 使用 <code>ping</code> 命令</h3><p>使用 <code>ping</code> 命令测试与远程主机的连通性：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ping</span> google.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-2-使用-traceroute-命令"><a href="#5-2-使用-traceroute-命令" class="headerlink" title="5.2 使用 traceroute 命令"></a>5.2 使用 <code>traceroute</code> 命令</h3><p>使用 <code>traceroute</code> 命令查看数据包的路由路径：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">traceroute</span> google.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>Linux 网络配置是系统管理的重要组成部分，通过掌握网络接口的管理、IP 地址的配置、DNS 的设置等，您可以有效地管理 Linux 系统的网络连接，确保系统的正常运行。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://linuxconfig.org/linux-network-configuration">Linux 网络配置指南</a></li><li><a href="https://linuxcommand.org/lc3_man_pages/">Linux 网络命令</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解-Linux-的网络配置。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解-Linux-的网络配置。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解 Linux 的网络配置。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解 Linux 的网络配置。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置 </tag>
            
            <tag> Linux </tag>
            
            <tag> 系统管理 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】用户和权限系统详解</title>
      <link href="/archives/b55fa596.html"/>
      <url>/archives/b55fa596.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>Linux 是一个多用户操作系统，用户和权限管理是确保系统安全和资源合理分配的重要组成部分。理解 Linux 的用户和权限系统，可以帮助管理员有效管理系统资源，保护敏感数据。本文将介绍 Linux 的用户管理、组管理以及权限管理的基本概念和操作方法。</p><h2 id="1-用户管理"><a href="#1-用户管理" class="headerlink" title="1. 用户管理"></a>1. 用户管理</h2><h3 id="1-1-用户概念"><a href="#1-1-用户概念" class="headerlink" title="1.1 用户概念"></a>1.1 用户概念</h3><p>在 Linux 中，用户是指可以登录系统并执行操作的实体。每个用户都有一个唯一的用户名和用户 ID（UID）。系统中的每个用户都可以拥有自己的文件和目录。</p><h3 id="1-2-查看当前用户"><a href="#1-2-查看当前用户" class="headerlink" title="1.2 查看当前用户"></a>1.2 查看当前用户</h3><p>使用 <code>whoami</code> 命令查看当前登录的用户：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">whoami</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-3-添加用户"><a href="#1-3-添加用户" class="headerlink" title="1.3 添加用户"></a>1.3 添加用户</h3><p>使用 <code>useradd</code> 命令添加新用户：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">useradd</span> <span class="token parameter variable">-m</span> newuser  <span class="token comment"># 创建新用户并创建主目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-4-设置用户密码"><a href="#1-4-设置用户密码" class="headerlink" title="1.4 设置用户密码"></a>1.4 设置用户密码</h3><p>使用 <code>passwd</code> 命令设置用户密码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">passwd</span> newuser<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-5-删除用户"><a href="#1-5-删除用户" class="headerlink" title="1.5 删除用户"></a>1.5 删除用户</h3><p>使用 <code>userdel</code> 命令删除用户：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">userdel</span> <span class="token parameter variable">-r</span> newuser  <span class="token comment"># 删除用户及其主目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-组管理"><a href="#2-组管理" class="headerlink" title="2. 组管理"></a>2. 组管理</h2><h3 id="2-1-组概念"><a href="#2-1-组概念" class="headerlink" title="2.1 组概念"></a>2.1 组概念</h3><p>组是用户的集合，允许对多个用户进行统一管理。每个组都有一个组名和组 ID（GID）。用户可以属于一个或多个组。</p><h3 id="2-2-查看当前组"><a href="#2-2-查看当前组" class="headerlink" title="2.2 查看当前组"></a>2.2 查看当前组</h3><p>使用 <code>groups</code> 命令查看当前用户所属的组：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">groups</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3-添加组"><a href="#2-3-添加组" class="headerlink" title="2.3 添加组"></a>2.3 添加组</h3><p>使用 <code>groupadd</code> 命令添加新组：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">groupadd</span> newgroup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-4-将用户添加到组"><a href="#2-4-将用户添加到组" class="headerlink" title="2.4 将用户添加到组"></a>2.4 将用户添加到组</h3><p>使用 <code>usermod</code> 命令将用户添加到组：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">usermod</span> <span class="token parameter variable">-aG</span> newgroup username<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-5-删除组"><a href="#2-5-删除组" class="headerlink" title="2.5 删除组"></a>2.5 删除组</h3><p>使用 <code>groupdel</code> 命令删除组：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">groupdel</span> newgroup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-权限管理"><a href="#3-权限管理" class="headerlink" title="3. 权限管理"></a>3. 权限管理</h2><h3 id="3-1-文件和目录权限"><a href="#3-1-文件和目录权限" class="headerlink" title="3.1 文件和目录权限"></a>3.1 文件和目录权限</h3><p>在 Linux 中，每个文件和目录都有三种基本权限：读取（r）、写入（w）和执行（x）。这些权限可以分配给三类用户：</p><ul><li><strong>文件所有者</strong>（User）</li><li><strong>同组用户</strong>（Group）</li><li><strong>其他用户</strong>（Others）</li></ul><h3 id="3-2-查看文件权限"><a href="#3-2-查看文件权限" class="headerlink" title="3.2 查看文件权限"></a>3.2 查看文件权限</h3><p>使用 <code>ls -l</code> 命令查看文件和目录的权限：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出示例：</p><pre class="line-numbers language-none"><code class="language-none">-rw-r--r-- 1 user group  4096 Feb 26 00:00 file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>第一列表示权限：<code>-rw-r--r--</code><ul><li>第一个字符表示文件类型（<code>-</code> 表示文件，<code>d</code> 表示目录）。</li><li>接下来的三个字符表示所有者的权限（<code>rw-</code> 表示可读和可写）。</li><li>中间三个字符表示同组用户的权限（<code>r--</code> 表示可读）。</li><li>最后三个字符表示其他用户的权限（<code>r--</code> 表示可读）。</li></ul></li></ul><h3 id="3-3-更改文件权限"><a href="#3-3-更改文件权限" class="headerlink" title="3.3 更改文件权限"></a>3.3 更改文件权限</h3><p>使用 <code>chmod</code> 命令更改文件或目录的权限：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">755</span> file.txt  <span class="token comment"># 设置权限为 rwxr-xr-x</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-4-更改文件所有者"><a href="#3-4-更改文件所有者" class="headerlink" title="3.4 更改文件所有者"></a>3.4 更改文件所有者</h3><p>使用 <code>chown</code> 命令更改文件或目录的所有者：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> user:group file.txt  <span class="token comment"># 将文件的所有者和组更改为 user 和 group</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-5-设置特殊权限"><a href="#3-5-设置特殊权限" class="headerlink" title="3.5 设置特殊权限"></a>3.5 设置特殊权限</h3><ul><li><strong>SUID</strong>：设置用户 ID 位，允许用户以文件所有者的身份执行文件。</li><li><strong>SGID</strong>：设置组 ID 位，允许用户以文件所属组的身份执行文件。</li><li><strong>Sticky Bit</strong>：仅允许文件所有者删除文件，通常用于 <code>/tmp</code> 目录。</li></ul><p>设置 SUID 示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> u+s file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>Linux 的用户和权限管理系统是确保系统安全和资源合理分配的重要组成部分。通过掌握用户和组的管理、文件权限的设置，您可以有效地管理 Linux 系统，保护敏感数据。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://linuxcommand.org/lc3_man_pages/useradd1.html">Linux 用户和组管理</a></li><li><a href="https://www.tldp.org/LDP/abs/html/">Linux 权限管理</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解-Linux-的用户和权限系统。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解-Linux-的用户和权限系统。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解 Linux 的用户和权限系统。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解 Linux 的用户和权限系统。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 用户管理 </tag>
            
            <tag> 权限管理 </tag>
            
            <tag> 系统安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】如何扩容已使用的磁盘</title>
      <link href="/archives/b55fa595.html"/>
      <url>/archives/b55fa595.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在服务器运行过程中，磁盘空间可能会逐渐不足，导致系统性能下降或无法正常工作。扩容磁盘是解决这一问题的有效方法。本文将介绍如何在 Linux 服务器上扩容已使用的磁盘，将新挂载的磁盘扩展到之前的磁盘。</p><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>在开始扩容之前，请确保您有以下准备：</p><ul><li>具有 root 权限或 sudo 权限的用户。</li><li>新的磁盘已经物理连接到服务器。</li><li>备份重要数据，以防在操作过程中出现意外。</li></ul><h2 id="2-查看当前磁盘信息"><a href="#2-查看当前磁盘信息" class="headerlink" title="2. 查看当前磁盘信息"></a>2. 查看当前磁盘信息</h2><p>使用 <code>lsblk</code> 命令查看当前磁盘和分区信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsblk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您将看到类似以下的输出：</p><pre class="line-numbers language-none"><code class="language-none">NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTsda      8:0    0   100G  0 disk └─sda1   8:1    0   100G  0 part /sdb      8:16   0   50G   0 disk <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，<code>sda</code> 是主磁盘，<code>sdb</code> 是新挂载的磁盘。</p><h2 id="3-创建新分区"><a href="#3-创建新分区" class="headerlink" title="3. 创建新分区"></a>3. 创建新分区</h2><p>使用 <code>fdisk</code> 或 <code>parted</code> 创建新分区：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">fdisk</span> /dev/sdb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>fdisk</code> 中，您可以使用以下命令：</p><ul><li><code>n</code>：创建新分区。</li><li><code>p</code>：选择主分区。</li><li><code>1</code>：选择分区号。</li><li>按照提示设置分区大小。</li></ul><p>完成后，使用 <code>w</code> 命令保存更改并退出。</p><h2 id="4-格式化新分区"><a href="#4-格式化新分区" class="headerlink" title="4. 格式化新分区"></a>4. 格式化新分区</h2><p>使用 <code>mkfs</code> 命令格式化新分区：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> mkfs.ext4 /dev/sdb1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-挂载新分区"><a href="#5-挂载新分区" class="headerlink" title="5. 挂载新分区"></a>5. 挂载新分区</h2><p>创建挂载点并挂载新分区：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> /mnt/newdisk<span class="token function">sudo</span> <span class="token function">mount</span> /dev/sdb1 /mnt/newdisk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="6-扩展现有文件系统"><a href="#6-扩展现有文件系统" class="headerlink" title="6. 扩展现有文件系统"></a>6. 扩展现有文件系统</h2><h3 id="6-1-使用-LVM（逻辑卷管理）"><a href="#6-1-使用-LVM（逻辑卷管理）" class="headerlink" title="6.1 使用 LVM（逻辑卷管理）"></a>6.1 使用 LVM（逻辑卷管理）</h3><p>如果您使用 LVM 管理磁盘，可以将新磁盘添加到现有卷组中。</p><h4 id="6-1-1-创建物理卷"><a href="#6-1-1-创建物理卷" class="headerlink" title="6.1.1 创建物理卷"></a>6.1.1 创建物理卷</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pvcreate /dev/sdb1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6-1-2-将物理卷添加到卷组"><a href="#6-1-2-将物理卷添加到卷组" class="headerlink" title="6.1.2 将物理卷添加到卷组"></a>6.1.2 将物理卷添加到卷组</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> vgextend myvg /dev/sdb1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6-1-3-扩展逻辑卷"><a href="#6-1-3-扩展逻辑卷" class="headerlink" title="6.1.3 扩展逻辑卷"></a>6.1.3 扩展逻辑卷</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> lvextend <span class="token parameter variable">-l</span> +100%FREE /dev/myvg/mylv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6-1-4-扩展文件系统"><a href="#6-1-4-扩展文件系统" class="headerlink" title="6.1.4 扩展文件系统"></a>6.1.4 扩展文件系统</h4><p>对于 ext4 文件系统，使用以下命令扩展文件系统：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> resize2fs /dev/myvg/mylv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-2-不使用-LVM"><a href="#6-2-不使用-LVM" class="headerlink" title="6.2 不使用 LVM"></a>6.2 不使用 LVM</h3><p>如果不使用 LVM，您需要使用 <code>parted</code> 或 <code>gparted</code> 工具来调整分区大小。</p><h4 id="6-2-1-使用-parted"><a href="#6-2-1-使用-parted" class="headerlink" title="6.2.1 使用 parted"></a>6.2.1 使用 <code>parted</code></h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">parted</span> /dev/sda<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>parted</code> 中，使用以下命令：</p><ul><li><code>resizepart</code>：调整分区大小。</li><li>输入分区号和新大小。</li></ul><p>完成后，使用 <code>resize2fs</code> 扩展文件系统：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> resize2fs /dev/sda1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7-更新-etc-fstab"><a href="#7-更新-etc-fstab" class="headerlink" title="7. 更新 /etc/fstab"></a>7. 更新 <code>/etc/fstab</code></h2><p>如果您希望在系统重启后自动挂载新分区，请编辑 <code>/etc/fstab</code> 文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /etc/fstab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加以下行：</p><pre class="line-numbers language-none"><code class="language-none">/dev/sdb1 /mnt/newdisk ext4 defaults 0 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a>8. 总结</h2><p>通过以上步骤，您可以在 Linux 服务器上成功扩容已使用的磁盘。无论是使用 LVM 还是不使用 LVM，掌握这些操作都能帮助您更好地管理磁盘空间，确保系统的稳定运行。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.sourceware.org/lvm2/">LVM 官方文档</a></li><li><a href="https://linuxcommand.org/lc3_man_pages/mount8.html">Linux 文件系统管理</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解如何在-Linux-服务器上扩容已使用的磁盘。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解如何在-Linux-服务器上扩容已使用的磁盘。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解如何在 Linux 服务器上扩容已使用的磁盘。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解如何在 Linux 服务器上扩容已使用的磁盘。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 系统管理 </tag>
            
            <tag> 磁盘管理 </tag>
            
            <tag> 扩容 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】文件系统操作详解</title>
      <link href="/archives/b55fa594.html"/>
      <url>/archives/b55fa594.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>Linux 文件系统是 Linux 操作系统的核心组成部分，理解和掌握 Linux 文件系统的操作是系统管理的基础。本文将介绍 Linux 文件系统的基本概念、常见文件系统类型以及文件系统的各种操作方法。</p><h2 id="1-文件系统的基本概念"><a href="#1-文件系统的基本概念" class="headerlink" title="1. 文件系统的基本概念"></a>1. 文件系统的基本概念</h2><p>Linux 文件系统是一种用于组织和存储数据的方法，它定义了数据在物理存储介质上的存储方式和访问方法。Linux 采用层次结构的文件系统，从根目录（/）开始，所有的文件和目录都组织在树状结构中。</p><h2 id="2-常见的-Linux-文件系统类型"><a href="#2-常见的-Linux-文件系统类型" class="headerlink" title="2. 常见的 Linux 文件系统类型"></a>2. 常见的 Linux 文件系统类型</h2><h3 id="2-1-ext4"><a href="#2-1-ext4" class="headerlink" title="2.1 ext4"></a>2.1 ext4</h3><p>ext4（Fourth Extended Filesystem）是 Linux 中最常用的文件系统之一，它是 ext3 的改进版本，提供了更好的性能和可靠性。</p><h3 id="2-2-XFS"><a href="#2-2-XFS" class="headerlink" title="2.2 XFS"></a>2.2 XFS</h3><p>XFS 是一种高性能的 64 位日志文件系统，适用于大型文件系统和高吞吐量环境。</p><h3 id="2-3-Btrfs"><a href="#2-3-Btrfs" class="headerlink" title="2.3 Btrfs"></a>2.3 Btrfs</h3><p>Btrfs（B-tree File System）是一种现代的写时复制（Copy-on-Write）文件系统，提供了快照、校验和和集成卷管理等功能。</p><h3 id="2-4-其他文件系统"><a href="#2-4-其他文件系统" class="headerlink" title="2.4 其他文件系统"></a>2.4 其他文件系统</h3><p>Linux 还支持其他文件系统，如 NTFS、FAT32（用于与 Windows 系统交互）、ZFS 等。</p><h2 id="3-磁盘和分区管理"><a href="#3-磁盘和分区管理" class="headerlink" title="3. 磁盘和分区管理"></a>3. 磁盘和分区管理</h2><h3 id="3-1-查看磁盘信息"><a href="#3-1-查看磁盘信息" class="headerlink" title="3.1 查看磁盘信息"></a>3.1 查看磁盘信息</h3><p>使用 <code>fdisk</code> 命令查看磁盘分区信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">fdisk</span> <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 <code>lsblk</code> 命令查看块设备信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsblk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-创建分区"><a href="#3-2-创建分区" class="headerlink" title="3.2 创建分区"></a>3.2 创建分区</h3><p>使用 <code>fdisk</code> 或 <code>parted</code> 创建分区：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">fdisk</span> /dev/sda<span class="token comment"># 或</span><span class="token function">sudo</span> <span class="token function">parted</span> /dev/sda<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-3-格式化分区"><a href="#3-3-格式化分区" class="headerlink" title="3.3 格式化分区"></a>3.3 格式化分区</h3><p>使用 <code>mkfs</code> 命令格式化分区：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建 ext4 文件系统</span><span class="token function">sudo</span> mkfs.ext4 /dev/sda1<span class="token comment"># 创建 XFS 文件系统</span><span class="token function">sudo</span> mkfs.xfs /dev/sda2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-文件系统的挂载和卸载"><a href="#4-文件系统的挂载和卸载" class="headerlink" title="4. 文件系统的挂载和卸载"></a>4. 文件系统的挂载和卸载</h2><h3 id="4-1-挂载文件系统"><a href="#4-1-挂载文件系统" class="headerlink" title="4.1 挂载文件系统"></a>4.1 挂载文件系统</h3><p>使用 <code>mount</code> 命令挂载文件系统：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mount</span> /dev/sda1 /mnt/data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-2-自动挂载配置"><a href="#4-2-自动挂载配置" class="headerlink" title="4.2 自动挂载配置"></a>4.2 自动挂载配置</h3><p>编辑 <code>/etc/fstab</code> 文件以配置系统启动时自动挂载文件系统：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /etc/fstab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加类似以下的条目：</p><pre class="line-numbers language-none"><code class="language-none">/dev/sda1 /mnt/data ext4 defaults 0 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-3-卸载文件系统"><a href="#4-3-卸载文件系统" class="headerlink" title="4.3 卸载文件系统"></a>4.3 卸载文件系统</h3><p>使用 <code>umount</code> 命令卸载文件系统：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">umount</span> /mnt/data<span class="token comment"># 或</span><span class="token function">sudo</span> <span class="token function">umount</span> /dev/sda1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="5-文件系统的检查和修复"><a href="#5-文件系统的检查和修复" class="headerlink" title="5. 文件系统的检查和修复"></a>5. 文件系统的检查和修复</h2><h3 id="5-1-检查文件系统"><a href="#5-1-检查文件系统" class="headerlink" title="5.1 检查文件系统"></a>5.1 检查文件系统</h3><p>使用 <code>fsck</code> 命令检查文件系统：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">fsck</span> /dev/sda1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-2-修复文件系统"><a href="#5-2-修复文件系统" class="headerlink" title="5.2 修复文件系统"></a>5.2 修复文件系统</h3><p>使用 <code>fsck</code> 命令修复文件系统：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">fsck</span> <span class="token parameter variable">-y</span> /dev/sda1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6-磁盘配额管理"><a href="#6-磁盘配额管理" class="headerlink" title="6. 磁盘配额管理"></a>6. 磁盘配额管理</h2><p>磁盘配额用于限制用户或组可以使用的磁盘空间。</p><h3 id="6-1-安装配额工具"><a href="#6-1-安装配额工具" class="headerlink" title="6.1 安装配额工具"></a>6.1 安装配额工具</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">quota</span> <span class="token comment"># Debian/Ubuntu</span><span class="token comment"># 或</span><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token function">quota</span> <span class="token comment"># RHEL/CentOS</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-2-配置-etc-fstab"><a href="#6-2-配置-etc-fstab" class="headerlink" title="6.2 配置 /etc/fstab"></a>6.2 配置 <code>/etc/fstab</code></h3><p>在 <code>/etc/fstab</code> 中，为需要支持配额的文件系统添加适当的选项：</p><pre class="line-numbers language-none"><code class="language-none">/dev/sda1 /home ext4 defaults,usrquota,grpquota 0 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-3-初始化配额"><a href="#6-3-初始化配额" class="headerlink" title="6.3 初始化配额"></a>6.3 初始化配额</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">quotacheck</span> <span class="token parameter variable">-ugm</span> /home<span class="token function">sudo</span> quotaon /home<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-4-设置用户配额"><a href="#6-4-设置用户配额" class="headerlink" title="6.4 设置用户配额"></a>6.4 设置用户配额</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> edquota <span class="token parameter variable">-u</span> username<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7-LVM（逻辑卷管理）"><a href="#7-LVM（逻辑卷管理）" class="headerlink" title="7. LVM（逻辑卷管理）"></a>7. LVM（逻辑卷管理）</h2><p>LVM 允许您在多个物理磁盘上创建逻辑卷，提供更灵活的存储管理。</p><h3 id="7-1-创建物理卷"><a href="#7-1-创建物理卷" class="headerlink" title="7.1 创建物理卷"></a>7.1 创建物理卷</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pvcreate /dev/sda1 /dev/sdb1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-2-创建卷组"><a href="#7-2-创建卷组" class="headerlink" title="7.2 创建卷组"></a>7.2 创建卷组</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> vgcreate myvg /dev/sda1 /dev/sdb1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-3-创建逻辑卷"><a href="#7-3-创建逻辑卷" class="headerlink" title="7.3 创建逻辑卷"></a>7.3 创建逻辑卷</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> lvcreate <span class="token parameter variable">-L</span> 10G <span class="token parameter variable">-n</span> mylv myvg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-4-格式化逻辑卷"><a href="#7-4-格式化逻辑卷" class="headerlink" title="7.4 格式化逻辑卷"></a>7.4 格式化逻辑卷</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> mkfs.ext4 /dev/myvg/mylv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-5-挂载逻辑卷"><a href="#7-5-挂载逻辑卷" class="headerlink" title="7.5 挂载逻辑卷"></a>7.5 挂载逻辑卷</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mount</span> /dev/myvg/mylv /mnt/data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="8-文件系统的备份和恢复"><a href="#8-文件系统的备份和恢复" class="headerlink" title="8. 文件系统的备份和恢复"></a>8. 文件系统的备份和恢复</h2><h3 id="8-1-使用-tar-备份"><a href="#8-1-使用-tar-备份" class="headerlink" title="8.1 使用 tar 备份"></a>8.1 使用 <code>tar</code> 备份</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">tar</span> <span class="token parameter variable">-czvf</span> backup.tar.gz /mnt/data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-2-使用-rsync-同步文件"><a href="#8-2-使用-rsync-同步文件" class="headerlink" title="8.2 使用 rsync 同步文件"></a>8.2 使用 <code>rsync</code> 同步文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rsync</span> <span class="token parameter variable">-avz</span> /mnt/data/ /mnt/backup/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-3-使用-dd-创建镜像"><a href="#8-3-使用-dd-创建镜像" class="headerlink" title="8.3 使用 dd 创建镜像"></a>8.3 使用 <code>dd</code> 创建镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/sda1 <span class="token assign-left variable">of</span><span class="token operator">=</span>/path/to/backup.img <span class="token assign-left variable">bs</span><span class="token operator">=</span>4M<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="9-总结"><a href="#9-总结" class="headerlink" title="9. 总结"></a>9. 总结</h2><p>Linux 文件系统操作是系统管理的基础，通过掌握这些操作，您可以更好地管理存储资源、提高系统性能和数据安全性。从基本的挂载卸载到高级的 LVM 管理，这些工具和技术将帮助您更有效地管理 Linux 系统。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://refspecs.linuxfoundation.org/FHS_3.0/fhs-3.0.html">Linux Filesystem Hierarchy Standard</a></li><li><a href="https://ext4.wiki.kernel.org/index.php/Main_Page">ext4 Wiki</a></li><li><a href="https://www.sourceware.org/lvm2/">LVM 官方文档</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解-Linux-文件系统操作。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解-Linux-文件系统操作。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解 Linux 文件系统操作。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解 Linux 文件系统操作。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 系统管理 </tag>
            
            <tag> 磁盘管理 </tag>
            
            <tag> 文件系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】基础命令介绍</title>
      <link href="/archives/b55fa593.html"/>
      <url>/archives/b55fa593.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>Linux 是一个强大的操作系统，广泛应用于服务器、嵌入式系统和个人计算机。掌握 Linux 的基础命令是使用和管理 Linux 系统的关键。本文将介绍一些常用的 Linux 基础命令及其用法。</p><h2 id="1-文件和目录操作命令"><a href="#1-文件和目录操作命令" class="headerlink" title="1. 文件和目录操作命令"></a>1. 文件和目录操作命令</h2><h3 id="1-1-ls"><a href="#1-1-ls" class="headerlink" title="1.1 ls"></a>1.1 <code>ls</code></h3><p>列出当前目录下的文件和目录。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span>          <span class="token comment"># 列出文件</span><span class="token function">ls</span> <span class="token parameter variable">-l</span>       <span class="token comment"># 详细列表</span><span class="token function">ls</span> <span class="token parameter variable">-a</span>       <span class="token comment"># 包括隐藏文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-2-cd"><a href="#1-2-cd" class="headerlink" title="1.2 cd"></a>1.2 <code>cd</code></h3><p>切换目录。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /path/to/directory  <span class="token comment"># 切换到指定目录</span><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>                   <span class="token comment"># 返回上一级目录</span><span class="token builtin class-name">cd</span> ~                    <span class="token comment"># 切换到用户主目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-3-pwd"><a href="#1-3-pwd" class="headerlink" title="1.3 pwd"></a>1.3 <code>pwd</code></h3><p>显示当前工作目录的完整路径。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">pwd</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-4-mkdir"><a href="#1-4-mkdir" class="headerlink" title="1.4 mkdir"></a>1.4 <code>mkdir</code></h3><p>创建新目录。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> new_directory  <span class="token comment"># 创建名为 new_directory 的目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-5-rmdir"><a href="#1-5-rmdir" class="headerlink" title="1.5 rmdir"></a>1.5 <code>rmdir</code></h3><p>删除空目录。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rmdir</span> empty_directory  <span class="token comment"># 删除名为 empty_directory 的空目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-6-rm"><a href="#1-6-rm" class="headerlink" title="1.6 rm"></a>1.6 <code>rm</code></h3><p>删除文件或目录。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> file.txt               <span class="token comment"># 删除文件</span><span class="token function">rm</span> <span class="token parameter variable">-r</span> directory_name      <span class="token comment"># 递归删除目录及其内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-7-cp"><a href="#1-7-cp" class="headerlink" title="1.7 cp"></a>1.7 <code>cp</code></h3><p>复制文件或目录。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> source.txt destination.txt          <span class="token comment"># 复制文件</span><span class="token function">cp</span> <span class="token parameter variable">-r</span> source_directory destination_directory  <span class="token comment"># 递归复制目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-8-mv"><a href="#1-8-mv" class="headerlink" title="1.8 mv"></a>1.8 <code>mv</code></h3><p>移动或重命名文件或目录。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> old_name.txt new_name.txt  <span class="token comment"># 重命名文件</span><span class="token function">mv</span> file.txt /path/to/directory <span class="token comment"># 移动文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-文件查看命令"><a href="#2-文件查看命令" class="headerlink" title="2. 文件查看命令"></a>2. 文件查看命令</h2><h3 id="2-1-cat"><a href="#2-1-cat" class="headerlink" title="2.1 cat"></a>2.1 <code>cat</code></h3><p>查看文件内容。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2-less"><a href="#2-2-less" class="headerlink" title="2.2 less"></a>2.2 <code>less</code></h3><p>分页查看文件内容。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">less</span> file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3-head"><a href="#2-3-head" class="headerlink" title="2.3 head"></a>2.3 <code>head</code></h3><p>查看文件的前几行。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">10</span> file.txt  <span class="token comment"># 查看前 10 行</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-4-tail"><a href="#2-4-tail" class="headerlink" title="2.4 tail"></a>2.4 <code>tail</code></h3><p>查看文件的后几行。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tail</span> <span class="token parameter variable">-n</span> <span class="token number">10</span> file.txt  <span class="token comment"># 查看后 10 行</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-系统管理命令"><a href="#3-系统管理命令" class="headerlink" title="3. 系统管理命令"></a>3. 系统管理命令</h2><h3 id="3-1-top"><a href="#3-1-top" class="headerlink" title="3.1 top"></a>3.1 <code>top</code></h3><p>实时显示系统进程和资源使用情况。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">top</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-ps"><a href="#3-2-ps" class="headerlink" title="3.2 ps"></a>3.2 <code>ps</code></h3><p>查看当前运行的进程。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux  <span class="token comment"># 显示所有进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-3-kill"><a href="#3-3-kill" class="headerlink" title="3.3 kill"></a>3.3 <code>kill</code></h3><p>终止进程。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">kill</span> PID  <span class="token comment"># 终止指定 PID 的进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-4-df"><a href="#3-4-df" class="headerlink" title="3.4 df"></a>3.4 <code>df</code></h3><p>查看文件系统的磁盘空间使用情况。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">df</span> <span class="token parameter variable">-h</span>  <span class="token comment"># 以人类可读的格式显示</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-5-du"><a href="#3-5-du" class="headerlink" title="3.5 du"></a>3.5 <code>du</code></h3><p>查看目录或文件的磁盘使用情况。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">du</span> <span class="token parameter variable">-sh</span> /path/to/directory  <span class="token comment"># 显示目录的总大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-网络命令"><a href="#4-网络命令" class="headerlink" title="4. 网络命令"></a>4. 网络命令</h2><h3 id="4-1-ping"><a href="#4-1-ping" class="headerlink" title="4.1 ping"></a>4.1 <code>ping</code></h3><p>测试与远程主机的连通性。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ping</span> example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-2-ifconfig"><a href="#4-2-ifconfig" class="headerlink" title="4.2 ifconfig"></a>4.2 <code>ifconfig</code></h3><p>查看和配置网络接口（在某些系统中使用 <code>ip a</code>）。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ifconfig</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-3-curl"><a href="#4-3-curl" class="headerlink" title="4.3 curl"></a>4.3 <code>curl</code></h3><p>从 URL 获取数据。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://example.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-权限管理命令"><a href="#5-权限管理命令" class="headerlink" title="5. 权限管理命令"></a>5. 权限管理命令</h2><h3 id="5-1-chmod"><a href="#5-1-chmod" class="headerlink" title="5.1 chmod"></a>5.1 <code>chmod</code></h3><p>更改文件或目录的权限。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">755</span> file.txt  <span class="token comment"># 设置文件权限为 rwxr-xr-x</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-2-chown"><a href="#5-2-chown" class="headerlink" title="5.2 chown"></a>5.2 <code>chown</code></h3><p>更改文件或目录的所有者。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> user:group file.txt  <span class="token comment"># 将文件的所有者和组更改为 user 和 group</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>掌握 Linux 的基础命令是使用和管理 Linux 系统的基础。通过熟悉这些命令，您可以更高效地进行文件管理、系统监控和网络操作。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://linuxcommand.org/">Linux 命令行教程</a></li><li><a href="https://www.kernel.org/doc/html/latest/">Linux 官方文档</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解-Linux-的基础命令。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解-Linux-的基础命令。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解 Linux 的基础命令。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解 Linux 的基础命令。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 命令行 </tag>
            
            <tag> 基础 </tag>
            
            <tag> 系统管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Redis】发布/订阅（Pub/Sub）机制详解</title>
      <link href="/archives/b55fa582.html"/>
      <url>/archives/b55fa582.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>Redis 提供了一种强大的消息传递机制，称为发布/订阅（Pub/Sub）。这种机制允许消息的发送者（发布者）和接收者（订阅者）之间进行解耦，使得系统的各个部分可以独立地进行通信。本文将介绍 Redis 的发布/订阅机制及其使用方法。</p><h2 id="1-发布-订阅的基本概念"><a href="#1-发布-订阅的基本概念" class="headerlink" title="1. 发布/订阅的基本概念"></a>1. 发布/订阅的基本概念</h2><p>在 Redis 中，发布/订阅机制的基本概念如下：</p><ul><li><strong>发布者</strong>：发送消息的客户端。</li><li><strong>订阅者</strong>：接收消息的客户端。</li><li><strong>频道</strong>：消息的传递通道，发布者将消息发送到特定的频道，订阅者通过订阅频道来接收消息。</li></ul><h2 id="2-Redis-发布-订阅的基本操作"><a href="#2-Redis-发布-订阅的基本操作" class="headerlink" title="2. Redis 发布/订阅的基本操作"></a>2. Redis 发布/订阅的基本操作</h2><h3 id="2-1-订阅频道"><a href="#2-1-订阅频道" class="headerlink" title="2.1 订阅频道"></a>2.1 订阅频道</h3><p>使用 <code>SUBSCRIBE</code> 命令订阅一个或多个频道：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">SUBSCRIBE channel1 channel2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2-发布消息"><a href="#2-2-发布消息" class="headerlink" title="2.2 发布消息"></a>2.2 发布消息</h3><p>使用 <code>PUBLISH</code> 命令向指定频道发布消息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PUBLISH channel1 <span class="token string">"Hello, Redis!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3-取消订阅"><a href="#2-3-取消订阅" class="headerlink" title="2.3 取消订阅"></a>2.3 取消订阅</h3><p>使用 <code>UNSUBSCRIBE</code> 命令取消对频道的订阅：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">UNSUBSCRIBE channel1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-4-示例代码"><a href="#2-4-示例代码" class="headerlink" title="2.4 示例代码"></a>2.4 示例代码</h3><p>以下是一个使用 Redis 发布/订阅的示例：</p><h4 id="发布者代码"><a href="#发布者代码" class="headerlink" title="发布者代码"></a>发布者代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisPublisher</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 发布消息</span>        jedis<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">"channel1"</span><span class="token punctuation">,</span> <span class="token string">"Hello, Redis!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 关闭连接</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="订阅者代码"><a href="#订阅者代码" class="headerlink" title="订阅者代码"></a>订阅者代码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">JedisPubSub</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisSubscriber</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建一个 JedisPubSub 对象</span>        <span class="token class-name">JedisPubSub</span> jedisPubSub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPubSub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> channel<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Received message: "</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">" from channel: "</span> <span class="token operator">+</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment">// 订阅频道</span>        jedis<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>jedisPubSub<span class="token punctuation">,</span> <span class="token string">"channel1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 关闭连接</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-使用场景"><a href="#3-使用场景" class="headerlink" title="3. 使用场景"></a>3. 使用场景</h2><p>Redis 的发布/订阅机制适用于以下场景：</p><ol><li><strong>实时消息推送</strong>：如聊天应用、实时通知等。</li><li><strong>事件驱动架构</strong>：通过事件通知系统的其他部分进行处理。</li><li><strong>日志收集</strong>：将日志信息发布到特定频道，供多个订阅者处理。</li></ol><h2 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a>4. 注意事项</h2><ol><li><strong>消息丢失</strong>：Redis 的发布/订阅机制不保证消息的持久性，消息在发送后如果没有被订阅者接收，将会丢失。</li><li><strong>性能考虑</strong>：在高并发场景下，发布/订阅可能会对 Redis 性能产生影响，需合理设计。</li><li><strong>频道命名</strong>：频道的命名应具有一定的语义，以便于管理和维护。</li></ol><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>Redis 的发布/订阅机制提供了一种简单而有效的消息传递方式，能够实现系统各部分之间的解耦。通过使用 Redis 的发布/订阅功能，开发者可以轻松实现实时消息推送和事件驱动架构。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://redis.io/documentation">Redis 官方文档</a></li><li><a href="https://redis.io/topics/pubsub">Redis 发布/订阅机制</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解-Redis-的发布-订阅机制。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解-Redis-的发布-订阅机制。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解 Redis 的发布/订阅机制。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解 Redis 的发布/订阅机制。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Redis </tag>
            
            <tag> 发布/订阅 </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Redis】事务机制详解</title>
      <link href="/archives/b55fa582.html"/>
      <url>/archives/b55fa582.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在数据库操作中，事务是确保数据一致性和完整性的重要机制。Redis 作为一个高性能的内存数据库，也提供了事务机制。虽然 Redis 的事务与传统关系型数据库的事务有所不同，但它仍然能够保证一组操作的原子性。本文将介绍 Redis 的事务机制及其使用方法。</p><h2 id="1-Redis-事务的基本概念"><a href="#1-Redis-事务的基本概念" class="headerlink" title="1. Redis 事务的基本概念"></a>1. Redis 事务的基本概念</h2><p>Redis 事务是通过 <code>MULTI</code>、<code>EXEC</code>、<code>DISCARD</code> 和 <code>WATCH</code> 命令来实现的。事务中的命令会被排队执行，直到调用 <code>EXEC</code> 命令时才会被执行。Redis 事务的特点包括：</p><ul><li><strong>原子性</strong>：事务中的所有命令要么全部执行成功，要么全部不执行。</li><li><strong>不支持回滚</strong>：一旦事务中的命令被执行，就无法回滚。</li><li><strong>命令排队</strong>：在事务执行之前，所有命令会被排队，直到 <code>EXEC</code> 被调用。</li></ul><h2 id="2-Redis-事务的基本操作"><a href="#2-Redis-事务的基本操作" class="headerlink" title="2. Redis 事务的基本操作"></a>2. Redis 事务的基本操作</h2><h3 id="2-1-开始事务"><a href="#2-1-开始事务" class="headerlink" title="2.1 开始事务"></a>2.1 开始事务</h3><p>使用 <code>MULTI</code> 命令开始一个事务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">MULTI<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2-添加命令到事务"><a href="#2-2-添加命令到事务" class="headerlink" title="2.2 添加命令到事务"></a>2.2 添加命令到事务</h3><p>在事务中添加命令，命令会被排队而不立即执行。例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">SET key1 value1SET key2 value2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-3-执行事务"><a href="#2-3-执行事务" class="headerlink" title="2.3 执行事务"></a>2.3 执行事务</h3><p>使用 <code>EXEC</code> 命令执行事务中的所有命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">EXEC<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-4-取消事务"><a href="#2-4-取消事务" class="headerlink" title="2.4 取消事务"></a>2.4 取消事务</h3><p>如果需要取消事务，可以使用 <code>DISCARD</code> 命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">DISCARD<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-5-示例代码"><a href="#2-5-示例代码" class="headerlink" title="2.5 示例代码"></a>2.5 示例代码</h3><p>以下是一个使用 Redis 事务的示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisTransactionExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 开始事务</span>        jedis<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 添加命令到事务</span>        jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 执行事务</span>        jedis<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 关闭连接</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-使用-WATCH-命令实现乐观锁"><a href="#3-使用-WATCH-命令实现乐观锁" class="headerlink" title="3. 使用 WATCH 命令实现乐观锁"></a>3. 使用 WATCH 命令实现乐观锁</h2><p>Redis 还提供了 <code>WATCH</code> 命令，用于实现乐观锁。在执行事务之前，可以使用 <code>WATCH</code> 命令监视一个或多个键。如果在事务执行之前被监视的键被修改，事务将不会执行。</p><h3 id="3-1-示例代码"><a href="#3-1-示例代码" class="headerlink" title="3.1 示例代码"></a>3.1 示例代码</h3><p>以下是一个使用 <code>WATCH</code> 命令的示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisWatchExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 监视键</span>        jedis<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 开始事务</span>        jedis<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 添加命令到事务</span>        jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 执行事务</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务执行失败，key1 被修改"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"事务执行成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment">// 关闭连接</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a>4. 注意事项</h2><ol><li><strong>不支持回滚</strong>：Redis 事务一旦执行，无法回滚，因此在设计时要谨慎。</li><li><strong>性能考虑</strong>：虽然 Redis 事务提供了原子性，但在高并发场景下，使用 <code>WATCH</code> 可能会影响性能。</li><li><strong>命令排队</strong>：在事务中，所有命令会被排队，直到 <code>EXEC</code> 被调用，因此要注意命令的顺序。</li></ol><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>Redis 提供了简单而有效的事务机制，能够保证一组操作的原子性。通过使用 <code>MULTI</code>、<code>EXEC</code> 和 <code>WATCH</code> 命令，开发者可以在 Redis 中实现复杂的业务逻辑。合理使用 Redis 事务可以提高数据的一致性和完整性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://redis.io/documentation">Redis 官方文档</a></li><li><a href="https://redis.io/topics/transactions">Redis 事务机制</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解-Redis-的事务机制。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解-Redis-的事务机制。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解 Redis 的事务机制。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解 Redis 的事务机制。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Redis </tag>
            
            <tag> 事务 </tag>
            
            <tag> 数据一致性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Redis】持久化方式详解</title>
      <link href="/archives/b55fa581.html"/>
      <url>/archives/b55fa581.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>Redis 是一个高性能的内存数据库，广泛用于缓存和数据存储。虽然 Redis 的数据存储在内存中，但在某些情况下，我们需要将数据持久化到磁盘，以防止数据丢失。Redis 提供了多种持久化方式，本文将详细介绍 Redis 的持久化机制及其优缺点。</p><h2 id="1-Redis-的持久化方式"><a href="#1-Redis-的持久化方式" class="headerlink" title="1. Redis 的持久化方式"></a>1. Redis 的持久化方式</h2><p>Redis 主要提供两种持久化方式：RDB（快照）和 AOF（追加文件）。这两种方式可以单独使用，也可以结合使用。</p><h3 id="1-1-RDB（Redis-DataBase）"><a href="#1-1-RDB（Redis-DataBase）" class="headerlink" title="1.1 RDB（Redis DataBase）"></a>1.1 RDB（Redis DataBase）</h3><p>RDB 是 Redis 的默认持久化方式，它通过在指定的时间间隔内生成数据的快照来实现持久化。RDB 文件是一个二进制文件，包含了 Redis 数据库的完整数据。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li><strong>性能高</strong>：RDB 在生成快照时，Redis 可以继续处理其他请求，因此对性能影响较小。</li><li><strong>数据恢复快</strong>：RDB 文件是一个完整的快照，恢复数据时只需加载这个文件即可。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li><strong>数据丢失风险</strong>：如果 Redis 在快照生成之间崩溃，可能会丢失最近的写入数据。</li><li><strong>持久化时间长</strong>：在数据量较大时，生成 RDB 文件可能需要较长时间，期间会影响性能。</li></ul><h4 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h4><p>在 <code>redis.conf</code> 配置文件中，可以通过以下配置来设置 RDB 的持久化策略：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">save 900 1   # 900秒内至少有1个key发生变化save 300 10  # 300秒内至少有10个key发生变化save 60 10000 # 60秒内至少有10000个key发生变化<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-2-AOF（Append-Only-File）"><a href="#1-2-AOF（Append-Only-File）" class="headerlink" title="1.2 AOF（Append Only File）"></a>1.2 AOF（Append Only File）</h3><p>AOF 是 Redis 的另一种持久化方式，它通过记录每个写操作来实现持久化。每当执行写命令时，Redis 会将该命令追加到 AOF 文件中。</p><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul><li><strong>数据安全性高</strong>：AOF 可以配置为每次写操作后立即同步到磁盘，最大限度地减少数据丢失。</li><li><strong>可读性强</strong>：AOF 文件是一个文本文件，可以通过简单的文本编辑器查看和修改。</li></ul><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul><li><strong>性能开销大</strong>：由于每次写操作都需要追加到 AOF 文件，可能会对性能产生影响。</li><li><strong>文件体积大</strong>：AOF 文件可能会随着时间的推移而变得非常大，影响加载速度。</li></ul><h4 id="配置示例-1"><a href="#配置示例-1" class="headerlink" title="配置示例"></a>配置示例</h4><p>在 <code>redis.conf</code> 配置文件中，可以通过以下配置来设置 AOF 的持久化策略：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">appendonly yesappendfsync always   # 每次写操作后立即同步appendfsync everysec # 每秒同步一次appendfsync no      # 不同步，依赖操作系统<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-RDB-和-AOF-的结合使用"><a href="#2-RDB-和-AOF-的结合使用" class="headerlink" title="2. RDB 和 AOF 的结合使用"></a>2. RDB 和 AOF 的结合使用</h2><p>Redis 允许同时使用 RDB 和 AOF 持久化方式。这样可以在享受 RDB 快照性能的同时，利用 AOF 的高数据安全性。Redis 会在启动时优先加载 AOF 文件，如果 AOF 文件损坏，则会加载 RDB 文件。</p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>Redis 提供了灵活的持久化机制，用户可以根据业务需求选择合适的持久化方式。RDB 适合对性能要求较高的场景，而 AOF 则适合对数据安全性要求较高的场景。结合使用 RDB 和 AOF，可以在性能和数据安全性之间取得平衡。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://redis.io/documentation">Redis 官方文档</a></li><li><a href="https://redis.io/topics/persistence">Redis 持久化机制</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解-Redis-的持久化方式。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解-Redis-的持久化方式。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解 Redis 的持久化方式。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解 Redis 的持久化方式。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Redis </tag>
            
            <tag> 持久化 </tag>
            
            <tag> 数据存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring Boot】使用 AOP 实现分布式锁注解</title>
      <link href="/archives/b55fa582.html"/>
      <url>/archives/b55fa582.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在分布式系统中，使用分布式锁可以有效地防止多个服务实例同时访问共享资源。为了简化分布式锁的使用，我们可以通过自定义注解和 AOP（面向切面编程）来实现分布式锁的功能。本文将介绍如何使用 AOP 实现分布式锁注解。</p><h2 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h2><p>确保在 <code>pom.xml</code> 中添加 Redis 和 AOP 的相关依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-创建分布式锁注解"><a href="#2-创建分布式锁注解" class="headerlink" title="2. 创建分布式锁注解"></a>2. 创建分布式锁注解</h2><p>首先，我们需要定义一个自定义注解 <code>@RedisLock</code>，用于标记需要加锁的方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">RedisLock</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 锁的键</span>    <span class="token keyword">long</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 锁的超时时间</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-实现-AOP-切面"><a href="#3-实现-AOP-切面" class="headerlink" title="3. 实现 AOP 切面"></a>3. 实现 AOP 切面</h2><p>接下来，我们需要创建一个 AOP 切面，用于处理带有 <code>@RedisLock</code> 注解的方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">ProceedingJoinPoint</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Around</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Aspect</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">StringRedisTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisLockAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"@annotation(redisLock)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">RedisLock</span> redisLock<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> key <span class="token operator">=</span> redisLock<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 锁的过期时间</span>        <span class="token keyword">long</span> timeout <span class="token operator">=</span> redisLock<span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 尝试获取锁</span>        <span class="token class-name">Boolean</span> success <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>success <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> success<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment">// 执行目标方法</span>                <span class="token keyword">return</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token comment">// 释放锁</span>                <span class="token class-name">String</span> currentValue <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"获取锁失败，任务正在被其他实例执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-使用分布式锁注解"><a href="#4-使用分布式锁注解" class="headerlink" title="4. 使用分布式锁注解"></a>4. 使用分布式锁注解</h2><p>现在，我们可以在需要加锁的方法上使用 <code>@RedisLock</code> 注解。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RedisLock</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">"lock:myTask"</span><span class="token punctuation">,</span> timeout <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">performTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 执行需要加锁的业务逻辑</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行任务..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 模拟任务执行</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5. 注意事项"></a>5. 注意事项</h2><ol><li><strong>锁的过期时间</strong>：在获取锁时设置合理的过期时间，防止因业务逻辑执行时间过长而导致锁失效。</li><li><strong>锁的唯一性</strong>：确保锁的键具有唯一性，以避免不同业务逻辑之间的锁冲突。</li><li><strong>异常处理</strong>：在释放锁时，确保只有持有锁的客户端才能释放锁，避免误释放。</li><li><strong>可重入锁</strong>：如果需要支持可重入锁，可以在 <code>RedisLockAspect</code> 中维护锁的计数器。</li></ol><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>通过使用 AOP 和自定义注解，我们可以轻松实现分布式锁的功能，简化锁的使用。合理的锁机制可以提高系统的稳定性和数据一致性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://redis.io/documentation">Redis Documentation</a></li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/">Spring Boot Documentation</a></li><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#aop">Spring AOP Documentation</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和实现使用-AOP-的分布式锁注解。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和实现使用-AOP-的分布式锁注解。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和实现使用 AOP 的分布式锁注解。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和实现使用 AOP 的分布式锁注解。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Redis </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> AOP </tag>
            
            <tag> 分布式锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring Boot】使用 Redis 实现分布式锁</title>
      <link href="/archives/b55fa581.html"/>
      <url>/archives/b55fa581.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在分布式系统中，多个服务实例可能会同时访问共享资源，这可能导致数据不一致或资源竞争的问题。为了解决这个问题，我们可以使用分布式锁来确保同一时间只有一个实例可以访问共享资源。Redis 是一个高性能的内存数据库，常被用作实现分布式锁的工具。本文将介绍如何使用 Redis 实现分布式锁。</p><h2 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h2><p>首先，确保在 <code>pom.xml</code> 中添加 Redis 的相关依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-Redis-分布式锁的基本原理"><a href="#2-Redis-分布式锁的基本原理" class="headerlink" title="2. Redis 分布式锁的基本原理"></a>2. Redis 分布式锁的基本原理</h2><p>Redis 分布式锁的基本原理是使用 Redis 的 <code>SETNX</code> 命令（SET if Not eXists）来实现锁的获取。具体步骤如下：</p><ol><li>客户端尝试在 Redis 中设置一个锁的键（如 <code>lock:key</code>），并设置一个过期时间。</li><li>如果设置成功，表示获取锁成功；如果设置失败，表示锁已被其他客户端持有。</li><li>客户端在完成操作后，删除锁的键，释放锁。</li></ol><h2 id="3-实现分布式锁"><a href="#3-实现分布式锁" class="headerlink" title="3. 实现分布式锁"></a>3. 实现分布式锁</h2><h3 id="3-1-创建-RedisLock-类"><a href="#3-1-创建-RedisLock-类" class="headerlink" title="3.1 创建 RedisLock 类"></a>3.1 创建 RedisLock 类</h3><p>我们可以创建一个 <code>RedisLock</code> 类来封装分布式锁的逻辑：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">StringRedisTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisLock</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> redisTemplate<span class="token punctuation">;</span>    <span class="token comment">// 获取锁</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Boolean</span> success <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> success <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> success<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 释放锁</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> currentValue <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-使用分布式锁"><a href="#3-2-使用分布式锁" class="headerlink" title="3.2 使用分布式锁"></a>3.2 使用分布式锁</h3><p>在需要使用分布式锁的业务逻辑中，我们可以使用 <code>RedisLock</code> 类来获取和释放锁。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RedisLock</span> redisLock<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">performTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> lockKey <span class="token operator">=</span> <span class="token string">"lock:myTask"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> lockValue <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 锁的过期时间</span>        <span class="token keyword">long</span> timeout <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 锁的超时时间</span>        <span class="token comment">// 尝试获取锁</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>redisLock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> lockValue<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment">// 执行需要加锁的业务逻辑</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行任务..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 模拟任务执行</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token comment">// 释放锁</span>                redisLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> lockValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取锁失败，任务正在被其他实例执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a>4. 注意事项</h2><ol><li><strong>锁的过期时间</strong>：在获取锁时设置合理的过期时间，防止因业务逻辑执行时间过长而导致锁失效。</li><li><strong>锁的唯一性</strong>：确保锁的键具有唯一性，以避免不同业务逻辑之间的锁冲突。</li><li><strong>异常处理</strong>：在释放锁时，确保只有持有锁的客户端才能释放锁，避免误释放。</li><li><strong>可重入锁</strong>：如果需要支持可重入锁，可以在 <code>RedisLock</code> 中维护锁的计数器。</li></ol><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>通过使用 Redis，我们可以轻松实现分布式锁，确保在分布式系统中对共享资源的安全访问。合理的锁机制可以提高系统的稳定性和数据一致性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://redis.io/documentation">Redis Documentation</a></li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/">Spring Boot Documentation</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和实现-Redis-分布式锁。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和实现-Redis-分布式锁。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和实现 Redis 分布式锁。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和实现 Redis 分布式锁。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Redis </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 分布式锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Redis】主从复制机制详解</title>
      <link href="/archives/b55fa583.html"/>
      <url>/archives/b55fa583.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>Redis 是一个高性能的内存数据库，广泛用于缓存和数据存储。为了提高数据的可用性和扩展性，Redis 提供了主从复制（Master-Slave Replication）机制。通过主从复制，数据可以在多个 Redis 实例之间进行同步，从而实现数据的冗余备份和负载均衡。本文将详细介绍 Redis 的主从复制机制及其配置方法。</p><h2 id="1-主从复制的基本概念"><a href="#1-主从复制的基本概念" class="headerlink" title="1. 主从复制的基本概念"></a>1. 主从复制的基本概念</h2><p>在 Redis 中，主从复制是指一个 Redis 实例（主节点）将数据复制到一个或多个 Redis 实例（从节点）。主节点负责处理写操作，而从节点则负责处理读操作。主从复制的主要特点包括：</p><ul><li><strong>数据同步</strong>：从节点会定期从主节点获取数据更新，保持数据一致性。</li><li><strong>读写分离</strong>：通过将读请求分发到从节点，可以减轻主节点的负担，提高系统的性能。</li><li><strong>高可用性</strong>：在主节点出现故障时，可以通过从节点快速切换，保证系统的可用性。</li></ul><h2 id="2-主从复制的工作原理"><a href="#2-主从复制的工作原理" class="headerlink" title="2. 主从复制的工作原理"></a>2. 主从复制的工作原理</h2><p>主从复制的工作原理如下：</p><ol><li><strong>配置主从关系</strong>：通过配置从节点连接到主节点，建立主从关系。</li><li><strong>数据同步</strong>：从节点在连接到主节点时，会发送一个 SYNC 命令，主节点会将当前的数据快照（RDB 文件）发送给从节点。</li><li><strong>增量复制</strong>：在初始数据同步完成后，主节点会将后续的写操作以增量的方式发送给从节点，确保从节点的数据与主节点保持一致。</li><li><strong>故障转移</strong>：如果主节点出现故障，可以将从节点提升为新的主节点，继续提供服务。</li></ol><h2 id="3-配置主从复制"><a href="#3-配置主从复制" class="headerlink" title="3. 配置主从复制"></a>3. 配置主从复制</h2><h3 id="3-1-配置主节点"><a href="#3-1-配置主节点" class="headerlink" title="3.1 配置主节点"></a>3.1 配置主节点</h3><p>在主节点的 <code>redis.conf</code> 配置文件中，确保以下配置项：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># 允许主节点接受写请求protected-mode no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-2-配置从节点"><a href="#3-2-配置从节点" class="headerlink" title="3.2 配置从节点"></a>3.2 配置从节点</h3><p>在从节点的 <code>redis.conf</code> 配置文件中，添加以下配置项以指定主节点的地址：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># 指定主节点的 IP 和端口replicaof &lt;master-ip&gt; &lt;master-port&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>例如，如果主节点的 IP 为 <code>192.168.1.100</code>，端口为 <code>6379</code>，则配置如下：</p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">replicaof 192.168.1.100 6379<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-3-启动-Redis-实例"><a href="#3-3-启动-Redis-实例" class="headerlink" title="3.3 启动 Redis 实例"></a>3.3 启动 Redis 实例</h3><p>启动主节点和从节点的 Redis 实例，确保从节点能够成功连接到主节点。</p><h3 id="3-4-验证主从复制"><a href="#3-4-验证主从复制" class="headerlink" title="3.4 验证主从复制"></a>3.4 验证主从复制</h3><p>在主节点上执行写操作，例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli <span class="token parameter variable">-h</span> <span class="token number">192.168</span>.1.100 <span class="token parameter variable">-p</span> <span class="token number">6379</span> SET key1 <span class="token string">"value1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在从节点上执行读取操作，验证数据是否同步：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli <span class="token parameter variable">-h</span> <span class="token operator">&lt;</span>slave-ip<span class="token operator">&gt;</span> <span class="token parameter variable">-p</span> <span class="token operator">&lt;</span>slave-port<span class="token operator">&gt;</span> GET key1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果返回 <code>value1</code>，则说明主从复制配置成功。</p><h2 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a>4. 注意事项</h2><ol><li><strong>网络延迟</strong>：主从复制依赖于网络连接，网络延迟可能导致从节点的数据更新滞后。</li><li><strong>数据一致性</strong>：在高并发场景下，可能会出现短暂的数据不一致情况，需根据业务需求进行合理设计。</li><li><strong>故障转移</strong>：在主节点故障时，需手动或自动将从节点提升为主节点，确保系统的高可用性。</li></ol><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>Redis 的主从复制机制提供了一种简单而有效的数据冗余和负载均衡方案。通过合理配置主从关系，可以提高系统的性能和可用性。在实际应用中，开发者应根据业务需求合理设计主从复制架构，以确保数据的一致性和系统的稳定性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://redis.io/documentation">Redis 官方文档</a></li><li><a href="https://redis.io/topics/replication">Redis 主从复制</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解-Redis-的主从复制机制。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解-Redis-的主从复制机制。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解 Redis 的主从复制机制。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解 Redis 的主从复制机制。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Redis </tag>
            
            <tag> 数据一致性 </tag>
            
            <tag> 主从复制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring Boot】使用 Redis 实现限流操作</title>
      <link href="/archives/c5fa583.html"/>
      <url>/archives/c5fa583.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在高并发的场景下，限流是一种有效的保护措施，可以防止系统过载。Redis 作为一个高性能的内存数据库，常被用作限流的存储方案。本文将介绍如何使用 Redis 实现限流操作，并结合 AOP 和注解来简化限流逻辑的实现。</p><h2 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h2><p>首先，确保在 <code>pom.xml</code> 中添加 Redis 和 AOP 的相关依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-配置-Redis"><a href="#2-配置-Redis" class="headerlink" title="2. 配置 Redis"></a>2. 配置 Redis</h2><p>在 <code>application.yml</code> 中配置 Redis 连接信息：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-创建限流注解"><a href="#3-创建限流注解" class="headerlink" title="3. 创建限流注解"></a>3. 创建限流注解</h2><p>我们将创建一个自定义注解 <code>@RateLimit</code>，用于标记需要限流的方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">RateLimit</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment">// 限流的 key</span>    <span class="token keyword">int</span> <span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">5</span><span class="token punctuation">;</span>   <span class="token comment">// 限流的次数</span>    <span class="token keyword">int</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">60</span><span class="token punctuation">;</span> <span class="token comment">// 限流的时间窗口（秒）</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-实现限流逻辑"><a href="#4-实现限流逻辑" class="headerlink" title="4. 实现限流逻辑"></a>4. 实现限流逻辑</h2><p>接下来，我们将使用 AOP 来实现限流逻辑。创建一个切面类 <code>RateLimitAspect</code>，在其中实现限流的具体逻辑。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">ProceedingJoinPoint</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Around</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Aspect</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RateLimitAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"@annotation(rateLimit)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">limit</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">RateLimit</span> rateLimit<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> key <span class="token operator">=</span> rateLimit<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> limit <span class="token operator">=</span> rateLimit<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> timeout <span class="token operator">=</span> rateLimit<span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用 Redis 计数器</span>        <span class="token class-name">Integer</span> count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 如果没有记录，初始化为 1</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 如果计数未超过限制，增加计数</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// 超过限制，抛出异常或返回错误信息</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"请求过于频繁，请稍后再试。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 继续执行目标方法</span>        <span class="token keyword">return</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-使用限流注解"><a href="#5-使用限流注解" class="headerlink" title="5. 使用限流注解"></a>5. 使用限流注解</h2><p>现在，我们可以在需要限流的方法上使用 <code>@RateLimit</code> 注解。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@RateLimit</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">"testRateLimit"</span><span class="token punctuation">,</span> limit <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> timeout <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"请求成功！"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，<code>/test</code> 接口每分钟最多允许 5 次请求。</p><h2 id="6-测试限流功能"><a href="#6-测试限流功能" class="headerlink" title="6. 测试限流功能"></a>6. 测试限流功能</h2><p>启动 Spring Boot 应用程序，并使用 Postman 或其他工具对 <code>/test</code> 接口进行多次请求。您将看到在超过限制后，返回的错误信息。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过使用 Redis 和 AOP，我们可以轻松实现限流操作。自定义注解和切面使得限流逻辑的实现变得简单而优雅。合理的限流策略可以有效保护系统，防止过载。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/">Spring Boot Documentation</a></li><li><a href="https://redis.io/documentation">Redis Documentation</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和实现使用-Redis-的限流操作。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和实现使用-Redis-的限流操作。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和实现使用 Redis 的限流操作。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和实现使用 Redis 的限流操作。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Redis </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> AOP </tag>
            
            <tag> 限流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux】如何编写一个部署 Spring Boot 程序的 Shell 脚本</title>
      <link href="/archives/b55fa582.html"/>
      <url>/archives/b55fa582.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在 Linux 环境中，部署 Spring Boot 应用程序时，通常需要一个 Shell 脚本来简化部署、启动、停止和重启等操作。本文将介绍如何编写一个满足以下特性的 Shell 脚本：</p><ul><li>关闭终端后，Java 进程不会退出。</li><li>提供部署、启动、停止、重启三种常见操作。</li><li>每次部署时，均备份当前的程序包（可通过参数关闭备份）。</li></ul><h2 id="1-脚本结构"><a href="#1-脚本结构" class="headerlink" title="1. 脚本结构"></a>1. 脚本结构</h2><p>以下是一个简单的 Shell 脚本示例，包含了上述特性。您可以根据需要进行修改。</p><h3 id="1-1-创建脚本文件"><a href="#1-1-创建脚本文件" class="headerlink" title="1.1 创建脚本文件"></a>1.1 创建脚本文件</h3><p>在您的 Linux 服务器上，创建一个名为 <code>deploy.sh</code> 的文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> deploy.sh<span class="token function">chmod</span> +x deploy.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-2-编写脚本内容"><a href="#1-2-编写脚本内容" class="headerlink" title="1.2 编写脚本内容"></a>1.2 编写脚本内容</h3><p>将以下内容复制到 <code>deploy.sh</code> 文件中：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 配置参数</span><span class="token assign-left variable">APP_NAME</span><span class="token operator">=</span><span class="token string">"your-spring-boot-app"</span>  <span class="token comment"># 应用名称</span><span class="token assign-left variable">JAR_PATH</span><span class="token operator">=</span><span class="token string">"/path/to/your/app.jar"</span>   <span class="token comment"># JAR 文件路径</span><span class="token assign-left variable">BACKUP_DIR</span><span class="token operator">=</span><span class="token string">"/path/to/backup"</span>       <span class="token comment"># 备份目录</span><span class="token assign-left variable">PID_FILE</span><span class="token operator">=</span><span class="token string">"/tmp/<span class="token variable">${APP_NAME}</span>.pid"</span>    <span class="token comment"># PID 文件路径</span><span class="token comment"># 函数：备份当前程序包</span><span class="token function-name function">backup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-d</span> <span class="token string">"<span class="token variable">$BACKUP_DIR</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token string">"<span class="token variable">$BACKUP_DIR</span>"</span>    <span class="token keyword">fi</span>    <span class="token function">cp</span> <span class="token string">"<span class="token variable">$JAR_PATH</span>"</span> <span class="token string">"<span class="token variable">$BACKUP_DIR</span>/<span class="token variable">${APP_NAME}</span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%Y%m%d%H%M%S<span class="token variable">)</span></span>.jar"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"备份完成: <span class="token variable">$BACKUP_DIR</span>"</span><span class="token punctuation">}</span><span class="token comment"># 函数：启动应用</span><span class="token function-name function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">$PID_FILE</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$APP_NAME</span> 已在运行 (PID: <span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> $PID_FILE<span class="token variable">)</span></span>)"</span>        <span class="token builtin class-name">return</span>    <span class="token keyword">fi</span>    <span class="token function">nohup</span> <span class="token function">java</span> <span class="token parameter variable">-jar</span> <span class="token string">"<span class="token variable">$JAR_PATH</span>"</span> <span class="token operator">&gt;</span> /dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$!</span> <span class="token operator">&gt;</span> <span class="token string">"<span class="token variable">$PID_FILE</span>"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$APP_NAME</span> 启动成功 (PID: <span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> $PID_FILE<span class="token variable">)</span></span>)"</span><span class="token punctuation">}</span><span class="token comment"># 函数：停止应用</span><span class="token function-name function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">$PID_FILE</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$APP_NAME</span> 未在运行"</span>        <span class="token builtin class-name">return</span>    <span class="token keyword">fi</span>    <span class="token function">kill</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> <span class="token string">"<span class="token variable">$PID_FILE</span>"</span><span class="token variable">)</span></span>    <span class="token function">rm</span> <span class="token string">"<span class="token variable">$PID_FILE</span>"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$APP_NAME</span> 停止成功"</span><span class="token punctuation">}</span><span class="token comment"># 函数：重启应用</span><span class="token function-name function">restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    stop    start<span class="token punctuation">}</span><span class="token comment"># 函数：显示帮助信息</span><span class="token function-name function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">echo</span> <span class="token string">"用法: <span class="token variable">$0</span> [deploy|start|stop|restart] [--no-backup]"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"  deploy: 部署应用并备份当前程序包"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"  start: 启动应用"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"  stop: 停止应用"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"  restart: 重启应用"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"  --no-backup: 部署时不备份当前程序包"</span><span class="token punctuation">}</span><span class="token comment"># 解析参数</span><span class="token keyword">case</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token keyword">in</span>    deploy<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$2</span>"</span> <span class="token operator">!=</span> <span class="token string">"--no-backup"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>            backup        <span class="token keyword">fi</span>        start        <span class="token punctuation">;</span><span class="token punctuation">;</span>    start<span class="token punctuation">)</span>        start        <span class="token punctuation">;</span><span class="token punctuation">;</span>    stop<span class="token punctuation">)</span>        stop        <span class="token punctuation">;</span><span class="token punctuation">;</span>    restart<span class="token punctuation">)</span>        restart        <span class="token punctuation">;</span><span class="token punctuation">;</span>    *<span class="token punctuation">)</span>        <span class="token builtin class-name">help</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-脚本功能说明"><a href="#2-脚本功能说明" class="headerlink" title="2. 脚本功能说明"></a>2. 脚本功能说明</h2><ul><li><strong>备份功能</strong>：在部署时，脚本会将当前的 JAR 文件备份到指定的备份目录。可以通过 <code>--no-backup</code> 参数来关闭备份功能。</li><li><strong>启动功能</strong>：使用 <code>nohup</code> 命令启动 Java 进程，确保即使关闭终端，进程仍然在后台运行。进程的 PID 会被写入到指定的 PID 文件中。</li><li><strong>停止功能</strong>：通过读取 PID 文件来停止正在运行的 Java 进程，并删除 PID 文件。</li><li><strong>重启功能</strong>：先停止应用，再启动应用。</li><li><strong>帮助信息</strong>：提供使用说明，帮助用户了解如何使用脚本。</li></ul><h2 id="3-使用示例"><a href="#3-使用示例" class="headerlink" title="3. 使用示例"></a>3. 使用示例</h2><ul><li>部署并备份当前程序包：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./deploy.sh deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>部署但不备份当前程序包：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./deploy.sh deploy --no-backup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>启动应用：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./deploy.sh start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>停止应用：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./deploy.sh stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>重启应用：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./deploy.sh restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过编写一个简单的 Shell 脚本，您可以轻松地在 Linux 环境中部署和管理 Spring Boot 应用程序。该脚本提供了优雅的启动、停止和重启功能，并支持备份当前程序包，帮助您更好地管理应用的生命周期。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/">Spring Boot Documentation</a></li><li><a href="https://tldp.org/LDP/Bash-Beginners-Guide/html/">Bash Scripting Guide</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和实现-Linux-环境下的-Spring-Boot-应用部署。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和实现-Linux-环境下的-Spring-Boot-应用部署。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和实现 Linux 环境下的 Spring Boot 应用部署。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和实现 Linux 环境下的 Spring Boot 应用部署。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Shell 脚本 </tag>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring Boot】如何在 Logback 中配置彩色输出</title>
      <link href="/archives/b55fa581.html"/>
      <url>/archives/b55fa581.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在开发和调试过程中，日志输出的可读性至关重要。使用彩色输出可以帮助开发者快速识别不同级别的日志信息（如 DEBUG、INFO、WARN、ERROR），从而提高调试效率。Logback 是 Spring Boot 默认的日志框架，支持通过配置实现彩色输出。本文将介绍如何在 Logback 中配置彩色输出。</p><h2 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h2><p>如果您使用的是 Spring Boot，Logback 已经作为默认依赖包含在内。如果您需要在其他项目中使用 Logback，请确保在 <code>pom.xml</code> 中添加以下依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 请根据需要选择版本 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-配置-Logback"><a href="#2-配置-Logback" class="headerlink" title="2. 配置 Logback"></a>2. 配置 Logback</h2><p>Logback 的配置文件通常是 <code>logback.xml</code> 或 <code>logback-spring.xml</code>。在该文件中，我们可以定义日志格式和输出方式。</p><h3 id="2-1-创建-logback-spring-xml"><a href="#2-1-创建-logback-spring-xml" class="headerlink" title="2.1 创建 logback-spring.xml"></a>2.1 创建 <code>logback-spring.xml</code></h3><p>在 <code>src/main/resources</code> 目录下创建 <code>logback-spring.xml</code> 文件，并添加以下内容：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>outputPatternAsHeader</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>outputPatternAsHeader</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-配置彩色输出"><a href="#2-2-配置彩色输出" class="headerlink" title="2.2 配置彩色输出"></a>2.2 配置彩色输出</h3><p>要实现彩色输出，可以使用 ANSI 转义码。Logback 提供了 <code>ch.qos.logback.core.pattern.color</code> 包中的类来实现彩色输出。以下是一个示例配置：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>                %d{yyyy-MM-dd HH:mm:ss} [%thread] %highlight(%-5level) %logger{36} - %msg%n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>outputPatternAsHeader</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>outputPatternAsHeader</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个配置中，<code>%highlight</code> 用于为日志级别添加颜色。Logback 会根据日志级别自动选择颜色：</p><ul><li>DEBUG：青色</li><li>INFO：绿色</li><li>WARN：黄色</li><li>ERROR：红色</li></ul><h2 id="3-运行应用程序"><a href="#3-运行应用程序" class="headerlink" title="3. 运行应用程序"></a>3. 运行应用程序</h2><p>完成配置后，运行您的 Spring Boot 应用程序，您将看到控制台输出的日志信息带有颜色。不同级别的日志将以不同的颜色显示，便于快速识别。</p><h2 id="4-自定义颜色"><a href="#4-自定义颜色" class="headerlink" title="4. 自定义颜色"></a>4. 自定义颜色</h2><p>如果您希望自定义颜色，可以使用 ANSI 转义码。例如，以下配置将 INFO 级别的日志设置为蓝色：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">&gt;</span></span>                %d{yyyy-MM-dd HH:mm:ss} [%thread] %cyan(%-5level) %logger{36} - %msg%n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>outputPatternAsHeader</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>outputPatternAsHeader</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，<code>%cyan</code> 用于将日志级别的颜色设置为青色。</p><h2 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5. 注意事项"></a>5. 注意事项</h2><ul><li>确保您的终端或控制台支持 ANSI 转义码。大多数现代终端（如 Linux、macOS 的终端和 Windows 的 PowerShell）都支持。</li><li>如果您在 IDE 中运行应用程序，确保 IDE 的控制台支持 ANSI 颜色输出。某些 IDE 可能需要额外的插件或设置。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过配置 Logback，您可以轻松实现彩色输出，提高日志的可读性。使用 ANSI 转义码和 Logback 提供的功能，您可以根据需要自定义日志的颜色和格式。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://logback.qos.ch/documentation.html">Logback Documentation</a></li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-logging">Spring Boot Logging</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和实现-Logback-中的彩色输出配置。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和实现-Logback-中的彩色输出配置。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和实现 Logback 中的彩色输出配置。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和实现 Logback 中的彩色输出配置。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Logback </tag>
            
            <tag> 日志配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring Boot】如何处理 YAML 或 Properties 的解析异常 MalformedInputException</title>
      <link href="/archives/b55fa580.html"/>
      <url>/archives/b55fa580.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在 Spring Boot 应用中，配置文件通常使用 YAML 或 Properties 格式来定义应用的各种参数。然而，在解析这些配置文件时，可能会遇到 <code>MalformedInputException</code> 异常。这种异常通常是由于文件编码不正确或文件内容格式不符合预期导致的。本文将介绍如何识别和解决 YAML 或 Properties 的解析异常 <code>MalformedInputException</code>。</p><h2 id="1-异常原因"><a href="#1-异常原因" class="headerlink" title="1. 异常原因"></a>1. 异常原因</h2><h3 id="1-1-文件编码问题"><a href="#1-1-文件编码问题" class="headerlink" title="1.1 文件编码问题"></a>1.1 文件编码问题</h3><p><code>MalformedInputException</code> 通常是由于文件的编码格式与 Spring Boot 期望的编码格式不匹配。Spring Boot 默认使用 UTF-8 编码来解析配置文件。如果配置文件使用了其他编码（如 ISO-8859-1），则可能导致解析失败。</p><h3 id="1-2-格式错误"><a href="#1-2-格式错误" class="headerlink" title="1.2 格式错误"></a>1.2 格式错误</h3><p>YAML 和 Properties 文件的格式要求严格，任何格式错误（如缺少冒号、缩进不正确等）都可能导致解析异常。</p><h2 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2. 解决方案"></a>2. 解决方案</h2><h3 id="2-1-确保文件编码为-UTF-8"><a href="#2-1-确保文件编码为-UTF-8" class="headerlink" title="2.1 确保文件编码为 UTF-8"></a>2.1 确保文件编码为 UTF-8</h3><p>确保您的 YAML 或 Properties 文件使用 UTF-8 编码。可以使用文本编辑器（如 VSCode、Notepad++）检查和更改文件编码。</p><h4 id="在-VSCode-中更改编码"><a href="#在-VSCode-中更改编码" class="headerlink" title="在 VSCode 中更改编码"></a>在 VSCode 中更改编码</h4><ol><li>打开文件。</li><li>点击右下角的编码格式（如 “UTF-8”）。</li><li>选择 “Reopen with Encoding” 并选择 “UTF-8”。</li></ol><h4 id="在-Notepad-中更改编码"><a href="#在-Notepad-中更改编码" class="headerlink" title="在 Notepad++ 中更改编码"></a>在 Notepad++ 中更改编码</h4><ol><li>打开文件。</li><li>点击菜单 “编码”。</li><li>选择 “转换为 UTF-8 编码”。</li></ol><h3 id="2-2-检查文件格式"><a href="#2-2-检查文件格式" class="headerlink" title="2.2 检查文件格式"></a>2.2 检查文件格式</h3><p>仔细检查 YAML 或 Properties 文件的格式，确保符合规范。以下是一些常见的格式问题：</p><h4 id="YAML-格式示例"><a href="#YAML-格式示例" class="headerlink" title="YAML 格式示例"></a>YAML 格式示例</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 正确的 YAML 格式</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>  <span class="token key atrule">address</span><span class="token punctuation">:</span> 127.0.0.1<span class="token comment"># 错误的 YAML 格式（缺少冒号）</span>server  port 8080<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Properties-格式示例"><a href="#Properties-格式示例" class="headerlink" title="Properties 格式示例"></a>Properties 格式示例</h4><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 正确的 Properties 格式</span><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8080</span><span class="token key attr-name">server.address</span><span class="token punctuation">=</span><span class="token value attr-value">127.0.0.1</span><span class="token comment"># 错误的 Properties 格式（缺少等号）</span><span class="token key attr-name">server.port</span> <span class="token value attr-value">8080</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-使用-Spring-Boot-的配置验证"><a href="#2-3-使用-Spring-Boot-的配置验证" class="headerlink" title="2.3 使用 Spring Boot 的配置验证"></a>2.3 使用 Spring Boot 的配置验证</h3><p>Spring Boot 提供了配置验证的功能，可以在启动时检查配置文件的有效性。可以通过添加 <code>spring-boot-starter-validation</code> 依赖来启用此功能。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后在配置类中使用 <code>@Validated</code> 注解进行验证。</p><h3 id="2-4-捕获异常并提供友好的错误信息"><a href="#2-4-捕获异常并提供友好的错误信息" class="headerlink" title="2.4 捕获异常并提供友好的错误信息"></a>2.4 捕获异常并提供友好的错误信息</h3><p>在应用启动时，可以捕获 <code>MalformedInputException</code> 异常，并提供友好的错误信息，帮助开发者快速定位问题。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ResourcePropertySource</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MyApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MalformedInputException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"配置文件解析错误: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 其他处理逻辑</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-最佳实践建议"><a href="#3-最佳实践建议" class="headerlink" title="3. 最佳实践建议"></a>3. 最佳实践建议</h2><ol><li><p><strong>使用统一的编码格式</strong>：确保所有配置文件使用 UTF-8 编码，避免编码不一致导致的问题。</p></li><li><p><strong>定期审查配置文件</strong>：定期检查和更新配置文件，确保格式正确且符合规范。</p></li><li><p><strong>使用 IDE 的语法检查</strong>：使用 IDE 的语法检查功能，及时发现配置文件中的格式错误。</p></li><li><p><strong>编写单元测试</strong>：为配置文件编写单元测试，确保在修改配置时不会引入新的问题。</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过确保文件编码为 UTF-8、检查文件格式、使用 Spring Boot 的配置验证以及捕获异常，我们可以有效地处理 YAML 或 Properties 的解析异常 <code>MalformedInputException</code>。合理的配置管理和异常处理可以提高应用程序的稳定性和可维护性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config">Spring Boot - External Configuration</a></li><li><a href="https://yaml.org/spec/1.2/spec.html">YAML Syntax</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和解决-Spring-Boot-中的配置解析异常。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和解决-Spring-Boot-中的配置解析异常。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和解决 Spring Boot 中的配置解析异常。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和解决 Spring Boot 中的配置解析异常。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 异常处理 </tag>
            
            <tag> 配置解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring Boot】如何优雅地停止服务</title>
      <link href="/archives/b55fa579.html"/>
      <url>/archives/b55fa579.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在生产环境中，优雅地停止服务是确保系统稳定性和数据一致性的关键。Spring Boot 提供了多种方式来实现优雅停机，确保在关闭服务时能够完成正在进行的请求、释放资源并进行必要的清理。本文将介绍如何在 Spring Boot 中优雅地停止服务。</p><h2 id="1-使用-PreDestroy-注解"><a href="#1-使用-PreDestroy-注解" class="headerlink" title="1. 使用 @PreDestroy 注解"></a>1. 使用 <code>@PreDestroy</code> 注解</h2><p>在 Spring 中，可以使用 <code>@PreDestroy</code> 注解标记一个方法，该方法会在 Bean 被销毁之前执行。可以在这个方法中添加清理逻辑。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PreDestroy</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>    <span class="token comment">// 其他业务逻辑</span>    <span class="token annotation punctuation">@PreDestroy</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务正在停止，执行清理操作..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 释放资源、保存状态等</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，当 Spring Boot 应用关闭时，<code>cleanup</code> 方法会被调用，执行必要的清理操作。</p><h2 id="2-使用-ApplicationListener-监听-ContextClosedEvent"><a href="#2-使用-ApplicationListener-监听-ContextClosedEvent" class="headerlink" title="2. 使用 ApplicationListener 监听 ContextClosedEvent"></a>2. 使用 <code>ApplicationListener</code> 监听 <code>ContextClosedEvent</code></h2><p>可以通过实现 <code>ApplicationListener</code> 接口来监听 Spring 应用上下文关闭事件，从而执行自定义的停机逻辑。</p><h3 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationListener</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ContextClosedEvent</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShutdownListener</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ContextClosedEvent</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">ContextClosedEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"应用上下文正在关闭，执行停机逻辑..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行清理操作</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，当 Spring 应用上下文关闭时，<code>onApplicationEvent</code> 方法会被调用，执行自定义的停机逻辑。</p><h2 id="3-配置优雅停机"><a href="#3-配置优雅停机" class="headerlink" title="3. 配置优雅停机"></a>3. 配置优雅停机</h2><p>Spring Boot 2.3 及以上版本提供了内置的优雅停机支持。可以通过配置文件来启用优雅停机。</p><h3 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h3><p>在 <code>application.yml</code> 中添加以下配置：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">lifecycle</span><span class="token punctuation">:</span>    <span class="token key atrule">timeout-per-shutdown-phase</span><span class="token punctuation">:</span> 30s <span class="token comment"># 设置每个停机阶段的超时时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="处理请求的超时"><a href="#处理请求的超时" class="headerlink" title="处理请求的超时"></a>处理请求的超时</h3><p>可以通过设置 <code>server.shutdown</code> 属性来控制服务的停机行为：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">shutdown</span><span class="token punctuation">:</span> graceful<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当设置为 <code>graceful</code> 时，Spring Boot 会在接收到关闭请求后，等待正在处理的请求完成。</p><h2 id="4-自定义停机逻辑"><a href="#4-自定义停机逻辑" class="headerlink" title="4. 自定义停机逻辑"></a>4. 自定义停机逻辑</h2><p>如果需要更复杂的停机逻辑，可以使用 <code>SmartLifecycle</code> 接口。实现该接口的 Bean 可以控制其启动和停止的顺序。</p><h3 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SmartLifecycle</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLifecycleComponent</span> <span class="token keyword">implements</span> <span class="token class-name">SmartLifecycle</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> running <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        running <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务启动..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务正在停止..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行清理操作</span>        running <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> running<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPhase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 返回停机的优先级</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAutoStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        callback<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 停止后执行回调</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，<code>MyLifecycleComponent</code> 实现了 <code>SmartLifecycle</code> 接口，提供了自定义的启动和停止逻辑。</p><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li><p><strong>确保清理资源</strong>：在停机时，确保释放所有占用的资源，如数据库连接、线程池等。</p></li><li><p><strong>记录停机日志</strong>：在停机过程中记录日志，以便后续排查问题。</p></li><li><p><strong>测试停机逻辑</strong>：在开发和测试环境中充分测试停机逻辑，确保在生产环境中能够正常工作。</p></li><li><p><strong>监控停机状态</strong>：使用监控工具监控服务的停机状态，确保服务能够优雅地停止。</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过使用 <code>@PreDestroy</code> 注解、监听 <code>ContextClosedEvent</code>、配置优雅停机和自定义停机逻辑，我们可以在 Spring Boot 中优雅地停止服务，确保系统的稳定性和数据的一致性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-graceful-shutdown">Spring Boot - Graceful Shutdown</a></li><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#context-functionality-lifecycle">Spring Framework - Lifecycle</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和实现-Spring-Boot-中的优雅停机。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和实现-Spring-Boot-中的优雅停机。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和实现 Spring Boot 中的优雅停机。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和实现 Spring Boot 中的优雅停机。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 服务停止 </tag>
            
            <tag> 优雅停机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring Boot】如何处理同名 Bean 对象多次注册导致的启动失败问题</title>
      <link href="/archives/b55fa578.html"/>
      <url>/archives/b55fa578.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在 Spring Boot 应用中，Bean 的注册是通过依赖注入实现的。然而，当多个 Bean 使用相同的名称或类型进行注册时，Spring 容器会抛出 <code>BeanDefinitionStoreException</code> 异常，导致应用启动失败。这种情况通常发生在以下几种场景中：</p><ol><li><strong>同名 Bean</strong>：在不同的配置类中定义了同名的 Bean。</li><li><strong>自动装配冲突</strong>：使用 <code>@ComponentScan</code> 扫描到多个同名的组件。</li><li><strong>条件装配</strong>：使用条件注解（如 <code>@Conditional</code>）导致同名 Bean 的注册。</li></ol><p>本文将介绍如何识别和解决同名 Bean 对象多次注册导致的启动失败问题。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1-使用-Primary-注解"><a href="#1-使用-Primary-注解" class="headerlink" title="1. 使用 @Primary 注解"></a>1. 使用 <code>@Primary</code> 注解</h3><p>如果有多个同名 Bean，但希望优先使用其中一个，可以使用 <code>@Primary</code> 注解标记优先使用的 Bean。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Primary</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Primary</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServiceImpl1</span> <span class="token keyword">implements</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>    <span class="token comment">// 实现代码</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServiceImpl2</span> <span class="token keyword">implements</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>    <span class="token comment">// 实现代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，<code>MyServiceImpl1</code> 被标记为优先使用的 Bean，当需要注入 <code>MyService</code> 时，Spring 会优先选择 <code>MyServiceImpl1</code>。</p><h3 id="2-使用-Qualifier-注解"><a href="#2-使用-Qualifier-注解" class="headerlink" title="2. 使用 @Qualifier 注解"></a>2. 使用 <code>@Qualifier</code> 注解</h3><p>如果需要在注入时明确指定使用哪个 Bean，可以使用 <code>@Qualifier</code> 注解。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Qualifier</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MyService</span> myService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token class-name">MyController</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"myServiceImpl2"</span><span class="token punctuation">)</span> <span class="token class-name">MyService</span> myService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>myService <span class="token operator">=</span> myService<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，<code>@Qualifier</code> 注解指定了要注入的 Bean 名称，确保注入的是 <code>MyServiceImpl2</code>。</p><h3 id="3-检查-Bean-定义"><a href="#3-检查-Bean-定义" class="headerlink" title="3. 检查 Bean 定义"></a>3. 检查 Bean 定义</h3><p>确保在不同的配置类中没有重复定义同名的 Bean。可以通过以下方式检查：</p><ul><li><strong>使用不同的 Bean 名称</strong>：在定义 Bean 时，使用不同的名称。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"service1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">MyService</span> <span class="token function">myService1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyServiceImpl1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"service2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">MyService</span> <span class="token function">myService2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyServiceImpl2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>使用条件注解</strong>：使用条件注解（如 <code>@ConditionalOnMissingBean</code>）来避免重复注册。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span></span><span class="token class-name">ConditionalOnMissingBean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">MyService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">MyService</span> <span class="token function">myService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyServiceImpl1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-使用-ComponentScan-的-exclude-属性"><a href="#4-使用-ComponentScan-的-exclude-属性" class="headerlink" title="4. 使用 @ComponentScan 的 exclude 属性"></a>4. 使用 <code>@ComponentScan</code> 的 <code>exclude</code> 属性</h3><p>如果使用 <code>@ComponentScan</code> 扫描到多个同名组件，可以使用 <code>exclude</code> 属性排除不需要的 Bean。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ComponentScan</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.example"</span><span class="token punctuation">,</span> excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ComponentScan.Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">ASSIGNABLE_TYPE</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token class-name">MyServiceImpl2</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>    <span class="token comment">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-通过配置文件控制-Bean-注册"><a href="#5-通过配置文件控制-Bean-注册" class="headerlink" title="5. 通过配置文件控制 Bean 注册"></a>5. 通过配置文件控制 Bean 注册</h3><p>在某些情况下，可以通过配置文件来控制 Bean 的注册。例如，使用 <code>@ConditionalOnProperty</code> 注解根据配置文件中的属性来决定是否注册某个 Bean。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span></span><span class="token class-name">ConditionalOnProperty</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"my.service.enabled"</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">MyService</span> <span class="token function">myService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyServiceImpl1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li><p><strong>保持 Bean 名称唯一</strong>：在定义 Bean 时，确保名称唯一，避免同名冲突。</p></li><li><p><strong>使用接口</strong>：通过接口来解耦 Bean 之间的依赖关系，减少直接依赖。</p></li><li><p><strong>定期审查配置</strong>：定期审查 Bean 的定义和配置，确保没有重复的 Bean 注册。</p></li><li><p><strong>使用条件注解</strong>：合理使用条件注解，避免不必要的 Bean 注册。</p></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>如何检测同名 Bean？</strong></p><ul><li>Spring 启动时会抛出 <code>BeanDefinitionStoreException</code> 异常，通常表示存在同名 Bean。</li></ul></li><li><p><strong>如何处理复杂的 Bean 注册？</strong></p><ul><li>对于复杂的 Bean 注册，考虑使用配置类和条件注解来管理 Bean 的创建。</li></ul></li><li><p><strong>使用 <code>@Primary</code> 和 <code>@Qualifier</code> 的最佳实践是什么？</strong></p><ul><li>使用 <code>@Primary</code> 标记优先使用的 Bean，使用 <code>@Qualifier</code> 指定具体的 Bean，确保代码的可读性和可维护性。</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上方法，我们可以有效地解决 Spring Boot 中同名 Bean 对象多次注册导致的启动失败问题。合理的设计和使用 Spring 提供的功能，可以提高应用程序的稳定性和可维护性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-definition">Spring Framework - Bean Definition</a></li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/">Spring Boot Reference Documentation</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和解决-Spring-Boot-中的同名-Bean-注册问题。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和解决-Spring-Boot-中的同名-Bean-注册问题。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和解决 Spring Boot 中的同名 Bean 注册问题。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和解决 Spring Boot 中的同名 Bean 注册问题。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Bean 注册 </tag>
            
            <tag> 启动失败 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring Boot】如何统一给配置项属性值加密</title>
      <link href="/archives/b55fa577.html"/>
      <url>/archives/b55fa577.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在开发应用程序时，保护敏感信息（如数据库密码、API 密钥等）是非常重要的。Spring Boot 提供了多种方式来加密和解密配置项属性值，以确保这些敏感信息不会被泄露。本文将介绍如何在 Spring Boot 中统一给配置项属性值加密。</p><h2 id="1-使用-Spring-Cloud-Config"><a href="#1-使用-Spring-Cloud-Config" class="headerlink" title="1. 使用 Spring Cloud Config"></a>1. 使用 Spring Cloud Config</h2><p>Spring Cloud Config 提供了集中式的配置管理功能，可以将配置项存储在 Git、文件系统或其他存储中，并支持加密和解密。以下是使用 Spring Cloud Config 进行配置加密的步骤。</p><h3 id="1-1-添加依赖"><a href="#1-1-添加依赖" class="headerlink" title="1.1 添加依赖"></a>1.1 添加依赖</h3><p>在 <code>pom.xml</code> 中添加 Spring Cloud Config 相关依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-配置加密密钥"><a href="#1-2-配置加密密钥" class="headerlink" title="1.2 配置加密密钥"></a>1.2 配置加密密钥</h3><p>在 <code>application.yml</code> 或 <code>application.properties</code> 中配置加密密钥：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">server</span><span class="token punctuation">:</span>        <span class="token key atrule">encrypt</span><span class="token punctuation">:</span>          <span class="token key atrule">key</span><span class="token punctuation">:</span> your<span class="token punctuation">-</span>encryption<span class="token punctuation">-</span>key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-加密配置项"><a href="#1-3-加密配置项" class="headerlink" title="1.3 加密配置项"></a>1.3 加密配置项</h3><p>使用 Spring Cloud Config 提供的加密工具加密配置项。例如，使用以下命令加密数据库密码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST http://localhost:8888/encrypt <span class="token parameter variable">-d</span> <span class="token string">'your-database-password'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回的加密字符串可以放入配置文件中：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">database</span><span class="token punctuation">:</span>  <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">'{cipher}encrypted-password'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-4-解密配置项"><a href="#1-4-解密配置项" class="headerlink" title="1.4 解密配置项"></a>1.4 解密配置项</h3><p>在应用程序中，Spring Cloud Config 会自动解密配置项。只需使用 <code>@Value</code> 注解获取配置项即可：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${database.password}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token comment">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-使用-Jasypt-加密"><a href="#2-使用-Jasypt-加密" class="headerlink" title="2. 使用 Jasypt 加密"></a>2. 使用 Jasypt 加密</h2><p>如果不使用 Spring Cloud Config，可以使用 Jasypt（Java Simplified Encryption）库来加密和解密配置项。</p><h3 id="2-1-添加依赖"><a href="#2-1-添加依赖" class="headerlink" title="2.1 添加依赖"></a>2.1 添加依赖</h3><p>在 <code>pom.xml</code> 中添加 Jasypt 依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.ulisesbocchio<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jasypt-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-配置加密密钥"><a href="#2-2-配置加密密钥" class="headerlink" title="2.2 配置加密密钥"></a>2.2 配置加密密钥</h3><p>在 <code>application.yml</code> 或 <code>application.properties</code> 中配置 Jasypt 密钥：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">jasypt</span><span class="token punctuation">:</span>  <span class="token key atrule">encryptor</span><span class="token punctuation">:</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> your<span class="token punctuation">-</span>encryption<span class="token punctuation">-</span>key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-3-加密配置项"><a href="#2-3-加密配置项" class="headerlink" title="2.3 加密配置项"></a>2.3 加密配置项</h3><p>使用 Jasypt 提供的命令行工具加密配置项。例如，使用以下命令加密数据库密码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-cp</span> jasypt-1.9.3.jar org.jasypt.intf.cli.JasyptPBEStringEncryptionCLI <span class="token assign-left variable">input</span><span class="token operator">=</span><span class="token string">"your-database-password"</span> <span class="token assign-left variable">password</span><span class="token operator">=</span><span class="token string">"your-encryption-key"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回的加密字符串可以放入配置文件中：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">database</span><span class="token punctuation">:</span>  <span class="token key atrule">password</span><span class="token punctuation">:</span> ENC(encrypted<span class="token punctuation">-</span>password)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-4-解密配置项"><a href="#2-4-解密配置项" class="headerlink" title="2.4 解密配置项"></a>2.4 解密配置项</h3><p>在应用程序中，Jasypt 会自动解密配置项。只需使用 <code>@Value</code> 注解获取配置项即可：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${database.password}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token comment">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-自定义加密逻辑"><a href="#3-自定义加密逻辑" class="headerlink" title="3. 自定义加密逻辑"></a>3. 自定义加密逻辑</h2><p>如果需要更复杂的加密逻辑，可以实现自定义的 <code>PropertySource</code> 或使用 <code>@ConfigurationProperties</code> 结合自定义的加密和解密方法。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"secure"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecureProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token class-name">String</span> encrypted<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 自定义解密逻辑</span>        <span class="token keyword">return</span> decryptedValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li><p><strong>使用环境变量</strong>：将加密密钥存储在环境变量中，而不是硬编码在配置文件中。</p></li><li><p><strong>定期更换密钥</strong>：定期更换加密密钥，以提高安全性。</p></li><li><p><strong>审计和监控</strong>：对敏感信息的访问进行审计和监控，确保没有未授权的访问。</p></li><li><p><strong>使用安全的加密算法</strong>：选择安全的加密算法和密钥长度，确保数据的安全性。</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过使用 Spring Cloud Config 或 Jasypt，我们可以在 Spring Boot 中统一给配置项属性值加密，确保敏感信息的安全性。合理的设计和使用加密机制，可以提高应用程序的安全性和可维护性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://cloud.spring.io/spring-cloud-config/">Spring Cloud Config</a></li><li><a href="http://www.jasypt.org/">Jasypt</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和实现-Spring-Boot-中的配置项加密。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和实现-Spring-Boot-中的配置项加密。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和实现 Spring Boot 中的配置项加密。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和实现 Spring Boot 中的配置项加密。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 配置加密 </tag>
            
            <tag> 属性安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring Boot】如何在所有 Web 请求的前后执行自定义代码</title>
      <link href="/archives/b55fa576.html"/>
      <url>/archives/b55fa576.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在开发 Web 应用时，常常需要在请求处理的前后执行一些自定义代码，例如记录日志、身份验证、性能监控等。Spring Boot 提供了两种主要机制来实现这一点：<strong>拦截器</strong>（Interceptor）和 <strong>过滤器</strong>（Filter）。本文将介绍如何使用这两种机制在所有 Web 请求的前后执行自定义代码。</p><h2 id="1-使用拦截器"><a href="#1-使用拦截器" class="headerlink" title="1. 使用拦截器"></a>1. 使用拦截器</h2><h3 id="1-1-创建拦截器"><a href="#1-1-创建拦截器" class="headerlink" title="1.1 创建拦截器"></a>1.1 创建拦截器</h3><p>拦截器是 Spring MVC 提供的一种机制，可以在请求处理之前和之后执行自定义逻辑。首先，我们需要实现 <code>HandlerInterceptor</code> 接口。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">HandlerInterceptor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求前处理: "</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 返回 true 继续处理请求，返回 false 中断请求</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求后处理: "</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-注册拦截器"><a href="#1-2-注册拦截器" class="headerlink" title="1.2 注册拦截器"></a>1.2 注册拦截器</h3><p>接下来，我们需要在 Spring Boot 中注册这个拦截器。可以通过实现 <code>WebMvcConfigurer</code> 接口来完成。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">InterceptorRegistry</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebMvcConfigurer</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">CustomInterceptor</span> customInterceptor<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>customInterceptor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拦截所有请求</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-使用案例"><a href="#1-3-使用案例" class="headerlink" title="1.3 使用案例"></a>1.3 使用案例</h3><p>在这个例子中，<code>CustomInterceptor</code> 会在每个请求处理之前打印请求的 URI，并在请求完成后打印相同的信息。可以根据需要在 <code>preHandle</code> 和 <code>afterCompletion</code> 方法中添加更多的自定义逻辑。</p><h2 id="2-使用过滤器"><a href="#2-使用过滤器" class="headerlink" title="2. 使用过滤器"></a>2. 使用过滤器</h2><h3 id="2-1-创建过滤器"><a href="#2-1-创建过滤器" class="headerlink" title="2.1 创建过滤器"></a>2.1 创建过滤器</h3><p>过滤器是 Servlet 规范的一部分，可以在请求和响应的整个生命周期中执行自定义逻辑。首先，我们需要实现 <code>Filter</code> 接口。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">Filter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">FilterChain</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">FilterConfig</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求前处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 继续处理请求</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求后处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>        <span class="token comment">// 初始化代码</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 清理代码</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-注册过滤器"><a href="#2-2-注册过滤器" class="headerlink" title="2.2 注册过滤器"></a>2.2 注册过滤器</h3><p>接下来，我们需要在 Spring Boot 中注册这个过滤器。可以通过实现 <code>FilterRegistrationBean</code> 来完成。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">FilterRegistrationBean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">FilterRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CustomFilter</span><span class="token punctuation">&gt;</span></span> <span class="token function">loggingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">FilterRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CustomFilter</span><span class="token punctuation">&gt;</span></span> registrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registrationBean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registrationBean<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拦截所有请求</span>        <span class="token keyword">return</span> registrationBean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-使用案例"><a href="#2-3-使用案例" class="headerlink" title="2.3 使用案例"></a>2.3 使用案例</h3><p>在这个例子中，<code>CustomFilter</code> 会在每个请求处理之前和之后打印日志。与拦截器不同，过滤器可以处理请求和响应的整个生命周期，适合用于跨域处理、日志记录等场景。</p><h2 id="3-拦截器与过滤器的区别"><a href="#3-拦截器与过滤器的区别" class="headerlink" title="3. 拦截器与过滤器的区别"></a>3. 拦截器与过滤器的区别</h2><table><thead><tr><th>特性</th><th>拦截器</th><th>过滤器</th></tr></thead><tbody><tr><td>适用范围</td><td>Spring MVC</td><td>Servlet</td></tr><tr><td>处理请求</td><td>在 Controller 之前和之后</td><td>在请求和响应的整个生命周期</td></tr><tr><td>访问 Spring 上下文</td><td>可以访问</td><td>不能直接访问</td></tr><tr><td>适用场景</td><td>业务逻辑处理、权限控制</td><td>日志记录、性能监控、跨域处理</td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过使用拦截器和过滤器，我们可以在 Spring Boot 应用中轻松地在所有 Web 请求的前后执行自定义代码。根据具体需求选择合适的机制，可以提高应用的灵活性和可维护性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-interceptors">Spring Boot - Interceptors</a></li><li><a href="https://docs.oracle.com/javaee/7/api/javax/servlet/Filter.html">Servlet Filters</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和实现-Spring-Boot-中的请求前后处理。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和实现-Spring-Boot-中的请求前后处理。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和实现 Spring Boot 中的请求前后处理。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和实现 Spring Boot 中的请求前后处理。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 拦截器 </tag>
            
            <tag> 过滤器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring Boot】如何解决 Bean 装配过程中的循环依赖</title>
      <link href="/archives/b55fa575.html"/>
      <url>/archives/b55fa575.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在 Spring Boot 中，Bean 的装配是通过依赖注入实现的。然而，当两个或多个 Bean 互相依赖时，就会出现循环依赖的问题。这种情况会导致 Spring 容器无法正确创建 Bean，从而抛出 <code>BeanCurrentlyInCreationException</code> 异常。本文将介绍如何识别和解决 Spring Boot 中的循环依赖问题。</p><h2 id="循环依赖的类型"><a href="#循环依赖的类型" class="headerlink" title="循环依赖的类型"></a>循环依赖的类型</h2><p>在 Spring 中，循环依赖主要有两种类型：</p><ol><li><strong>构造器循环依赖</strong>：两个或多个 Bean 通过构造器相互依赖。</li><li><strong>属性循环依赖</strong>：两个或多个 Bean 通过 setter 方法相互依赖。</li></ol><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><h3 id="1-构造器循环依赖示例"><a href="#1-构造器循环依赖示例" class="headerlink" title="1. 构造器循环依赖示例"></a>1. 构造器循环依赖示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">B</span> b<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token class-name">B</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">A</span> a<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token class-name">A</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，<code>A</code> 和 <code>B</code> 互相依赖，导致构造器循环依赖。</p><h3 id="2-属性循环依赖示例"><a href="#2-属性循环依赖示例" class="headerlink" title="2. 属性循环依赖示例"></a>2. 属性循环依赖示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">D</span> d<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">C</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，<code>C</code> 和 <code>D</code> 通过属性注入互相依赖，导致属性循环依赖。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1-使用-Lazy-注解"><a href="#1-使用-Lazy-注解" class="headerlink" title="1. 使用 @Lazy 注解"></a>1. 使用 <code>@Lazy</code> 注解</h3><p>使用 <code>@Lazy</code> 注解可以延迟 Bean 的初始化，从而解决循环依赖问题。可以在构造器或属性上使用 <code>@Lazy</code> 注解。</p><h4 id="构造器循环依赖解决方案"><a href="#构造器循环依赖解决方案" class="headerlink" title="构造器循环依赖解决方案"></a>构造器循环依赖解决方案</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Lazy</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">B</span> b<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Lazy</span> <span class="token class-name">B</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">A</span> a<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Lazy</span> <span class="token class-name">A</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="属性循环依赖解决方案"><a href="#属性循环依赖解决方案" class="headerlink" title="属性循环依赖解决方案"></a>属性循环依赖解决方案</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Lazy</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Lazy</span>    <span class="token keyword">private</span> <span class="token class-name">D</span> d<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Lazy</span>    <span class="token keyword">private</span> <span class="token class-name">C</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-使用-Setter-注入"><a href="#2-使用-Setter-注入" class="headerlink" title="2. 使用 Setter 注入"></a>2. 使用 Setter 注入</h3><p>将构造器注入改为 setter 注入，可以避免构造器循环依赖的问题。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">B</span> b<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setB</span><span class="token punctuation">(</span><span class="token class-name">B</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">A</span> a<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setA</span><span class="token punctuation">(</span><span class="token class-name">A</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-重构代码"><a href="#3-重构代码" class="headerlink" title="3. 重构代码"></a>3. 重构代码</h3><p>在某些情况下，循环依赖可能表明代码设计不合理。考虑重构代码以消除循环依赖。例如，可以将某些逻辑提取到新的服务类中，减少 Bean 之间的直接依赖。</p><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li><p><strong>避免循环依赖</strong>：在设计 Bean 时，尽量避免循环依赖的情况，保持 Bean 之间的清晰关系。</p></li><li><p><strong>使用接口</strong>：通过接口来解耦 Bean 之间的依赖关系，减少直接依赖。</p></li><li><p><strong>使用 <code>@Lazy</code> 注解</strong>：在确实需要的情况下，使用 <code>@Lazy</code> 注解来解决循环依赖。</p></li><li><p><strong>重构代码</strong>：如果发现循环依赖，考虑重构代码以改善设计。</p></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>如何检测循环依赖？</strong></p><ul><li>Spring 启动时会抛出 <code>BeanCurrentlyInCreationException</code> 异常，通常表示存在循环依赖。</li></ul></li><li><p><strong>如何处理复杂的循环依赖？</strong></p><ul><li>对于复杂的循环依赖，考虑使用设计模式（如观察者模式）来解耦。</li></ul></li><li><p><strong>使用 <code>@Lazy</code> 注解会影响性能吗？</strong></p><ul><li>使用 <code>@Lazy</code> 注解会导致 Bean 的初始化延迟，可能会影响性能，但在解决循环依赖时是一个有效的解决方案。</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上方法，我们可以有效地解决 Spring Boot 中的 Bean 装配过程中的循环依赖问题。合理的设计和使用 Spring 提供的功能，可以提高应用程序的稳定性和可维护性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-circular-references">Spring Framework - Circular References</a></li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/">Spring Boot Reference Documentation</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和解决-Spring-Boot-中的循环依赖问题。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和解决-Spring-Boot-中的循环依赖问题。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和解决 Spring Boot 中的循环依赖问题。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和解决 Spring Boot 中的循环依赖问题。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Bean 装配 </tag>
            
            <tag> 循环依赖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring Boot】如何在程序启动完毕后自动执行任务</title>
      <link href="/archives/b55fa574.html"/>
      <url>/archives/b55fa574.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在实际开发中，我们经常需要在应用程序启动完成后执行一些初始化任务，比如加载缓存、初始化数据、建立连接等。Spring Boot 提供了多种方式来实现这个需求。本文将介绍几种在程序启动完毕后自动执行任务的方法。</p><h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><h3 id="1-使用-PostConstruct-注解"><a href="#1-使用-PostConstruct-注解" class="headerlink" title="1. 使用 @PostConstruct 注解"></a>1. 使用 <code>@PostConstruct</code> 注解</h3><p>这是最简单的方式，但要注意的是 <code>@PostConstruct</code> 方法会在 Spring Bean 初始化时执行，而不是在整个应用程序启动完成后执行：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostConstruct</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InitTask</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"应用程序正在初始化..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行初始化任务</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-实现-CommandLineRunner-接口"><a href="#2-实现-CommandLineRunner-接口" class="headerlink" title="2. 实现 CommandLineRunner 接口"></a>2. 实现 <code>CommandLineRunner</code> 接口</h3><p><code>CommandLineRunner</code> 接口的 <code>run</code> 方法会在应用程序启动完成后执行：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">CommandLineRunner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StartupRunner</span> <span class="token keyword">implements</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"应用程序已启动完成，开始执行任务..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行你的任务</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-实现-ApplicationRunner-接口"><a href="#3-实现-ApplicationRunner-接口" class="headerlink" title="3. 实现 ApplicationRunner 接口"></a>3. 实现 <code>ApplicationRunner</code> 接口</h3><p><code>ApplicationRunner</code> 接口与 <code>CommandLineRunner</code> 类似，但提供了更好的参数封装：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">ApplicationArguments</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">ApplicationRunner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StartupTask</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"应用程序已启动完成，开始执行任务..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行你的任务</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-使用-ApplicationListener"><a href="#4-使用-ApplicationListener" class="headerlink" title="4. 使用 ApplicationListener"></a>4. 使用 <code>ApplicationListener</code></h3><p>监听 <code>ApplicationReadyEvent</code> 事件来执行任务：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ApplicationReadyEvent</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationListener</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StartupListener</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApplicationReadyEvent</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">ApplicationReadyEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"应用程序已就绪，开始执行任务..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行你的任务</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-使用-EventListener-注解"><a href="#5-使用-EventListener-注解" class="headerlink" title="5. 使用 @EventListener 注解"></a>5. 使用 <code>@EventListener</code> 注解</h3><p>这是一种更简洁的方式来监听应用程序事件：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">ApplicationReadyEvent</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">EventListener</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StartupEventListener</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@EventListener</span><span class="token punctuation">(</span><span class="token class-name">ApplicationReadyEvent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"应用程序已就绪，开始执行任务..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行你的任务</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="执行顺序和最佳实践"><a href="#执行顺序和最佳实践" class="headerlink" title="执行顺序和最佳实践"></a>执行顺序和最佳实践</h2><p>不同方式的执行顺序如下：</p><ol><li><code>@PostConstruct</code></li><li><code>CommandLineRunner</code> / <code>ApplicationRunner</code></li><li><code>ApplicationReadyEvent</code> 监听器</li></ol><h3 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h3><ol><li><p><strong>选择合适的时机</strong></p><ul><li>使用 <code>@PostConstruct</code> 执行 Bean 级别的初始化</li><li>使用 <code>ApplicationReadyEvent</code> 执行应用级别的任务</li></ul></li><li><p><strong>异步处理</strong></p><ul><li>对于耗时任务，考虑使用异步执行：</li></ul></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncStartupTask</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Async</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 异步执行耗时任务</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><strong>错误处理</strong><ul><li>添加适当的错误处理机制：</li></ul></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StartupTask</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">StartupTask</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 执行任务</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"启动任务执行失败"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 根据需要决定是否需要终止应用</span>            <span class="token comment">// System.exit(1);</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><strong>如何控制多个任务的执行顺序？</strong><ul><li>使用 <code>@Order</code> 注解指定执行顺序：</li></ul></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstTask</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 首先执行的任务</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecondTask</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 随后执行的任务</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><strong>如何处理启动任务失败？</strong><ul><li>可以通过异常处理来决定是否继续启动：</li></ul></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CriticalStartupTask</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 执行关键任务</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 关键任务失败，终止应用</span>            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Spring Boot 提供了多种方式来实现程序启动后的任务执行，可以根据具体需求选择合适的实现方式：</p><ul><li>简单的 Bean 初始化用 <code>@PostConstruct</code></li><li>应用级别的任务用 <code>ApplicationRunner</code> 或 <code>CommandLineRunner</code></li><li>需要更细粒度控制的场景用事件监听</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-application-events-and-listeners">Spring Boot Application Events</a></li><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#context-functionality-events">Spring Framework Events</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和实现-Spring-Boot-中的启动任务。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和实现-Spring-Boot-中的启动任务。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和实现 Spring Boot 中的启动任务。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和实现 Spring Boot 中的启动任务。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 启动任务 </tag>
            
            <tag> 生命周期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring Boot】如何进行级联校验多层级的参数对象</title>
      <link href="/archives/b55fa573.html"/>
      <url>/archives/b55fa573.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在开发 RESTful API 时，常常需要处理复杂的请求体，其中可能包含多层级的参数对象。为了确保数据的有效性和安全性，Spring Boot 提供了级联校验的功能，可以对嵌套对象进行校验。本文将介绍如何在 Spring Boot 中实现级联校验多层级的参数对象。</p><h2 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h2><p>确保在 <code>pom.xml</code> 中添加了 <code>spring-boot-starter-validation</code> 依赖（如果之前已经添加过，可以跳过这一步）：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="级联校验示例"><a href="#级联校验示例" class="headerlink" title="级联校验示例"></a>级联校验示例</h2><h3 id="1-定义嵌套对象"><a href="#1-定义嵌套对象" class="headerlink" title="1. 定义嵌套对象"></a>1. 定义嵌套对象</h3><p>首先，我们定义一个嵌套对象，例如 <code>Address</code> 和 <code>User</code> 类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">NotBlank</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"地址不能为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> street<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"城市不能为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>    <span class="token comment">// getters and setters</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span></span><span class="token class-name">Valid</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">Email</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">NotBlank</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"用户名不能为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Email</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"邮箱格式不正确"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Valid</span> <span class="token comment">// 级联校验</span>    <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>    <span class="token comment">// getters and setters</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-控制器示例"><a href="#2-控制器示例" class="headerlink" title="2. 控制器示例"></a>2. 控制器示例</h3><p>在控制器中，我们可以使用 <code>@Valid</code> 注解来对 <code>User</code> 对象进行校验，Spring 会自动校验嵌套的 <code>Address</code> 对象：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">ResponseEntity</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Validated</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/users"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@PostMapping</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 处理用户创建逻辑</span>        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token string">"用户创建成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-全局异常处理"><a href="#3-全局异常处理" class="headerlink" title="3. 全局异常处理"></a>3. 全局异常处理</h3><p>为了处理校验失败时的异常，我们可以使用全局异常处理器，和之前的参数校验示例相同：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpStatus</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">ResponseEntity</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span></span><span class="token class-name">MethodArgumentNotValidException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ControllerAdvice</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ExceptionHandler</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleValidationExceptions</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> errors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ex<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFieldErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>error <span class="token operator">-&gt;</span>             errors<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> error<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>errors<span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="级联校验的最佳实践"><a href="#级联校验的最佳实践" class="headerlink" title="级联校验的最佳实践"></a>级联校验的最佳实践</h2><ol><li><p><strong>使用 <code>@Valid</code> 注解</strong>：在嵌套对象的字段上使用 <code>@Valid</code> 注解，以启用级联校验。</p></li><li><p><strong>清晰的错误信息</strong>：确保每个字段都有明确的错误信息，帮助前端开发人员快速定位问题。</p></li><li><p><strong>全局异常处理</strong>：使用 <code>@ControllerAdvice</code> 进行全局异常处理，集中管理异常响应。</p></li><li><p><strong>文档记录</strong>：在 API 文档中记录参数校验规则，确保前后端一致。</p></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>如何自定义级联校验的错误信息？</strong></p><ul><li>可以在嵌套对象的字段上使用自定义的校验注解，并提供自定义的错误信息。</li></ul></li><li><p><strong>如何处理复杂的嵌套对象？</strong></p><ul><li>对于更复杂的嵌套对象，可以继续使用 <code>@Valid</code> 注解进行多层级的校验。</li></ul></li><li><p><strong>如何进行国际化的错误信息？</strong></p><ul><li>可以使用 <code>MessageSource</code> 来实现国际化的错误信息。</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上方法，我们可以在 Spring Boot 中有效地进行级联校验多层级的参数对象，确保 API 的数据有效性和安全性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-validation">Spring Boot Validation</a></li><li><a href="https://beanvalidation.org/">Java Bean Validation</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和实现-Spring-Boot-中的级联校验。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和实现-Spring-Boot-中的级联校验。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和实现 Spring Boot 中的级联校验。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和实现 Spring Boot 中的级联校验。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 参数校验 </tag>
            
            <tag> 级联校验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring Boot】如何进行 Body、Query、Path Variable 类型的参数校验</title>
      <link href="/archives/b55fa572.html"/>
      <url>/archives/b55fa572.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在开发 RESTful API 时，参数校验是确保数据有效性和安全性的重要环节。Spring Boot 提供了强大的参数校验功能，可以对请求中的 Body、Query 和 Path Variable 类型的参数进行校验。本文将介绍如何在 Spring Boot 中实现这些参数的校验。</p><h2 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h2><p>首先，确保在 <code>pom.xml</code> 中添加了 <code>spring-boot-starter-validation</code> 依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-Body-参数校验"><a href="#1-Body-参数校验" class="headerlink" title="1. Body 参数校验"></a>1. Body 参数校验</h2><p>对于请求体中的参数校验，我们可以使用 <code>@Valid</code> 注解结合 Java Bean Validation API（如 Hibernate Validator）来实现。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">Email</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">NotBlank</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">Size</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDTO</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"用户名不能为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Email</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"邮箱格式不正确"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Size</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"密码长度不能少于6位"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token comment">// getters and setters</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="控制器示例"><a href="#控制器示例" class="headerlink" title="控制器示例"></a>控制器示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">ResponseEntity</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Validated</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/users"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@PostMapping</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">UserDTO</span> userDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 处理用户创建逻辑</span>        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token string">"用户创建成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-Query-参数校验"><a href="#2-Query-参数校验" class="headerlink" title="2. Query 参数校验"></a>2. Query 参数校验</h2><p>对于查询参数的校验，可以直接在控制器方法的参数上使用校验注解。</p><h3 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">Min</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">NotNull</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/products"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getProducts</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@RequestParam</span> <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"页码不能为空"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"页码必须大于0"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> page<span class="token punctuation">,</span>            <span class="token annotation punctuation">@RequestParam</span> <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"每页数量不能为空"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"每页数量必须大于0"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 处理获取产品逻辑</span>        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>productService<span class="token punctuation">.</span><span class="token function">getProducts</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Path-Variable-校验"><a href="#3-Path-Variable-校验" class="headerlink" title="3. Path Variable 校验"></a>3. Path Variable 校验</h2><p>对于路径变量的校验，方法与查询参数类似，可以在路径变量上使用校验注解。</p><h3 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">Min</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">NotNull</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/orders"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span> <span class="token function">getOrder</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@PathVariable</span> <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"订单ID不能为空"</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"订单ID必须大于0"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 处理获取订单逻辑</span>        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>orderService<span class="token punctuation">.</span><span class="token function">getOrderById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-全局异常处理"><a href="#4-全局异常处理" class="headerlink" title="4. 全局异常处理"></a>4. 全局异常处理</h2><p>为了处理校验失败时的异常，我们可以使用全局异常处理器。</p><h3 id="示例代码-3"><a href="#示例代码-3" class="headerlink" title="示例代码"></a>示例代码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpStatus</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">ResponseEntity</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span></span><span class="token class-name">MethodArgumentNotValidException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ControllerAdvice</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ExceptionHandler</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleValidationExceptions</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> errors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ex<span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFieldErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>error <span class="token operator">-&gt;</span>             errors<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> error<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>errors<span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li><p><strong>使用注解进行校验</strong>：利用 Java Bean Validation 提供的注解进行参数校验，保持代码简洁。</p></li><li><p><strong>全局异常处理</strong>：使用 <code>@ControllerAdvice</code> 进行全局异常处理，集中管理异常响应。</p></li><li><p><strong>清晰的错误信息</strong>：提供清晰的错误信息，帮助前端开发人员快速定位问题。</p></li><li><p><strong>文档记录</strong>：在 API 文档中记录参数校验规则，确保前后端一致。</p></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>如何自定义校验注解？</strong></p><ul><li>可以通过实现 <code>ConstraintValidator</code> 接口来自定义校验逻辑。</li></ul></li><li><p><strong>如何处理复杂的校验逻辑？</strong></p><ul><li>可以使用组合注解或自定义注解来处理复杂的校验需求。</li></ul></li><li><p><strong>如何进行国际化的错误信息？</strong></p><ul><li>可以使用 <code>MessageSource</code> 来实现国际化的错误信息。</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上方法，我们可以在 Spring Boot 中有效地进行 Body、Query 和 Path Variable 类型的参数校验，确保 API 的数据有效性和安全性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-validation">Spring Boot Validation</a></li><li><a href="https://beanvalidation.org/">Java Bean Validation</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和实现-Spring-Boot-中的参数校验。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和实现-Spring-Boot-中的参数校验。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和实现 Spring Boot 中的参数校验。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和实现 Spring Boot 中的参数校验。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 参数校验 </tag>
            
            <tag> 数据验证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring Boot】如何阻止某个第三方组件的自动装配</title>
      <link href="/archives/b55fa571.html"/>
      <url>/archives/b55fa571.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在 Spring Boot 中，自动装配是一个非常强大的特性，它可以根据类路径中的依赖自动配置 Spring 应用的 Bean。然而，在某些情况下，我们可能不希望某个第三方组件被自动装配，例如因为我们需要使用自定义的配置或实现。本文将介绍几种在 Spring Boot 中阻止某个第三方组件自动装配的方法。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1-使用-EnableAutoConfiguration-exclude"><a href="#1-使用-EnableAutoConfiguration-exclude" class="headerlink" title="1. 使用 @EnableAutoConfiguration(exclude = ...)"></a>1. 使用 <code>@EnableAutoConfiguration(exclude = ...)</code></h3><p>在主应用类上使用 <code>@EnableAutoConfiguration</code> 注解的 <code>exclude</code> 属性，可以指定要排除的自动装配类。例如，如果我们想要排除 <code>DataSourceAutoConfiguration</code>，可以这样做：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span><span class="token class-name">DataSourceAutoConfiguration</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MyApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-使用-ConditionalOnMissingBean"><a href="#2-使用-ConditionalOnMissingBean" class="headerlink" title="2. 使用 @ConditionalOnMissingBean"></a>2. 使用 <code>@ConditionalOnMissingBean</code></h3><p>如果你在自定义配置中使用了某个 Bean，并且希望阻止自动装配的 Bean，可以在自定义 Bean 上使用 <code>@ConditionalOnMissingBean</code> 注解。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>condition<span class="token punctuation">.</span></span><span class="token class-name">ConditionalOnMissingBean</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">MyService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">MyService</span> <span class="token function">myService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，如果 <code>MyService</code> 已经被自动装配，则不会再创建自定义的 <code>MyService</code> Bean。</p><h3 id="3-使用-spring-autoconfigure-exclude-属性"><a href="#3-使用-spring-autoconfigure-exclude-属性" class="headerlink" title="3. 使用 spring.autoconfigure.exclude 属性"></a>3. 使用 <code>spring.autoconfigure.exclude</code> 属性</h3><p>在 <code>application.properties</code> 或 <code>application.yml</code> 文件中，可以使用 <code>spring.autoconfigure.exclude</code> 属性来排除自动装配的类。例如：</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">spring.autoconfigure.exclude</span><span class="token punctuation">=</span><span class="token value attr-value">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者在 <code>application.yml</code> 中：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">autoconfigure</span><span class="token punctuation">:</span>    <span class="token key atrule">exclude</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-自定义条件注解"><a href="#4-自定义条件注解" class="headerlink" title="4. 自定义条件注解"></a>4. 自定义条件注解</h3><p>如果需要更复杂的条件，可以创建自定义的条件注解，并在自动装配的 Bean 上使用。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Conditional</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span><span class="token class-name">MyCustomCondition</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-使用-Profile-注解"><a href="#5-使用-Profile-注解" class="headerlink" title="5. 使用 @Profile 注解"></a>5. 使用 <code>@Profile</code> 注解</h3><p>如果某个 Bean 只在特定的环境中需要，可以使用 <code>@Profile</code> 注解来控制 Bean 的创建。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Profile</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DevOnlyService</span> <span class="token punctuation">{</span>    <span class="token comment">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在生产环境中，<code>DevOnlyService</code> 将不会被创建。</p><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li><p><strong>明确依赖关系</strong>：在使用第三方组件时，确保了解其自动装配的内容，以便在需要时进行排除。</p></li><li><p><strong>使用自定义配置</strong>：在需要自定义 Bean 的情况下，使用自定义配置类来替代自动装配的 Bean。</p></li><li><p><strong>保持配置简洁</strong>：尽量避免过多的排除配置，以保持项目的可维护性。</p></li><li><p><strong>文档记录</strong>：在项目文档中记录排除的自动装配类，以便团队成员了解项目的配置。</p></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>如何知道哪些自动装配类被加载？</strong></p><ul><li>可以在启动日志中查看 Spring Boot 的自动装配报告，使用 <code>--debug</code> 参数启动应用。</li></ul></li><li><p><strong>如何排除多个自动装配类？</strong></p><ul><li>在 <code>@EnableAutoConfiguration</code> 中使用 <code>exclude</code> 属性时，可以传入多个类，例如：<code>exclude = {Class1.class, Class2.class}</code>。</li></ul></li><li><p><strong>如何处理依赖冲突？</strong></p><ul><li>确保使用兼容的版本，必要时可以排除某些依赖。</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上方法，我们可以有效地阻止某个第三方组件的自动装配，确保 Spring Boot 应用的灵活性和可控性。合理使用自动装配特性，可以提高开发效率，同时避免不必要的配置冲突。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.auto-configuration">Spring Boot Auto-Configuration</a></li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html">Spring Boot Configuration Properties</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和解决-Spring-Boot-中的自动装配问题。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和解决-Spring-Boot-中的自动装配问题。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和解决 Spring Boot 中的自动装配问题。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和解决 Spring Boot 中的自动装配问题。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 配置管理 </tag>
            
            <tag> 自动装配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring】如何解决同一实例内部方法调用时部分事务失效的问题</title>
      <link href="/archives/b55fa570.html"/>
      <url>/archives/b55fa570.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在 Spring 应用中，事务管理是确保数据一致性的重要机制。然而，当我们在同一实例内部方法调用时，可能会遇到事务失效的问题。这是因为 Spring 的事务管理是基于 AOP（面向切面编程）实现的，只有通过代理对象调用的方法才能被事务管理器拦截。</p><h2 id="问题示例"><a href="#问题示例" class="headerlink" title="问题示例"></a>问题示例</h2><p>考虑以下示例代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 保存用户</span>        userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用内部方法</span>        <span class="token function">sendWelcomeEmail</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendWelcomeEmail</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 发送欢迎邮件</span>        emailService<span class="token punctuation">.</span><span class="token function">sendEmail</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，<code>createUser</code> 方法被标记为 <code>@Transactional</code>，但当它内部调用 <code>sendWelcomeEmail</code> 方法时，事务不会被应用到 <code>sendWelcomeEmail</code> 方法中。这可能导致在 <code>sendWelcomeEmail</code> 方法中发生异常时，<code>createUser</code> 方法的事务不会回滚。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1-使用代理对象"><a href="#1-使用代理对象" class="headerlink" title="1. 使用代理对象"></a>1. 使用代理对象</h3><p>为了确保事务能够正常工作，我们可以将内部方法提取到另一个服务中，确保通过代理对象调用。示例如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">EmailService</span> emailService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 保存用户</span>        userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用外部服务</span>        emailService<span class="token punctuation">.</span><span class="token function">sendWelcomeEmail</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-使用-Transactional-注解在外部方法"><a href="#2-使用-Transactional-注解在外部方法" class="headerlink" title="2. 使用 @Transactional 注解在外部方法"></a>2. 使用 <code>@Transactional</code> 注解在外部方法</h3><p>如果不想将方法提取到另一个服务中，可以考虑将 <code>@Transactional</code> 注解放在外部方法上，确保事务能够正常工作：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">EmailService</span> emailService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 保存用户</span>        userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用内部方法</span>        <span class="token function">sendWelcomeEmail</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">REQUIRES_NEW</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendWelcomeEmail</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 发送欢迎邮件</span>        emailService<span class="token punctuation">.</span><span class="token function">sendEmail</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-使用-AOP-代理"><a href="#3-使用-AOP-代理" class="headerlink" title="3. 使用 AOP 代理"></a>3. 使用 AOP 代理</h3><p>如果需要在同一类中调用方法并保持事务，可以使用 AOP 代理。确保在 Spring 配置中启用 AOP：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>    <span class="token comment">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在调用方法时，使用 <code>ApplicationContext</code> 获取代理对象：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 保存用户</span>        userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 通过代理对象调用</span>        <span class="token class-name">UserService</span> proxy <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">sendWelcomeEmail</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendWelcomeEmail</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 发送欢迎邮件</span>        emailService<span class="token punctuation">.</span><span class="token function">sendEmail</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li><p><strong>避免同一实例内部方法调用</strong>：尽量避免在同一实例中直接调用带有事务的方法，使用外部服务或代理对象。</p></li><li><p><strong>合理使用事务传播行为</strong>：根据业务需求选择合适的事务传播行为，如 <code>REQUIRES_NEW</code>。</p></li><li><p><strong>清晰的事务边界</strong>：确保每个事务的边界清晰，避免不必要的嵌套事务。</p></li><li><p><strong>日志记录</strong>：在事务处理过程中，记录关键信息，便于后续排查。</p></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>如何调试事务失效的问题？</strong></p><ul><li>可以通过日志记录事务的开始和结束，检查事务是否被正确提交或回滚。</li></ul></li><li><p><strong>如何处理嵌套事务？</strong></p><ul><li>使用合适的事务传播行为，确保嵌套事务的处理符合业务需求。</li></ul></li><li><p><strong>如何确保数据一致性？</strong></p><ul><li>在设计业务逻辑时，确保事务的边界和数据的一致性。</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上方法，我们可以有效解决同一实例内部方法调用时部分事务失效的问题，确保 Spring 应用中的数据一致性和事务管理的有效性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/data-access.html#transaction">Spring Transaction Management</a></li><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#aop">Spring AOP Documentation</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和解决同一实例内部方法调用时的事务失效问题。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和解决同一实例内部方法调用时的事务失效问题。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和解决同一实例内部方法调用时的事务失效问题。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和解决同一实例内部方法调用时的事务失效问题。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> 事务管理 </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring Cloud Gateway】如何配置全局异常处理</title>
      <link href="/archives/b55fa569.html"/>
      <url>/archives/b55fa569.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在使用 Spring Cloud Gateway 作为 API 网关时，处理请求和响应的异常是非常重要的。良好的异常处理机制可以提高系统的健壮性，并为前端提供清晰的错误信息。与 Spring Boot 中的全局异常处理类似，Spring Cloud Gateway 也提供了全局异常处理的能力。</p><h2 id="关联内容"><a href="#关联内容" class="headerlink" title="关联内容"></a>关联内容</h2><p>在之前的文章中，我们讨论了如何在 Spring Boot 中实现全局统一异常处理，使用 <code>@ControllerAdvice</code> 和 <code>@ExceptionHandler</code> 注解来处理各种类型的异常。本文将基于这些概念，介绍如何在 Spring Cloud Gateway 中实现类似的功能。</p><h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><h3 id="1-定义统一响应结构"><a href="#1-定义统一响应结构" class="headerlink" title="1. 定义统一响应结构"></a>1. 定义统一响应结构</h3><p>首先，我们需要定义一个统一的响应结构，类似于之前的实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"success"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-创建全局异常处理器"><a href="#2-创建全局异常处理器" class="headerlink" title="2. 创建全局异常处理器"></a>2. 创建全局异常处理器</h3><p>在 Spring Cloud Gateway 中，我们可以通过实现 <code>GlobalFilter</code> 接口来处理全局异常。以下是一个示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">GatewayFilter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>gateway<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span><span class="token class-name">AbstractGatewayFilterFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpStatus</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerWebExchange</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">reactor<span class="token punctuation">.</span>core<span class="token punctuation">.</span>publisher<span class="token punctuation">.</span></span><span class="token class-name">Mono</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandlerFilter</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractGatewayFilterFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GlobalExceptionHandlerFilter<span class="token punctuation">.</span>Config</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">GlobalExceptionHandlerFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">Config</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">GatewayFilter</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">Config</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> chain<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onErrorResume</span><span class="token punctuation">(</span>throwable <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token comment">// 处理异常</span>                <span class="token keyword">return</span> <span class="token function">handleException</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleException</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 根据异常类型返回不同的响应</span>        <span class="token class-name">HttpStatus</span> status <span class="token operator">=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">INTERNAL_SERVER_ERROR</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">"系统繁忙，请稍后重试"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>throwable <span class="token keyword">instanceof</span> <span class="token class-name">BusinessException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            status <span class="token operator">=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">;</span>            message <span class="token operator">=</span> throwable<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>throwable <span class="token keyword">instanceof</span> <span class="token class-name">HttpRequestMethodNotSupportedException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            status <span class="token operator">=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">METHOD_NOT_ALLOWED</span><span class="token punctuation">;</span>            message <span class="token operator">=</span> <span class="token string">"请求方法不支持"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 构建响应</span>        exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>        exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeWith</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bufferFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsBytes</span><span class="token punctuation">(</span><span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token punctuation">{</span>        <span class="token comment">// 配置类</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-注册全局过滤器"><a href="#3-注册全局过滤器" class="headerlink" title="3. 注册全局过滤器"></a>3. 注册全局过滤器</h3><p>在 Spring Cloud Gateway 中，您需要将全局过滤器注册到应用程序中。可以在主应用类中使用 <code>@Bean</code> 注解进行注册：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GatewayApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">GatewayApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">GlobalExceptionHandlerFilter</span> <span class="token function">globalExceptionHandlerFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">GlobalExceptionHandlerFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-使用示例"><a href="#4-使用示例" class="headerlink" title="4. 使用示例"></a>4. 使用示例</h3><p>在 Gateway 中配置路由时，可以直接使用全局异常处理器：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> user<span class="token punctuation">-</span>service          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8081</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/api/user/<span class="token important">**</span>          <span class="token key atrule">filters</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> GlobalExceptionHandlerFilter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li><p><strong>统一错误码规范</strong></p><ul><li>建立统一的错误码体系，确保前后端一致。</li></ul></li><li><p><strong>日志记录</strong></p><ul><li>记录异常信息，便于后续排查。</li></ul></li><li><p><strong>性能考虑</strong></p><ul><li>在异常处理过程中，避免进行重量级操作。</li></ul></li><li><p><strong>友好性</strong></p><ul><li>提供清晰的错误提示，支持国际化。</li></ul></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>如何处理嵌套异常？</strong></p><ul><li>可以在 <code>handleException</code> 方法中对异常进行递归处理，获取根异常。</li></ul></li><li><p><strong>如何实现错误信息国际化？</strong></p><ul><li>可以使用 <code>MessageSource</code> 来获取国际化的错误信息。</li></ul></li><li><p><strong>如何处理异步请求的异常？</strong></p><ul><li>在异步请求中，确保异常处理逻辑能够捕获到异常。</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过实现全局统一异常处理，我们可以在 Spring Cloud Gateway 中有效地处理各种异常，提供友好的错误提示，并提高系统的健壮性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://spring.io/projects/spring-cloud-gateway">Spring Cloud Gateway Documentation</a></li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-error-handling">Spring Boot Exception Handling</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和实现-Spring-Cloud-Gateway-的全局异常处理。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和实现-Spring-Cloud-Gateway-的全局异常处理。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和实现 Spring Cloud Gateway 的全局异常处理。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和实现 Spring Cloud Gateway 的全局异常处理。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 异常处理 </tag>
            
            <tag> Spring Cloud </tag>
            
            <tag> Gateway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring Boot】如何实现全局统一异常处理</title>
      <link href="/archives/b55fa568.html"/>
      <url>/archives/b55fa568.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在实际开发中，异常处理是一个非常重要的环节。良好的异常处理机制不仅能够提高系统的健壮性，还能为前端提供清晰的错误信息。Spring Boot 提供了 <code>@ControllerAdvice</code> 和 <code>@ExceptionHandler</code> 注解来实现全局异常处理。</p><h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><h3 id="1-定义统一响应结构"><a href="#1-定义统一响应结构" class="headerlink" title="1. 定义统一响应结构"></a>1. 定义统一响应结构</h3><p>首先，我们需要定义一个统一的响应结构：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"success"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-自定义业务异常"><a href="#2-自定义业务异常" class="headerlink" title="2. 自定义业务异常"></a>2. 自定义业务异常</h3><p>定义业务异常类，用于处理业务逻辑异常：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-实现全局异常处理器"><a href="#3-实现全局异常处理器" class="headerlink" title="3. 实现全局异常处理器"></a>3. 实现全局异常处理器</h3><p>创建全局异常处理类，处理各种类型的异常：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ExceptionHandler</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestControllerAdvice</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 处理所有未知异常     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"系统异常"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"系统繁忙，请稍后重试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 处理业务异常     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">BusinessException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleBusinessException</span><span class="token punctuation">(</span><span class="token class-name">BusinessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"业务异常: {}"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 处理请求方法不支持异常     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">HttpRequestMethodNotSupportedException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleHttpRequestMethodNotSupportedException</span><span class="token punctuation">(</span><span class="token class-name">HttpRequestMethodNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"请求方法不支持: {}"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token number">405</span><span class="token punctuation">,</span> <span class="token string">"请求方法不支持"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 处理HTTP客户端异常     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">HttpClientErrorException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleHttpClientErrorException</span><span class="token punctuation">(</span><span class="token class-name">HttpClientErrorException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"HTTP客户端异常"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getRawStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getStatusText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 处理Feign调用异常     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">FeignException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleFeignException</span><span class="token punctuation">(</span><span class="token class-name">FeignException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Feign调用异常"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"服务调用失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 处理参数校验异常     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">ConstraintViolationException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleConstraintViolationException</span><span class="token punctuation">(</span><span class="token class-name">ConstraintViolationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"参数校验异常"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getConstraintViolations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">ConstraintViolation</span><span class="token operator">::</span><span class="token function">getMessage</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">"; "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 处理数据验证异常     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">ValidationException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleValidationException</span><span class="token punctuation">(</span><span class="token class-name">ValidationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"数据验证异常"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-异常处理组件的特性"><a href="#4-异常处理组件的特性" class="headerlink" title="4. 异常处理组件的特性"></a>4. 异常处理组件的特性</h3><p>一个优秀的异常处理组件应具备以下特性：</p><ol><li><p><strong>统一性</strong></p><ul><li>提供统一的异常处理方式</li><li>统一的响应格式</li><li>统一的错误码规范</li></ul></li><li><p><strong>可扩展性</strong></p><ul><li>易于添加新的异常处理类型</li><li>支持自定义异常处理逻辑</li></ul></li><li><p><strong>安全性</strong></p><ul><li>避免敏感信息泄露</li><li>生产环境中隐藏具体错误堆栈</li></ul></li><li><p><strong>可追踪性</strong></p><ul><li>完善的日志记录</li><li>唯一的错误追踪标识</li></ul></li><li><p><strong>友好性</strong></p><ul><li>提供清晰的错误提示</li><li>支持国际化</li></ul></li></ol><h3 id="5-使用示例"><a href="#5-使用示例" class="headerlink" title="5. 使用示例"></a>5. 使用示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">"用户ID不合法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 业务逻辑</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validated</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">UserDTO</span> userDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 业务逻辑</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li><p><strong>错误码规范</strong></p><ul><li>建立统一的错误码体系</li><li>不同类型的错误使用不同的错误码范围</li></ul></li><li><p><strong>日志记录</strong></p><ul><li>区分不同级别的日志</li><li>记录关键信息和上下文</li></ul></li><li><p><strong>异常粒度</strong></p><ul><li>合理划分异常类型</li><li>避免过细或过粗的异常处理</li></ul></li><li><p><strong>性能考虑</strong></p><ul><li>避免在异常处理中进行重量级操作</li><li>合理使用日志级别</li></ul></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>如何处理嵌套异常？</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Throwable</span> root <span class="token operator">=</span> <span class="token function">getRootCause</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"系统异常"</span><span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> root<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>如何实现错误信息国际化？</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">MessageSource</span> messageSource<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getLocalizedMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> code<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> messageSource<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token class-name">LocaleContextHolder</span><span class="token punctuation">.</span><span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>如何处理异步方法的异常？</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AsyncConfigurer</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncConfig</span> <span class="token keyword">implements</span> <span class="token class-name">AsyncConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">AsyncUncaughtExceptionHandler</span> <span class="token function">getAsyncUncaughtExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAsyncUncaughtExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过实现全局统一异常处理，我们可以：</p><ol><li>统一处理各类异常</li><li>提供友好的错误提示</li><li>简化异常处理流程</li><li>提高代码的可维护性</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-error-handling">Spring Boot Exception Handling</a></li><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-ann-controller-advice">Spring @ControllerAdvice</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和实现全局统一异常处理。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和实现全局统一异常处理。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和实现全局统一异常处理。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和实现全局统一异常处理。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 异常处理 </tag>
            
            <tag> 全局处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring Boot】如何解决 @ConfigurationProperties 不生效的问题</title>
      <link href="/archives/b55fa567.html"/>
      <url>/archives/b55fa567.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在 Spring Boot 应用中，<code>@ConfigurationProperties</code> 注解用于将配置文件中的属性映射到 Java 对象中。这种方式使得配置管理更加灵活和类型安全。然而，在某些情况下，<code>@ConfigurationProperties</code> 可能会出现不生效的问题，导致无法正确加载配置。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1-确保正确使用-ConfigurationProperties"><a href="#1-确保正确使用-ConfigurationProperties" class="headerlink" title="1. 确保正确使用 @ConfigurationProperties"></a>1. 确保正确使用 @ConfigurationProperties</h3><p>确保你的配置类上使用了 <code>@ConfigurationProperties</code> 注解，并且指定了正确的前缀。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"app"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> version<span class="token punctuation">;</span>    <span class="token comment">// getters and setters</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-确保类被-Spring-扫描到"><a href="#2-确保类被-Spring-扫描到" class="headerlink" title="2. 确保类被 Spring 扫描到"></a>2. 确保类被 Spring 扫描到</h3><p>确保你的配置类被 Spring 扫描到。通常情况下，配置类需要被标记为 <code>@Component</code>，或者在主应用类中使用 <code>@EnableConfigurationProperties</code> 注解。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">EnableConfigurationProperties</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">AppProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MyApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-检查配置文件格式"><a href="#3-检查配置文件格式" class="headerlink" title="3. 检查配置文件格式"></a>3. 检查配置文件格式</h3><p>确保你的配置文件（如 <code>application.yml</code> 或 <code>application.properties</code>）格式正确。例如，YAML 文件的格式应如下所示：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">app</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> MyApp  <span class="token key atrule">version</span><span class="token punctuation">:</span> 1.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>而在 <code>application.properties</code> 中应如下所示：</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">app.name</span><span class="token punctuation">=</span><span class="token value attr-value">MyApp</span><span class="token key attr-name">app.version</span><span class="token punctuation">=</span><span class="token value attr-value">1.0.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-确保配置文件被加载"><a href="#4-确保配置文件被加载" class="headerlink" title="4. 确保配置文件被加载"></a>4. 确保配置文件被加载</h3><p>确保你的配置文件被正确加载。可以通过以下方式检查：</p><ul><li>确保配置文件位于 <code>src/main/resources</code> 目录下。</li><li>确保没有其他配置文件覆盖了你的设置。</li></ul><h3 id="5-使用-Validated-注解"><a href="#5-使用-Validated-注解" class="headerlink" title="5. 使用 @Validated 注解"></a>5. 使用 @Validated 注解</h3><p>如果你使用了数据验证，可以在配置类上添加 <code>@Validated</code> 注解，以确保属性的验证生效：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>constraints<span class="token punctuation">.</span></span><span class="token class-name">NotEmpty</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"app"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Validated</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppProperties</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@NotEmpty</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> version<span class="token punctuation">;</span>    <span class="token comment">// getters and setters</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-检查-Spring-Boot-版本"><a href="#6-检查-Spring-Boot-版本" class="headerlink" title="6. 检查 Spring Boot 版本"></a>6. 检查 Spring Boot 版本</h3><p>在某些情况下，<code>@ConfigurationProperties</code> 的行为可能会因 Spring Boot 版本的不同而有所变化。确保你使用的是最新的稳定版本，并查看相关的 <a href="https://github.com/spring-projects/spring-boot/releases">Spring Boot Release Notes</a> 以获取更多信息。</p><h3 id="7-使用-PropertySource-注解"><a href="#7-使用-PropertySource-注解" class="headerlink" title="7. 使用 @PropertySource 注解"></a>7. 使用 @PropertySource 注解</h3><p>如果你的配置文件不在默认位置，可以使用 <code>@PropertySource</code> 注解来指定配置文件的位置：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PropertySource</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:custom.properties"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomConfig</span> <span class="token punctuation">{</span>    <span class="token comment">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>如何调试 @ConfigurationProperties 不生效的问题？</strong></p><ul><li>可以在应用启动时打印出所有加载的配置，检查是否包含预期的属性。</li></ul></li><li><p><strong>如何处理复杂的嵌套属性？</strong></p><ul><li>对于嵌套属性，可以创建嵌套的 Java 类，并在主配置类中使用该类。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token comment">// getters and setters</span><span class="token punctuation">}</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"database"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">DatabaseProperties</span> database<span class="token punctuation">;</span>    <span class="token comment">// getters and setters</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>如何确保属性的类型安全？</strong></p><ul><li>使用 Java 的基本数据类型和对象类型，确保在配置文件中提供的值与 Java 类型匹配。</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上方法，我们可以有效地解决 <code>@ConfigurationProperties</code> 不生效的问题，确保 Spring Boot 应用能够正确加载和使用配置。合理使用 <code>@ConfigurationProperties</code> 可以提高配置管理的灵活性和可维护性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-config">Spring Boot Documentation</a></li><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans">Spring Framework Documentation</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和解决-ConfigurationProperties-不生效的问题。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和解决-ConfigurationProperties-不生效的问题。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和解决 @ConfigurationProperties 不生效的问题。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和解决 <code>@ConfigurationProperties</code> 不生效的问题。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> ConfigurationProperties </tag>
            
            <tag> 配置管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring】如何静态获取 HttpServletRequest 和 Response</title>
      <link href="/archives/b55fa566.html"/>
      <url>/archives/b55fa566.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在 Spring Web 应用中，我们经常需要在非 Controller 层获取当前请求的 HttpServletRequest 和 HttpServletResponse 对象。虽然在 Controller 中可以直接通过参数注入获取这些对象，但在工具类或其他静态方法中获取它们则需要一些特殊处理。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1-创建-RequestContextHolder-工具类"><a href="#1-创建-RequestContextHolder-工具类" class="headerlink" title="1. 创建 RequestContextHolder 工具类"></a>1. 创建 RequestContextHolder 工具类</h3><p>首先，创建一个工具类来持有和获取 Request 和 Response 对象：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">RequestContextHolder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">ServletRequestAttributes</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletUtils</span> <span class="token punctuation">{</span>        <span class="token comment">/**     * 获取 HttpServletRequest 对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HttpServletRequest</span> <span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ServletRequestAttributes</span> attributes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> attributes <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> attributes<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">/**     * 获取 HttpServletResponse 对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HttpServletResponse</span> <span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ServletRequestAttributes</span> attributes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> attributes <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> attributes<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-IP-地址工具类"><a href="#2-IP-地址工具类" class="headerlink" title="2. IP 地址工具类"></a>2. IP 地址工具类</h3><p>使用获取到的 Request 对象，我们可以编写一个获取请求者真实 IP 地址的工具类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IpUtils</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">IP_HEADER_NAMES</span> <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"X-Forwarded-For"</span><span class="token punctuation">,</span>            <span class="token string">"Proxy-Client-IP"</span><span class="token punctuation">,</span>            <span class="token string">"WL-Proxy-Client-IP"</span><span class="token punctuation">,</span>            <span class="token string">"HTTP_X_FORWARDED_FOR"</span><span class="token punctuation">,</span>            <span class="token string">"HTTP_X_FORWARDED"</span><span class="token punctuation">,</span>            <span class="token string">"HTTP_X_CLUSTER_CLIENT_IP"</span><span class="token punctuation">,</span>            <span class="token string">"HTTP_CLIENT_IP"</span><span class="token punctuation">,</span>            <span class="token string">"HTTP_FORWARDED_FOR"</span><span class="token punctuation">,</span>            <span class="token string">"HTTP_FORWARDED"</span><span class="token punctuation">,</span>            <span class="token string">"HTTP_VIA"</span><span class="token punctuation">,</span>            <span class="token string">"REMOTE_ADDR"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment">/**     * 获取请求者的真实IP地址     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getClientIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token class-name">ServletUtils</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token class-name">String</span> ip <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> header <span class="token operator">:</span> <span class="token constant">IP_HEADER_NAMES</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isUnknown</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUnknown</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment">// 多个代理的情况，第一个IP为客户端真实IP</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ip <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> ip<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ip <span class="token operator">=</span> ip<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token string">"0:0:0:0:0:0:0:1"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"127.0.0.1"</span> <span class="token operator">:</span> ip<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isUnknown</span><span class="token punctuation">(</span><span class="token class-name">String</span> ip<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ip <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> ip<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"unknown"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-Request-对象的常用方法"><a href="#3-Request-对象的常用方法" class="headerlink" title="3. Request 对象的常用方法"></a>3. Request 对象的常用方法</h3><p>使用 Request 对象可以获取很多有用的信息：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestUtils</span> <span class="token punctuation">{</span>        <span class="token comment">/**     * 获取请求的URL     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getRequestUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token class-name">ServletUtils</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> request <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">/**     * 获取请求方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token class-name">ServletUtils</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> request <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">/**     * 获取请求头信息     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token class-name">ServletUtils</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> request <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">/**     * 获取请求参数     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token class-name">ServletUtils</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> request <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">/**     * 判断是否是Ajax请求     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isAjaxRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token class-name">ServletUtils</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">String</span> requestedWith <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"X-Requested-With"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"XMLHttpRequest"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>requestedWith<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-Response-对象的常用方法"><a href="#4-Response-对象的常用方法" class="headerlink" title="4. Response 对象的常用方法"></a>4. Response 对象的常用方法</h3><p>Response 对象主要用于处理响应：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseUtils</span> <span class="token punctuation">{</span>        <span class="token comment">/**     * 输出JSON数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">renderJson</span><span class="token punctuation">(</span><span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">HttpServletResponse</span> response <span class="token operator">=</span> <span class="token class-name">ServletUtils</span><span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment">/**     * 设置响应头     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">HttpServletResponse</span> response <span class="token operator">=</span> <span class="token class-name">ServletUtils</span><span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment">/**     * 文件下载     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">HttpServletResponse</span> response <span class="token operator">=</span> <span class="token class-name">ServletUtils</span><span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/octet-stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span>                     <span class="token string">"attachment;filename="</span> <span class="token operator">+</span> <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><h3 id="1-获取客户端IP"><a href="#1-获取客户端IP" class="headerlink" title="1. 获取客户端IP"></a>1. 获取客户端IP</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoController</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/ip"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getClientIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Your IP is: "</span> <span class="token operator">+</span> <span class="token class-name">IpUtils</span><span class="token punctuation">.</span><span class="token function">getClientIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-判断请求类型"><a href="#2-判断请求类型" class="headerlink" title="2. 判断请求类型"></a>2. 判断请求类型</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">RequestUtils</span><span class="token punctuation">.</span><span class="token function">isAjaxRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 处理Ajax请求</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// 处理普通请求</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li><p><strong>异常处理</strong>：在获取 Request 和 Response 对象时要注意空指针检查。</p></li><li><p><strong>线程安全</strong>：RequestContextHolder 是线程安全的，可以放心使用。</p></li><li><p><strong>性能考虑</strong>：避免频繁调用获取 Request 和 Response 的方法，可以在需要时将对象保存在局部变量中。</p></li><li><p><strong>代理环境</strong>：在获取客户端 IP 时要考虑代理服务器的情况。</p></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>为什么获取到的是 null？</strong></p><ul><li>确保在 Web 请求上下文中调用这些方法</li><li>检查是否正确配置了 Spring 的 RequestContextListener</li></ul></li><li><p><strong>如何处理跨域请求？</strong></p><ul><li>可以通过 Response 设置相应的 CORS 头信息</li></ul></li><li><p><strong>如何处理大文件下载？</strong></p><ul><li>使用流式处理，避免一次性加载整个文件到内存</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过静态方法获取 HttpServletRequest 和 HttpServletResponse 对象，我们可以在任何地方方便地访问请求和响应信息，实现更灵活的功能。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html">Spring Web Documentation</a></li><li><a href="https://javaee.github.io/servlet-spec/">Servlet Documentation</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和使用-HttpServletRequest-和-HttpServletResponse。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和使用-HttpServletRequest-和-HttpServletResponse。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和使用 HttpServletRequest 和 HttpServletResponse。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和使用 HttpServletRequest 和 HttpServletResponse。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring Boots </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> Servlet </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring Boot】如何快速添加 Maven 依赖项</title>
      <link href="/archives/b55fa565.html"/>
      <url>/archives/b55fa565.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在使用 Spring Boot 开发应用时，添加 Maven 依赖项是一个常见的任务。随着项目的复杂性增加，手动查找和添加依赖项可能会变得繁琐。本文将介绍几种快速添加 Spring Boot Maven 依赖项的方法，帮助开发者提高效率。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1-使用-Spring-Initializr"><a href="#1-使用-Spring-Initializr" class="headerlink" title="1. 使用 Spring Initializr"></a>1. 使用 Spring Initializr</h3><p>Spring Initializr 是一个在线工具，可以帮助你快速生成 Spring Boot 项目的基础结构，包括所需的 Maven 依赖项。</p><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><ol><li>访问 <a href="https://start.spring.io/">Spring Initializr</a>.</li><li>选择项目的基本信息，如 Maven 项目、Java 版本、Spring Boot 版本等。</li><li>在 “Dependencies” 部分，搜索并选择所需的依赖项。</li><li>点击 “Generate” 按钮，下载生成的项目压缩包。</li><li>解压并导入到你的 IDE 中。</li></ol><h3 id="2-使用-IDE-的依赖管理功能"><a href="#2-使用-IDE-的依赖管理功能" class="headerlink" title="2. 使用 IDE 的依赖管理功能"></a>2. 使用 IDE 的依赖管理功能</h3><p>许多现代 IDE（如 IntelliJ IDEA 和 Eclipse）都提供了集成的 Maven 依赖管理功能，可以帮助你快速添加依赖项。</p><h4 id="在-IntelliJ-IDEA-中："><a href="#在-IntelliJ-IDEA-中：" class="headerlink" title="在 IntelliJ IDEA 中："></a>在 IntelliJ IDEA 中：</h4><ol><li>打开 <code>pom.xml</code> 文件。</li><li>在 “Dependencies” 部分，右键点击并选择 “Add Dependency”。</li><li>在弹出的对话框中，搜索所需的依赖项并选择。</li><li>点击 “OK”，IDE 会自动添加依赖项并下载。</li></ol><h4 id="在-Eclipse-中："><a href="#在-Eclipse-中：" class="headerlink" title="在 Eclipse 中："></a>在 Eclipse 中：</h4><ol><li>打开 <code>pom.xml</code> 文件。</li><li>右键点击 “Dependencies” 部分，选择 “Add Dependency”。</li><li>在弹出的对话框中，搜索所需的依赖项并选择。</li><li>点击 “OK”，Eclipse 会自动添加依赖项并下载。</li></ol><h3 id="3-手动添加依赖项"><a href="#3-手动添加依赖项" class="headerlink" title="3. 手动添加依赖项"></a>3. 手动添加依赖项</h3><p>如果你知道所需依赖项的 Maven 坐标，可以直接在 <code>pom.xml</code> 中手动添加。</p><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 根据需要选择版本 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-查找-Maven-依赖项"><a href="#4-查找-Maven-依赖项" class="headerlink" title="4. 查找 Maven 依赖项"></a>4. 查找 Maven 依赖项</h3><p>如果你不确定所需依赖项的坐标，可以通过以下方式查找：</p><ul><li><strong>Maven Central Repository</strong>：访问 <a href="https://search.maven.org/">Maven Central</a> 搜索所需的库。</li><li><strong>Spring 官方文档</strong>：访问 <a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/">Spring Boot Documentation</a> 查找相关依赖项。</li></ul><h3 id="5-使用-BOM（Bill-of-Materials）"><a href="#5-使用-BOM（Bill-of-Materials）" class="headerlink" title="5. 使用 BOM（Bill of Materials）"></a>5. 使用 BOM（Bill of Materials）</h3><p>Spring Boot 提供了一个 BOM，可以帮助你管理依赖项的版本。只需在 <code>pom.xml</code> 中添加以下内容：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 根据需要选择版本 --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，你可以在 <code>dependencies</code> 部分中添加依赖项，而不需要指定版本号：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li><strong>使用 Spring Initializr</strong>：对于新项目，使用 Spring Initializr 是最简单和最快的方法。</li><li><strong>利用 IDE 功能</strong>：使用 IDE 的依赖管理功能可以减少手动输入错误。</li><li><strong>定期更新依赖项</strong>：保持依赖项的更新，以确保使用最新的功能和安全修复。</li><li><strong>使用 BOM 管理版本</strong>：使用 Spring Boot 的 BOM 来简化依赖项的版本管理。</li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>如何解决依赖冲突？</strong></p><ul><li>可以使用 Maven 的 <code>dependency:tree</code> 命令查看依赖关系树，找出冲突的依赖项，并手动排除不需要的版本。</li></ul></li><li><p><strong>如何查看可用的依赖版本？</strong></p><ul><li>可以访问 <a href="https://search.maven.org/">Maven Central</a> 或使用 IDE 的依赖管理功能查看可用版本。</li></ul></li><li><p><strong>如何添加测试依赖项？</strong></p><ul><li>在 <code>pom.xml</code> 中添加测试相关的依赖项，例如 JUnit 或 Mockito，通常在 <code>test</code> 范围内：</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.junit.jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit-jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上方法，我们可以快速添加 Spring Boot 的 Maven 依赖项，提高开发效率。无论是使用 Spring Initializr、IDE 的依赖管理功能，还是手动添加依赖项，都能有效地管理项目的依赖关系。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/">Spring Boot Documentation</a></li><li><a href="https://search.maven.org/">Maven Central Repository</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和快速添加-Spring-Boot-的-Maven-依赖项。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和快速添加-Spring-Boot-的-Maven-依赖项。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和快速添加 Spring Boot 的 Maven 依赖项。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和快速添加 Spring Boot 的 Maven 依赖项。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> Maven </tag>
            
            <tag> 依赖管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring】如何声明和使用异步方法</title>
      <link href="/archives/b55fa564.html"/>
      <url>/archives/b55fa564.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在现代应用中，异步编程可以显著提高应用的性能和响应能力。Spring 提供了强大的异步支持，使得我们可以轻松地将方法声明为异步执行，从而在后台线程中处理耗时的操作，而不阻塞主线程。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h3><p>确保在 <code>pom.xml</code> 中添加 Spring Boot Starter 依赖（如果尚未添加）：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-启用异步支持"><a href="#2-启用异步支持" class="headerlink" title="2. 启用异步支持"></a>2. 启用异步支持</h3><p>在 Spring Boot 应用的主类或配置类上添加 <code>@EnableAsync</code> 注解，以启用异步方法的支持：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnableAsync</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableAsync</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">AsyncApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-声明异步方法"><a href="#3-声明异步方法" class="headerlink" title="3. 声明异步方法"></a>3. 声明异步方法</h3><p>在服务类中使用 <code>@Async</code> 注解声明异步方法。该方法将会在一个新的线程中执行：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Async</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Async</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">asyncMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 模拟耗时操作</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异步方法执行完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异步方法被中断"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-调用异步方法"><a href="#4-调用异步方法" class="headerlink" title="4. 调用异步方法"></a>4. 调用异步方法</h3><p>在控制器或其他服务中调用异步方法。注意，异步方法的返回值是 <code>void</code> 或 <code>Future</code>，如果需要获取结果，可以使用 <code>CompletableFuture</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">AsyncService</span> asyncService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/start-async"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">startAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        asyncService<span class="token punctuation">.</span><span class="token function">asyncMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"异步方法已启动"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-使用-CompletableFuture"><a href="#5-使用-CompletableFuture" class="headerlink" title="5. 使用 CompletableFuture"></a>5. 使用 CompletableFuture</h3><p>如果需要返回结果，可以将异步方法的返回类型改为 <code>CompletableFuture</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Async</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CompletableFuture</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Async</span>    <span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">asyncMethodWithResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 模拟耗时操作</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token string">"异步方法执行完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token string">"异步方法被中断"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在控制器中调用异步方法并处理结果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CompletableFuture</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">AsyncService</span> asyncService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/start-async-result"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">startAsyncWithResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> asyncService<span class="token punctuation">.</span><span class="token function">asyncMethodWithResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-测试异步方法"><a href="#6-测试异步方法" class="headerlink" title="6. 测试异步方法"></a>6. 测试异步方法</h3><p>可以使用 JUnit 测试异步方法的执行：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CompletableFuture</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncServiceTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">AsyncService</span> asyncService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAsyncMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> asyncService<span class="token punctuation">.</span><span class="token function">asyncMethodWithResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 等待异步方法完成</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异步方法返回结果: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li><p><strong>合理使用异步方法</strong>：仅在需要时使用异步方法，避免过度使用导致代码复杂性增加。</p></li><li><p><strong>监控异步任务</strong>：使用 Spring 的任务执行器监控异步任务的执行情况。</p></li><li><p><strong>异常处理</strong>：在异步方法中处理异常，确保不会影响主线程的执行。</p></li><li><p><strong>配置线程池</strong>：可以自定义线程池配置，以优化异步任务的执行性能。</p></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>异步方法的返回值是什么？</strong></p><ul><li>异步方法可以返回 <code>void</code> 或 <code>CompletableFuture</code>，具体取决于是否需要返回结果。</li></ul></li><li><p><strong>如何处理异步方法中的异常？</strong></p><ul><li>可以在异步方法中捕获异常并进行处理，或者使用 <code>@Async</code> 注解的 <code>exceptionHandler</code> 属性指定异常处理器。</li></ul></li><li><p><strong>异步方法的执行顺序如何？</strong></p><ul><li>异步方法的执行顺序不受调用顺序的影响，具体执行顺序取决于线程池的调度。</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过合理声明和使用异步方法，我们可以显著提高应用的性能和响应能力。Spring 提供的异步支持使得异步编程变得简单而高效。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/integration.html#async">Spring Async Documentation</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html">CompletableFuture Documentation</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和使用异步方法。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和使用异步方法。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和使用异步方法。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和使用异步方法。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> 异步 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring】如何同时启用多个Redis连接</title>
      <link href="/archives/b55fa563.html"/>
      <url>/archives/b55fa563.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在实际应用中，可能需要连接多个 Redis 实例，例如一个用于缓存，另一个用于消息队列或其他用途。Spring 提供了灵活的方式来配置多个 Redis 连接，以便在同一个应用中使用。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h3><p>首先，确保在 <code>pom.xml</code> 中添加了 Spring Data Redis 和 Redis 客户端的依赖。例如，如果使用 Jedis，可以添加如下依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-配置多个-Redis-连接"><a href="#2-配置多个-Redis-连接" class="headerlink" title="2. 配置多个 Redis 连接"></a>2. 配置多个 Redis 连接</h3><p>在 <code>application.yml</code> 或 <code>application.properties</code> 中配置多个 Redis 连接。例如：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">primary</span><span class="token punctuation">:</span>      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>      <span class="token key atrule">password</span><span class="token punctuation">:</span> yourpassword    <span class="token key atrule">secondary</span><span class="token punctuation">:</span>      <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6380</span>      <span class="token key atrule">password</span><span class="token punctuation">:</span> yourpassword<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-创建-Redis-配置类"><a href="#3-创建-Redis-配置类" class="headerlink" title="3. 创建 Redis 配置类"></a>3. 创建 Redis 配置类</h3><p>为每个 Redis 连接创建配置类，并使用 <code>@Primary</code> 注解标记主 Redis 连接。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Qualifier</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span></span><span class="token class-name">RedisProperties</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Primary</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span></span><span class="token class-name">RedisConnectionFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">JedisConnectionFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"primaryRedisConnectionFactory"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">RedisConnectionFactory</span> <span class="token function">primaryRedisConnectionFactory</span><span class="token punctuation">(</span><span class="token class-name">RedisProperties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">JedisConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setHostName</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getPrimary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getPrimary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getPrimary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"secondaryRedisConnectionFactory"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">RedisConnectionFactory</span> <span class="token function">secondaryRedisConnectionFactory</span><span class="token punctuation">(</span><span class="token class-name">RedisProperties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">JedisConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setHostName</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getSecondary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getSecondary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getSecondary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"primaryRedisTemplate"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">primaryRedisTemplate</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"primaryRedisConnectionFactory"</span><span class="token punctuation">)</span> <span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"secondaryRedisTemplate"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">secondaryRedisTemplate</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"secondaryRedisConnectionFactory"</span><span class="token punctuation">)</span> <span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-使用示例"><a href="#4-使用示例" class="headerlink" title="4. 使用示例"></a>4. 使用示例</h3><p>在服务层中使用不同的 Redis 连接：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"primaryRedisTemplate"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> primaryRedisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"secondaryRedisTemplate"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> secondaryRedisTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveToPrimary</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        primaryRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getFromPrimary</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> primaryRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveToSecondary</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        secondaryRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getFromSecondary</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> secondaryRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-测试验证"><a href="#5-测试验证" class="headerlink" title="5. 测试验证"></a>5. 测试验证</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisServiceTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RedisService</span> redisService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRedisOperations</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisService<span class="token punctuation">.</span><span class="token function">saveToPrimary</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>redisService<span class="token punctuation">.</span><span class="token function">getFromPrimary</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: value1</span>        redisService<span class="token punctuation">.</span><span class="token function">saveToSecondary</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span> <span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>redisService<span class="token punctuation">.</span><span class="token function">getFromSecondary</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: value2</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li><p><strong>使用配置文件管理 Redis 连接</strong>：将 Redis 连接的配置放在 <code>application.yml</code> 或 <code>application.properties</code> 中，便于管理和修改。</p></li><li><p><strong>合理使用 RedisTemplate</strong>：根据业务需求选择合适的 RedisTemplate，避免不必要的性能损耗。</p></li><li><p><strong>注意连接池配置</strong>：如果使用连接池，确保合理配置连接池的参数。</p></li><li><p><strong>监控 Redis 性能</strong>：定期监控 Redis 的性能指标，确保系统的稳定性。</p></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>如何处理连接失败？</strong></p><ul><li>可以使用 Spring 的重试机制，或者在代码中捕获异常并进行处理。</li></ul></li><li><p><strong>如何在不同环境中使用不同的 Redis 配置？</strong></p><ul><li>可以使用 Spring Profiles，根据不同的环境加载不同的 Redis 配置。</li></ul></li><li><p><strong>如何处理 Redis 的过期策略？</strong></p><ul><li>可以在 RedisTemplate 中设置过期时间，或者在存储数据时指定过期时间。</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上步骤，我们可以在 Spring 中同时启用多个 Redis 连接，增强了应用的灵活性和可维护性。无论是通过配置文件还是代码配置，都能有效地管理多个 Redis 连接。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-data/redis/docs/current/reference/html/">Spring Data Redis Documentation</a></li><li><a href="https://redis.io/documentation">Redis Documentation</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和实现多个-Redis-连接。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和实现多个-Redis-连接。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和实现多个 Redis 连接。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和实现多个 Redis 连接。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> 数据库 </tag>
            
            <tag> Redis </tag>
            
            <tag> 多数据源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring】解决动态数据源在多线程环境下的传递问题</title>
      <link href="/archives/b55fa562.html"/>
      <url>/archives/b55fa562.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在<a href="/archives/b55fa561.html">上一篇文章</a>中，我们讨论了如何使用 <code>dynamic-datasource</code> 框架实现动态数据源切换。但在多线程环境下，特别是使用 <code>CompletableFuture</code> 时，会遇到一个常见问题：子线程无法获取父线程的数据源信息。</p><p>这是因为 <code>dynamic-datasource</code> 框架使用 <code>ThreadLocal</code> 来存储当前线程的数据源信息，而子线程无法自动继承父线程的 <code>ThreadLocal</code> 值。</p><p>解决这个问题有两种主要方案：</p><ol><li>自定义线程池工厂（如下文所述）</li><li>使用阿里的 TransmittableThreadLocal 库</li></ol><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方案一：使用-TransmittableThreadLocal"><a href="#方案一：使用-TransmittableThreadLocal" class="headerlink" title="方案一：使用 TransmittableThreadLocal"></a>方案一：使用 TransmittableThreadLocal</h3><p>首先，添加 TransmittableThreadLocal 依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>transmittable-thread-local<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.14.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，修改数据源上下文持有者：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>ttl<span class="token punctuation">.</span></span><span class="token class-name">TransmittableThreadLocal</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceContextHolder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">TransmittableThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token constant">CONTEXT_HOLDER</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransmittableThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setDataSourceType</span><span class="token punctuation">(</span><span class="token class-name">String</span> dataSourceType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token constant">CONTEXT_HOLDER</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>dataSourceType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getDataSourceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant">CONTEXT_HOLDER</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">clearDataSourceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token constant">CONTEXT_HOLDER</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 TtlExecutors 装饰线程池：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>ttl<span class="token punctuation">.</span>threadpool<span class="token punctuation">.</span></span><span class="token class-name">TtlExecutors</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolConfig</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ExecutorService</span> <span class="token function">dataSourceAwareExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ThreadPoolExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>            <span class="token number">10</span><span class="token punctuation">,</span>            <span class="token number">20</span><span class="token punctuation">,</span>            <span class="token number">60L</span><span class="token punctuation">,</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 使用TTL装饰线程池</span>        <span class="token keyword">return</span> <span class="token class-name">TtlExecutors</span><span class="token punctuation">.</span><span class="token function">getTtlExecutorService</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ExecutorService</span> dataSourceAwareExecutor<span class="token punctuation">;</span>        <span class="token annotation punctuation">@DS</span><span class="token punctuation">(</span><span class="token string">"primary"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">asyncOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 使用装饰后的线程池，TransmittableThreadLocal 值会自动传递</span>        <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> dataSourceAwareExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方案二：自定义线程池工厂"><a href="#方案二：自定义线程池工厂" class="headerlink" title="方案二：自定义线程池工厂"></a>方案二：自定义线程池工厂</h3><p>首先，创建一个自定义的线程工厂，用于传递数据源信息：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>dynamic<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>toolkit<span class="token punctuation">.</span></span><span class="token class-name">DynamicDataSourceContextHolder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ThreadFactory</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceThreadFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ThreadFactory</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ThreadFactory</span> delegate<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">DataSourceThreadFactory</span><span class="token punctuation">(</span><span class="token class-name">ThreadFactory</span> delegate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>delegate <span class="token operator">=</span> delegate<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Thread</span> <span class="token function">newThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 获取当前线程的数据源</span>        <span class="token class-name">String</span> dataSource <span class="token operator">=</span> <span class="token class-name">DynamicDataSourceContextHolder</span><span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 包装Runnable，确保子线程可以获取父线程的数据源</span>        <span class="token class-name">Runnable</span> wrapper <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment">// 设置子线程的数据源</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dataSource <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">DynamicDataSourceContextHolder</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">// 执行原始任务</span>                r<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token comment">// 清理数据源</span>                <span class="token class-name">DynamicDataSourceContextHolder</span><span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> delegate<span class="token punctuation">.</span><span class="token function">newThread</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li><p><strong>统一使用自定义线程池</strong>：所有需要数据源传递的异步操作都应该使用自定义的线程池。</p></li><li><p><strong>正确清理数据源</strong>：确保在任务完成后清理数据源信息，避免内存泄漏。</p></li><li><p><strong>合理配置线程池参数</strong>：根据实际业务需求配置线程池的核心参数。</p></li><li><p><strong>异常处理</strong>：在异步操作中添加适当的异常处理机制。</p></li><li><p><strong>选择合适的方案</strong>：</p><ul><li>如果项目中已经使用了阿里的 TTL 库，推荐使用 TransmittableThreadLocal 方案</li><li>如果想要更轻量级的解决方案，可以使用自定义线程池工厂方案</li></ul></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>数据源信息丢失</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 错误示例</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数据源信息丢失</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 正确示例</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> dataSourceAwareExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>内存泄漏</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 错误示例</span><span class="token class-name">DynamicDataSourceContextHolder</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"primary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 忘记清理数据源</span><span class="token comment">// 正确示例</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token class-name">DynamicDataSourceContextHolder</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"primary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 业务操作</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token class-name">DynamicDataSourceContextHolder</span><span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>线程池配置不当</strong></p><ul><li>核心线程数过小可能导致性能问题</li><li>队列容量过大可能导致内存问题</li><li>需要根据实际业务场景调整参数</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过自定义线程池和线程工厂，我们可以优雅地解决动态数据源在多线程环境下的传递问题。这种方案具有以下优点：</p><ol><li>对业务代码侵入性小</li><li>统一管理数据源传递</li><li>避免手动管理数据源切换</li><li>提高代码可维护性</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html">CompletableFuture Documentation</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html">ThreadPoolExecutor Documentation</a></li><li><a href="https://github.com/baomidou/dynamic-datasource-spring-boot-starter">dynamic-datasource GitHub</a></li><li><a href="https://github.com/alibaba/transmittable-thread-local">TransmittableThreadLocal GitHub</a></li></ul><hr><h2 id="希望这篇文章能帮助您解决动态数据源在多线程环境下的传递问题。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您解决动态数据源在多线程环境下的传递问题。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您解决动态数据源在多线程环境下的传递问题。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您解决动态数据源在多线程环境下的传递问题。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 数据源 </tag>
            
            <tag> 动态数据源 </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring】使用动态数据源框架实现动态数据源切换</title>
      <link href="/archives/b55fa561.html"/>
      <url>/archives/b55fa561.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在<a href="/archives/b55fa560.html">上一篇文章</a>中，我们讨论了如何在Spring中实现动态数据源切换。虽然手动实现动态数据源切换是可行的，但使用开源的第三方库可以大大简化开发过程，提高代码的可维护性和可读性。</p><p>本文将介绍如何使用开源的 <code>dynamic-datasource</code> 框架来实现动态数据源切换。</p><h2 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h2><p>首先，在 <code>pom.xml</code> 中添加 <code>dynamic-datasource</code> 的依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.dynamic-datasource<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>dynamic-datasource-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 请根据最新版本进行调整 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-配置数据源"><a href="#2-配置数据源" class="headerlink" title="2. 配置数据源"></a>2. 配置数据源</h2><p>在 <code>application.yml</code> 或 <code>application.properties</code> 中配置多个数据源。例如：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">dynamic</span><span class="token punctuation">:</span>      <span class="token key atrule">primary</span><span class="token punctuation">:</span>        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/primary_db        <span class="token key atrule">username</span><span class="token punctuation">:</span> root        <span class="token key atrule">password</span><span class="token punctuation">:</span> password        <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver      <span class="token key atrule">secondary</span><span class="token punctuation">:</span>        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/secondary_db        <span class="token key atrule">username</span><span class="token punctuation">:</span> root        <span class="token key atrule">password</span><span class="token punctuation">:</span> password        <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-使用注解切换数据源"><a href="#3-使用注解切换数据源" class="headerlink" title="3. 使用注解切换数据源"></a>3. 使用注解切换数据源</h2><p>动态数据源的切换有两种方式:注解方式和硬编码方式。</p><h3 id="3-1-注解方式切换"><a href="#3-1-注解方式切换" class="headerlink" title="3.1 注解方式切换"></a>3.1 注解方式切换</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>dynamic<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">DS</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@DS</span><span class="token punctuation">(</span><span class="token string">"primary"</span><span class="token punctuation">)</span> <span class="token comment">// 切换到主数据源</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getPrimaryUser</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 从主数据源获取用户</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@DS</span><span class="token punctuation">(</span><span class="token string">"secondary"</span><span class="token punctuation">)</span> <span class="token comment">// 切换到次数据源</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getSecondaryUser</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 从次数据源获取用户</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-硬编码方式切换"><a href="#3-2-硬编码方式切换" class="headerlink" title="3.2 硬编码方式切换"></a>3.2 硬编码方式切换</h3><p>使用 <code>DynamicDataSourceContextHolder</code> 类进行手动切换:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>dynamic<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>toolkit<span class="token punctuation">.</span></span><span class="token class-name">DynamicDataSourceContextHolder</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 切换数据源</span>        <span class="token class-name">DynamicDataSourceContextHolder</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 执行业务操作</span>            <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment">// 清除数据源</span>            <span class="token class-name">DynamicDataSourceContextHolder</span><span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">complexOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 查询主库</span>        <span class="token class-name">DynamicDataSourceContextHolder</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"primary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> primaryUser <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DynamicDataSourceContextHolder</span><span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 查询从库</span>        <span class="token class-name">DynamicDataSourceContextHolder</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"secondary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> secondaryUser <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DynamicDataSourceContextHolder</span><span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 更多复杂操作...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>硬编码方式的优点是更加灵活，可以在方法内部根据不同的业务逻辑动态切换数据源。但需要注意以下几点：</p><ol><li>必须手动清理数据源，建议使用 try-finally 块。</li><li>嵌套切换时要注意顺序，先进后出。</li><li>代码侵入性较强，不如注解方式优雅。</li></ol><h2 id="4-读写分离示例"><a href="#4-读写分离示例" class="headerlink" title="4. 读写分离示例"></a>4. 读写分离示例</h2><p>如果需要实现读写分离，可以使用 <code>@DS</code> 注解结合 AOP 来实现。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReadWriteDataSourceAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.example.service..*.select*(..))"</span> <span class="token operator">+</span>            <span class="token string">"|| execution(* com.example.service..*.get*(..))"</span> <span class="token operator">+</span>            <span class="token string">"|| execution(* com.example.service..*.find*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.example.service..*.insert*(..))"</span> <span class="token operator">+</span>            <span class="token string">"|| execution(* com.example.service..*.add*(..))"</span> <span class="token operator">+</span>            <span class="token string">"|| execution(* com.example.service..*.update*(..))"</span> <span class="token operator">+</span>            <span class="token string">"|| execution(* com.example.service..*.delete*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writePointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"readPointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setReadDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">DataSourceContextHolder</span><span class="token punctuation">.</span><span class="token function">setDataSourceType</span><span class="token punctuation">(</span><span class="token string">"secondary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"writePointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWriteDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">DataSourceContextHolder</span><span class="token punctuation">.</span><span class="token function">setDataSourceType</span><span class="token punctuation">(</span><span class="token string">"primary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"readPointcut() || writePointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clearDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">DataSourceContextHolder</span><span class="token punctuation">.</span><span class="token function">clearDataSourceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-使用示例"><a href="#5-使用示例" class="headerlink" title="5. 使用示例"></a>5. 使用示例</h2><h3 id="1-在Service层使用"><a href="#1-在Service层使用" class="headerlink" title="1. 在Service层使用"></a>1. 在Service层使用</h3><p>使用 <code>@DSTransactional</code> 注解来确保事务在切换数据源时能够正常工作：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>dynamic<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">DSTransactional</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@DS</span><span class="token punctuation">(</span><span class="token string">"primary"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@DSTransactional</span> <span class="token comment">// 使用动态数据源的事务注解</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getPrimaryUser</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@DS</span><span class="token punctuation">(</span><span class="token string">"secondary"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@DSTransactional</span> <span class="token comment">// 使用动态数据源的事务注解</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getSecondaryUser</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-测试验证"><a href="#2-测试验证" class="headerlink" title="2. 测试验证"></a>2. 测试验证</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">User</span> primaryUser <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getPrimaryUser</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> secondaryUser <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getSecondaryUser</span><span class="token punctuation">(</span><span class="token number">2L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 验证用户是否正确</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li><p><strong>使用开源框架</strong>：使用 <code>dynamic-datasource</code> 框架可以减少手动实现的复杂性，提高开发效率。</p></li><li><p><strong>合理配置数据源</strong>：在配置文件中集中管理数据源的配置，便于维护。</p></li><li><p><strong>注意事务管理</strong>：确保在切换数据源时，事务能够正确处理，使用 <code>@DSTransactional</code> 注解。</p></li><li><p><strong>性能考虑</strong>：使用连接池来管理数据源的连接，确保性能。</p></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>如何处理事务？</strong></p><ul><li>使用 <code>@DSTransactional</code> 注解确保事务在切换数据源时能够正常工作。</li></ul></li><li><p><strong>如何动态切换数据源？</strong></p><ul><li>使用 <code>@DS</code> 注解可以方便地在方法级别切换数据源。</li></ul></li><li><p><strong>如何处理数据源连接池？</strong></p><ul><li><code>dynamic-datasource</code> 框架支持多种连接池，可以根据需要进行配置。</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过使用 <code>dynamic-datasource</code> 框架，我们可以轻松实现动态数据源切换，增强了应用的灵活性和可维护性。无论是读写分离还是多租户系统，开源框架都能提供强大的支持。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://github.com/baomidou/dynamic-datasource-spring-boot-starter">dynamic-datasource GitHub</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和实现动态数据源。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和实现动态数据源。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和实现动态数据源。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和实现动态数据源。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 数据源 </tag>
            
            <tag> 动态数据源 </tag>
            
            <tag> 开源框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring】如何实现动态数据源切换</title>
      <link href="/archives/b55fa560.html"/>
      <url>/archives/b55fa560.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在<a href="/archives/b55fa55f.html">上一篇文章</a>中，我们讨论了如何在Spring中配置多个数据源。但在某些场景下，我们可能需要在运行时动态切换数据源，比如：</p><ol><li>读写分离场景</li><li>多租户系统</li><li>分库分表</li><li>数据源故障切换</li></ol><p>本文将介绍如何实现动态数据源切换。</p><h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><h3 id="1-创建动态数据源类"><a href="#1-创建动态数据源类" class="headerlink" title="1. 创建动态数据源类"></a>1. 创建动态数据源类</h3><p>首先，我们需要继承 <code>AbstractRoutingDataSource</code> 类来实现动态数据源：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicDataSource</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractRoutingDataSource</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">determineCurrentLookupKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">DataSourceContextHolder</span><span class="token punctuation">.</span><span class="token function">getDataSourceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-创建数据源上下文持有者"><a href="#2-创建数据源上下文持有者" class="headerlink" title="2. 创建数据源上下文持有者"></a>2. 创建数据源上下文持有者</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceContextHolder</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> contextHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setDataSourceType</span><span class="token punctuation">(</span><span class="token class-name">String</span> dataSourceType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        contextHolder<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>dataSourceType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getDataSourceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> contextHolder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">clearDataSourceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        contextHolder<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-创建数据源切换注解"><a href="#3-创建数据源切换注解" class="headerlink" title="3. 创建数据源切换注解"></a>3. 创建数据源切换注解</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">DataSource</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"primary"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-实现AOP切面"><a href="#4-实现AOP切面" class="headerlink" title="4. 实现AOP切面"></a>4. 实现AOP切面</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 保证该AOP在@Transactional之前执行</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceAspect</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.example.annotation.DataSource)"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dataSourcePointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"dataSourcePointCut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> point<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">MethodSignature</span> signature <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MethodSignature</span><span class="token punctuation">)</span> point<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Method</span> method <span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">DataSource</span> ds <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ds <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ds <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ds <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">DataSourceContextHolder</span><span class="token punctuation">.</span><span class="token function">setDataSourceType</span><span class="token punctuation">(</span>ds<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> point<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token class-name">DataSourceContextHolder</span><span class="token punctuation">.</span><span class="token function">clearDataSourceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-配置动态数据源"><a href="#5-配置动态数据源" class="headerlink" title="5. 配置动态数据源"></a>5. 配置动态数据源</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicDataSourceConfig</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"spring.datasource.primary"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">primaryDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">DataSourceBuilder</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"spring.datasource.secondary"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">secondaryDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">DataSourceBuilder</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token keyword">public</span> <span class="token class-name">DynamicDataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span>            <span class="token class-name">DataSource</span> primaryDataSource<span class="token punctuation">,</span>            <span class="token class-name">DataSource</span> secondaryDataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> targetDataSources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        targetDataSources<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"primary"</span><span class="token punctuation">,</span> primaryDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        targetDataSources<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"secondary"</span><span class="token punctuation">,</span> secondaryDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">DynamicDataSource</span> dynamicDataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DynamicDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dynamicDataSource<span class="token punctuation">.</span><span class="token function">setDefaultTargetDataSource</span><span class="token punctuation">(</span>primaryDataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        dynamicDataSource<span class="token punctuation">.</span><span class="token function">setTargetDataSources</span><span class="token punctuation">(</span>targetDataSources<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> dynamicDataSource<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><h3 id="1-在Service层使用"><a href="#1-在Service层使用" class="headerlink" title="1. 在Service层使用"></a>1. 在Service层使用</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>        <span class="token annotation punctuation">@DataSource</span><span class="token punctuation">(</span><span class="token string">"primary"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getPrimaryUser</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@DataSource</span><span class="token punctuation">(</span><span class="token string">"secondary"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getSecondaryUser</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 在类上使用注解，对所有方法生效</span>    <span class="token annotation punctuation">@DataSource</span><span class="token punctuation">(</span><span class="token string">"primary"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Service</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>        <span class="token comment">// 所有方法默认使用primary数据源</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-实现读写分离"><a href="#2-实现读写分离" class="headerlink" title="2. 实现读写分离"></a>2. 实现读写分离</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReadWriteDataSourceAspect</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.example.service..*.select*(..))"</span> <span class="token operator">+</span>            <span class="token string">"|| execution(* com.example.service..*.get*(..))"</span> <span class="token operator">+</span>            <span class="token string">"|| execution(* com.example.service..*.find*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.example.service..*.insert*(..))"</span> <span class="token operator">+</span>            <span class="token string">"|| execution(* com.example.service..*.add*(..))"</span> <span class="token operator">+</span>            <span class="token string">"|| execution(* com.example.service..*.update*(..))"</span> <span class="token operator">+</span>            <span class="token string">"|| execution(* com.example.service..*.delete*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writePointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"readPointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setReadDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">DataSourceContextHolder</span><span class="token punctuation">.</span><span class="token function">setDataSourceType</span><span class="token punctuation">(</span><span class="token string">"read"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"writePointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWriteDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">DataSourceContextHolder</span><span class="token punctuation">.</span><span class="token function">setDataSourceType</span><span class="token punctuation">(</span><span class="token string">"write"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"readPointcut() || writePointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clearDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">DataSourceContextHolder</span><span class="token punctuation">.</span><span class="token function">clearDataSourceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li><p><strong>合理使用注解</strong>：优先使用注解方式切换数据源，使代码更清晰。</p></li><li><p><strong>注意事务</strong>：确保数据源切换在事务开启之前完成。</p></li><li><p><strong>异常处理</strong>：在切换数据源时做好异常处理，确保 ThreadLocal 能够正确清理。</p></li><li><p><strong>性能考虑</strong>：</p><ul><li>避免频繁切换数据源</li><li>使用数据源连接池</li><li>合理设置连接池参数</li></ul></li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>事务失效问题</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 错误示例</span><span class="token annotation punctuation">@Transactional</span><span class="token annotation punctuation">@DataSource</span><span class="token punctuation">(</span><span class="token string">"secondary"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">wrongMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 事务可能失效</span><span class="token comment">// 正确示例</span><span class="token annotation punctuation">@DataSource</span><span class="token punctuation">(</span><span class="token string">"secondary"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">correctMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 确保数据源切换在事务开启前</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>线程安全问题</strong></p><ul><li>使用 ThreadLocal 确保线程安全</li><li>注意在使用完后清理 ThreadLocal</li></ul></li><li><p><strong>数据源切换失效</strong></p><ul><li>检查 AOP 切面优先级</li><li>确保在事务开启前切换数据源</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>动态数据源为我们提供了更灵活的数据源管理方案，主要应用场景包括：</p><ol><li>读写分离</li><li>多租户系统</li><li>分库分表</li><li>故障转移</li></ol><p>通过合理使用动态数据源，我们可以实现更灵活的数据库访问策略。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/datasource/lookup/AbstractRoutingDataSource.html">Spring AbstractRoutingDataSource Documentation</a></li><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#aop">Spring AOP Documentation</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解和实现动态数据源。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解和实现动态数据源。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解和实现动态数据源。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地理解和实现动态数据源。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 数据源 </tag>
            
            <tag> 动态数据源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring】如何同时启用多个数据源</title>
      <link href="/archives/b55fa55f.html"/>
      <url>/archives/b55fa55f.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在实际应用中，可能需要连接多个数据库，例如一个用于主数据存储，另一个用于日志或分析数据。Spring 提供了灵活的方式来配置多个数据源，以便在同一个应用中使用。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h3><p>首先，确保在 <code>pom.xml</code> 中添加了 Spring Data JPA 和数据库驱动的依赖。例如，如果使用 MySQL，可以添加如下依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-配置数据源"><a href="#2-配置数据源" class="headerlink" title="2. 配置数据源"></a>2. 配置数据源</h3><p>在 <code>application.yml</code> 或 <code>application.properties</code> 中配置多个数据源。例如：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">primary</span><span class="token punctuation">:</span>      <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/primary_db      <span class="token key atrule">username</span><span class="token punctuation">:</span> root      <span class="token key atrule">password</span><span class="token punctuation">:</span> password      <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">secondary</span><span class="token punctuation">:</span>      <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/secondary_db      <span class="token key atrule">username</span><span class="token punctuation">:</span> root      <span class="token key atrule">password</span><span class="token punctuation">:</span> password      <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-创建数据源配置类"><a href="#3-创建数据源配置类" class="headerlink" title="3. 创建数据源配置类"></a>3. 创建数据源配置类</h3><p>为每个数据源创建配置类，并使用 <code>@Primary</code> 注解标记主数据源。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Qualifier</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span></span><span class="token class-name">HibernatePropertiesCustomizer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span></span><span class="token class-name">EntityManagerFactoryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Primary</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">EnableJpaRepositories</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span></span><span class="token class-name">JpaTransactionManager</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span></span><span class="token class-name">LocalContainerEntityManagerFactoryBean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span></span><span class="token class-name">PlatformTransactionManager</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">EntityManagerFactory</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableJpaRepositories</span><span class="token punctuation">(</span>        basePackages <span class="token operator">=</span> <span class="token string">"com.example.repository.primary"</span><span class="token punctuation">,</span>        entityManagerFactoryRef <span class="token operator">=</span> <span class="token string">"primaryEntityManagerFactory"</span><span class="token punctuation">,</span>        transactionManagerRef <span class="token operator">=</span> <span class="token string">"primaryTransactionManager"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrimaryDataSourceConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"primaryDataSource"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"spring.datasource.primary"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">primaryDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">DataSourceBuilder</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"primaryEntityManagerFactory"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">LocalContainerEntityManagerFactoryBean</span> <span class="token function">primaryEntityManagerFactory</span><span class="token punctuation">(</span>            <span class="token class-name">EntityManagerFactoryBuilder</span> builder<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"primaryDataSource"</span><span class="token punctuation">)</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> builder                <span class="token punctuation">.</span><span class="token function">dataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">packages</span><span class="token punctuation">(</span><span class="token string">"com.example.model.primary"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">persistenceUnit</span><span class="token punctuation">(</span><span class="token string">"primary"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"primaryTransactionManager"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">PlatformTransactionManager</span> <span class="token function">primaryTransactionManager</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"primaryEntityManagerFactory"</span><span class="token punctuation">)</span> <span class="token class-name">EntityManagerFactory</span> primaryEntityManagerFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JpaTransactionManager</span><span class="token punctuation">(</span>primaryEntityManagerFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-创建第二个数据源配置类"><a href="#4-创建第二个数据源配置类" class="headerlink" title="4. 创建第二个数据源配置类"></a>4. 创建第二个数据源配置类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Qualifier</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span></span><span class="token class-name">HibernatePropertiesCustomizer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span></span><span class="token class-name">EntityManagerFactoryBuilder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">EnableJpaRepositories</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span></span><span class="token class-name">JpaTransactionManager</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>orm<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span></span><span class="token class-name">LocalContainerEntityManagerFactoryBean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span></span><span class="token class-name">PlatformTransactionManager</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">EntityManagerFactory</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableJpaRepositories</span><span class="token punctuation">(</span>        basePackages <span class="token operator">=</span> <span class="token string">"com.example.repository.secondary"</span><span class="token punctuation">,</span>        entityManagerFactoryRef <span class="token operator">=</span> <span class="token string">"secondaryEntityManagerFactory"</span><span class="token punctuation">,</span>        transactionManagerRef <span class="token operator">=</span> <span class="token string">"secondaryTransactionManager"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecondaryDataSourceConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"secondaryDataSource"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"spring.datasource.secondary"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">secondaryDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">DataSourceBuilder</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"secondaryEntityManagerFactory"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">LocalContainerEntityManagerFactoryBean</span> <span class="token function">secondaryEntityManagerFactory</span><span class="token punctuation">(</span>            <span class="token class-name">EntityManagerFactoryBuilder</span> builder<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"secondaryDataSource"</span><span class="token punctuation">)</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> builder                <span class="token punctuation">.</span><span class="token function">dataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">packages</span><span class="token punctuation">(</span><span class="token string">"com.example.model.secondary"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">persistenceUnit</span><span class="token punctuation">(</span><span class="token string">"secondary"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"secondaryTransactionManager"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">PlatformTransactionManager</span> <span class="token function">secondaryTransactionManager</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"secondaryEntityManagerFactory"</span><span class="token punctuation">)</span> <span class="token class-name">EntityManagerFactory</span> secondaryEntityManagerFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JpaTransactionManager</span><span class="token punctuation">(</span>secondaryEntityManagerFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-创建实体和仓库"><a href="#5-创建实体和仓库" class="headerlink" title="5. 创建实体和仓库"></a>5. 创建实体和仓库</h3><p>为每个数据源创建相应的实体类和仓库接口。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Primary Data Source Entity</span><span class="token annotation punctuation">@Entity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrimaryEntity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">// getters and setters</span><span class="token punctuation">}</span><span class="token comment">// Secondary Data Source Entity</span><span class="token annotation punctuation">@Entity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecondaryEntity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>    <span class="token comment">// getters and setters</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Primary Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PrimaryRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PrimaryEntity</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// Secondary Repository</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SecondaryRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SecondaryEntity</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实际应用示例"><a href="#实际应用示例" class="headerlink" title="实际应用示例"></a>实际应用示例</h2><h3 id="1-使用服务层"><a href="#1-使用服务层" class="headerlink" title="1. 使用服务层"></a>1. 使用服务层</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">PrimaryRepository</span> primaryRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">SecondaryRepository</span> secondaryRepository<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">PrimaryEntity</span> primaryEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrimaryEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        primaryEntity<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Primary Data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        primaryRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>primaryEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SecondaryEntity</span> secondaryEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecondaryEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        secondaryEntity<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token string">"Secondary Data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        secondaryRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>secondaryEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-测试验证"><a href="#2-测试验证" class="headerlink" title="2. 测试验证"></a>2. 测试验证</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServiceTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">MyService</span> myService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSaveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        myService<span class="token punctuation">.</span><span class="token function">saveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 验证数据是否保存成功</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li><strong>使用配置文件管理数据源</strong>：将数据源的配置放在 <code>application.yml</code> 或 <code>application.properties</code> 中，便于管理和修改。</li><li><strong>分离数据源逻辑</strong>：将每个数据源的逻辑分开，避免混淆。</li><li><strong>使用事务管理</strong>：确保在操作多个数据源时，使用适当的事务管理策略。</li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>如何处理事务？</strong></p><ul><li>可以使用 Spring 的事务管理器，确保在多个数据源之间的操作是原子的。</li></ul></li><li><p><strong>如何动态切换数据源？</strong></p><ul><li>可以使用 AOP 或者自定义注解来动态切换数据源。</li></ul></li><li><p><strong>如何处理数据源连接池？</strong></p><ul><li>可以使用 HikariCP 或其他连接池来管理数据源的连接。</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上步骤，我们可以在 Spring 中同时启用多个数据源，增强了应用的灵活性和可扩展性。无论是通过配置文件还是代码配置，都能有效地管理多个数据源。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#reference">Spring Data JPA Documentation</a></li><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-sql">Spring Boot Documentation</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地解决Spring配置多数据源的问题。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地解决Spring配置多数据源的问题。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地解决Spring配置多数据源的问题。如果您有任何问题，欢迎在评论区讨论！"></a>希望这篇文章能帮助您更好地解决Spring配置多数据源的问题。如果您有任何问题，欢迎在评论区讨论！</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 数据源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java】如何从JAR包外部读取配置文件</title>
      <link href="/archives/b55fa55e.html"/>
      <url>/archives/b55fa55e.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在Java应用程序中，尤其是Spring框架中，通常需要读取配置文件来管理应用的各种参数。将配置文件打包到JAR中虽然方便，但在某些情况下，我们可能希望从JAR包外部读取配置文件，以便于在不重新打包的情况下进行配置修改。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1-使用-PropertySource注解"><a href="#1-使用-PropertySource注解" class="headerlink" title="1. 使用@PropertySource注解"></a>1. 使用<code>@PropertySource</code>注解</h3><p>Spring提供了<code>@PropertySource</code>注解，可以方便地从外部文件加载属性。以下是一个示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PropertySource</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"file:${config.path}/application.properties"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${app.name}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> appName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAppName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> appName<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，<code>${config.path}</code>是一个系统环境变量，指向外部配置文件的路径。</p><h3 id="2-使用Environment接口"><a href="#2-使用Environment接口" class="headerlink" title="2. 使用Environment接口"></a>2. 使用<code>Environment</code>接口</h3><p>Spring的<code>Environment</code>接口也可以用来读取外部配置文件。以下是一个示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>env<span class="token punctuation">.</span></span><span class="token class-name">Environment</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigReader</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">Environment</span> env<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAppName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> env<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"app.name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-通过命令行参数传递配置文件路径"><a href="#3-通过命令行参数传递配置文件路径" class="headerlink" title="3. 通过命令行参数传递配置文件路径"></a>3. 通过命令行参数传递配置文件路径</h3><p>在启动JAR时，可以通过命令行参数传递配置文件路径。例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-jar</span> myapp.jar <span class="token parameter variable">--config.path</span><span class="token operator">=</span>/path/to/config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在代码中使用<code>@Value</code>注解读取：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${config.path}"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">String</span> configPath<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-使用ResourceLoader读取文件"><a href="#4-使用ResourceLoader读取文件" class="headerlink" title="4. 使用ResourceLoader读取文件"></a>4. 使用<code>ResourceLoader</code>读取文件</h3><p>如果需要读取非属性文件的配置文件，可以使用<code>ResourceLoader</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ResourceLoader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStreamReader</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileReader</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ResourceLoader</span> resourceLoader<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> filePath<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">Resource</span> resource <span class="token operator">=</span> resourceLoader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"file:"</span> <span class="token operator">+</span> filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> line<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实际应用示例"><a href="#实际应用示例" class="headerlink" title="实际应用示例"></a>实际应用示例</h2><h3 id="1-Controller层使用"><a href="#1-Controller层使用" class="headerlink" title="1. Controller层使用"></a>1. Controller层使用</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ConfigReader</span> configReader<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/app-name"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAppName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> configReader<span class="token punctuation">.</span><span class="token function">getAppName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-测试验证"><a href="#2-测试验证" class="headerlink" title="2. 测试验证"></a>2. 测试验证</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigReaderTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ConfigReader</span> configReader<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetAppName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> appName <span class="token operator">=</span> configReader<span class="token punctuation">.</span><span class="token function">getAppName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"应用名称: "</span> <span class="token operator">+</span> appName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li><strong>使用环境变量</strong>：将配置文件路径设置为环境变量，便于在不同环境中切换。</li><li><strong>使用YAML格式</strong>：如果可能，使用YAML格式的配置文件，便于管理和阅读。</li><li><strong>配置文件版本控制</strong>：将外部配置文件放在版本控制中，确保配置的可追溯性。</li><li><strong>敏感信息处理</strong>：对于敏感信息，考虑使用加密或其他安全措施。</li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p><strong>如何处理文件不存在的情况？</strong></p><ul><li>可以使用<code>try-catch</code>块捕获<code>FileNotFoundException</code>，并提供默认值或错误提示。</li></ul></li><li><p><strong>如何确保配置文件的更新能即时生效？</strong></p><ul><li>可以使用Spring的<code>@RefreshScope</code>注解，动态刷新配置。</li></ul></li><li><p><strong>如何在不同环境中使用不同的配置文件？</strong></p><ul><li>可以使用Spring Profiles，根据不同的环境加载不同的配置文件。</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上方法，我们可以方便地从JAR包外部读取配置文件，增强了应用的灵活性和可维护性。无论是使用<code>@PropertySource</code>注解，还是通过命令行参数传递配置路径，都能有效地管理应用的配置。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config">Spring Boot Documentation</a></li><li><a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/env/Environment.html">Spring Environment</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地解决从jar包外部读取配置文件的问题。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地解决从jar包外部读取配置文件的问题。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地解决从jar包外部读取配置文件的问题。如果您有任何问题，欢迎在评论区讨论！ "></a>希望这篇文章能帮助您更好地解决从jar包外部读取配置文件的问题。如果您有任何问题，欢迎在评论区讨论！ </h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
            <tag> 配置文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring】解决数据库 Long 类型雪花 ID 前端精度损失的问题</title>
      <link href="/archives/4977917d.html"/>
      <url>/archives/4977917d.html</url>
      
        <content type="html"><![CDATA[<h1 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h1><p>在现代分布式系统中，雪花算法（Snowflake）被广泛用于生成唯一的 ID。这些 ID 通常以 Long 类型存储在数据库中。然而，当这些 ID 被传递到前端时，可能会出现精度损失的问题。本文将探讨这一问题的原因，并提供几种解决方案。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在 Java 中，雪花 ID 通常是一个 64 位的 Long 类型数字。然而，在 JavaScript 中，数字的精度限制为 53 位（即 <code>Number.MAX_SAFE_INTEGER</code>），这意味着当 Long 类型的雪花 ID 超过 53 位时，可能会出现精度损失。</p><p>例如，以下雪花 ID 在 JavaScript 中可能会被错误处理：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Java 中的雪花 ID</span><span class="token keyword">long</span> snowflakeId <span class="token operator">=</span> <span class="token number">1234567890123456789L</span><span class="token punctuation">;</span> <span class="token comment">// 64 位 Long</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在 JavaScript 中，这个 ID 可能会被处理为：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// JavaScript 中的处理</span><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token number">1234567890123456789</span><span class="token punctuation">;</span> <span class="token comment">// 精度损失</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 1234567890123456700</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1-修改-Jackson-的序列化"><a href="#1-修改-Jackson-的序列化" class="headerlink" title="1. 修改 Jackson 的序列化"></a>1. 修改 Jackson 的序列化</h3><p>如果您使用 Jackson 进行 JSON 序列化，可以通过自定义序列化器来处理 Long 类型的雪花 ID。以下是一个示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">JsonGenerator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">JsonSerializer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">JsonSerialize</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@JsonSerialize</span><span class="token punctuation">(</span>using <span class="token operator">=</span> <span class="token class-name">SnowflakeIdSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YourEntity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> snowflakeId<span class="token punctuation">;</span>    <span class="token comment">// getters and setters</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SnowflakeIdSerializer</span> <span class="token keyword">extends</span> <span class="token class-name">JsonSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Long</span> value<span class="token punctuation">,</span> <span class="token class-name">JsonGenerator</span> gen<span class="token punctuation">,</span> <span class="token class-name">SerializerProvider</span> serializers<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        gen<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将 Long 转为 String</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-使用-Fastjson2-替换默认的-Jackson"><a href="#2-使用-Fastjson2-替换默认的-Jackson" class="headerlink" title="2. 使用 Fastjson2 替换默认的 Jackson"></a>2. 使用 Fastjson2 替换默认的 Jackson</h3><p>Fastjson2 是一个高性能的 JSON 处理库，支持更好的数字精度处理。您可以通过以下方式使用 Fastjson2：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson2<span class="token punctuation">.</span></span><span class="token class-name">JSONReader</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson2<span class="token punctuation">.</span></span><span class="token class-name">JSONWriter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson2<span class="token punctuation">.</span>support<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">FastJsonConfig</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson2<span class="token punctuation">.</span>support<span class="token punctuation">.</span>spring6<span class="token punctuation">.</span>http<span class="token punctuation">.</span>converter<span class="token punctuation">.</span></span><span class="token class-name">FastJsonHttpMessageConverter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">AutoConfiguration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>converter<span class="token punctuation">.</span></span><span class="token class-name">HttpMessageConverter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@AutoConfiguration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FastJson2Config</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">HttpMessageConverter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">fastJsonHttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">FastJsonHttpMessageConverter</span> fastConverter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FastJsonHttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FastJsonConfig</span> config <span class="token operator">=</span> <span class="token function">getFastJsonConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fastConverter<span class="token punctuation">.</span><span class="token function">setFastJsonConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        fastConverter<span class="token punctuation">.</span><span class="token function">setDefaultCharset</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fastConverter<span class="token punctuation">.</span><span class="token function">setSupportedMediaTypes</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> fastConverter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">FastJsonConfig</span> <span class="token function">getFastJsonConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">FastJsonConfig</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FastJsonConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setCharset</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setReaderFeatures</span><span class="token punctuation">(</span>            <span class="token class-name">JSONReader<span class="token punctuation">.</span>Feature<span class="token punctuation">.</span>FieldBased</span><span class="token punctuation">,</span>            <span class="token class-name">JSONReader<span class="token punctuation">.</span>Feature<span class="token punctuation">.</span>SupportArrayToBean</span><span class="token punctuation">,</span>            <span class="token class-name">JSONReader<span class="token punctuation">.</span>Feature<span class="token punctuation">.</span>TrimString</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setWriterFeatures</span><span class="token punctuation">(</span>            <span class="token class-name">JSONWriter<span class="token punctuation">.</span>Feature<span class="token punctuation">.</span>WriteMapNullValue</span><span class="token punctuation">,</span>            <span class="token class-name">JSONWriter<span class="token punctuation">.</span>Feature<span class="token punctuation">.</span>PrettyFormat</span><span class="token punctuation">,</span>            <span class="token class-name">JSONWriter<span class="token punctuation">.</span>Feature<span class="token punctuation">.</span>BrowserCompatible</span><span class="token punctuation">,</span>            <span class="token class-name">JSONWriter<span class="token punctuation">.</span>Feature<span class="token punctuation">.</span>WriteNonStringKeyAsString</span><span class="token punctuation">,</span>            <span class="token class-name">JSONWriter<span class="token punctuation">.</span>Feature<span class="token punctuation">.</span>WriteNullStringAsEmpty</span><span class="token punctuation">,</span>            <span class="token class-name">JSONWriter<span class="token punctuation">.</span>Feature<span class="token punctuation">.</span>WriteEnumUsingToString</span><span class="token punctuation">,</span>            <span class="token class-name">JSONWriter<span class="token punctuation">.</span>Feature<span class="token punctuation">.</span>WriteBigDecimalAsPlain</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> config<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-在前端处理"><a href="#3-在前端处理" class="headerlink" title="3. 在前端处理"></a>3. 在前端处理</h3><p>如果您无法更改后端代码，可以在前端处理接收到的雪花 ID。将其作为字符串处理，以避免精度损失：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 假设从后端接收到的雪花 ID</span><span class="token keyword">let</span> snowflakeId <span class="token operator">=</span> <span class="token string">"1234567890123456789"</span><span class="token punctuation">;</span> <span class="token comment">// 作为字符串处理</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>snowflakeId<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 1234567890123456789</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-使用-BigInt"><a href="#4-使用-BigInt" class="headerlink" title="4. 使用 BigInt"></a>4. 使用 BigInt</h3><p>在现代 JavaScript 中，您可以使用 <code>BigInt</code> 来处理大整数。这样可以避免精度损失：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> snowflakeId <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span><span class="token string">"1234567890123456789"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>snowflakeId<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 1234567890123456789n</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>在处理数据库存储的 Long 类型雪花 ID 时，前端的精度损失是一个常见问题。通过修改 Jackson 的序列化、使用 Fastjson2、在前端处理或使用 <code>BigInt</code>，可以有效解决这一问题。选择合适的解决方案可以确保系统的稳定性和数据的准确性。</p><hr><h2 id="希望这篇文章能帮助您更好地解决Long类型前端出现精度丢失的问题。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地解决Long类型前端出现精度丢失的问题。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地解决Long类型前端出现精度丢失的问题。如果您有任何问题，欢迎在评论区讨论！ "></a>希望这篇文章能帮助您更好地解决Long类型前端出现精度丢失的问题。如果您有任何问题，欢迎在评论区讨论！ </h2>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> Java </category>
          
          <category> Spring </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 雪花算法 </tag>
            
            <tag> 精度损失 </tag>
            
            <tag> JSON序列化 </tag>
            
            <tag> FastJson2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spring Boot】统一处理Web请求的JSON日期格式</title>
      <link href="/archives/b55fa55d.html"/>
      <url>/archives/b55fa55d.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>在Spring Web开发中,前后端交互经常会遇到日期时间格式的问题。默认情况下:</p><ol><li>后端返回给前端的时间戳是一个长整型数字</li><li>前端传递的日期格式可能各不相同</li><li>不同接口对日期格式要求不一致</li></ol><p>这些问题会导致:</p><ul><li>前端需要手动处理时间格式转换</li><li>代码中充斥着大量的日期格式化代码</li><li>可能出现日期解析错误</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="1-全局日期格式化配置"><a href="#1-全局日期格式化配置" class="headerlink" title="1. 全局日期格式化配置"></a>1. 全局日期格式化配置</h3><p>创建配置类统一处理日期格式:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateFormatConfig</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DATE_FORMAT</span> <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DATE_TIME_FORMAT</span> <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">Jackson2ObjectMapperBuilderCustomizer</span> <span class="token function">jsonCustomizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> builder <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">simpleDateFormat</span><span class="token punctuation">(</span><span class="token constant">DATE_TIME_FORMAT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">serializers</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LocalDateSerializer</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token constant">DATE_FORMAT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">serializers</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LocalDateTimeSerializer</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token constant">DATE_TIME_FORMAT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">deserializers</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LocalDateDeserializer</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token constant">DATE_FORMAT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">deserializers</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LocalDateTimeDeserializer</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token constant">DATE_TIME_FORMAT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-使用-JsonFormat注解"><a href="#2-使用-JsonFormat注解" class="headerlink" title="2. 使用@JsonFormat注解"></a>2. 使用@JsonFormat注解</h3><p>对于特定字段需要自定义格式时:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span> timezone <span class="token operator">=</span> <span class="token string">"GMT+8"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> createTime<span class="token punctuation">;</span>        <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">LocalDate</span> birthday<span class="token punctuation">;</span>        <span class="token comment">// getter setter</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-自定义日期序列化和反序列化"><a href="#3-自定义日期序列化和反序列化" class="headerlink" title="3. 自定义日期序列化和反序列化"></a>3. 自定义日期序列化和反序列化</h3><p>对于更复杂的日期处理需求:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomLocalDateTimeSerializer</span> <span class="token keyword">extends</span> <span class="token class-name">JsonSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span> value<span class="token punctuation">,</span> <span class="token class-name">JsonGenerator</span> gen<span class="token punctuation">,</span> <span class="token class-name">SerializerProvider</span> serializers<span class="token punctuation">)</span>             <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            gen<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomLocalDateTimeDeserializer</span> <span class="token keyword">extends</span> <span class="token class-name">JsonDeserializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">LocalDateTime</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">JsonParser</span> p<span class="token punctuation">,</span> <span class="token class-name">DeserializationContext</span> ctxt<span class="token punctuation">)</span>             <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> dateStr <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>dateStr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dateStr<span class="token punctuation">,</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实际应用示例"><a href="#实际应用示例" class="headerlink" title="实际应用示例"></a>实际应用示例</h2><h3 id="1-Controller层使用"><a href="#1-Controller层使用" class="headerlink" title="1. Controller层使用"></a>1. Controller层使用</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// LocalDateTime会自动按配置格式处理</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建时间: "</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getCreateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生日: "</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setBirthday</span><span class="token punctuation">(</span><span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 返回的日期会自动格式化</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-测试验证"><a href="#2-测试验证" class="headerlink" title="2. 测试验证"></a>2. 测试验证</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateFormatTest</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">ObjectMapper</span> objectMapper<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDateFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setBirthday</span><span class="token punctuation">(</span><span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> json <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"序列化结果: "</span> <span class="token operator">+</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">User</span> parsedUser <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"反序列化结果: "</span> <span class="token operator">+</span> parsedUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><ol><li><p>统一使用LocalDateTime和LocalDate替代Date类型</p></li><li><p>在配置文件中集中管理日期格式模式字符串</p></li><li><p>考虑时区问题,建议:</p><ul><li>服务器统一使用UTC时间</li><li>在展示层处理时区转换</li><li>在配置中明确指定时区</li></ul></li><li><p>对于特殊格式要求:</p><ul><li>优先使用@JsonFormat注解</li><li>其次考虑自定义序列化器</li></ul></li><li><p>添加参数校验:</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"创建时间不能为空"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> createTime<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Past</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"生日必须是过去的日期"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">LocalDate</span> birthday<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p>时区问题</p><ul><li>现象:前后端显示时间相差几个小时</li><li>解决:指定正确的时区,如 <code>timezone = "GMT+8"</code></li></ul></li><li><p>格式解析异常</p><ul><li>现象:日期字符串无法正确解析</li><li>解决:检查日期格式是否匹配,增加异常处理</li></ul></li><li><p>性能问题</p><ul><li>现象:日期转换影响接口性能</li><li>解决:使用缓存,避免重复创建DateTimeFormatter</li></ul></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过合理配置和规范使用,我们可以优雅地解决JSON日期格式问题:</p><ol><li>全局配置处理通用场景</li><li>注解处理特殊需求</li><li>自定义序列化处理复杂情况</li></ol><p>这样既保证了代码的统一性,又提供了足够的灵活性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.json">Spring Boot Documentation</a></li><li><a href="https://github.com/FasterXML/jackson-docs">Jackson Documentation</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html">Java 8 Date/Time API</a></li></ul><hr><h2 id="希望这篇文章能帮助您更好地解决全局日期配置的问题。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地解决全局日期配置的问题。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地解决全局日期配置的问题。如果您有任何问题，欢迎在评论区讨论！ "></a>希望这篇文章能帮助您更好地解决全局日期配置的问题。如果您有任何问题，欢迎在评论区讨论！ </h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JSON </tag>
            
            <tag> 日期格式 </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式之访问者模式详解</title>
      <link href="/archives/4f5e305f.html"/>
      <url>/archives/4f5e305f.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是访问者模式？"><a href="#什么是访问者模式？" class="headerlink" title="什么是访问者模式？"></a>什么是访问者模式？</h2><p>访问者模式（Visitor Pattern）是一种行为型设计模式，它允许你在不改变各元素类的前提下定义作用于这些元素的新操作。这种模式将操作与对象结构分离，使得我们可以在不修改对象结构的情况下，增加新的操作。</p><h2 id="为什么使用访问者模式？"><a href="#为什么使用访问者模式？" class="headerlink" title="为什么使用访问者模式？"></a>为什么使用访问者模式？</h2><ol><li>实现对象结构和操作的分离</li><li>增加新的操作很方便</li><li>集中相关的操作</li><li>访问者可以积累状态</li></ol><h2 id="实现示例"><a href="#实现示例" class="headerlink" title="实现示例"></a>实现示例</h2><h3 id="1-基本实现"><a href="#1-基本实现" class="headerlink" title="1. 基本实现"></a>1. 基本实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 访问者接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Visitor</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">ConcreteElementA</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">ConcreteElementB</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 元素接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Visitor</span> visitor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 具体元素A</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteElementA</span> <span class="token keyword">implements</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Visitor</span> visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        visitor<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">operationA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"ElementA"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 具体元素B</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteElementB</span> <span class="token keyword">implements</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Visitor</span> visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        visitor<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">operationB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"ElementB"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 具体访问者1</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteVisitor1</span> <span class="token keyword">implements</span> <span class="token class-name">Visitor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">ConcreteElementA</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"访问者1访问"</span> <span class="token operator">+</span> element<span class="token punctuation">.</span><span class="token function">operationA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">ConcreteElementB</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"访问者1访问"</span> <span class="token operator">+</span> element<span class="token punctuation">.</span><span class="token function">operationB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 具体访问者2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteVisitor2</span> <span class="token keyword">implements</span> <span class="token class-name">Visitor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">ConcreteElementA</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"访问者2访问"</span> <span class="token operator">+</span> element<span class="token punctuation">.</span><span class="token function">operationA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">ConcreteElementB</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"访问者2访问"</span> <span class="token operator">+</span> element<span class="token punctuation">.</span><span class="token function">operationB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 对象结构</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObjectStructure</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token punctuation">&gt;</span></span> elements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attach</span><span class="token punctuation">(</span><span class="token class-name">Element</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        elements<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">detach</span><span class="token punctuation">(</span><span class="token class-name">Element</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        elements<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Visitor</span> visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Element</span> element <span class="token operator">:</span> elements<span class="token punctuation">)</span> <span class="token punctuation">{</span>            element<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>visitor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-文件系统示例"><a href="#2-文件系统示例" class="headerlink" title="2. 文件系统示例"></a>2. 文件系统示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 文件系统元素接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FileSystemElement</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">FileVisitor</span> visitor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 文件访问者接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FileVisitor</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">Directory</span> directory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 文件类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">File</span> <span class="token keyword">implements</span> <span class="token class-name">FileSystemElement</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">FileVisitor</span> visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        visitor<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 目录类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Directory</span> <span class="token keyword">implements</span> <span class="token class-name">FileSystemElement</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FileSystemElement</span><span class="token punctuation">&gt;</span></span> elements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">FileSystemElement</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>        elements<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">FileVisitor</span> visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        visitor<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">FileSystemElement</span> element <span class="token operator">:</span> elements<span class="token punctuation">)</span> <span class="token punctuation">{</span>            element<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>visitor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FileSystemElement</span><span class="token punctuation">&gt;</span></span> <span class="token function">getElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> elements<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 大小计算访问者</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SizeCalculator</span> <span class="token keyword">implements</span> <span class="token class-name">FileVisitor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> totalSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        totalSize <span class="token operator">+=</span> file<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">Directory</span> directory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 目录本身不占用空间</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getTotalSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> totalSize<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 文件列表打印访问者</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileLister</span> <span class="token keyword">implements</span> <span class="token class-name">FileVisitor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> indent <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>indent<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"- "</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">Directory</span> directory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>indent<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"+ "</span> <span class="token operator">+</span> directory<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        indent <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-使用示例"><a href="#3-使用示例" class="headerlink" title="3. 使用示例"></a>3. 使用示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 基本示例</span>        <span class="token class-name">ObjectStructure</span> structure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectStructure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        structure<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcreteElementA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        structure<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcreteElementB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Visitor</span> visitor1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteVisitor1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Visitor</span> visitor2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteVisitor2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                structure<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>visitor1<span class="token punctuation">)</span><span class="token punctuation">;</span>        structure<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>visitor2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 文件系统示例</span>        <span class="token class-name">Directory</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Directory</span> home <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">"home"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Directory</span> docs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">"docs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                root<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>home<span class="token punctuation">)</span><span class="token punctuation">;</span>        home<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>docs<span class="token punctuation">)</span><span class="token punctuation">;</span>        docs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"resume.doc"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        docs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"photo.jpg"</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">SizeCalculator</span> sizeCalc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SizeCalculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>sizeCalc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Total size: "</span> <span class="token operator">+</span> sizeCalc<span class="token punctuation">.</span><span class="token function">getTotalSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" bytes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">FileLister</span> lister <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileLister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>lister<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="访问者模式的优点"><a href="#访问者模式的优点" class="headerlink" title="访问者模式的优点"></a>访问者模式的优点</h2><ol><li>符合单一职责原则</li><li>优秀的扩展性</li><li>集中相关的操作</li><li>对象结构可以复用</li></ol><h2 id="访问者模式的缺点"><a href="#访问者模式的缺点" class="headerlink" title="访问者模式的缺点"></a>访问者模式的缺点</h2><ol><li>增加新的元素类型困难</li><li>破坏封装</li><li>违反依赖倒置原则</li></ol><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ol><li>对象结构中的元素类型固定</li><li>需要对一个对象结构中的对象进行很多不同操作</li><li>需要避免在元素类中添加新的操作</li><li>对象结构包含多个类型的对象</li></ol><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ol><li>组合模式：访问者模式经常与组合模式一起使用</li><li>迭代器模式：可以使用迭代器来遍历对象结构</li><li>解释器模式：可以使用访问者来解释语法树</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>访问者模式是一种用于分离对象结构和操作的设计模式。它在需要对固定的对象结构执行多种不同操作时特别有用。虽然这种模式增加了系统的复杂度，但它提供了很好的扩展性和灵活性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《Design Patterns: Elements of Reusable Object-Oriented Software》</li><li>《Head First Design Patterns》</li><li>Java ASM 框架</li><li>Spring Framework 源码</li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解Java中的访问者模式。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解Java中的访问者模式。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解Java中的访问者模式。如果您有任何问题，欢迎在评论区讨论！ "></a>希望这篇文章能帮助您更好地理解Java中的访问者模式。如果您有任何问题，欢迎在评论区讨论！ </h2>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式之责任链模式详解</title>
      <link href="/archives/3f4e205f.html"/>
      <url>/archives/3f4e205f.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是责任链模式？"><a href="#什么是责任链模式？" class="headerlink" title="什么是责任链模式？"></a>什么是责任链模式？</h2><p>责任链模式（Chain of Responsibility Pattern）是一种行为型设计模式，它通过为请求创建一个接收者对象的链来避免请求发送者与接收者耦合。这种模式将接收对象连成一条链，并沿着这条链传递请求，直到有一个对象处理它为止。</p><h2 id="为什么使用责任链模式？"><a href="#为什么使用责任链模式？" class="headerlink" title="为什么使用责任链模式？"></a>为什么使用责任链模式？</h2><ol><li>降低耦合度</li><li>简化对象间的连接</li><li>增强给对象指派职责的灵活性</li><li>增加新的请求处理类很方便</li></ol><h2 id="实现示例"><a href="#实现示例" class="headerlink" title="实现示例"></a>实现示例</h2><h3 id="1-基本实现"><a href="#1-基本实现" class="headerlink" title="1. 基本实现"></a>1. 基本实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 处理器接口</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">Handler</span> successor<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSuccessor</span><span class="token punctuation">(</span><span class="token class-name">Handler</span> successor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>successor <span class="token operator">=</span> successor<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 请求类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Request</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> type<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> type<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 具体处理器A</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteHandlerA</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"处理器A处理请求："</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>successor <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            successor<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 具体处理器B</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteHandlerB</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"处理器B处理请求："</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>successor <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            successor<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-日志级别示例"><a href="#2-日志级别示例" class="headerlink" title="2. 日志级别示例"></a>2. 日志级别示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 日志处理器</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">LogHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">LogHandler</span> nextHandler<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> level<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNextHandler</span><span class="token punctuation">(</span><span class="token class-name">LogHandler</span> nextHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nextHandler <span class="token operator">=</span> nextHandler<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logMessage</span><span class="token punctuation">(</span><span class="token keyword">int</span> level<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>level <span class="token operator">&lt;=</span> level<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">write</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextHandler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nextHandler<span class="token punctuation">.</span><span class="token function">logMessage</span><span class="token punctuation">(</span>level<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 控制台日志处理器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsoleLogger</span> <span class="token keyword">extends</span> <span class="token class-name">LogHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ConsoleLogger</span><span class="token punctuation">(</span><span class="token keyword">int</span> level<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>level <span class="token operator">=</span> level<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Console::Logger: "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 文件日志处理器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileLogger</span> <span class="token keyword">extends</span> <span class="token class-name">LogHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">FileLogger</span><span class="token punctuation">(</span><span class="token keyword">int</span> level<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>level <span class="token operator">=</span> level<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"File::Logger: "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 错误日志处理器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorLogger</span> <span class="token keyword">extends</span> <span class="token class-name">LogHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ErrorLogger</span><span class="token punctuation">(</span><span class="token keyword">int</span> level<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>level <span class="token operator">=</span> level<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error::Logger: "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-请求处理示例"><a href="#3-请求处理示例" class="headerlink" title="3. 请求处理示例"></a>3. 请求处理示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 请求处理器</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">RequestHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">RequestHandler</span> next<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">RequestHandler</span> <span class="token function">setNext</span><span class="token punctuation">(</span><span class="token class-name">RequestHandler</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 认证处理器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthenticationHandler</span> <span class="token keyword">extends</span> <span class="token class-name">RequestHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>request<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"认证失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"认证成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            next<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 授权处理器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorizationHandler</span> <span class="token keyword">extends</span> <span class="token class-name">RequestHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>request<span class="token punctuation">.</span><span class="token function">hasPermission</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有权限"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"授权成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            next<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 缓存处理器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheHandler</span> <span class="token keyword">extends</span> <span class="token class-name">RequestHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">existsInCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从缓存返回数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"继续处理请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            next<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-使用示例"><a href="#4-使用示例" class="headerlink" title="4. 使用示例"></a>4. 使用示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 基本示例</span>        <span class="token class-name">Handler</span> handlerA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteHandlerA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Handler</span> handlerB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteHandlerB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        handlerA<span class="token punctuation">.</span><span class="token function">setSuccessor</span><span class="token punctuation">(</span>handlerB<span class="token punctuation">)</span><span class="token punctuation">;</span>                handlerA<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"请求1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        handlerA<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"请求2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 日志级别示例</span>        <span class="token class-name">LogHandler</span> errorLogger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ErrorLogger</span><span class="token punctuation">(</span><span class="token class-name">LogLevel</span><span class="token punctuation">.</span><span class="token constant">ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LogHandler</span> fileLogger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileLogger</span><span class="token punctuation">(</span><span class="token class-name">LogLevel</span><span class="token punctuation">.</span><span class="token constant">DEBUG</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LogHandler</span> consoleLogger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConsoleLogger</span><span class="token punctuation">(</span><span class="token class-name">LogLevel</span><span class="token punctuation">.</span><span class="token constant">INFO</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                errorLogger<span class="token punctuation">.</span><span class="token function">setNextHandler</span><span class="token punctuation">(</span>fileLogger<span class="token punctuation">)</span><span class="token punctuation">;</span>        fileLogger<span class="token punctuation">.</span><span class="token function">setNextHandler</span><span class="token punctuation">(</span>consoleLogger<span class="token punctuation">)</span><span class="token punctuation">;</span>                errorLogger<span class="token punctuation">.</span><span class="token function">logMessage</span><span class="token punctuation">(</span><span class="token class-name">LogLevel</span><span class="token punctuation">.</span><span class="token constant">ERROR</span><span class="token punctuation">,</span> <span class="token string">"错误信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        errorLogger<span class="token punctuation">.</span><span class="token function">logMessage</span><span class="token punctuation">(</span><span class="token class-name">LogLevel</span><span class="token punctuation">.</span><span class="token constant">DEBUG</span><span class="token punctuation">,</span> <span class="token string">"调试信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 请求处理示例</span>        <span class="token class-name">RequestHandler</span> authentication <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AuthenticationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RequestHandler</span> authorization <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AuthorizationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RequestHandler</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CacheHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                authentication<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>authorization<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">HttpRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        authentication<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="责任链模式的优点"><a href="#责任链模式的优点" class="headerlink" title="责任链模式的优点"></a>责任链模式的优点</h2><ol><li>降低耦合度</li><li>简化了对象之间的连接</li><li>增强了给对象指派职责的灵活性</li><li>增加新的处理类很方便</li></ol><h2 id="责任链模式的缺点"><a href="#责任链模式的缺点" class="headerlink" title="责任链模式的缺点"></a>责任链模式的缺点</h2><ol><li>不能保证请求一定被处理</li><li>系统性能会受到影响</li><li>可能不容易观察运行时的特征</li></ol><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ol><li>有多个对象可以处理同一个请求，具体由哪个对象处理该请求待运行时确定</li><li>在不明确指定接收者的情况下，向多个对象中的一个提交一个请求</li><li>可动态指定一组对象处理请求</li><li>需要在不同的处理器之间传递请求</li></ol><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ol><li>命令模式：责任链可以与命令模式结合使用</li><li>装饰器模式：责任链模式是行为模式，装饰器是结构模式</li><li>组合模式：责任链通常和组合模式一起使用</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>责任链模式是一种非常实用的设计模式，它通过建立一条处理请求的链来降低请求的发送者和接收者之间的耦合关系。这种模式在处理复杂的请求流程时特别有用，如日志记录、请求过滤等场景。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《Design Patterns: Elements of Reusable Object-Oriented Software》</li><li>《Head First Design Patterns》</li><li>Spring Security 文档</li><li>Java Servlet Filter 机制</li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解Java中的责任链模式。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解Java中的责任链模式。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解Java中的责任链模式。如果您有任何问题，欢迎在评论区讨论！ "></a>希望这篇文章能帮助您更好地理解Java中的责任链模式。如果您有任何问题，欢迎在评论区讨论！ </h2>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式之策略模式详解</title>
      <link href="/archives/2f3e105f.html"/>
      <url>/archives/2f3e105f.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是策略模式？"><a href="#什么是策略模式？" class="headerlink" title="什么是策略模式？"></a>什么是策略模式？</h2><p>策略模式（Strategy Pattern）是一种行为型设计模式，它定义了一系列算法，并将每个算法封装起来，使它们可以相互替换。策略模式让算法独立于使用它的客户端而变化。</p><h2 id="为什么使用策略模式？"><a href="#为什么使用策略模式？" class="headerlink" title="为什么使用策略模式？"></a>为什么使用策略模式？</h2><ol><li>避免使用多重条件语句</li><li>算法可以自由切换</li><li>扩展性良好</li><li>遵循开闭原则</li></ol><h2 id="实现示例"><a href="#实现示例" class="headerlink" title="实现示例"></a>实现示例</h2><h3 id="1-基本实现"><a href="#1-基本实现" class="headerlink" title="1. 基本实现"></a>1. 基本实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 策略接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Strategy</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 具体策略A</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteStrategyA</span> <span class="token keyword">implements</span> <span class="token class-name">Strategy</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行策略A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 具体策略B</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteStrategyB</span> <span class="token keyword">implements</span> <span class="token class-name">Strategy</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行策略B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 上下文</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Strategy</span> strategy<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token class-name">Strategy</span> strategy<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>strategy <span class="token operator">=</span> strategy<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStrategy</span><span class="token punctuation">(</span><span class="token class-name">Strategy</span> strategy<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>strategy <span class="token operator">=</span> strategy<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        strategy<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-支付方式示例"><a href="#2-支付方式示例" class="headerlink" title="2. 支付方式示例"></a>2. 支付方式示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 支付策略接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PaymentStrategy</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 信用卡支付</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreditCardPayment</span> <span class="token keyword">implements</span> <span class="token class-name">PaymentStrategy</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> cardNumber<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> cvv<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> dateOfExpiry<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">CreditCardPayment</span><span class="token punctuation">(</span><span class="token class-name">String</span> cardNumber<span class="token punctuation">,</span> <span class="token class-name">String</span> cvv<span class="token punctuation">,</span> <span class="token class-name">String</span> dateOfExpiry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cardNumber <span class="token operator">=</span> cardNumber<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cvv <span class="token operator">=</span> cvv<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dateOfExpiry <span class="token operator">=</span> dateOfExpiry<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用信用卡支付："</span> <span class="token operator">+</span> amount <span class="token operator">+</span> <span class="token string">"元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 支付宝支付</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AlipayPayment</span> <span class="token keyword">implements</span> <span class="token class-name">PaymentStrategy</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> emailId<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">AlipayPayment</span><span class="token punctuation">(</span><span class="token class-name">String</span> emailId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>emailId <span class="token operator">=</span> emailId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用支付宝支付："</span> <span class="token operator">+</span> amount <span class="token operator">+</span> <span class="token string">"元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 微信支付</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeChatPayment</span> <span class="token keyword">implements</span> <span class="token class-name">PaymentStrategy</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> phoneNumber<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">WeChatPayment</span><span class="token punctuation">(</span><span class="token class-name">String</span> phoneNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phoneNumber <span class="token operator">=</span> phoneNumber<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用微信支付："</span> <span class="token operator">+</span> amount <span class="token operator">+</span> <span class="token string">"元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 购物车</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShoppingCart</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">PaymentStrategy</span> paymentStrategy<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPaymentStrategy</span><span class="token punctuation">(</span><span class="token class-name">PaymentStrategy</span> strategy<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>paymentStrategy <span class="token operator">=</span> strategy<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkout</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        paymentStrategy<span class="token punctuation">.</span><span class="token function">pay</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-文件压缩示例"><a href="#3-文件压缩示例" class="headerlink" title="3. 文件压缩示例"></a>3. 文件压缩示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 压缩策略接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CompressionStrategy</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">compressFiles</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> files<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// ZIP压缩</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZipCompression</span> <span class="token keyword">implements</span> <span class="token class-name">CompressionStrategy</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">compressFiles</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用ZIP格式压缩文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 具体的ZIP压缩实现</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// RAR压缩</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RarCompression</span> <span class="token keyword">implements</span> <span class="token class-name">CompressionStrategy</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">compressFiles</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用RAR格式压缩文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 具体的RAR压缩实现</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 7Z压缩</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SevenZipCompression</span> <span class="token keyword">implements</span> <span class="token class-name">CompressionStrategy</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">compressFiles</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用7Z格式压缩文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 具体的7Z压缩实现</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 压缩器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Compressor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">CompressionStrategy</span> strategy<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCompressionStrategy</span><span class="token punctuation">(</span><span class="token class-name">CompressionStrategy</span> strategy<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>strategy <span class="token operator">=</span> strategy<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">compress</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>        strategy<span class="token punctuation">.</span><span class="token function">compressFiles</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-使用示例"><a href="#4-使用示例" class="headerlink" title="4. 使用示例"></a>4. 使用示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 基本示例</span>        <span class="token class-name">Context</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcreteStrategyA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">executeStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                context<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcreteStrategyB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">executeStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 支付方式示例</span>        <span class="token class-name">ShoppingCart</span> cart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShoppingCart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cart<span class="token punctuation">.</span><span class="token function">setPaymentStrategy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CreditCardPayment</span><span class="token punctuation">(</span><span class="token string">"1234-5678"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token string">"12/24"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cart<span class="token punctuation">.</span><span class="token function">checkout</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cart<span class="token punctuation">.</span><span class="token function">setPaymentStrategy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AlipayPayment</span><span class="token punctuation">(</span><span class="token string">"example@email.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cart<span class="token punctuation">.</span><span class="token function">checkout</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cart<span class="token punctuation">.</span><span class="token function">setPaymentStrategy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WeChatPayment</span><span class="token punctuation">(</span><span class="token string">"13800138000"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cart<span class="token punctuation">.</span><span class="token function">checkout</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 文件压缩示例</span>        <span class="token class-name">Compressor</span> compressor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Compressor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> files <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"file1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"file2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                compressor<span class="token punctuation">.</span><span class="token function">setCompressionStrategy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ZipCompression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        compressor<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>                compressor<span class="token punctuation">.</span><span class="token function">setCompressionStrategy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RarCompression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        compressor<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>                compressor<span class="token punctuation">.</span><span class="token function">setCompressionStrategy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SevenZipCompression</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        compressor<span class="token punctuation">.</span><span class="token function">compress</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="策略模式的优点"><a href="#策略模式的优点" class="headerlink" title="策略模式的优点"></a>策略模式的优点</h2><ol><li>算法可以自由切换</li><li>避免使用多重条件判断</li><li>扩展性良好</li><li>遵循开闭原则</li></ol><h2 id="策略模式的缺点"><a href="#策略模式的缺点" class="headerlink" title="策略模式的缺点"></a>策略模式的缺点</h2><ol><li>策略类会增多</li><li>所有策略类都需要对外暴露</li><li>客户端必须知道所有的策略类</li></ol><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ol><li>需要动态地在几种算法中选择一种</li><li>有多个类只区别在表现行为不同</li><li>算法需要自由切换</li><li>避免使用多重条件选择语句</li></ol><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ol><li>状态模式：策略模式是算法的封装，状态模式是对象状态的封装</li><li>命令模式：策略模式通常用来封装算法，命令模式用来封装行为或动作</li><li>工厂模式：可以使用工厂模式来创建策略对象</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>策略模式是一种非常实用的设计模式，它通过定义一系列算法，把它们一个个封装起来，并且使它们可以相互替换。这种模式在实际开发中经常用到，特别是在需要动态选择算法的场景下，如支付方式选择、文件压缩等。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《Design Patterns: Elements of Reusable Object-Oriented Software》</li><li>《Head First Design Patterns》</li><li>Spring Framework 文档</li><li>Java核心技术</li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解Java中的策略模式。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解Java中的策略模式。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解Java中的策略模式。如果您有任何问题，欢迎在评论区讨论！ "></a>希望这篇文章能帮助您更好地理解Java中的策略模式。如果您有任何问题，欢迎在评论区讨论！ </h2>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式之状态模式详解</title>
      <link href="/archives/1f2e005f.html"/>
      <url>/archives/1f2e005f.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是状态模式？"><a href="#什么是状态模式？" class="headerlink" title="什么是状态模式？"></a>什么是状态模式？</h2><p>状态模式（State Pattern）是一种行为型设计模式，它允许一个对象在其内部状态改变时改变它的行为。状态模式将状态封装成独立的类，并将与状态相关的行为委托给代表当前状态的对象。</p><h2 id="为什么使用状态模式？"><a href="#为什么使用状态模式？" class="headerlink" title="为什么使用状态模式？"></a>为什么使用状态模式？</h2><ol><li>将状态相关的行为局部化</li><li>使状态转换显式化</li><li>消除庞大的条件分支语句</li><li>更好地管理状态之间的转换</li></ol><h2 id="实现示例"><a href="#实现示例" class="headerlink" title="实现示例"></a>实现示例</h2><h3 id="1-基本实现"><a href="#1-基本实现" class="headerlink" title="1. 基本实现"></a>1. 基本实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 状态接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 具体状态A</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteStateA</span> <span class="token keyword">implements</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Context</span> context<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">ConcreteStateA</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> context<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前是状态A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcreteStateB</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 具体状态B</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteStateB</span> <span class="token keyword">implements</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Context</span> context<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">ConcreteStateB</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> context<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前是状态B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcreteStateA</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 环境类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">State</span> state<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        state <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteStateA</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token class-name">State</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        state<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-自动售货机示例"><a href="#2-自动售货机示例" class="headerlink" title="2. 自动售货机示例"></a>2. 自动售货机示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 售货机状态接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">VendingMachineState</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">insertCoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">ejectCoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">selectProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dispense</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 没有硬币状态</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NoCoinState</span> <span class="token keyword">implements</span> <span class="token class-name">VendingMachineState</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">VendingMachine</span> machine<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">NoCoinState</span><span class="token punctuation">(</span><span class="token class-name">VendingMachine</span> machine<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>machine <span class="token operator">=</span> machine<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertCoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"投入硬币"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        machine<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HasCoinState</span><span class="token punctuation">(</span>machine<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ejectCoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有硬币可退"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请先投入硬币"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispense</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请先投入硬币"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 有硬币状态</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HasCoinState</span> <span class="token keyword">implements</span> <span class="token class-name">VendingMachineState</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">VendingMachine</span> machine<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">HasCoinState</span><span class="token punctuation">(</span><span class="token class-name">VendingMachine</span> machine<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>machine <span class="token operator">=</span> machine<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertCoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已经投入了硬币"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ejectCoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"退回硬币"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        machine<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NoCoinState</span><span class="token punctuation">(</span>machine<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"选择商品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        machine<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SoldState</span><span class="token punctuation">(</span>machine<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispense</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请先选择商品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 售出状态</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SoldState</span> <span class="token keyword">implements</span> <span class="token class-name">VendingMachineState</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">VendingMachine</span> machine<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">SoldState</span><span class="token punctuation">(</span><span class="token class-name">VendingMachine</span> machine<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>machine <span class="token operator">=</span> machine<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertCoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请等待商品发放"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ejectCoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"交易已经开始，无法退币"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已经选择了商品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispense</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发放商品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        machine<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NoCoinState</span><span class="token punctuation">(</span>machine<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 售货机</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VendingMachine</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">VendingMachineState</span> state<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">VendingMachine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        state <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoCoinState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token class-name">VendingMachineState</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertCoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        state<span class="token punctuation">.</span><span class="token function">insertCoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ejectCoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        state<span class="token punctuation">.</span><span class="token function">ejectCoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">selectProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        state<span class="token punctuation">.</span><span class="token function">selectProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dispense</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        state<span class="token punctuation">.</span><span class="token function">dispense</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-订单状态示例"><a href="#3-订单状态示例" class="headerlink" title="3. 订单状态示例"></a>3. 订单状态示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 订单状态接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderState</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">nextState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 新建订单状态</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewOrderState</span> <span class="token keyword">implements</span> <span class="token class-name">OrderState</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Order</span> order<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">NewOrderState</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>order <span class="token operator">=</span> order<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nextState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单已支付"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaidOrderState</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"取消订单"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CancelledOrderState</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"新建"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 已支付状态</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaidOrderState</span> <span class="token keyword">implements</span> <span class="token class-name">OrderState</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Order</span> order<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">PaidOrderState</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>order <span class="token operator">=</span> order<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nextState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单已发货"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ShippedOrderState</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"申请退款"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RefundingOrderState</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"已支付"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 订单类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">OrderState</span> state<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> orderNumber<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderNumber <span class="token operator">=</span> orderNumber<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NewOrderState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token class-name">OrderState</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nextState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        state<span class="token punctuation">.</span><span class="token function">nextState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        state<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> state<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-使用示例"><a href="#4-使用示例" class="headerlink" title="4. 使用示例"></a>4. 使用示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 基本示例</span>        <span class="token class-name">Context</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：当前是状态A</span>        context<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：当前是状态B</span>        context<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：当前是状态A</span>                <span class="token comment">// 售货机示例</span>        <span class="token class-name">VendingMachine</span> machine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VendingMachine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        machine<span class="token punctuation">.</span><span class="token function">insertCoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        machine<span class="token punctuation">.</span><span class="token function">selectProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        machine<span class="token punctuation">.</span><span class="token function">dispense</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 订单状态示例</span>        <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token string">"ORDER001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单状态："</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 新建</span>                order<span class="token punctuation">.</span><span class="token function">nextState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单状态："</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 已支付</span>                order<span class="token punctuation">.</span><span class="token function">nextState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"订单状态："</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 已发货</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="状态模式的优点"><a href="#状态模式的优点" class="headerlink" title="状态模式的优点"></a>状态模式的优点</h2><ol><li>封装了状态的转换规则</li><li>消除了庞大的条件分支语句</li><li>将状态相关的行为局部化</li><li>使状态转换显式化</li></ol><h2 id="状态模式的缺点"><a href="#状态模式的缺点" class="headerlink" title="状态模式的缺点"></a>状态模式的缺点</h2><ol><li>可能会导致状态类的数量增多</li><li>状态之间的转换关系容易变得复杂</li><li>可能会增加系统的复杂度</li></ol><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ol><li>对象的行为取决于其状态</li><li>代码中包含大量与对象状态有关的条件语句</li><li>需要在运行时根据状态改变对象的行为</li><li>状态转换规则比较复杂</li></ol><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ol><li>策略模式：状态模式是策略模式的一种变体</li><li>单例模式：状态对象通常可以被共享，使用单例模式</li><li>备忘录模式：可以使用备忘录模式保存状态对象的状态</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>状态模式是一种用于管理对象状态及其相关行为的设计模式。它通过将状态相关的行为封装在独立的状态类中，使得对象在不同状态下能够改变其行为，同时又不会导致代码的混乱。这种模式在处理复杂的状态转换逻辑时特别有用。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《Design Patterns: Elements of Reusable Object-Oriented Software》</li><li>《Head First Design Patterns》</li><li>Spring Statemachine 文档</li><li>Java核心技术</li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解Java中的状态模式。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解Java中的状态模式。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解Java中的状态模式。如果您有任何问题，欢迎在评论区讨论！ "></a>希望这篇文章能帮助您更好地理解Java中的状态模式。如果您有任何问题，欢迎在评论区讨论！ </h2>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式之解释器模式详解</title>
      <link href="/archives/0f1e905f.html"/>
      <url>/archives/0f1e905f.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是解释器模式？"><a href="#什么是解释器模式？" class="headerlink" title="什么是解释器模式？"></a>什么是解释器模式？</h2><p>解释器模式（Interpreter Pattern）是一种行为型设计模式，它定义了一个语言的语法表示，并定义一个解释器来解释该语言中的句子。这种模式被用在SQL解析、符号处理引擎等场景中。</p><h2 id="为什么使用解释器模式？"><a href="#为什么使用解释器模式？" class="headerlink" title="为什么使用解释器模式？"></a>为什么使用解释器模式？</h2><ol><li>需要解释特定的语言或语法</li><li>可以轻松地改变和扩展语法</li><li>实现语法规则的复用</li><li>将每条语法规则封装在一个类中</li></ol><h2 id="实现示例"><a href="#实现示例" class="headerlink" title="实现示例"></a>实现示例</h2><h3 id="1-基本实现"><a href="#1-基本实现" class="headerlink" title="1. 基本实现"></a>1. 基本实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 抽象表达式</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Expression</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 上下文</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> variables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setVariable</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        variables<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getVariable</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> variables<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 数字表达式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NumberExpression</span> <span class="token keyword">implements</span> <span class="token class-name">Expression</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">NumberExpression</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">=</span> number<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> number<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 变量表达式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VariableExpression</span> <span class="token keyword">implements</span> <span class="token class-name">Expression</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">VariableExpression</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> context<span class="token punctuation">.</span><span class="token function">getVariable</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 加法表达式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddExpression</span> <span class="token keyword">implements</span> <span class="token class-name">Expression</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Expression</span> left<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Expression</span> right<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">AddExpression</span><span class="token punctuation">(</span><span class="token class-name">Expression</span> left<span class="token punctuation">,</span> <span class="token class-name">Expression</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> left<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">+</span> right<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 减法表达式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubtractExpression</span> <span class="token keyword">implements</span> <span class="token class-name">Expression</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Expression</span> left<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Expression</span> right<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">SubtractExpression</span><span class="token punctuation">(</span><span class="token class-name">Expression</span> left<span class="token punctuation">,</span> <span class="token class-name">Expression</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> left<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">-</span> right<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-简单计算器示例"><a href="#2-简单计算器示例" class="headerlink" title="2. 简单计算器示例"></a>2. 简单计算器示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 计算器解释器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Expression</span> expression<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token class-name">String</span> expStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Expression</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tokens <span class="token operator">=</span> expStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> token <span class="token operator">:</span> tokens<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"\\d+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NumberExpression</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"[a-zA-Z]+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VariableExpression</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Expression</span> right <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Expression</span> left <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AddExpression</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Expression</span> right <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Expression</span> left <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SubtractExpression</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                expression <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> expression<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-SQL解析器示例"><a href="#3-SQL解析器示例" class="headerlink" title="3. SQL解析器示例"></a>3. SQL解析器示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// SQL表达式接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SQLExpression</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// SELECT语句</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectExpression</span> <span class="token keyword">implements</span> <span class="token class-name">SQLExpression</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> columns<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> table<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">SelectExpression</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> columns<span class="token punctuation">,</span> <span class="token class-name">String</span> table<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>columns <span class="token operator">=</span> columns<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>table <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"SELECT "</span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">,</span> columns<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" FROM "</span> <span class="token operator">+</span> table<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// WHERE条件</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WhereExpression</span> <span class="token keyword">implements</span> <span class="token class-name">SQLExpression</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> column<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> operator<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> value<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">WhereExpression</span><span class="token punctuation">(</span><span class="token class-name">String</span> column<span class="token punctuation">,</span> <span class="token class-name">String</span> operator<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>column <span class="token operator">=</span> column<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>operator <span class="token operator">=</span> operator<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"WHERE "</span> <span class="token operator">+</span> column <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> operator <span class="token operator">+</span> <span class="token string">" '"</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// SQL查询构建器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SQLQueryBuilder</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SQLExpression</span> select<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SQLExpression</span> where<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSelect</span><span class="token punctuation">(</span><span class="token class-name">SQLExpression</span> select<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>select <span class="token operator">=</span> select<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWhere</span><span class="token punctuation">(</span><span class="token class-name">SQLExpression</span> where<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>where <span class="token operator">=</span> where<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">StringBuilder</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        query<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>select<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>where <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            query<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>where<span class="token punctuation">.</span><span class="token function">interpret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> query<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-使用示例"><a href="#4-使用示例" class="headerlink" title="4. 使用示例"></a>4. 使用示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 计算器示例</span>        <span class="token class-name">Context</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">setVariable</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">setVariable</span><span class="token punctuation">(</span><span class="token string">"y"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Calculator</span> calculator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token string">"x y +"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x + y = "</span> <span class="token operator">+</span> calculator<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                calculator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token string">"x y -"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x - y = "</span> <span class="token operator">+</span> calculator<span class="token punctuation">.</span><span class="token function">calculate</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// SQL解析器示例</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> columns <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SelectExpression</span> select <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SelectExpression</span><span class="token punctuation">(</span>columns<span class="token punctuation">,</span> <span class="token string">"users"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">WhereExpression</span> where <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WhereExpression</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"&gt;"</span><span class="token punctuation">,</span> <span class="token string">"18"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">SQLQueryBuilder</span> queryBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SQLQueryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queryBuilder<span class="token punctuation">.</span><span class="token function">setSelect</span><span class="token punctuation">(</span>select<span class="token punctuation">)</span><span class="token punctuation">;</span>        queryBuilder<span class="token punctuation">.</span><span class="token function">setWhere</span><span class="token punctuation">(</span>where<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> query <span class="token operator">=</span> queryBuilder<span class="token punctuation">.</span><span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Generated SQL: "</span> <span class="token operator">+</span> query<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解释器模式的优点"><a href="#解释器模式的优点" class="headerlink" title="解释器模式的优点"></a>解释器模式的优点</h2><ol><li>易于改变和扩展文法</li><li>每个语法规则都可以表示为一个类</li><li>实现语法规则的复用</li><li>增加新的解释表达式很方便</li></ol><h2 id="解释器模式的缺点"><a href="#解释器模式的缺点" class="headerlink" title="解释器模式的缺点"></a>解释器模式的缺点</h2><ol><li>对于复杂的文法难以维护</li><li>执行效率较低</li><li>可能需要大量的类来表示语法规则</li></ol><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ol><li>需要解释一个简单的语法</li><li>语法规则的数量确定且不会频繁改变</li><li>对执行效率要求不是很高</li><li>需要重复发生的问题场景</li></ol><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ol><li>组合模式：解释器模式通常使用组合模式来表示语法规则</li><li>享元模式：可以使用享元模式来共享终结符表达式</li><li>访问者模式：可以使用访问者模式来在不改变表达式类的情况下定义新的操作</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>解释器模式是一种用于定义语言文法和解释语言句子的设计模式。它在处理简单的领域特定语言（DSL）时特别有用。虽然这种模式在实际应用中相对较少见，但在特定场景下（如解析SQL、数学表达式等）仍然是一个很好的选择。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《Design Patterns: Elements of Reusable Object-Oriented Software》</li><li>《Head First Design Patterns》</li><li>Java编译器实现原理</li><li>Antlr解析器生成工具</li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解Java中的解释器模式。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解Java中的解释器模式。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解Java中的解释器模式。如果您有任何问题，欢迎在评论区讨论！ "></a>希望这篇文章能帮助您更好地理解Java中的解释器模式。如果您有任何问题，欢迎在评论区讨论！ </h2>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式之备忘录模式详解</title>
      <link href="/archives/9f0e805f.html"/>
      <url>/archives/9f0e805f.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是备忘录模式？"><a href="#什么是备忘录模式？" class="headerlink" title="什么是备忘录模式？"></a>什么是备忘录模式？</h2><p>备忘录模式（Memento Pattern）是一种行为型设计模式，它允许在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，以便以后当需要时能将该对象恢复到原先保存的状态。</p><h2 id="为什么使用备忘录模式？"><a href="#为什么使用备忘录模式？" class="headerlink" title="为什么使用备忘录模式？"></a>为什么使用备忘录模式？</h2><ol><li>保存对象的历史状态</li><li>实现撤销/重做功能</li><li>不破坏对象的封装性</li><li>提供状态恢复机制</li></ol><h2 id="实现示例"><a href="#实现示例" class="headerlink" title="实现示例"></a>实现示例</h2><h3 id="1-基本实现"><a href="#1-基本实现" class="headerlink" title="1. 基本实现"></a>1. 基本实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 备忘录类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Memento</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> state<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Memento</span><span class="token punctuation">(</span><span class="token class-name">String</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> state<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 发起人类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Originator</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> state<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token class-name">String</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> state<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">Memento</span> <span class="token function">saveStateToMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Memento</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getStateFromMemento</span><span class="token punctuation">(</span><span class="token class-name">Memento</span> memento<span class="token punctuation">)</span> <span class="token punctuation">{</span>        state <span class="token operator">=</span> memento<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 管理者类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Caretaker</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Memento</span><span class="token punctuation">&gt;</span></span> mementoList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Memento</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mementoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">Memento</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mementoList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-文本编辑器示例"><a href="#2-文本编辑器示例" class="headerlink" title="2. 文本编辑器示例"></a>2. 文本编辑器示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 文本编辑器状态</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EditorState</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> cursorPosition<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">EditorState</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">,</span> <span class="token keyword">int</span> cursorPosition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cursorPosition <span class="token operator">=</span> cursorPosition<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCursorPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cursorPosition<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 文本编辑器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TextEditor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> cursorPosition<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>        content <span class="token operator">=</span> <span class="token punctuation">(</span>content <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> content<span class="token punctuation">)</span> <span class="token operator">+</span> text<span class="token punctuation">;</span>        cursorPosition <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCursor</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cursorPosition <span class="token operator">=</span> position<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">EditorState</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EditorState</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> cursorPosition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">restore</span><span class="token punctuation">(</span><span class="token class-name">EditorState</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> state<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cursorPosition <span class="token operator">=</span> state<span class="token punctuation">.</span><span class="token function">getCursorPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCursorPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cursorPosition<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 编辑器历史记录</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EditorHistory</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EditorState</span><span class="token punctuation">&gt;</span></span> history <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">EditorState</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">EditorState</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>history<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> history<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-游戏存档示例"><a href="#3-游戏存档示例" class="headerlink" title="3. 游戏存档示例"></a>3. 游戏存档示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 游戏状态</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GameState</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> level<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> score<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> inventory<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">GameState</span><span class="token punctuation">(</span><span class="token keyword">int</span> level<span class="token punctuation">,</span> <span class="token keyword">int</span> score<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> inventory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>level <span class="token operator">=</span> level<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>inventory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>inventory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> level<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> score<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getInventory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>inventory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 游戏</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> level<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> score<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> inventory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        level<span class="token operator">++</span><span class="token punctuation">;</span>        score <span class="token operator">+=</span> <span class="token number">100</span><span class="token punctuation">;</span>        inventory<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Item"</span> <span class="token operator">+</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">GameState</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">GameState</span><span class="token punctuation">(</span>level<span class="token punctuation">,</span> score<span class="token punctuation">,</span> inventory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">restore</span><span class="token punctuation">(</span><span class="token class-name">GameState</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>level <span class="token operator">=</span> state<span class="token punctuation">.</span><span class="token function">getLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> state<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>inventory <span class="token operator">=</span> state<span class="token punctuation">.</span><span class="token function">getInventory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Level: %d, Score: %d, Items: %s"</span><span class="token punctuation">,</span>                 level<span class="token punctuation">,</span> score<span class="token punctuation">,</span> inventory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 游戏存档管理</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GameSaveManager</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">GameState</span><span class="token punctuation">&gt;</span></span> saves <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveGame</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">GameState</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        saves<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">GameState</span> <span class="token function">loadGame</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> saves<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-使用示例"><a href="#4-使用示例" class="headerlink" title="4. 使用示例"></a>4. 使用示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 基本示例</span>        <span class="token class-name">Originator</span> originator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Originator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Caretaker</span> caretaker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Caretaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                originator<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">"State #1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        caretaker<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>originator<span class="token punctuation">.</span><span class="token function">saveStateToMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                originator<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">"State #2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        caretaker<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>originator<span class="token punctuation">.</span><span class="token function">saveStateToMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                originator<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">"State #3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Current State: "</span> <span class="token operator">+</span> originator<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                originator<span class="token punctuation">.</span><span class="token function">getStateFromMemento</span><span class="token punctuation">(</span>caretaker<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"First saved State: "</span> <span class="token operator">+</span> originator<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 文本编辑器示例</span>        <span class="token class-name">TextEditor</span> editor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">EditorHistory</span> history <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EditorHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                editor<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>editor<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                editor<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">" World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>editor<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                editor<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Current text: "</span> <span class="token operator">+</span> editor<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                editor<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span>history<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"After undo: "</span> <span class="token operator">+</span> editor<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 游戏存档示例</span>        <span class="token class-name">Game</span> game <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">GameSaveManager</span> saveManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GameSaveManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                game<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        saveManager<span class="token punctuation">.</span><span class="token function">saveGame</span><span class="token punctuation">(</span><span class="token string">"save1"</span><span class="token punctuation">,</span> game<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                game<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Current status: "</span> <span class="token operator">+</span> game<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                game<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span>saveManager<span class="token punctuation">.</span><span class="token function">loadGame</span><span class="token punctuation">(</span><span class="token string">"save1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"After loading save1: "</span> <span class="token operator">+</span> game<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="备忘录模式的优点"><a href="#备忘录模式的优点" class="headerlink" title="备忘录模式的优点"></a>备忘录模式的优点</h2><ol><li>提供了状态恢复的机制</li><li>不破坏对象的封装性</li><li>提供了可靠的实现方式</li><li>简化了发起人（Originator）的实现</li></ol><h2 id="备忘录模式的缺点"><a href="#备忘录模式的缺点" class="headerlink" title="备忘录模式的缺点"></a>备忘录模式的缺点</h2><ol><li>可能会消耗大量的内存</li><li>可能需要管理大量的备忘录对象</li><li>可能需要完整存储对象的状态，影响性能</li></ol><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ol><li>需要保存和恢复对象的状态</li><li>需要实现撤销/重做功能</li><li>直接访问对象的状态会破坏其封装性</li><li>需要提供回滚操作</li></ol><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ol><li>命令模式：可以使用备忘录模式来实现命令的撤销功能</li><li>原型模式：可以使用原型模式来实现备忘录</li><li>迭代器模式：可以使用迭代器来访问备忘录的历史记录</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>备忘录模式是一种用于保存和恢复对象状态的设计模式。它在不破坏封装性的前提下，提供了一种可靠的状态恢复机制。这种模式在需要实现撤销/重做功能，或者需要保存对象历史状态的场景中特别有用，如文本编辑器、游戏存档等。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《Design Patterns: Elements of Reusable Object-Oriented Software》</li><li>《Head First Design Patterns》</li><li>Java API 文档</li><li>Spring Framework 源码</li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解Java中的备忘录模式。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解Java中的备忘录模式。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解Java中的备忘录模式。如果您有任何问题，欢迎在评论区讨论！ "></a>希望这篇文章能帮助您更好地理解Java中的备忘录模式。如果您有任何问题，欢迎在评论区讨论！ </h2>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式之中介者模式详解</title>
      <link href="/archives/8f9e705f.html"/>
      <url>/archives/8f9e705f.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是中介者模式？"><a href="#什么是中介者模式？" class="headerlink" title="什么是中介者模式？"></a>什么是中介者模式？</h2><p>中介者模式（Mediator Pattern）是一种行为型设计模式，它用一个中介对象来封装一系列对象之间的交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p><h2 id="为什么使用中介者模式？"><a href="#为什么使用中介者模式？" class="headerlink" title="为什么使用中介者模式？"></a>为什么使用中介者模式？</h2><ol><li>降低系统对象之间的耦合度</li><li>简化对象之间的交互</li><li>集中管理对象之间的交互</li><li>提高系统的可维护性</li></ol><h2 id="实现示例"><a href="#实现示例" class="headerlink" title="实现示例"></a>实现示例</h2><h3 id="1-基本实现"><a href="#1-基本实现" class="headerlink" title="1. 基本实现"></a>1. 基本实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 中介者接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Mediator</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">Colleague</span> colleague<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 抽象同事类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Colleague</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">Mediator</span> mediator<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Colleague</span><span class="token punctuation">(</span><span class="token class-name">Mediator</span> mediator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mediator <span class="token operator">=</span> mediator<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 具体中介者</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteMediator</span> <span class="token keyword">implements</span> <span class="token class-name">Mediator</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">ConcreteColleagueA</span> colleagueA<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ConcreteColleagueB</span> colleagueB<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColleagueA</span><span class="token punctuation">(</span><span class="token class-name">ConcreteColleagueA</span> colleague<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>colleagueA <span class="token operator">=</span> colleague<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColleagueB</span><span class="token punctuation">(</span><span class="token class-name">ConcreteColleagueB</span> colleague<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>colleagueB <span class="token operator">=</span> colleague<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">Colleague</span> colleague<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>colleague <span class="token operator">==</span> colleagueA<span class="token punctuation">)</span> <span class="token punctuation">{</span>            colleagueB<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            colleagueA<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 具体同事类A</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteColleagueA</span> <span class="token keyword">extends</span> <span class="token class-name">Colleague</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ConcreteColleagueA</span><span class="token punctuation">(</span><span class="token class-name">Mediator</span> mediator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mediator<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"同事A收到消息："</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 具体同事类B</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteColleagueB</span> <span class="token keyword">extends</span> <span class="token class-name">Colleague</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ConcreteColleagueB</span><span class="token punctuation">(</span><span class="token class-name">Mediator</span> mediator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mediator<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"同事B收到消息："</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-聊天室示例"><a href="#2-聊天室示例" class="headerlink" title="2. 聊天室示例"></a>2. 聊天室示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 聊天室中介者</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ChatMediator</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 聊天室实现</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChatRoom</span> <span class="token keyword">implements</span> <span class="token class-name">ChatMediator</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">User</span> u <span class="token operator">:</span> users<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">!=</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>                u<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 用户抽象类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">ChatMediator</span> mediator<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">ChatMediator</span> mediator<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mediator <span class="token operator">=</span> mediator<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 普通用户</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NormalUser</span> <span class="token keyword">extends</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">NormalUser</span><span class="token punctuation">(</span><span class="token class-name">ChatMediator</span> mediator<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>mediator<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" 发送消息: "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        mediator<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" 收到消息: "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-航空管制示例"><a href="#3-航空管制示例" class="headerlink" title="3. 航空管制示例"></a>3. 航空管制示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 航空管制中介者</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AirTrafficControl</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">registerFlight</span><span class="token punctuation">(</span><span class="token class-name">Flight</span> flight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">requestLanding</span><span class="token punctuation">(</span><span class="token class-name">Flight</span> flight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">requestTakeoff</span><span class="token punctuation">(</span><span class="token class-name">Flight</span> flight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 航空管制塔</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ControlTower</span> <span class="token keyword">implements</span> <span class="token class-name">AirTrafficControl</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Flight</span><span class="token punctuation">&gt;</span></span> flights <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Flight</span><span class="token punctuation">&gt;</span></span> landingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Flight</span><span class="token punctuation">&gt;</span></span> takeoffQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerFlight</span><span class="token punctuation">(</span><span class="token class-name">Flight</span> flight<span class="token punctuation">)</span> <span class="token punctuation">{</span>        flights<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>flight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestLanding</span><span class="token punctuation">(</span><span class="token class-name">Flight</span> flight<span class="token punctuation">)</span> <span class="token punctuation">{</span>        landingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>flight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">processNextOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestTakeoff</span><span class="token punctuation">(</span><span class="token class-name">Flight</span> flight<span class="token punctuation">)</span> <span class="token punctuation">{</span>        takeoffQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>flight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">processNextOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processNextOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>landingQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Flight</span> flight <span class="token operator">=</span> landingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"允许"</span> <span class="token operator">+</span> flight<span class="token punctuation">.</span><span class="token function">getFlightNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"降落"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            flight<span class="token punctuation">.</span><span class="token function">land</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>takeoffQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Flight</span> flight <span class="token operator">=</span> takeoffQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"允许"</span> <span class="token operator">+</span> flight<span class="token punctuation">.</span><span class="token function">getFlightNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"起飞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            flight<span class="token punctuation">.</span><span class="token function">takeoff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 航班类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Flight</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> flightNumber<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">AirTrafficControl</span> controlTower<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Flight</span><span class="token punctuation">(</span><span class="token class-name">String</span> flightNumber<span class="token punctuation">,</span> <span class="token class-name">AirTrafficControl</span> controlTower<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flightNumber <span class="token operator">=</span> flightNumber<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>controlTower <span class="token operator">=</span> controlTower<span class="token punctuation">;</span>        controlTower<span class="token punctuation">.</span><span class="token function">registerFlight</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestLanding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flightNumber <span class="token operator">+</span> <span class="token string">"请求降落"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        controlTower<span class="token punctuation">.</span><span class="token function">requestLanding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestTakeoff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flightNumber <span class="token operator">+</span> <span class="token string">"请求起飞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        controlTower<span class="token punctuation">.</span><span class="token function">requestTakeoff</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">land</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flightNumber <span class="token operator">+</span> <span class="token string">"已降落"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">takeoff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flightNumber <span class="token operator">+</span> <span class="token string">"已起飞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getFlightNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> flightNumber<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-使用示例"><a href="#4-使用示例" class="headerlink" title="4. 使用示例"></a>4. 使用示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 基本示例</span>        <span class="token class-name">ConcreteMediator</span> mediator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteMediator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ConcreteColleagueA</span> colleagueA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteColleagueA</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ConcreteColleagueB</span> colleagueB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteColleagueB</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>                mediator<span class="token punctuation">.</span><span class="token function">setColleagueA</span><span class="token punctuation">(</span>colleagueA<span class="token punctuation">)</span><span class="token punctuation">;</span>        mediator<span class="token punctuation">.</span><span class="token function">setColleagueB</span><span class="token punctuation">(</span>colleagueB<span class="token punctuation">)</span><span class="token punctuation">;</span>                colleagueA<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"你好，B!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        colleagueB<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"你好，A!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 聊天室示例</span>        <span class="token class-name">ChatMediator</span> chatRoom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChatRoom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NormalUser</span><span class="token punctuation">(</span>chatRoom<span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NormalUser</span><span class="token punctuation">(</span>chatRoom<span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NormalUser</span><span class="token punctuation">(</span>chatRoom<span class="token punctuation">,</span> <span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                chatRoom<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>        chatRoom<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>        chatRoom<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user3<span class="token punctuation">)</span><span class="token punctuation">;</span>                user1<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"大家好！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 航空管制示例</span>        <span class="token class-name">AirTrafficControl</span> controlTower <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ControlTower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Flight</span> flight1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Flight</span><span class="token punctuation">(</span><span class="token string">"CA1234"</span><span class="token punctuation">,</span> controlTower<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Flight</span> flight2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Flight</span><span class="token punctuation">(</span><span class="token string">"MU5678"</span><span class="token punctuation">,</span> controlTower<span class="token punctuation">)</span><span class="token punctuation">;</span>                flight1<span class="token punctuation">.</span><span class="token function">requestLanding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        flight2<span class="token punctuation">.</span><span class="token function">requestTakeoff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="中介者模式的优点"><a href="#中介者模式的优点" class="headerlink" title="中介者模式的优点"></a>中介者模式的优点</h2><ol><li>减少了对象之间的耦合，使得对象易于独立地改变和复用</li><li>将对象间的交互封装到中介者中，使得交互逻辑集中化</li><li>简化了对象间的关系，将多对多转化为一对多</li><li>提高了系统的可维护性</li></ol><h2 id="中介者模式的缺点"><a href="#中介者模式的缺点" class="headerlink" title="中介者模式的缺点"></a>中介者模式的缺点</h2><ol><li>中介者可能会变得过于复杂</li><li>中介者承担了较多的责任，可能会导致中介者类变得庞大</li><li>如果设计不当，中介者对象本身就可能产生过度耦合</li></ol><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ol><li>一组对象以定义良好但复杂的方式进行通信</li><li>一些对象之间的通信方式必须定制化</li><li>多个类相互耦合形成了网状结构</li><li>想要集中管理对象间的交互</li></ol><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ol><li>观察者模式：中介者模式通常用观察者模式实现</li><li>外观模式：中介者是对等的对象之间的交互，外观是单向的访问</li><li>命令模式：可以结合使用，中介者作为命令的接收者</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>中介者模式是一种用于降低多个对象之间复杂关系的设计模式。它通过引入一个中介者对象，将系统中对象之间的直接交互转化为中介者对象协调的间接交互。这种模式在处理复杂的对象间通信时特别有用，如聊天室、航空管制等场景。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《Design Patterns: Elements of Reusable Object-Oriented Software》</li><li>《Head First Design Patterns》</li><li>Java API 文档</li><li>Spring Framework 源码</li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解Java中的中介者模式。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解Java中的中介者模式。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解Java中的中介者模式。如果您有任何问题，欢迎在评论区讨论！ "></a>希望这篇文章能帮助您更好地理解Java中的中介者模式。如果您有任何问题，欢迎在评论区讨论！ </h2>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式之观察者模式详解</title>
      <link href="/archives/7f8e605f.html"/>
      <url>/archives/7f8e605f.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是观察者模式？"><a href="#什么是观察者模式？" class="headerlink" title="什么是观察者模式？"></a>什么是观察者模式？</h2><p>观察者模式（Observer Pattern）是一种行为型设计模式，它定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。</p><h2 id="为什么使用观察者模式？"><a href="#为什么使用观察者模式？" class="headerlink" title="为什么使用观察者模式？"></a>为什么使用观察者模式？</h2><ol><li>实现了表示层和数据逻辑层的分离</li><li>支持广播通信</li><li>符合开闭原则</li><li>建立了触发机制</li></ol><h2 id="实现示例"><a href="#实现示例" class="headerlink" title="实现示例"></a>实现示例</h2><h3 id="1-基本实现"><a href="#1-基本实现" class="headerlink" title="1. 基本实现"></a>1. 基本实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 观察者接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 主题接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">registerObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">removeObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 具体主题</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteSubject</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Observer</span><span class="token punctuation">&gt;</span></span> observers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        observers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        observers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Observer</span> observer <span class="token operator">:</span> observers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>        <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 具体观察者</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteObserver</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">ConcreteObserver</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" received message: "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-天气监测站示例"><a href="#2-天气监测站示例" class="headerlink" title="2. 天气监测站示例"></a>2. 天气监测站示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 天气数据</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherData</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Observer</span><span class="token punctuation">&gt;</span></span> observers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> temperature<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> humidity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> pressure<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        observers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        observers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Observer</span> observer <span class="token operator">:</span> observers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>temperature<span class="token punctuation">,</span> humidity<span class="token punctuation">,</span> pressure<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMeasurements</span><span class="token punctuation">(</span><span class="token keyword">float</span> temperature<span class="token punctuation">,</span> <span class="token keyword">float</span> humidity<span class="token punctuation">,</span> <span class="token keyword">float</span> pressure<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">=</span> temperature<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">=</span> humidity<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pressure <span class="token operator">=</span> pressure<span class="token punctuation">;</span>        <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 显示设备接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DisplayElement</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 当前状况显示</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CurrentConditionsDisplay</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span><span class="token punctuation">,</span> <span class="token class-name">DisplayElement</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> temperature<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> humidity<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">float</span> temperature<span class="token punctuation">,</span> <span class="token keyword">float</span> humidity<span class="token punctuation">,</span> <span class="token keyword">float</span> pressure<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">=</span> temperature<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">=</span> humidity<span class="token punctuation">;</span>        <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Current conditions: %.1f°C and %.1f%% humidity%n"</span><span class="token punctuation">,</span>                 temperature<span class="token punctuation">,</span> humidity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 统计信息显示</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StatisticsDisplay</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span><span class="token punctuation">,</span> <span class="token class-name">DisplayElement</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Float</span><span class="token punctuation">&gt;</span></span> temperatures <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">float</span> temperature<span class="token punctuation">,</span> <span class="token keyword">float</span> humidity<span class="token punctuation">,</span> <span class="token keyword">float</span> pressure<span class="token punctuation">)</span> <span class="token punctuation">{</span>        temperatures<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temperature<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">float</span> avg <span class="token operator">=</span> temperatures<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0f</span><span class="token punctuation">,</span> <span class="token class-name">Float</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span> <span class="token operator">/</span> temperatures<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> max <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>temperatures<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> min <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>temperatures<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Avg/Max/Min temperature: %.1f/%.1f/%.1f%n"</span><span class="token punctuation">,</span>                 avg<span class="token punctuation">,</span> max<span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-事件监听示例"><a href="#3-事件监听示例" class="headerlink" title="3. 事件监听示例"></a>3. 事件监听示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 事件对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Event</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> data<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">,</span> <span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> type<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 事件发布者</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EventPublisher</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">EventListener</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> listeners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token class-name">String</span> eventType<span class="token punctuation">,</span> <span class="token class-name">EventListener</span> listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>        listeners<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> k <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token class-name">String</span> eventType<span class="token punctuation">,</span> <span class="token class-name">EventListener</span> listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>listeners<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            listeners<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token class-name">Event</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>listeners<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            listeners<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>listener <span class="token operator">-&gt;</span> listener<span class="token punctuation">.</span><span class="token function">onEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 事件监听器接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EventListener</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token class-name">Event</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 具体监听器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogEventListener</span> <span class="token keyword">implements</span> <span class="token class-name">EventListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token class-name">Event</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Log: "</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" - "</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmailEventListener</span> <span class="token keyword">implements</span> <span class="token class-name">EventListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token class-name">Event</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Sending email about: "</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-使用示例"><a href="#4-使用示例" class="headerlink" title="4. 使用示例"></a>4. 使用示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 基本示例</span>        <span class="token class-name">ConcreteSubject</span> subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ConcreteObserver</span> observer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteObserver</span><span class="token punctuation">(</span><span class="token string">"Observer 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ConcreteObserver</span> observer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteObserver</span><span class="token punctuation">(</span><span class="token string">"Observer 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                subject<span class="token punctuation">.</span><span class="token function">registerObserver</span><span class="token punctuation">(</span>observer1<span class="token punctuation">)</span><span class="token punctuation">;</span>        subject<span class="token punctuation">.</span><span class="token function">registerObserver</span><span class="token punctuation">(</span>observer2<span class="token punctuation">)</span><span class="token punctuation">;</span>        subject<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"Hello Observers!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 天气监测站示例</span>        <span class="token class-name">WeatherData</span> weatherData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeatherData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CurrentConditionsDisplay</span> currentDisplay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CurrentConditionsDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StatisticsDisplay</span> statisticsDisplay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StatisticsDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                weatherData<span class="token punctuation">.</span><span class="token function">registerObserver</span><span class="token punctuation">(</span>currentDisplay<span class="token punctuation">)</span><span class="token punctuation">;</span>        weatherData<span class="token punctuation">.</span><span class="token function">registerObserver</span><span class="token punctuation">(</span>statisticsDisplay<span class="token punctuation">)</span><span class="token punctuation">;</span>                weatherData<span class="token punctuation">.</span><span class="token function">setMeasurements</span><span class="token punctuation">(</span><span class="token number">25.2f</span><span class="token punctuation">,</span> <span class="token number">65.0f</span><span class="token punctuation">,</span> <span class="token number">1013.1f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        weatherData<span class="token punctuation">.</span><span class="token function">setMeasurements</span><span class="token punctuation">(</span><span class="token number">26.5f</span><span class="token punctuation">,</span> <span class="token number">70.0f</span><span class="token punctuation">,</span> <span class="token number">1012.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 事件监听示例</span>        <span class="token class-name">EventPublisher</span> publisher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventPublisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        publisher<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LogEventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        publisher<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">EmailEventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                publisher<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">,</span> <span class="token string">"User logged in"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="观察者模式的优点"><a href="#观察者模式的优点" class="headerlink" title="观察者模式的优点"></a>观察者模式的优点</h2><ol><li>观察者和被观察者之间是松耦合的</li><li>支持广播通信</li><li>符合开闭原则</li><li>可以建立一套触发机制</li></ol><h2 id="观察者模式的缺点"><a href="#观察者模式的缺点" class="headerlink" title="观察者模式的缺点"></a>观察者模式的缺点</h2><ol><li>如果观察者太多，通知所有观察者会花费较多时间</li><li>如果观察者和被观察者之间有循环依赖，可能导致系统崩溃</li><li>观察者接收通知的顺序是不确定的</li></ol><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ol><li>当一个对象的改变需要同时改变其他对象时</li><li>当一个对象必须通知其他对象，而它又不知道这些对象是谁时</li><li>需要建立一个一对多的依赖关系时</li><li>当系统需要分离观察者和被观察者时</li></ol><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ol><li>中介者模式：观察者模式用于对象间的一对多通信，中介者模式用于多对多通信</li><li>单例模式：主题对象通常是单例的</li><li>策略模式：可以使用策略模式来改变观察者的更新行为</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>观察者模式是一种使用非常广泛的设计模式，它在事件处理系统、用户界面设计、消息推送等场景中都有重要应用。Java的事件处理机制、Swing的事件模型等都使用了观察者模式。在实际开发中，当需要实现对象间的一对多依赖关系时，观察者模式是一个很好的选择。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《Design Patterns: Elements of Reusable Object-Oriented Software》</li><li>《Head First Design Patterns》</li><li>Java API 文档</li><li>Spring Framework 事件机制</li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解Java中的观察者模式。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解Java中的观察者模式。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解Java中的观察者模式。如果您有任何问题，欢迎在评论区讨论！ "></a>希望这篇文章能帮助您更好地理解Java中的观察者模式。如果您有任何问题，欢迎在评论区讨论！ </h2>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式之迭代器模式详解</title>
      <link href="/archives/6f7e505f.html"/>
      <url>/archives/6f7e505f.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是迭代器模式？"><a href="#什么是迭代器模式？" class="headerlink" title="什么是迭代器模式？"></a>什么是迭代器模式？</h2><p>迭代器模式（Iterator Pattern）是一种行为型设计模式，它提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。迭代器模式是Java集合框架的核心设计模式之一。</p><h2 id="为什么使用迭代器模式？"><a href="#为什么使用迭代器模式？" class="headerlink" title="为什么使用迭代器模式？"></a>为什么使用迭代器模式？</h2><ol><li>访问一个聚合对象的内容而无需暴露它的内部表示</li><li>支持对聚合对象的多种遍历方式</li><li>为遍历不同的聚合结构提供一个统一的接口</li><li>简化聚合类的设计</li></ol><h2 id="实现示例"><a href="#实现示例" class="headerlink" title="实现示例"></a>实现示例</h2><h3 id="1-基本实现"><a href="#1-基本实现" class="headerlink" title="1. 基本实现"></a>1. 基本实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 迭代器接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">T</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 容器接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Container</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 具体容器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NameRepository</span> <span class="token keyword">implements</span> <span class="token class-name">Container</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Robert"</span><span class="token punctuation">,</span> <span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token string">"Julie"</span><span class="token punctuation">,</span> <span class="token string">"Lora"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NameIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">NameIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span>                <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> index <span class="token operator">&lt;</span> names<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> names<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-自定义集合实现"><a href="#2-自定义集合实现" class="headerlink" title="2. 自定义集合实现"></a>2. 自定义集合实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 自定义集合</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addItem</span><span class="token punctuation">(</span><span class="token class-name">T</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">reverseIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReverseIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">CustomIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> currentIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> currentIndex <span class="token operator">&lt;</span> items<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> items<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>currentIndex<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            items<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token operator">--</span>currentIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ReverseIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> currentIndex <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> currentIndex <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> items<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>currentIndex<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            items<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>currentIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-树形结构遍历示例"><a href="#3-树形结构遍历示例" class="headerlink" title="3. 树形结构遍历示例"></a>3. 树形结构遍历示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 树节点</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addChild</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>        children<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> children<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 树的深度优先遍历迭代器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DepthFirstIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">DepthFirstIterator</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> children <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> children<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>children<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token keyword">return</span> node<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 树的广度优先遍历迭代器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BreadthFirstIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">BreadthFirstIterator</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> node<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-使用示例"><a href="#4-使用示例" class="headerlink" title="4. 使用示例"></a>4. 使用示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 基本示例</span>        <span class="token class-name">NameRepository</span> namesRepository <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NameRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> namesRepository<span class="token punctuation">.</span><span class="token function">getIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Name: "</span> <span class="token operator">+</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment">// 自定义集合示例</span>        <span class="token class-name">CustomCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        numbers<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        numbers<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        numbers<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Forward iteration:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> forwardIterator <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>forwardIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>forwardIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Reverse iteration:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> reverseIterator <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">reverseIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>reverseIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reverseIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment">// 树形结构遍历示例</span>        <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"E"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                root<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Depth-first traversal:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> dfsIterator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DepthFirstIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>dfsIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dfsIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Breadth-first traversal:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> bfsIterator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BreadthFirstIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>bfsIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bfsIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="迭代器模式的优点"><a href="#迭代器模式的优点" class="headerlink" title="迭代器模式的优点"></a>迭代器模式的优点</h2><ol><li>支持以不同的方式遍历一个聚合对象</li><li>简化了聚合类的设计</li><li>在同一个聚合上可以有多个遍历</li><li>迭代器模式使得增加新的聚合类和迭代器类都很方便</li></ol><h2 id="迭代器模式的缺点"><a href="#迭代器模式的缺点" class="headerlink" title="迭代器模式的缺点"></a>迭代器模式的缺点</h2><ol><li>对于比较简单的遍历，使用迭代器模式可能会显得过于复杂</li><li>迭代器模式在一定程度上增加了系统的复杂性</li></ol><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ol><li>访问一个聚合对象的内容而无需暴露它的内部表示</li><li>需要为聚合对象提供多种遍历方式</li><li>为遍历不同的聚合结构提供一个统一的接口</li></ol><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ol><li>组合模式：经常和迭代器模式一起使用来遍历复杂的树形结构</li><li>工厂方法模式：可以使用工厂方法模式来创建迭代器</li><li>备忘录模式：可以使用迭代器来实现备忘录模式</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>迭代器模式是一种使用频率非常高的设计模式，它提供了一种统一的方式来访问集合对象中的元素。Java集合框架大量使用了迭代器模式，使得我们可以用统一的方式来遍历不同类型的集合。在实际开发中，当需要为自定义的集合类提供遍历功能时，迭代器模式是一个很好的选择。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《Design Patterns: Elements of Reusable Object-Oriented Software》</li><li>《Head First Design Patterns》</li><li>Java Collections Framework 文档</li><li>Java核心技术</li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解Java中的迭代器模式。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解Java中的迭代器模式。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解Java中的迭代器模式。如果您有任何问题，欢迎在评论区讨论！ "></a>希望这篇文章能帮助您更好地理解Java中的迭代器模式。如果您有任何问题，欢迎在评论区讨论！ </h2>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式之命令模式详解</title>
      <link href="/archives/5f6e405f.html"/>
      <url>/archives/5f6e405f.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是命令模式？"><a href="#什么是命令模式？" class="headerlink" title="什么是命令模式？"></a>什么是命令模式？</h2><p>命令模式（Command Pattern）是一种行为型设计模式，它将请求封装成对象，从而可以用不同的请求对客户进行参数化，实现请求的排队、记录日志、撤销等功能。</p><h2 id="为什么使用命令模式？"><a href="#为什么使用命令模式？" class="headerlink" title="为什么使用命令模式？"></a>为什么使用命令模式？</h2><ol><li>将请求发送者和接收者解耦</li><li>可以将命令存储和传递</li><li>支持撤销/重做操作</li><li>可以组合命令实现宏命令</li></ol><h2 id="实现示例"><a href="#实现示例" class="headerlink" title="实现示例"></a>实现示例</h2><h3 id="1-基本实现"><a href="#1-基本实现" class="headerlink" title="1. 基本实现"></a>1. 基本实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 命令接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 接收者</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Receiver</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Receiver执行请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undoAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Receiver撤销请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 具体命令</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Receiver</span> receiver<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">ConcreteCommand</span><span class="token punctuation">(</span><span class="token class-name">Receiver</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>receiver <span class="token operator">=</span> receiver<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        receiver<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        receiver<span class="token punctuation">.</span><span class="token function">undoAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 调用者</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Invoker</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Command</span> command<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCommand</span><span class="token punctuation">(</span><span class="token class-name">Command</span> command<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>command <span class="token operator">=</span> command<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undoCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        command<span class="token punctuation">.</span><span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-实际应用示例：遥控器控制家电"><a href="#2-实际应用示例：遥控器控制家电" class="headerlink" title="2. 实际应用示例：遥控器控制家电"></a>2. 实际应用示例：遥控器控制家电</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 电器接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ElectricAppliance</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 具体电器：电灯</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Light</span> <span class="token keyword">implements</span> <span class="token class-name">ElectricAppliance</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> location<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Light</span><span class="token punctuation">(</span><span class="token class-name">String</span> location<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>location <span class="token operator">=</span> location<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>location <span class="token operator">+</span> <span class="token string">"的灯打开了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>location <span class="token operator">+</span> <span class="token string">"的灯关闭了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 具体电器：电视</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Television</span> <span class="token keyword">implements</span> <span class="token class-name">ElectricAppliance</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电视打开了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电视关闭了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 开启命令</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TurnOnCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">ElectricAppliance</span> appliance<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">TurnOnCommand</span><span class="token punctuation">(</span><span class="token class-name">ElectricAppliance</span> appliance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>appliance <span class="token operator">=</span> appliance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        appliance<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        appliance<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 关闭命令</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TurnOffCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">ElectricAppliance</span> appliance<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">TurnOffCommand</span><span class="token punctuation">(</span><span class="token class-name">ElectricAppliance</span> appliance<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>appliance <span class="token operator">=</span> appliance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        appliance<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        appliance<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 遥控器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemoteControl</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Command</span><span class="token punctuation">[</span><span class="token punctuation">]</span> onCommands<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Command</span><span class="token punctuation">[</span><span class="token punctuation">]</span> offCommands<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Command</span> undoCommand<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">RemoteControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        onCommands <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        offCommands <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token class-name">Command</span> noCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            onCommands<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> noCommand<span class="token punctuation">;</span>            offCommands<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> noCommand<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        undoCommand <span class="token operator">=</span> noCommand<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCommand</span><span class="token punctuation">(</span><span class="token keyword">int</span> slot<span class="token punctuation">,</span> <span class="token class-name">Command</span> onCommand<span class="token punctuation">,</span> <span class="token class-name">Command</span> offCommand<span class="token punctuation">)</span> <span class="token punctuation">{</span>        onCommands<span class="token punctuation">[</span>slot<span class="token punctuation">]</span> <span class="token operator">=</span> onCommand<span class="token punctuation">;</span>        offCommands<span class="token punctuation">[</span>slot<span class="token punctuation">]</span> <span class="token operator">=</span> offCommand<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onButtonWasPushed</span><span class="token punctuation">(</span><span class="token keyword">int</span> slot<span class="token punctuation">)</span> <span class="token punctuation">{</span>        onCommands<span class="token punctuation">[</span>slot<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        undoCommand <span class="token operator">=</span> onCommands<span class="token punctuation">[</span>slot<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">offButtonWasPushed</span><span class="token punctuation">(</span><span class="token keyword">int</span> slot<span class="token punctuation">)</span> <span class="token punctuation">{</span>        offCommands<span class="token punctuation">[</span>slot<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        undoCommand <span class="token operator">=</span> offCommands<span class="token punctuation">[</span>slot<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undoButtonWasPushed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        undoCommand<span class="token punctuation">.</span><span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-文本编辑器示例"><a href="#3-文本编辑器示例" class="headerlink" title="3. 文本编辑器示例"></a>3. 文本编辑器示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 文本编辑器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TextEditor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">StringBuilder</span> content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>        content<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        content<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> length<span class="token punctuation">,</span> content<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> content<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 插入命令</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InsertCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">TextEditor</span> editor<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> text<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">InsertCommand</span><span class="token punctuation">(</span><span class="token class-name">TextEditor</span> editor<span class="token punctuation">,</span> <span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>editor <span class="token operator">=</span> editor<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>text <span class="token operator">=</span> text<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        editor<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        editor<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 命令历史记录</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommandHistory</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Command</span><span class="token punctuation">&gt;</span></span> history <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Command</span> command<span class="token punctuation">)</span> <span class="token punctuation">{</span>        history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">Command</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> history<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> history<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-使用示例"><a href="#4-使用示例" class="headerlink" title="4. 使用示例"></a>4. 使用示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 遥控器示例</span>        <span class="token class-name">RemoteControl</span> remote <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Light</span> livingRoomLight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Light</span><span class="token punctuation">(</span><span class="token string">"客厅"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Light</span> kitchenLight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Light</span><span class="token punctuation">(</span><span class="token string">"厨房"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Television</span> tv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Television</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Command</span> livingRoomLightOn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TurnOnCommand</span><span class="token punctuation">(</span>livingRoomLight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Command</span> livingRoomLightOff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TurnOffCommand</span><span class="token punctuation">(</span>livingRoomLight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Command</span> kitchenLightOn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TurnOnCommand</span><span class="token punctuation">(</span>kitchenLight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Command</span> kitchenLightOff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TurnOffCommand</span><span class="token punctuation">(</span>kitchenLight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Command</span> tvOn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TurnOnCommand</span><span class="token punctuation">(</span>tv<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Command</span> tvOff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TurnOffCommand</span><span class="token punctuation">(</span>tv<span class="token punctuation">)</span><span class="token punctuation">;</span>                remote<span class="token punctuation">.</span><span class="token function">setCommand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> livingRoomLightOn<span class="token punctuation">,</span> livingRoomLightOff<span class="token punctuation">)</span><span class="token punctuation">;</span>        remote<span class="token punctuation">.</span><span class="token function">setCommand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> kitchenLightOn<span class="token punctuation">,</span> kitchenLightOff<span class="token punctuation">)</span><span class="token punctuation">;</span>        remote<span class="token punctuation">.</span><span class="token function">setCommand</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> tvOn<span class="token punctuation">,</span> tvOff<span class="token punctuation">)</span><span class="token punctuation">;</span>                remote<span class="token punctuation">.</span><span class="token function">onButtonWasPushed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 打开客厅灯</span>        remote<span class="token punctuation">.</span><span class="token function">offButtonWasPushed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 关闭客厅灯</span>        remote<span class="token punctuation">.</span><span class="token function">undoButtonWasPushed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 撤销上一个操作</span>                <span class="token comment">// 文本编辑器示例</span>        <span class="token class-name">TextEditor</span> editor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CommandHistory</span> history <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommandHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Command</span> insertHello <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InsertCommand</span><span class="token punctuation">(</span>editor<span class="token punctuation">,</span> <span class="token string">"Hello, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Command</span> insertWorld <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InsertCommand</span><span class="token punctuation">(</span>editor<span class="token punctuation">,</span> <span class="token string">"World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                insertHello<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>insertHello<span class="token punctuation">)</span><span class="token punctuation">;</span>                insertWorld<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>insertWorld<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>editor<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: Hello, World!</span>                <span class="token class-name">Command</span> lastCommand <span class="token operator">=</span> history<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lastCommand<span class="token punctuation">.</span><span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>editor<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: Hello, </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="命令模式的优点"><a href="#命令模式的优点" class="headerlink" title="命令模式的优点"></a>命令模式的优点</h2><ol><li>降低系统的耦合度</li><li>新的命令可以很容易地加入到系统中</li><li>可以比较容易地设计一个命令队列和宏命令</li><li>可以方便地实现对请求的撤销和重做</li></ol><h2 id="命令模式的缺点"><a href="#命令模式的缺点" class="headerlink" title="命令模式的缺点"></a>命令模式的缺点</h2><ol><li>可能会导致某些系统有过多的具体命令类</li><li>增加了系统的复杂度</li></ol><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ol><li>需要将请求发送者和接收者解耦</li><li>需要将请求排队或者记录请求日志</li><li>需要支持撤销操作</li><li>需要支持事务操作</li></ol><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ol><li>责任链模式：两者都可以处理请求，但命令模式更注重请求本身</li><li>备忘录模式：可以结合使用来实现撤销操作</li><li>策略模式：命令模式关注请求的封装，策略模式关注算法的封装</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>命令模式是一种非常实用的设计模式，它通过将请求封装成对象，实现了请求发送者和接收者的解耦。这种模式在需要支持撤销、重做、日志记录等功能时特别有用。在实际开发中，当需要将请求参数化并支持这些高级功能时，命令模式是一个很好的选择。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《Design Patterns: Elements of Reusable Object-Oriented Software》</li><li>《Head First Design Patterns》</li><li>Spring Framework 源码</li><li>Java核心技术</li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解Java中的命令模式。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解Java中的命令模式。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解Java中的命令模式。如果您有任何问题，欢迎在评论区讨论！ "></a>希望这篇文章能帮助您更好地理解Java中的命令模式。如果您有任何问题，欢迎在评论区讨论！ </h2>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式之模板方法模式详解</title>
      <link href="/archives/4f5e305f.html"/>
      <url>/archives/4f5e305f.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是模板方法模式？"><a href="#什么是模板方法模式？" class="headerlink" title="什么是模板方法模式？"></a>什么是模板方法模式？</h2><p>模板方法模式（Template Method Pattern）是一种行为型设计模式，它定义了一个算法的骨架，将一些步骤延迟到子类中实现。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。</p><h2 id="为什么使用模板方法模式？"><a href="#为什么使用模板方法模式？" class="headerlink" title="为什么使用模板方法模式？"></a>为什么使用模板方法模式？</h2><ol><li>复用代码，避免重复</li><li>控制算法的主要流程</li><li>允许子类定制算法的特定步骤</li><li>维护一个统一的算法框架</li></ol><h2 id="实现示例"><a href="#实现示例" class="headerlink" title="实现示例"></a>实现示例</h2><h3 id="1-基本实现"><a href="#1-基本实现" class="headerlink" title="1. 基本实现"></a>1. 基本实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 抽象类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractTemplate</span> <span class="token punctuation">{</span>    <span class="token comment">// 模板方法</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">templateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">step1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">step2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">step3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">hook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 具体方法</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">step1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AbstractTemplate.step1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 抽象方法</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">step2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 具体方法</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">step3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AbstractTemplate.step3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 钩子方法</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">hook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 默认空实现</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 具体实现类A</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteTemplateA</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTemplate</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">step2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ConcreteTemplateA.step2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">hook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ConcreteTemplateA.hook"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 具体实现类B</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteTemplateB</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTemplate</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">step2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ConcreteTemplateB.step2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-实际应用示例：数据导出"><a href="#2-实际应用示例：数据导出" class="headerlink" title="2. 实际应用示例：数据导出"></a>2. 实际应用示例：数据导出</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 数据导出抽象类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">DataExporter</span> <span class="token punctuation">{</span>    <span class="token comment">// 模板方法</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">export</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">connectToDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">extractData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">transformData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exportData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">closeConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 连接数据源</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">connectToDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 提取数据</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">extractData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 转换数据</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">transformData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行默认的数据转换"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 导出数据</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">exportData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 关闭连接</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">closeConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭数据源连接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Excel导出器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExcelExporter</span> <span class="token keyword">extends</span> <span class="token class-name">DataExporter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">connectToDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接到MySQL数据库"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">extractData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行SQL查询提取数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">exportData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将数据导出到Excel文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// PDF导出器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PdfExporter</span> <span class="token keyword">extends</span> <span class="token class-name">DataExporter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">connectToDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接到Oracle数据库"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">extractData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行存储过程提取数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">transformData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行PDF特定的数据转换"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">exportData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将数据导出到PDF文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-饮料制作示例"><a href="#3-饮料制作示例" class="headerlink" title="3. 饮料制作示例"></a>3. 饮料制作示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 饮料抽象类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Beverage</span> <span class="token punctuation">{</span>    <span class="token comment">// 模板方法</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">prepareBeverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">boilWater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">customerWantsCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">boilWater</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将水煮沸"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">pourInCup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"倒入杯中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 钩子方法</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">customerWantsCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 咖啡类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Coffee</span> <span class="token keyword">extends</span> <span class="token class-name">Beverage</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用沸水冲泡咖啡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加入糖和牛奶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 茶类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tea</span> <span class="token keyword">extends</span> <span class="token class-name">Beverage</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> wantsLemon<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Tea</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> wantsLemon<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>wantsLemon <span class="token operator">=</span> wantsLemon<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">brew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用沸水浸泡茶叶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加入柠檬"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">customerWantsCondiments</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> wantsLemon<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-使用示例"><a href="#4-使用示例" class="headerlink" title="4. 使用示例"></a>4. 使用示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 基本示例</span>        <span class="token class-name">AbstractTemplate</span> templateA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteTemplateA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateA<span class="token punctuation">.</span><span class="token function">templateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">AbstractTemplate</span> templateB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteTemplateB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateB<span class="token punctuation">.</span><span class="token function">templateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 数据导出示例</span>        <span class="token class-name">DataExporter</span> excelExporter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExcelExporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        excelExporter<span class="token punctuation">.</span><span class="token function">export</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">DataExporter</span> pdfExporter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PdfExporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pdfExporter<span class="token punctuation">.</span><span class="token function">export</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 饮料制作示例</span>        <span class="token class-name">Beverage</span> coffee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Coffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        coffee<span class="token punctuation">.</span><span class="token function">prepareBeverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Beverage</span> teaWithLemon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tea</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        teaWithLemon<span class="token punctuation">.</span><span class="token function">prepareBeverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Beverage</span> teaWithoutLemon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tea</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        teaWithoutLemon<span class="token punctuation">.</span><span class="token function">prepareBeverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模板方法模式的优点"><a href="#模板方法模式的优点" class="headerlink" title="模板方法模式的优点"></a>模板方法模式的优点</h2><ol><li>提高代码复用性</li><li>提供了一个框架，便于维护</li><li>封装不变部分，扩展可变部分</li><li>提供了钩子方法，增加了灵活性</li></ol><h2 id="模板方法模式的缺点"><a href="#模板方法模式的缺点" class="headerlink" title="模板方法模式的缺点"></a>模板方法模式的缺点</h2><ol><li>每个不同的实现都需要一个子类，导致类的数量增加</li><li>限制了算法的种类和顺序</li><li>子类可能会过度依赖父类的实现</li></ol><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ol><li>多个类有相似的算法骨架</li><li>需要控制子类扩展的时候</li><li>一次性实现算法的不变部分</li><li>需要统一管理算法的整体流程</li></ol><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ol><li>工厂方法模式：工厂方法是模板方法的一种特殊形式</li><li>策略模式：策略模式使用组合改变整个算法，模板方法使用继承改变算法的特定步骤</li><li>命令模式：可以结合使用，将命令的执行过程模板化</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>模板方法模式是一种非常实用的设计模式，它通过定义算法骨架并允许子类重写特定步骤来实现代码复用。这种模式在框架设计中被广泛使用，例如Spring框架中的各种Template类。在实际开发中，当发现多个类有相似的算法结构时，可以考虑使用模板方法模式。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《Design Patterns: Elements of Reusable Object-Oriented Software》</li><li>《Head First Design Patterns》</li><li>Spring Framework 源码</li><li>Java核心技术</li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解Java中的模板方法模式。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解Java中的模板方法模式。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解Java中的模板方法模式。如果您有任何问题，欢迎在评论区讨论！ "></a>希望这篇文章能帮助您更好地理解Java中的模板方法模式。如果您有任何问题，欢迎在评论区讨论！ </h2>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式之代理模式详解</title>
      <link href="/archives/3f4e205f.html"/>
      <url>/archives/3f4e205f.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是代理模式？"><a href="#什么是代理模式？" class="headerlink" title="什么是代理模式？"></a>什么是代理模式？</h2><p>代理模式（Proxy Pattern）是一种结构型设计模式，它允许你提供一个代理来控制对其他对象的访问。代理对象可以在客户端和目标对象之间起到中介的作用，并且可以添加额外的功能。</p><h2 id="为什么使用代理模式？"><a href="#为什么使用代理模式？" class="headerlink" title="为什么使用代理模式？"></a>为什么使用代理模式？</h2><ol><li>控制对对象的访问</li><li>在访问对象时添加额外的功能</li><li>延迟加载</li><li>权限控制</li></ol><h2 id="代理模式的类型"><a href="#代理模式的类型" class="headerlink" title="代理模式的类型"></a>代理模式的类型</h2><ol><li>静态代理</li><li>动态代理（JDK动态代理）</li><li>CGLIB代理</li></ol><h2 id="实现示例"><a href="#实现示例" class="headerlink" title="实现示例"></a>实现示例</h2><h3 id="1-静态代理"><a href="#1-静态代理" class="headerlink" title="1. 静态代理"></a>1. 静态代理</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 共同的接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 真实主题</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RealSubject</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"RealSubject处理请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 代理类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">RealSubject</span> realSubject<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>realSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代理开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        realSubject<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代理结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-JDK动态代理"><a href="#2-JDK动态代理" class="headerlink" title="2. JDK动态代理"></a>2. JDK动态代理</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">,</span> <span class="token class-name">String</span> userName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 实现类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">,</span> <span class="token class-name">String</span> userName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"添加用户: "</span> <span class="token operator">+</span> userName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除用户: "</span> <span class="token operator">+</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 动态代理处理器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">LogHandler</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始执行方法: "</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法执行结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">createProxy</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>            target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">LogHandler</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-CGLIB代理"><a href="#3-CGLIB代理" class="headerlink" title="3. CGLIB代理"></a>3. CGLIB代理</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 目标类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"保存用户: "</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除用户: "</span> <span class="token operator">+</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// CGLIB代理</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CglibProxy</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">CglibProxy</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> proxy<span class="token punctuation">)</span>             <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始执行方法: "</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> result <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法执行结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-实际应用示例：远程代理"><a href="#4-实际应用示例：远程代理" class="headerlink" title="4. 实际应用示例：远程代理"></a>4. 实际应用示例：远程代理</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 远程服务接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RemoteService</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 远程服务实现</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemoteServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">RemoteService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 模拟远程调用</span>        <span class="token keyword">return</span> <span class="token string">"Data for key: "</span> <span class="token operator">+</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 远程代理</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemoteProxy</span> <span class="token keyword">implements</span> <span class="token class-name">RemoteService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">RemoteService</span> remoteService<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">RemoteProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 模拟RPC获取远程服务实例</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>remoteService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"准备远程调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> result <span class="token operator">=</span> remoteService<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"远程调用成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"远程调用失败: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-使用示例"><a href="#5-使用示例" class="headerlink" title="5. 使用示例"></a>5. 使用示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 静态代理</span>        <span class="token class-name">Subject</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// JDK动态代理</span>        <span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserService</span> proxyService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span> <span class="token class-name">LogHandler</span><span class="token punctuation">.</span><span class="token function">createProxy</span><span class="token punctuation">(</span>userService<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyService<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// CGLIB代理</span>        <span class="token class-name">UserDao</span> userDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UserDao</span> proxyDao <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserDao</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">CglibProxy</span><span class="token punctuation">(</span>userDao<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 远程代理</span>        <span class="token class-name">RemoteService</span> remoteProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> data <span class="token operator">=</span> remoteProxy<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代理模式的优点"><a href="#代理模式的优点" class="headerlink" title="代理模式的优点"></a>代理模式的优点</h2><ol><li>职责清晰</li><li>高扩展性</li><li>智能化</li><li>保护目标对象</li></ol><h2 id="代理模式的缺点"><a href="#代理模式的缺点" class="headerlink" title="代理模式的缺点"></a>代理模式的缺点</h2><ol><li>在客户端和目标对象之间增加代理对象，可能会降低系统性能</li><li>实现代理模式需要额外的工作</li><li>有些代理模式的实现非常复杂</li></ol><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ol><li>远程代理：为远程对象提供代理</li><li>虚拟代理：延迟加载</li><li>保护代理：控制对对象的访问</li><li>智能引用：在访问对象时添加额外的操作</li></ol><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ol><li>装饰器模式：装饰器为对象添加功能，代理控制对对象的访问</li><li>适配器模式：适配器提供不同接口，代理提供相同接口</li><li>外观模式：外观模式简化接口，代理模式控制访问</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>代理模式是一种非常实用的设计模式，它可以在不修改原有代码的情况下，通过代理对象来控制对目标对象的访问。Java中提供了多种代理实现方式，包括静态代理、JDK动态代理和CGLIB代理，可以根据具体需求选择合适的实现方式。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《Design Patterns: Elements of Reusable Object-Oriented Software》</li><li>《Head First Design Patterns》</li><li>Spring AOP 文档</li><li>Java动态代理机制分析</li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解Java中的代理模式。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解Java中的代理模式。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解Java中的代理模式。如果您有任何问题，欢迎在评论区讨论！ "></a>希望这篇文章能帮助您更好地理解Java中的代理模式。如果您有任何问题，欢迎在评论区讨论！ </h2>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式之享元模式详解</title>
      <link href="/archives/2f3e105f.html"/>
      <url>/archives/2f3e105f.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是享元模式？"><a href="#什么是享元模式？" class="headerlink" title="什么是享元模式？"></a>什么是享元模式？</h2><p>享元模式（Flyweight Pattern）是一种结构型设计模式，它通过共享来有效地支持大量细粒度对象的复用。享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。</p><h2 id="为什么使用享元模式？"><a href="#为什么使用享元模式？" class="headerlink" title="为什么使用享元模式？"></a>为什么使用享元模式？</h2><ol><li>减少对象创建，节省内存空间</li><li>提高系统性能</li><li>实现对象的复用</li><li>减少内存中对象的数量</li></ol><h2 id="实现示例"><a href="#实现示例" class="headerlink" title="实现示例"></a>实现示例</h2><h3 id="1-基本实现"><a href="#1-基本实现" class="headerlink" title="1. 基本实现"></a>1. 基本实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 享元接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Flyweight</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token class-name">String</span> extrinsicState<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 具体享元类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteFlyweight</span> <span class="token keyword">implements</span> <span class="token class-name">Flyweight</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> intrinsicState<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">ConcreteFlyweight</span><span class="token punctuation">(</span><span class="token class-name">String</span> intrinsicState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>intrinsicState <span class="token operator">=</span> intrinsicState<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token class-name">String</span> extrinsicState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"内部状态: "</span> <span class="token operator">+</span> intrinsicState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"外部状态: "</span> <span class="token operator">+</span> extrinsicState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 享元工厂</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlyweightFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Flyweight</span><span class="token punctuation">&gt;</span></span> flyweights <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Flyweight</span> <span class="token function">getFlyweight</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flyweights<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flyweights<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteFlyweight</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> flyweights<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getFlyweightCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> flyweights<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-实际应用示例：字符编辑器"><a href="#2-实际应用示例：字符编辑器" class="headerlink" title="2. 实际应用示例：字符编辑器"></a>2. 实际应用示例：字符编辑器</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 字符享元类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CharacterFlyweight</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">char</span> character<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> font<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">CharacterFlyweight</span><span class="token punctuation">(</span><span class="token keyword">char</span> character<span class="token punctuation">,</span> <span class="token class-name">String</span> font<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>character <span class="token operator">=</span> character<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>font <span class="token operator">=</span> font<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token class-name">String</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"显示字符 %c (字体: %s, 大小: %d) 在位置(%d, %d)，颜色: %s%n"</span><span class="token punctuation">,</span>                character<span class="token punctuation">,</span> font<span class="token punctuation">,</span> size<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 字符工厂</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CharacterFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">CharacterFlyweight</span><span class="token punctuation">&gt;</span></span> characters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">CharacterFlyweight</span> <span class="token function">getCharacter</span><span class="token punctuation">(</span><span class="token keyword">char</span> character<span class="token punctuation">,</span> <span class="token class-name">String</span> font<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> key <span class="token operator">=</span> character <span class="token operator">+</span> font <span class="token operator">+</span> size<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>characters<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            characters<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CharacterFlyweight</span><span class="token punctuation">(</span>character<span class="token punctuation">,</span> font<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> characters<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 文本编辑器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TextEditor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">CharacterFactory</span> factory<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CharacterFlyweight</span><span class="token punctuation">&gt;</span></span> characters<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">&gt;</span></span> positions<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> colors<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">TextEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CharacterFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        characters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        positions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCharacter</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token class-name">String</span> font<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token class-name">String</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CharacterFlyweight</span> character <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getCharacter</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> font<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        characters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>character<span class="token punctuation">)</span><span class="token punctuation">;</span>        positions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        colors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> characters<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Point</span> position <span class="token operator">=</span> positions<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            characters<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>position<span class="token punctuation">.</span>x<span class="token punctuation">,</span> position<span class="token punctuation">.</span>y<span class="token punctuation">,</span> colors<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-棋盘游戏示例"><a href="#3-棋盘游戏示例" class="headerlink" title="3. 棋盘游戏示例"></a>3. 棋盘游戏示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 棋子享元类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChessPieceFlyweight</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span>    <span class="token comment">// 类型（兵、车、马等）</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> color<span class="token punctuation">;</span>   <span class="token comment">// 颜色（黑、白）</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> image<span class="token punctuation">;</span>   <span class="token comment">// 图片资源</span>        <span class="token keyword">public</span> <span class="token class-name">ChessPieceFlyweight</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">,</span> <span class="token class-name">String</span> color<span class="token punctuation">,</span> <span class="token class-name">String</span> image<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>image <span class="token operator">=</span> image<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s色%s显示在位置(%d, %d)，使用图片资源：%s%n"</span><span class="token punctuation">,</span>                color<span class="token punctuation">,</span> type<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 棋子工厂</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChessPieceFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ChessPieceFlyweight</span><span class="token punctuation">&gt;</span></span> pieces <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ChessPieceFlyweight</span> <span class="token function">getPiece</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">,</span> <span class="token class-name">String</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> key <span class="token operator">=</span> type <span class="token operator">+</span> color<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pieces<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> image <span class="token operator">=</span> <span class="token string">"resources/"</span> <span class="token operator">+</span> color <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> type <span class="token operator">+</span> <span class="token string">".png"</span><span class="token punctuation">;</span>            pieces<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ChessPieceFlyweight</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> color<span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pieces<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 棋盘</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChessBoard</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">ChessPieceFlyweight</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChessPieceFlyweight</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> positions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">placePiece</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">,</span> <span class="token class-name">String</span> color<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ChessPieceFlyweight</span> piece <span class="token operator">=</span> <span class="token class-name">ChessPieceFactory</span><span class="token punctuation">.</span><span class="token function">getPiece</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span>        board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> piece<span class="token punctuation">;</span>        positions<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>positions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-使用示例"><a href="#4-使用示例" class="headerlink" title="4. 使用示例"></a>4. 使用示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 文本编辑器示例</span>        <span class="token class-name">TextEditor</span> editor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        editor<span class="token punctuation">.</span><span class="token function">addCharacter</span><span class="token punctuation">(</span><span class="token char">'H'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Arial"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        editor<span class="token punctuation">.</span><span class="token function">addCharacter</span><span class="token punctuation">(</span><span class="token char">'e'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Arial"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        editor<span class="token punctuation">.</span><span class="token function">addCharacter</span><span class="token punctuation">(</span><span class="token char">'l'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Arial"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        editor<span class="token punctuation">.</span><span class="token function">addCharacter</span><span class="token punctuation">(</span><span class="token char">'l'</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Arial"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        editor<span class="token punctuation">.</span><span class="token function">addCharacter</span><span class="token punctuation">(</span><span class="token char">'o'</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Arial"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        editor<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 棋盘游戏示例</span>        <span class="token class-name">ChessBoard</span> board <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChessBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        board<span class="token punctuation">.</span><span class="token function">placePiece</span><span class="token punctuation">(</span><span class="token string">"Pawn"</span><span class="token punctuation">,</span> <span class="token string">"White"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        board<span class="token punctuation">.</span><span class="token function">placePiece</span><span class="token punctuation">(</span><span class="token string">"Pawn"</span><span class="token punctuation">,</span> <span class="token string">"White"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        board<span class="token punctuation">.</span><span class="token function">placePiece</span><span class="token punctuation">(</span><span class="token string">"Knight"</span><span class="token punctuation">,</span> <span class="token string">"Black"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        board<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="享元模式的优点"><a href="#享元模式的优点" class="headerlink" title="享元模式的优点"></a>享元模式的优点</h2><ol><li>大大减少对象的创建，降低系统的内存，使效率提高</li><li>减少内存之外的其他资源占用</li><li>实现了对象的复用</li><li>系统更加简洁</li></ol><h2 id="享元模式的缺点"><a href="#享元模式的缺点" class="headerlink" title="享元模式的缺点"></a>享元模式的缺点</h2><ol><li>使得系统变得复杂</li><li>需要分离出外部状态和内部状态</li><li>读取外部状态会使运行时间稍微变长</li></ol><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ol><li>系统中有大量对象，这些对象消耗大量内存</li><li>这些对象的状态大部分可以外部化</li><li>这些对象可以按照内部状态分成很多组</li><li>系统不依赖于这些对象的身份</li></ol><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ol><li>组合模式：可以与享元模式一起使用</li><li>单例模式：享元工厂通常是单例的</li><li>状态模式：状态模式的对象可以共享</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>享元模式是一种用于优化系统性能的设计模式，它通过共享对象来减少内存使用。在处理大量相似对象时，享元模式是一个很好的选择。但是，使用享元模式需要仔细考虑对象状态的划分，以及是否值得增加这种复杂性。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《Design Patterns: Elements of Reusable Object-Oriented Software》</li><li>《Head First Design Patterns》</li><li>Java API 文档</li><li>Spring Framework 源码</li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解Java中的享元模式。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解Java中的享元模式。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解Java中的享元模式。如果您有任何问题，欢迎在评论区讨论！ "></a>希望这篇文章能帮助您更好地理解Java中的享元模式。如果您有任何问题，欢迎在评论区讨论！ </h2>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式之外观模式详解</title>
      <link href="/archives/1f2e005f.html"/>
      <url>/archives/1f2e005f.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是外观模式？"><a href="#什么是外观模式？" class="headerlink" title="什么是外观模式？"></a>什么是外观模式？</h2><p>外观模式（Facade Pattern）是一种结构型设计模式，它提供了一个统一的接口，用来访问子系统中的一组接口。外观模式定义了一个高层接口，这个接口使得子系统更加容易使用。</p><h2 id="为什么使用外观模式？"><a href="#为什么使用外观模式？" class="headerlink" title="为什么使用外观模式？"></a>为什么使用外观模式？</h2><ol><li>简化复杂系统的访问</li><li>降低子系统与客户端的耦合度</li><li>提供统一的接口</li><li>隐藏系统的复杂性</li></ol><h2 id="实现示例"><a href="#实现示例" class="headerlink" title="实现示例"></a>实现示例</h2><h3 id="1-基本实现"><a href="#1-基本实现" class="headerlink" title="1. 基本实现"></a>1. 基本实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 子系统类A</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubSystemA</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子系统A的操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 子系统类B</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubSystemB</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子系统B的操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 子系统类C</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubSystemC</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子系统C的操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 外观类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Facade</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SubSystemA</span> systemA<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SubSystemB</span> systemB<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SubSystemC</span> systemC<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Facade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        systemA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubSystemA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        systemB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubSystemB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        systemC <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubSystemC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 提供给客户端的简单接口</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        systemA<span class="token punctuation">.</span><span class="token function">operationA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        systemB<span class="token punctuation">.</span><span class="token function">operationB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        systemC<span class="token punctuation">.</span><span class="token function">operationC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-实际应用示例：家庭影院系统"><a href="#2-实际应用示例：家庭影院系统" class="headerlink" title="2. 实际应用示例：家庭影院系统"></a>2. 实际应用示例：家庭影院系统</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 各个子系统</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Screen</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">down</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"屏幕降下"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"屏幕升起"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Projector</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"投影仪打开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"投影仪关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"投影仪调焦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SoundSystem</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"音响系统打开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"音响系统关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setVolume</span><span class="token punctuation">(</span><span class="token keyword">int</span> volume<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"设置音量: "</span> <span class="token operator">+</span> volume<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DvdPlayer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DVD播放器打开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DVD播放器关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DVD开始播放"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"DVD停止播放"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 家庭影院外观类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomeTheaterFacade</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Screen</span> screen<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Projector</span> projector<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SoundSystem</span> soundSystem<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">DvdPlayer</span> dvdPlayer<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">HomeTheaterFacade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        screen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Screen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        projector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Projector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        soundSystem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoundSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dvdPlayer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DvdPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 观影模式</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">watchMovie</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=== 准备观影 ==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        screen<span class="token punctuation">.</span><span class="token function">down</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        projector<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        projector<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        soundSystem<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        soundSystem<span class="token punctuation">.</span><span class="token function">setVolume</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dvdPlayer<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dvdPlayer<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 结束观影</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">endMovie</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=== 结束观影 ==="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dvdPlayer<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dvdPlayer<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        soundSystem<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        projector<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        screen<span class="token punctuation">.</span><span class="token function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-计算机启动示例"><a href="#3-计算机启动示例" class="headerlink" title="3. 计算机启动示例"></a>3. 计算机启动示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 子系统组件</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CPU</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CPU冻结"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jump</span><span class="token punctuation">(</span><span class="token keyword">long</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CPU跳转到: "</span> <span class="token operator">+</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CPU执行指令"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Memory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">long</span> position<span class="token punctuation">,</span> <span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"内存加载数据: "</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">" 到位置: "</span> <span class="token operator">+</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HardDrive</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">long</span> lba<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"从硬盘读取的数据"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 计算机外观类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComputerFacade</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">CPU</span> cpu<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Memory</span> memory<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">HardDrive</span> hardDrive<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">ComputerFacade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cpu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>memory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Memory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hardDrive <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HardDrive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cpu<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        memory<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> hardDrive<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cpu<span class="token punctuation">.</span><span class="token function">jump</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cpu<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-使用示例"><a href="#4-使用示例" class="headerlink" title="4. 使用示例"></a>4. 使用示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 家庭影院示例</span>        <span class="token class-name">HomeTheaterFacade</span> homeTheater <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HomeTheaterFacade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        homeTheater<span class="token punctuation">.</span><span class="token function">watchMovie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n电影播放中...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        homeTheater<span class="token punctuation">.</span><span class="token function">endMovie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 计算机启动示例</span>        <span class="token class-name">ComputerFacade</span> computer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComputerFacade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        computer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="外观模式的优点"><a href="#外观模式的优点" class="headerlink" title="外观模式的优点"></a>外观模式的优点</h2><ol><li>简化了客户端的调用</li><li>实现了子系统与客户端的松耦合</li><li>提供了一个简单的接口</li><li>隐藏了系统的复杂性</li></ol><h2 id="外观模式的缺点"><a href="#外观模式的缺点" class="headerlink" title="外观模式的缺点"></a>外观模式的缺点</h2><ol><li>不符合开闭原则，修改需要修改外观类</li><li>可能产生过多的外观类</li><li>不能很好地限制客户端对子系统的使用</li></ol><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ol><li>需要为复杂系统提供一个简单接口</li><li>需要将系统分层，使用外观模式定义子系统中每层的入口点</li><li>需要将一个复杂的子系统与其客户端解耦</li><li>需要构建一个层次结构的子系统时</li></ol><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ol><li>适配器模式：适配器改变接口以匹配客户的需求，外观模式提供简化的接口</li><li>单例模式：外观类通常是单例的</li><li>抽象工厂模式：可以与外观模式一起使用来提供一个复杂子系统的接口</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>外观模式是一种使用频率很高的设计模式，它通过提供一个统一的接口，简化了复杂系统的使用。在实际开发中，当需要简化复杂系统的访问时，外观模式是一个很好的选择。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《Design Patterns: Elements of Reusable Object-Oriented Software》</li><li>《Head First Design Patterns》</li><li>Java API 文档</li><li>Spring Framework 源码</li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解Java中的外观模式。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解Java中的外观模式。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解Java中的外观模式。如果您有任何问题，欢迎在评论区讨论！ "></a>希望这篇文章能帮助您更好地理解Java中的外观模式。如果您有任何问题，欢迎在评论区讨论！ </h2>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式之组合模式详解</title>
      <link href="/archives/0f1e905f.html"/>
      <url>/archives/0f1e905f.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是组合模式？"><a href="#什么是组合模式？" class="headerlink" title="什么是组合模式？"></a>什么是组合模式？</h2><p>组合模式（Composite Pattern）是一种结构型设计模式，它允许你将对象组合成树形结构来表现”整体/部分”层次结构。组合能让客户以一致的方式处理个别对象以及组合对象。</p><h2 id="为什么使用组合模式？"><a href="#为什么使用组合模式？" class="headerlink" title="为什么使用组合模式？"></a>为什么使用组合模式？</h2><ol><li>需要表示对象的部分-整体层次结构</li><li>希望用户忽略组合对象与单个对象的不同</li><li>处理树形结构</li><li>统一管理容器和叶子节点</li></ol><h2 id="实现示例"><a href="#实现示例" class="headerlink" title="实现示例"></a>实现示例</h2><h3 id="1-基本实现"><a href="#1-基本实现" class="headerlink" title="1. 基本实现"></a>1. 基本实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 组件抽象类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Component</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">int</span> depth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 叶子节点</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Leaf</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"叶子节点不能添加子节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"叶子节点不能删除子节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">int</span> depth<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">StringBuilder</span> indent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> depth<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            indent<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>indent<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 组合节点</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Composite</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Component</span><span class="token punctuation">&gt;</span></span> children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Composite</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        children<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        children<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">int</span> depth<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">StringBuilder</span> indent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> depth<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            indent<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>indent<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Component</span> component <span class="token operator">:</span> children<span class="token punctuation">)</span> <span class="token punctuation">{</span>            component<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>depth <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-实际应用示例：文件系统"><a href="#2-实际应用示例：文件系统" class="headerlink" title="2. 实际应用示例：文件系统"></a>2. 实际应用示例：文件系统</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 文件系统组件</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">FileSystemComponent</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">FileSystemComponent</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 文件</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">File</span> <span class="token keyword">extends</span> <span class="token class-name">FileSystemComponent</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"File: "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">" ("</span> <span class="token operator">+</span> size <span class="token operator">+</span> <span class="token string">"KB)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 目录</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Directory</span> <span class="token keyword">extends</span> <span class="token class-name">FileSystemComponent</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FileSystemComponent</span><span class="token punctuation">&gt;</span></span> children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">FileSystemComponent</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        children<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">FileSystemComponent</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        children<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> totalSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">FileSystemComponent</span> component <span class="token operator">:</span> children<span class="token punctuation">)</span> <span class="token punctuation">{</span>            totalSize <span class="token operator">+=</span> component<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> totalSize<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Directory: "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">" ("</span> <span class="token operator">+</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"KB)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">FileSystemComponent</span> component <span class="token operator">:</span> children<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            component<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-使用示例"><a href="#3-使用示例" class="headerlink" title="3. 使用示例"></a>3. 使用示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建文件系统结构</span>        <span class="token class-name">Directory</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Directory</span> home <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">"home"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Directory</span> docs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token string">"docs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">File</span> file1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"file1.txt"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">File</span> file2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"file2.doc"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">File</span> file3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"file3.pdf"</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                root<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>home<span class="token punctuation">)</span><span class="token punctuation">;</span>        home<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>docs<span class="token punctuation">)</span><span class="token punctuation">;</span>        docs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span><span class="token punctuation">;</span>        docs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>file2<span class="token punctuation">)</span><span class="token punctuation">;</span>        home<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>file3<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 显示整个文件系统</span>        root<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 显示总大小</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Total size: "</span> <span class="token operator">+</span> root<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"KB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="组合模式的优点"><a href="#组合模式的优点" class="headerlink" title="组合模式的优点"></a>组合模式的优点</h2><ol><li>定义了包含基本对象和组合对象的类层次结构</li><li>简化了客户端代码，客户端可以一致地使用组合对象和单个对象</li><li>使得添加新类型的组件变得容易</li><li>符合开闭原则</li></ol><h2 id="组合模式的缺点"><a href="#组合模式的缺点" class="headerlink" title="组合模式的缺点"></a>组合模式的缺点</h2><ol><li>在需要限制组件类型时会较为复杂</li><li>在需要遍历时可能需要进行类型判断</li><li>可能会使设计变得更加抽象</li></ol><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ol><li>表示对象的部分-整体层次结构</li><li>希望用户忽略组合对象与单个对象的不同</li><li>需要统一处理组合对象和单个对象</li><li>需要实现树形结构的场景</li></ol><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ol><li>装饰器模式：组合模式改变结构，装饰器模式添加职责</li><li>迭代器模式：可以用来遍历组合结构</li><li>访问者模式：可以用来定义对组合结构中的对象的操作</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>组合模式是一种非常实用的设计模式，特别适合用来处理树形结构。它通过将对象组合成树形结构，使得客户端可以统一地处理单个对象和组合对象。在实际开发中，当需要处理树形结构时，组合模式是一个很好的选择。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《Design Patterns: Elements of Reusable Object-Oriented Software》</li><li>《Head First Design Patterns》</li><li>Java API 文档</li><li>Spring Framework 源码</li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解Java中的组合模式。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解Java中的组合模式。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解Java中的组合模式。如果您有任何问题，欢迎在评论区讨论！ "></a>希望这篇文章能帮助您更好地理解Java中的组合模式。如果您有任何问题，欢迎在评论区讨论！ </h2>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式之装饰器模式详解</title>
      <link href="/archives/9f0e805f.html"/>
      <url>/archives/9f0e805f.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是装饰器模式？"><a href="#什么是装饰器模式？" class="headerlink" title="什么是装饰器模式？"></a>什么是装饰器模式？</h2><p>装饰器模式（Decorator Pattern）是一种结构型设计模式，它允许向一个现有的对象添加新的功能，同时又不改变其结构。这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。</p><h2 id="为什么使用装饰器模式？"><a href="#为什么使用装饰器模式？" class="headerlink" title="为什么使用装饰器模式？"></a>为什么使用装饰器模式？</h2><ol><li>在不改变原有对象的情况下动态地给对象添加功能</li><li>比继承更加灵活</li><li>可以实现不同功能的组合</li><li>符合开闭原则</li></ol><h2 id="实现示例"><a href="#实现示例" class="headerlink" title="实现示例"></a>实现示例</h2><h3 id="1-基本实现"><a href="#1-基本实现" class="headerlink" title="1. 基本实现"></a>1. 基本实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 组件接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 具体组件</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteComponent</span> <span class="token keyword">implements</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"具体组件的基本功能"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 装饰器抽象类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Decorator</span> <span class="token keyword">implements</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">Component</span> component<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Decorator</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>component <span class="token operator">=</span> component<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        component<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 具体装饰器A</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteDecoratorA</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ConcreteDecoratorA</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addedBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addedBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"装饰器A添加的功能"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 具体装饰器B</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteDecoratorB</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ConcreteDecoratorB</span><span class="token punctuation">(</span><span class="token class-name">Component</span> component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addedBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addedBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"装饰器B添加的功能"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-实际应用示例：咖啡订单系统"><a href="#2-实际应用示例：咖啡订单系统" class="headerlink" title="2. 实际应用示例：咖啡订单系统"></a>2. 实际应用示例：咖啡订单系统</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 饮料抽象类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Beverage</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">String</span> description <span class="token operator">=</span> <span class="token string">"Unknown Beverage"</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> description<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">double</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 具体饮料：浓缩咖啡</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Espresso</span> <span class="token keyword">extends</span> <span class="token class-name">Beverage</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Espresso</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        description <span class="token operator">=</span> <span class="token string">"浓缩咖啡"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">15.0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 调味品装饰器抽象类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CondimentDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">Beverage</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">Beverage</span> beverage<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 具体装饰器：牛奶</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Milk</span> <span class="token keyword">extends</span> <span class="token class-name">CondimentDecorator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Milk</span><span class="token punctuation">(</span><span class="token class-name">Beverage</span> beverage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>beverage <span class="token operator">=</span> beverage<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> beverage<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 加牛奶"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> beverage<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5.0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 具体装饰器：摩卡</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mocha</span> <span class="token keyword">extends</span> <span class="token class-name">CondimentDecorator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Mocha</span><span class="token punctuation">(</span><span class="token class-name">Beverage</span> beverage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>beverage <span class="token operator">=</span> beverage<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> beverage<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 加摩卡"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> beverage<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3.0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-Java-I-O中的装饰器模式"><a href="#3-Java-I-O中的装饰器模式" class="headerlink" title="3. Java I/O中的装饰器模式"></a>3. Java I/O中的装饰器模式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 文件读取示例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IODecoratorExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 基本的文件输入流</span>            <span class="token class-name">InputStream</span> fileStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 添加缓冲功能</span>            <span class="token class-name">InputStream</span> bufferedStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>fileStream<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 添加数据转换功能</span>            <span class="token class-name">Reader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>bufferedStream<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 添加缓冲读取功能</span>            <span class="token class-name">BufferedReader</span> bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">String</span> line<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        bufferedReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-使用示例"><a href="#4-使用示例" class="headerlink" title="4. 使用示例"></a>4. 使用示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 基本示例</span>        <span class="token class-name">Component</span> component <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Component</span> decoratorA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteDecoratorA</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Component</span> decoratorB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteDecoratorB</span><span class="token punctuation">(</span>decoratorA<span class="token punctuation">)</span><span class="token punctuation">;</span>                decoratorB<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 咖啡订单示例</span>        <span class="token class-name">Beverage</span> beverage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Espresso</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>beverage<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ￥"</span> <span class="token operator">+</span> beverage<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                beverage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Milk</span><span class="token punctuation">(</span>beverage<span class="token punctuation">)</span><span class="token punctuation">;</span>        beverage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mocha</span><span class="token punctuation">(</span>beverage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>beverage<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ￥"</span> <span class="token operator">+</span> beverage<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="装饰器模式的优点"><a href="#装饰器模式的优点" class="headerlink" title="装饰器模式的优点"></a>装饰器模式的优点</h2><ol><li>比继承更加灵活</li><li>可以动态地添加或删除功能</li><li>可以实现不同功能的组合</li><li>符合开闭原则</li></ol><h2 id="装饰器模式的缺点"><a href="#装饰器模式的缺点" class="headerlink" title="装饰器模式的缺点"></a>装饰器模式的缺点</h2><ol><li>可能会产生很多小类</li><li>增加了系统的复杂度</li><li>装饰器的顺序可能会影响结果</li></ol><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ol><li>需要动态地给对象添加功能</li><li>需要在不影响其他对象的情况下，给单个对象添加功能</li><li>需要对功能进行组合的场景</li><li>继承关系过于复杂的场景</li></ol><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ol><li>适配器模式：适配器改变接口，装饰器增强功能</li><li>代理模式：代理控制访问，装饰器添加职责</li><li>组合模式：可以与装饰器模式一起使用，增强树形结构中的对象</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>装饰器模式是一种非常实用的设计模式，它提供了比继承更加灵活的扩展对象功能的方式。Java的I/O系统大量使用了装饰器模式，这使得我们可以通过组合不同的装饰器来实现各种I/O功能。在实际开发中，当需要动态地给对象添加功能时，装饰器模式是一个很好的选择。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《Design Patterns: Elements of Reusable Object-Oriented Software》</li><li>《Head First Design Patterns》</li><li>Java API 文档</li><li>Spring Framework 源码</li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解Java中的装饰器模式。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解Java中的装饰器模式。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解Java中的装饰器模式。如果您有任何问题，欢迎在评论区讨论！ "></a>希望这篇文章能帮助您更好地理解Java中的装饰器模式。如果您有任何问题，欢迎在评论区讨论！ </h2>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式之桥接模式详解</title>
      <link href="/archives/8f9e705f.html"/>
      <url>/archives/8f9e705f.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是桥接模式？"><a href="#什么是桥接模式？" class="headerlink" title="什么是桥接模式？"></a>什么是桥接模式？</h2><p>桥接模式（Bridge Pattern）是一种结构型设计模式，它将抽象部分与实现部分分离，使它们都可以独立地变化。这种模式通过组合的方式来替代继承，降低了类与类之间的耦合度。</p><h2 id="为什么使用桥接模式？"><a href="#为什么使用桥接模式？" class="headerlink" title="为什么使用桥接模式？"></a>为什么使用桥接模式？</h2><ol><li>避免类爆炸性增长</li><li>实现抽象和实现的分离</li><li>提高系统的可扩展性</li><li>实现细节对客户透明</li></ol><h2 id="实现示例"><a href="#实现示例" class="headerlink" title="实现示例"></a>实现示例</h2><h3 id="1-基本实现"><a href="#1-基本实现" class="headerlink" title="1. 基本实现"></a>1. 基本实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 实现接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DrawAPI</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token keyword">int</span> radius<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 具体实现类A</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedCircle</span> <span class="token keyword">implements</span> <span class="token class-name">DrawAPI</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token keyword">int</span> radius<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Drawing Circle[ color: red, radius: "</span> <span class="token operator">+</span> radius <span class="token operator">+</span>                           <span class="token string">", x: "</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">", y: "</span> <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 具体实现类B</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GreenCircle</span> <span class="token keyword">implements</span> <span class="token class-name">DrawAPI</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token keyword">int</span> radius<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Drawing Circle[ color: green, radius: "</span> <span class="token operator">+</span> radius <span class="token operator">+</span>                           <span class="token string">", x: "</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">", y: "</span> <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 抽象类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">DrawAPI</span> drawAPI<span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token class-name">Shape</span><span class="token punctuation">(</span><span class="token class-name">DrawAPI</span> drawAPI<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>drawAPI <span class="token operator">=</span> drawAPI<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 扩展抽象类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> radius<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> radius<span class="token punctuation">,</span> <span class="token class-name">DrawAPI</span> drawAPI<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>drawAPI<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        drawAPI<span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span>radius<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-实际应用示例：消息发送系统"><a href="#2-实际应用示例：消息发送系统" class="headerlink" title="2. 实际应用示例：消息发送系统"></a>2. 实际应用示例：消息发送系统</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 消息接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MessageImplementor</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">String</span> toUser<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 短信实现</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SmsMessage</span> <span class="token keyword">implements</span> <span class="token class-name">MessageImplementor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">String</span> toUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用短信发送消息："</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">" 到用户："</span> <span class="token operator">+</span> toUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 邮件实现</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmailMessage</span> <span class="token keyword">implements</span> <span class="token class-name">MessageImplementor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">String</span> toUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用邮件发送消息："</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">" 到用户："</span> <span class="token operator">+</span> toUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 抽象消息类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractMessage</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">MessageImplementor</span> implementor<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">AbstractMessage</span><span class="token punctuation">(</span><span class="token class-name">MessageImplementor</span> implementor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>implementor <span class="token operator">=</span> implementor<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">String</span> toUser<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 普通消息</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonMessage</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMessage</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">CommonMessage</span><span class="token punctuation">(</span><span class="token class-name">MessageImplementor</span> implementor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>implementor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">String</span> toUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 可以添加普通消息的处理逻辑</span>        implementor<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> toUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 紧急消息</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UrgentMessage</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMessage</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">UrgentMessage</span><span class="token punctuation">(</span><span class="token class-name">MessageImplementor</span> implementor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>implementor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">String</span> toUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>        message <span class="token operator">=</span> <span class="token string">"【紧急】"</span> <span class="token operator">+</span> message<span class="token punctuation">;</span>        implementor<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> toUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-JDBC中的桥接模式示例"><a href="#3-JDBC中的桥接模式示例" class="headerlink" title="3. JDBC中的桥接模式示例"></a>3. JDBC中的桥接模式示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 数据库驱动接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Driver</span> <span class="token punctuation">{</span>    <span class="token class-name">Connection</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">Properties</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// MySQL驱动实现</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySQLDriver</span> <span class="token keyword">implements</span> <span class="token class-name">Driver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Connection</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">Properties</span> info<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// MySQL连接实现</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MySQLConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Oracle驱动实现</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OracleDriver</span> <span class="token keyword">implements</span> <span class="token class-name">Driver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Connection</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">Properties</span> info<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Oracle连接实现</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OracleConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 抽象数据库操作类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Database</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">Driver</span> driver<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Database</span><span class="token punctuation">(</span><span class="token class-name">Driver</span> driver<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>driver <span class="token operator">=</span> driver<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 具体数据库操作类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessDatabase</span> <span class="token keyword">extends</span> <span class="token class-name">Database</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">BusinessDatabase</span><span class="token punctuation">(</span><span class="token class-name">Driver</span> driver<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> driver<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"jdbc:db://localhost:3306"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行查询</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-使用示例"><a href="#4-使用示例" class="headerlink" title="4. 使用示例"></a>4. 使用示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 绘图示例</span>        <span class="token class-name">Shape</span> redCircle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RedCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Shape</span> greenCircle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">GreenCircle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                redCircle<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        greenCircle<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 消息发送示例</span>        <span class="token class-name">AbstractMessage</span> commonSms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonMessage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SmsMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        commonSms<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">AbstractMessage</span> urgentEmail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrgentMessage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EmailMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        urgentEmail<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">"系统异常"</span><span class="token punctuation">,</span> <span class="token string">"管理员"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="桥接模式的优点"><a href="#桥接模式的优点" class="headerlink" title="桥接模式的优点"></a>桥接模式的优点</h2><ol><li>分离抽象接口及其实现部分</li><li>提高可扩充性</li><li>实现细节对客户透明</li><li>可以取代多层继承方案</li></ol><h2 id="桥接模式的缺点"><a href="#桥接模式的缺点" class="headerlink" title="桥接模式的缺点"></a>桥接模式的缺点</h2><ol><li>增加了系统的理解与设计难度</li><li>需要正确识别出系统中的两个独立变化的维度</li></ol><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ol><li>需要在抽象化和实现化之间增加更多灵活性的场景</li><li>一个类存在多个独立变化的维度，且这些维度都需要进行扩展</li><li>不希望使用继承或因为多层继承导致系统类的个数急剧增加的系统</li></ol><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ol><li>适配器模式：适配器模式用于解决已有接口的兼容问题</li><li>策略模式：桥接模式着重于分离抽象和实现，而策略模式着重于算法的封装</li><li>抽象工厂模式：可以结合使用来创建和配置特定的桥接模式</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>桥接模式是一种很实用的结构型设计模式，它主要用于处理多维度变化的系统，通过将抽象部分与实现部分分离，使得两者可以独立地变化。在实际开发中，当遇到需要处理多个维度变化的情况时，桥接模式是一个很好的选择。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《Design Patterns: Elements of Reusable Object-Oriented Software》</li><li>《Head First Design Patterns》</li><li>Java API 文档</li><li>Spring Framework 源码</li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解Java中的桥接模式。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解Java中的桥接模式。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解Java中的桥接模式。如果您有任何问题，欢迎在评论区讨论！ "></a>希望这篇文章能帮助您更好地理解Java中的桥接模式。如果您有任何问题，欢迎在评论区讨论！ </h2>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式之适配器模式详解</title>
      <link href="/archives/7f8e605f.html"/>
      <url>/archives/7f8e605f.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是适配器模式？"><a href="#什么是适配器模式？" class="headerlink" title="什么是适配器模式？"></a>什么是适配器模式？</h2><p>适配器模式（Adapter Pattern）是一种结构型设计模式，它作为两个不兼容接口之间的桥梁，将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p><h2 id="适配器模式的类型"><a href="#适配器模式的类型" class="headerlink" title="适配器模式的类型"></a>适配器模式的类型</h2><ol><li>类适配器（使用继承）</li><li>对象适配器（使用组合）</li></ol><h2 id="实现示例"><a href="#实现示例" class="headerlink" title="实现示例"></a>实现示例</h2><h3 id="1-类适配器模式"><a href="#1-类适配器模式" class="headerlink" title="1. 类适配器模式"></a>1. 类适配器模式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 目标接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 被适配的类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Adaptee</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">specificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"适配者的特殊请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 类适配器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">Adaptee</span> <span class="token keyword">implements</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">specificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用父类的方法</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-对象适配器模式"><a href="#2-对象适配器模式" class="headerlink" title="2. 对象适配器模式"></a>2. 对象适配器模式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 目标接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 被适配的类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Adaptee</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">specificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"适配者的特殊请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 对象适配器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObjectAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Adaptee</span> adaptee<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ObjectAdapter</span><span class="token punctuation">(</span><span class="token class-name">Adaptee</span> adaptee<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>adaptee <span class="token operator">=</span> adaptee<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        adaptee<span class="token punctuation">.</span><span class="token function">specificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用被适配对象的方法</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实际应用示例"><a href="#实际应用示例" class="headerlink" title="实际应用示例"></a>实际应用示例</h2><h3 id="1-电源适配器示例"><a href="#1-电源适配器示例" class="headerlink" title="1. 电源适配器示例"></a>1. 电源适配器示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 美式电源接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AmericanSocket</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">supplyPowerAt110V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 欧式电源接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EuropeanSocket</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">supplyPowerAt220V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 美式电源实现</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AmericanSocketImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AmericanSocket</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">supplyPowerAt110V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"提供110V电压"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 电源适配器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PowerAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">EuropeanSocket</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">AmericanSocket</span> americanSocket<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">PowerAdapter</span><span class="token punctuation">(</span><span class="token class-name">AmericanSocket</span> americanSocket<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>americanSocket <span class="token operator">=</span> americanSocket<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">supplyPowerAt220V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用适配器进行电压转换"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        americanSocket<span class="token punctuation">.</span><span class="token function">supplyPowerAt110V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"将110V转换为220V"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-数据格式转换示例"><a href="#2-数据格式转换示例" class="headerlink" title="2. 数据格式转换示例"></a>2. 数据格式转换示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// JSON数据格式</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonData</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> jsonString<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">JsonData</span><span class="token punctuation">(</span><span class="token class-name">String</span> jsonString<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>jsonString <span class="token operator">=</span> jsonString<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getJsonString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> jsonString<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// XML数据格式</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">XmlData</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token function">getXmlString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// JSON到XML的适配器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JsonToXmlAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">XmlData</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">JsonData</span> jsonData<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">JsonToXmlAdapter</span><span class="token punctuation">(</span><span class="token class-name">JsonData</span> jsonData<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>jsonData <span class="token operator">=</span> jsonData<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getXmlString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 实际项目中这里会有真实的JSON到XML转换逻辑</span>        <span class="token class-name">String</span> json <span class="token operator">=</span> jsonData<span class="token punctuation">.</span><span class="token function">getJsonString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"&lt;xml&gt;%s&lt;/xml&gt;"</span><span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-使用示例"><a href="#3-使用示例" class="headerlink" title="3. 使用示例"></a>3. 使用示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 电源适配器示例</span>        <span class="token class-name">AmericanSocket</span> americanSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AmericanSocketImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">EuropeanSocket</span> adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PowerAdapter</span><span class="token punctuation">(</span>americanSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>        adapter<span class="token punctuation">.</span><span class="token function">supplyPowerAt220V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 数据格式转换示例</span>        <span class="token class-name">JsonData</span> jsonData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonData</span><span class="token punctuation">(</span><span class="token string">"{name: 'John', age: 30}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">XmlData</span> xmlAdapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JsonToXmlAdapter</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>xmlAdapter<span class="token punctuation">.</span><span class="token function">getXmlString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在Java标准库中的应用"><a href="#在Java标准库中的应用" class="headerlink" title="在Java标准库中的应用"></a>在Java标准库中的应用</h2><p>Java标准库中有许多使用适配器模式的例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 输入流适配器示例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InputStreamExample</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 将FileInputStream适配成Reader</span>            <span class="token class-name">Reader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">BufferedReader</span> bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> line <span class="token operator">=</span> bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="适配器模式的优点"><a href="#适配器模式的优点" class="headerlink" title="适配器模式的优点"></a>适配器模式的优点</h2><ol><li>将目标类和适配者类解耦</li><li>增加了类的透明性</li><li>提高了类的复用性</li><li>灵活性好</li></ol><h2 id="适配器模式的缺点"><a href="#适配器模式的缺点" class="headerlink" title="适配器模式的缺点"></a>适配器模式的缺点</h2><ol><li>过多使用适配器会让系统变得凌乱</li><li>可能会增加系统的复杂性</li><li>适配器可能会增加系统的开销</li></ol><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ol><li>系统需要使用现有的类，但这些类的接口不符合系统的需要</li><li>想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的类一起工作</li><li>需要统一多个类的接口设计时</li><li>旧系统改造和升级时</li></ol><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ol><li>装饰器模式：装饰器模式更注重于动态地增加功能</li><li>代理模式：代理模式不会改变接口，而适配器模式会改变接口</li><li>外观模式：外观模式定义了一个新的接口，而适配器模式复用一个原有的接口</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>适配器模式是一种使用频率很高的设计模式，它主要用于接口转换，使得原本由于接口不兼容而不能一起工作的类可以协同工作。在实际开发中，经常会遇到需要适配接口的情况，这时适配器模式就能派上用场。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《Design Patterns: Elements of Reusable Object-Oriented Software》</li><li>《Head First Design Patterns》</li><li>Java API 文档</li><li>Spring Framework 源码</li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解Java中的适配器模式。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解Java中的适配器模式。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解Java中的适配器模式。如果您有任何问题，欢迎在评论区讨论！ "></a>希望这篇文章能帮助您更好地理解Java中的适配器模式。如果您有任何问题，欢迎在评论区讨论！ </h2>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式之原型模式详解</title>
      <link href="/archives/6f7e504f.html"/>
      <url>/archives/6f7e504f.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是原型模式？"><a href="#什么是原型模式？" class="headerlink" title="什么是原型模式？"></a>什么是原型模式？</h2><p>原型模式（Prototype Pattern）是一种创建型设计模式，它允许通过复制现有对象来创建新对象，而不是通过实例化类来创建。这种模式特别适用于创建复杂对象或创建成本较高的情况。</p><h2 id="为什么使用原型模式？"><a href="#为什么使用原型模式？" class="headerlink" title="为什么使用原型模式？"></a>为什么使用原型模式？</h2><ol><li>避免重复创建对象的开销</li><li>动态创建对象的类型</li><li>避免构造函数的约束</li><li>保持对象的状态</li></ol><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>在Java中，我们通常通过实现<code>Cloneable</code>接口来实现原型模式。</p><h3 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Prototype</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> field<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Prototype</span><span class="token punctuation">(</span><span class="token class-name">String</span> field<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>field <span class="token operator">=</span> field<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Prototype</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Prototype</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// getter和setter</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> field<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setField</span><span class="token punctuation">(</span><span class="token class-name">String</span> field<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>field <span class="token operator">=</span> field<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="浅克隆与深克隆"><a href="#浅克隆与深克隆" class="headerlink" title="浅克隆与深克隆"></a>浅克隆与深克隆</h3><h4 id="1-浅克隆示例"><a href="#1-浅克隆示例" class="headerlink" title="1. 浅克隆示例"></a>1. 浅克隆示例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShallowPrototype</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ShallowPrototype</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ShallowPrototype</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">ShallowPrototype</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// getters and setters</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-深克隆示例"><a href="#2-深克隆示例" class="headerlink" title="2. 深克隆示例"></a>2. 深克隆示例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeepPrototype</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">DeepPrototype</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">DeepPrototype</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">DeepPrototype</span> clone <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DeepPrototype</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 深克隆List</span>            clone<span class="token punctuation">.</span>list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> clone<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// getters and setters</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用序列化实现深克隆"><a href="#使用序列化实现深克隆" class="headerlink" title="使用序列化实现深克隆"></a>使用序列化实现深克隆</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SerializablePrototype</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SerializablePrototype</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">SerializablePrototype</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">ByteArrayOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ByteArrayInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bis<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">SerializablePrototype</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实际应用示例"><a href="#实际应用示例" class="headerlink" title="实际应用示例"></a>实际应用示例</h2><h3 id="1-文档克隆系统"><a href="#1-文档克隆系统" class="headerlink" title="1. 文档克隆系统"></a>1. 文档克隆系统</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Document</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> authors<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> metadata<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>authors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>metadata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Document</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Document</span> clone <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Document</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 深克隆集合</span>            clone<span class="token punctuation">.</span>authors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>authors<span class="token punctuation">)</span><span class="token punctuation">;</span>            clone<span class="token punctuation">.</span>metadata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> clone<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 创建模板文档</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Document</span> <span class="token function">createTemplate</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Document</span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token string">"Template"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">"report"</span><span class="token operator">:</span>                template<span class="token punctuation">.</span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"report"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                template<span class="token punctuation">.</span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token string">"format"</span><span class="token punctuation">,</span> <span class="token string">"pdf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"letter"</span><span class="token operator">:</span>                template<span class="token punctuation">.</span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"letter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                template<span class="token punctuation">.</span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token string">"format"</span><span class="token punctuation">,</span> <span class="token string">"doc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// getters and setters</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        metadata<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-使用示例"><a href="#2-使用示例" class="headerlink" title="2. 使用示例"></a>2. 使用示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建报告模板</span>        <span class="token class-name">Document</span> reportTemplate <span class="token operator">=</span> <span class="token class-name">Document</span><span class="token punctuation">.</span><span class="token function">createTemplate</span><span class="token punctuation">(</span><span class="token string">"report"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 基于模板创建新文档</span>        <span class="token class-name">Document</span> report1 <span class="token operator">=</span> reportTemplate<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        report1<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"2024年第一季度报告"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Document</span> report2 <span class="token operator">=</span> reportTemplate<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        report2<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"2024年第二季度报告"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 创建信件模板</span>        <span class="token class-name">Document</span> letterTemplate <span class="token operator">=</span> <span class="token class-name">Document</span><span class="token punctuation">.</span><span class="token function">createTemplate</span><span class="token punctuation">(</span><span class="token string">"letter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 基于模板创建新信件</span>        <span class="token class-name">Document</span> letter1 <span class="token operator">=</span> letterTemplate<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        letter1<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"商务邀请函"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="原型模式的优点"><a href="#原型模式的优点" class="headerlink" title="原型模式的优点"></a>原型模式的优点</h2><ol><li>减少对象创建的开销</li><li>动态添加和删除产品</li><li>提供更灵活的实例化机制</li><li>避免重复初始化代码</li></ol><h2 id="原型模式的缺点"><a href="#原型模式的缺点" class="headerlink" title="原型模式的缺点"></a>原型模式的缺点</h2><ol><li>克隆复杂对象或循环引用的对象比较困难</li><li>深克隆和浅克隆的选择可能会影响系统</li><li>必须实现克隆方法</li></ol><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ol><li>需要创建大量相似对象的场景</li><li>对象创建成本较高的场景</li><li>需要保持对象状态的场景</li><li>需要避免重复初始化的场景</li></ol><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ol><li>工厂模式：原型模式可以与工厂模式结合使用</li><li>命令模式：可以使用原型模式来保存命令的状态</li><li>备忘录模式：可以使用原型模式来实现对象状态的保存和恢复</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>原型模式是一种简单且强大的创建型设计模式，它通过克隆现有对象来创建新对象，避免了重复创建对象的开销。在实际应用中，需要注意深克隆和浅克隆的选择，以及处理复杂对象克隆的问题。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《Design Patterns: Elements of Reusable Object-Oriented Software》</li><li>《Effective Java》第三版</li><li>Java API 文档</li><li>Spring Framework 源码</li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解Java中的原型模式。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解Java中的原型模式。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解Java中的原型模式。如果您有任何问题，欢迎在评论区讨论！ "></a>希望这篇文章能帮助您更好地理解Java中的原型模式。如果您有任何问题，欢迎在评论区讨论！ </h2>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式之工厂模式详解</title>
      <link href="/archives/5f6e403f.html"/>
      <url>/archives/5f6e403f.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是工厂模式？"><a href="#什么是工厂模式？" class="headerlink" title="什么是工厂模式？"></a>什么是工厂模式？</h2><p>工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一，它提供了一种创建对象的最佳方式。在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p><h2 id="工厂模式的三种类型"><a href="#工厂模式的三种类型" class="headerlink" title="工厂模式的三种类型"></a>工厂模式的三种类型</h2><ol><li>简单工厂模式（Simple Factory Pattern）</li><li>工厂方法模式（Factory Method Pattern）</li><li>抽象工厂模式（Abstract Factory Pattern）</li></ol><h2 id="1-简单工厂模式"><a href="#1-简单工厂模式" class="headerlink" title="1. 简单工厂模式"></a>1. 简单工厂模式</h2><h3 id="实现示例"><a href="#实现示例" class="headerlink" title="实现示例"></a>实现示例</h3><p>让我们通过一个计算器的例子来理解简单工厂模式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 操作接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Operation</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token keyword">double</span> numberA<span class="token punctuation">,</span> <span class="token keyword">double</span> numberB<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 加法操作</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddOperation</span> <span class="token keyword">implements</span> <span class="token class-name">Operation</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token keyword">double</span> numberA<span class="token punctuation">,</span> <span class="token keyword">double</span> numberB<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> numberA <span class="token operator">+</span> numberB<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 减法操作</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubtractOperation</span> <span class="token keyword">implements</span> <span class="token class-name">Operation</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token keyword">double</span> numberA<span class="token punctuation">,</span> <span class="token keyword">double</span> numberB<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> numberA <span class="token operator">-</span> numberB<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 乘法操作</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultiplyOperation</span> <span class="token keyword">implements</span> <span class="token class-name">Operation</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token keyword">double</span> numberA<span class="token punctuation">,</span> <span class="token keyword">double</span> numberB<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> numberA <span class="token operator">*</span> numberB<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 除法操作</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DivideOperation</span> <span class="token keyword">implements</span> <span class="token class-name">Operation</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token keyword">double</span> numberA<span class="token punctuation">,</span> <span class="token keyword">double</span> numberB<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numberB <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"除数不能为0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> numberA <span class="token operator">/</span> numberB<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 简单工厂类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperationFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Operation</span> <span class="token function">createOperation</span><span class="token punctuation">(</span><span class="token class-name">String</span> operator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>operator<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">"+"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AddOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"-"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SubtractOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"*"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MultiplyOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"/"</span><span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DivideOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"不支持的操作符"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 客户端使用示例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Operation</span> operation <span class="token operator">=</span> <span class="token class-name">OperationFactory</span><span class="token punctuation">.</span><span class="token function">createOperation</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> result <span class="token operator">=</span> operation<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10 + 5 = "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：10 + 5 = 15</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-工厂方法模式"><a href="#2-工厂方法模式" class="headerlink" title="2. 工厂方法模式"></a>2. 工厂方法模式</h2><p>工厂方法模式是简单工厂模式的进阶版本。</p><h3 id="实现示例-1"><a href="#实现示例-1" class="headerlink" title="实现示例"></a>实现示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 抽象产品</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 具体产品A</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteProductA</span> <span class="token keyword">implements</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ConcreteProductA operation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 具体产品B</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteProductB</span> <span class="token keyword">implements</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ConcreteProductB operation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 抽象工厂</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>    <span class="token class-name">Product</span> <span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 具体工厂A</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteFactoryA</span> <span class="token keyword">implements</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProductA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 具体工厂B</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteFactoryB</span> <span class="token keyword">implements</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProductB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 客户端使用示例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Factory</span> factoryA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteFactoryA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Product</span> productA <span class="token operator">=</span> factoryA<span class="token punctuation">.</span><span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        productA<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Factory</span> factoryB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteFactoryB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Product</span> productB <span class="token operator">=</span> factoryB<span class="token punctuation">.</span><span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        productB<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实际应用示例：日志记录器"><a href="#实际应用示例：日志记录器" class="headerlink" title="实际应用示例：日志记录器"></a>实际应用示例：日志记录器</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 日志记录接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 文件日志记录器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileLogger</span> <span class="token keyword">implements</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"File Logger: "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 数据库日志记录器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseLogger</span> <span class="token keyword">implements</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Database Logger: "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 日志记录器工厂接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LoggerFactory</span> <span class="token punctuation">{</span>    <span class="token class-name">Logger</span> <span class="token function">createLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 文件日志记录器工厂</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileLoggerFactory</span> <span class="token keyword">implements</span> <span class="token class-name">LoggerFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Logger</span> <span class="token function">createLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FileLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 数据库日志记录器工厂</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseLoggerFactory</span> <span class="token keyword">implements</span> <span class="token class-name">LoggerFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Logger</span> <span class="token function">createLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DatabaseLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 使用示例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoggerClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">LoggerFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileLoggerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Logger</span> logger <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"这是一条测试日志"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="工厂模式的优点"><a href="#工厂模式的优点" class="headerlink" title="工厂模式的优点"></a>工厂模式的优点</h2><ol><li>封装对象的创建过程</li><li>降低代码耦合度</li><li>符合开闭原则</li><li>提供统一的创建对象的接口</li></ol><h2 id="工厂模式的缺点"><a href="#工厂模式的缺点" class="headerlink" title="工厂模式的缺点"></a>工厂模式的缺点</h2><ol><li>增加系统的复杂度</li><li>需要创建大量的类</li><li>增加了系统的抽象性和理解难度</li></ol><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ol><li>不知道具体需要创建什么对象</li><li>需要解耦对象的创建和使用</li><li>需要系统具有较好的扩展性</li><li>需要屏蔽产品的具体实现</li></ol><h2 id="Spring框架中的工厂模式"><a href="#Spring框架中的工厂模式" class="headerlink" title="Spring框架中的工厂模式"></a>Spring框架中的工厂模式</h2><p>Spring框架中大量使用了工厂模式，比如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// BeanFactory接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanFactory</span> <span class="token punctuation">{</span>    <span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>工厂模式是一种非常实用的创建型设计模式，它提供了一种创建对象的最佳方式。在实际开发中，我们可以根据具体需求选择使用简单工厂、工厂方法或抽象工厂模式。</p><p>工厂模式的核心思想是：</p><ol><li>封装对象的创建过程</li><li>解耦对象的创建和使用</li><li>提供统一的对象创建接口</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《Design Patterns: Elements of Reusable Object-Oriented Software》</li><li>《Head First Design Patterns》</li><li>Spring Framework 源码</li><li>Java核心技术</li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解Java中的工厂模式。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解Java中的工厂模式。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解Java中的工厂模式。如果您有任何问题，欢迎在评论区讨论！ "></a>希望这篇文章能帮助您更好地理解Java中的工厂模式。如果您有任何问题，欢迎在评论区讨论！ </h2>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式之建造者模式详解</title>
      <link href="/archives/4d5e302f.html"/>
      <url>/archives/4d5e302f.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是建造者模式？"><a href="#什么是建造者模式？" class="headerlink" title="什么是建造者模式？"></a>什么是建造者模式？</h2><p>建造者模式（Builder Pattern）是一种创建型设计模式，它允许您分步骤创建复杂对象。该模式允许您使用相同的创建代码生成不同类型和形式的对象。</p><h2 id="为什么使用建造者模式？"><a href="#为什么使用建造者模式？" class="headerlink" title="为什么使用建造者模式？"></a>为什么使用建造者模式？</h2><ol><li>需要创建的对象具有复杂的内部结构</li><li>需要生成的对象内部属性之间的建造顺序有依赖关系</li><li>对象的创建过程独立于创建该对象的类</li><li>隐藏对象的创建细节</li></ol><h2 id="实现示例"><a href="#实现示例" class="headerlink" title="实现示例"></a>实现示例</h2><p>让我们通过一个计算机组装的例子来理解建造者模式。</p><h3 id="1-产品类"><a href="#1-产品类" class="headerlink" title="1. 产品类"></a>1. 产品类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> cpu<span class="token punctuation">;</span>        <span class="token comment">// CPU</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> motherboard<span class="token punctuation">;</span><span class="token comment">// 主板</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> memory<span class="token punctuation">;</span>     <span class="token comment">// 内存</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> storage<span class="token punctuation">;</span>    <span class="token comment">// 存储</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> gpu<span class="token punctuation">;</span>        <span class="token comment">// 显卡</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> power<span class="token punctuation">;</span>      <span class="token comment">// 电源</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCpu</span><span class="token punctuation">(</span><span class="token class-name">String</span> cpu<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cpu <span class="token operator">=</span> cpu<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMotherboard</span><span class="token punctuation">(</span><span class="token class-name">String</span> motherboard<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>motherboard <span class="token operator">=</span> motherboard<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMemory</span><span class="token punctuation">(</span><span class="token class-name">String</span> memory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>memory <span class="token operator">=</span> memory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStorage</span><span class="token punctuation">(</span><span class="token class-name">String</span> storage<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>storage <span class="token operator">=</span> storage<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGpu</span><span class="token punctuation">(</span><span class="token class-name">String</span> gpu<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>gpu <span class="token operator">=</span> gpu<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPower</span><span class="token punctuation">(</span><span class="token class-name">String</span> power<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>power <span class="token operator">=</span> power<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Computer{"</span> <span class="token operator">+</span>                <span class="token string">"cpu='"</span> <span class="token operator">+</span> cpu <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", motherboard='"</span> <span class="token operator">+</span> motherboard <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", memory='"</span> <span class="token operator">+</span> memory <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", storage='"</span> <span class="token operator">+</span> storage <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", gpu='"</span> <span class="token operator">+</span> gpu <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", power='"</span> <span class="token operator">+</span> power <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-抽象建造者"><a href="#2-抽象建造者" class="headerlink" title="2. 抽象建造者"></a>2. 抽象建造者</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ComputerBuilder</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">Computer</span> computer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildCPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildMotherboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildGPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Computer</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> computer<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-具体建造者"><a href="#3-具体建造者" class="headerlink" title="3. 具体建造者"></a>3. 具体建造者</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 游戏电脑建造者</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GamingComputerBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">ComputerBuilder</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildCPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        computer<span class="token punctuation">.</span><span class="token function">setCpu</span><span class="token punctuation">(</span><span class="token string">"Intel i9 12900K"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildMotherboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        computer<span class="token punctuation">.</span><span class="token function">setMotherboard</span><span class="token punctuation">(</span><span class="token string">"ROG MAXIMUS Z690"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        computer<span class="token punctuation">.</span><span class="token function">setMemory</span><span class="token punctuation">(</span><span class="token string">"32GB DDR5 6000MHz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        computer<span class="token punctuation">.</span><span class="token function">setStorage</span><span class="token punctuation">(</span><span class="token string">"2TB NVMe SSD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildGPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        computer<span class="token punctuation">.</span><span class="token function">setGpu</span><span class="token punctuation">(</span><span class="token string">"NVIDIA RTX 4090"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        computer<span class="token punctuation">.</span><span class="token function">setPower</span><span class="token punctuation">(</span><span class="token string">"1000W 金牌电源"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 办公电脑建造者</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OfficeComputerBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">ComputerBuilder</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildCPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        computer<span class="token punctuation">.</span><span class="token function">setCpu</span><span class="token punctuation">(</span><span class="token string">"Intel i5 12400"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildMotherboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        computer<span class="token punctuation">.</span><span class="token function">setMotherboard</span><span class="token punctuation">(</span><span class="token string">"B660M"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        computer<span class="token punctuation">.</span><span class="token function">setMemory</span><span class="token punctuation">(</span><span class="token string">"16GB DDR4 3200MHz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        computer<span class="token punctuation">.</span><span class="token function">setStorage</span><span class="token punctuation">(</span><span class="token string">"512GB SSD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildGPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        computer<span class="token punctuation">.</span><span class="token function">setGpu</span><span class="token punctuation">(</span><span class="token string">"Intel UHD 730"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        computer<span class="token punctuation">.</span><span class="token function">setPower</span><span class="token punctuation">(</span><span class="token string">"450W 铜牌电源"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-指挥者"><a href="#4-指挥者" class="headerlink" title="4. 指挥者"></a>4. 指挥者</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Director</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">ComputerBuilder</span> builder<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Director</span><span class="token punctuation">(</span><span class="token class-name">ComputerBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>builder <span class="token operator">=</span> builder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">constructComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        builder<span class="token punctuation">.</span><span class="token function">buildCPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">buildMotherboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">buildMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">buildStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">buildGPU</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">buildPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Computer</span> <span class="token function">getComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-客户端使用示例"><a href="#5-客户端使用示例" class="headerlink" title="5. 客户端使用示例"></a>5. 客户端使用示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建游戏电脑</span>        <span class="token class-name">ComputerBuilder</span> gamingBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GamingComputerBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Director</span> director <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Director</span><span class="token punctuation">(</span>gamingBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        director<span class="token punctuation">.</span><span class="token function">constructComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Computer</span> gamingComputer <span class="token operator">=</span> director<span class="token punctuation">.</span><span class="token function">getComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"游戏电脑配置："</span> <span class="token operator">+</span> gamingComputer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建办公电脑</span>        <span class="token class-name">ComputerBuilder</span> officeBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OfficeComputerBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        director <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Director</span><span class="token punctuation">(</span>officeBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        director<span class="token punctuation">.</span><span class="token function">constructComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Computer</span> officeComputer <span class="token operator">=</span> director<span class="token punctuation">.</span><span class="token function">getComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"办公电脑配置："</span> <span class="token operator">+</span> officeComputer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="建造者模式的变体：链式调用"><a href="#建造者模式的变体：链式调用" class="headerlink" title="建造者模式的变体：链式调用"></a>建造者模式的变体：链式调用</h2><p>在实际开发中，我们经常会看到更简洁的建造者模式实现，特别是在配置对象时：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> cpu<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> motherboard<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> memory<span class="token punctuation">;</span>    <span class="token comment">// ... 其他属性</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">Computer</span> computer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">cpu</span><span class="token punctuation">(</span><span class="token class-name">String</span> cpu<span class="token punctuation">)</span> <span class="token punctuation">{</span>            computer<span class="token punctuation">.</span>cpu <span class="token operator">=</span> cpu<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">motherboard</span><span class="token punctuation">(</span><span class="token class-name">String</span> motherboard<span class="token punctuation">)</span> <span class="token punctuation">{</span>            computer<span class="token punctuation">.</span>motherboard <span class="token operator">=</span> motherboard<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">memory</span><span class="token punctuation">(</span><span class="token class-name">String</span> memory<span class="token punctuation">)</span> <span class="token punctuation">{</span>            computer<span class="token punctuation">.</span>memory <span class="token operator">=</span> memory<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">Computer</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> computer<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 使用示例</span><span class="token class-name">Computer</span> computer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">cpu</span><span class="token punctuation">(</span><span class="token string">"Intel i7"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">motherboard</span><span class="token punctuation">(</span><span class="token string">"Z690"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">memory</span><span class="token punctuation">(</span><span class="token string">"32GB"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>可以精细地控制产品的创建过程</li><li>将复杂产品的创建步骤分解</li><li>可以复用相同的创建代码</li><li>遵循单一职责原则</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>需要创建多个类，增加代码复杂度</li><li>与工厂模式相比，更加重量级</li></ol><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ol><li>需要创建的对象具有复杂的内部结构</li><li>需要生成的对象内部属性之间的建造顺序有依赖关系</li><li>对象的创建过程独立于创建该对象的类</li><li>需要对象的创建过程具有更好的可控性</li></ol><h2 id="实际应用示例"><a href="#实际应用示例" class="headerlink" title="实际应用示例"></a>实际应用示例</h2><ol><li>StringBuilder类</li><li>Lombok的@Builder注解</li><li>Spring框架中的BeanDefinitionBuilder</li><li>Apache Camel的RouteBuilder</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>建造者模式是一种非常实用的设计模式，特别适合用于创建复杂对象。它可以让我们更好地控制对象的创建过程，并且使代码更加清晰易读。在实际开发中，我们经常会使用其变体形式（链式调用），这种形式更加简洁优雅。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《Design Patterns: Elements of Reusable Object-Oriented Software》</li><li>《Effective Java》第三版</li><li>Spring Framework 源码</li><li>Lombok 文档</li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解Java中的建造者模式。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解Java中的建造者模式。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解Java中的建造者模式。如果您有任何问题，欢迎在评论区讨论！ "></a>希望这篇文章能帮助您更好地理解Java中的建造者模式。如果您有任何问题，欢迎在评论区讨论！ </h2>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式之抽象工厂模式详解</title>
      <link href="/archives/3722688e.html"/>
      <url>/archives/3722688e.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是抽象工厂模式？"><a href="#什么是抽象工厂模式？" class="headerlink" title="什么是抽象工厂模式？"></a>什么是抽象工厂模式？</h2><p>抽象工厂模式（Abstract Factory Pattern）是一种创建型设计模式，它提供了一种方式，可以将一组具有同一主题的单独的工厂封装起来。它属于设计模式中的创建型模式，提供了一种创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p><h2 id="主要组成部分"><a href="#主要组成部分" class="headerlink" title="主要组成部分"></a>主要组成部分</h2><ol><li>抽象工厂（Abstract Factory）</li><li>具体工厂（Concrete Factory）</li><li>抽象产品（Abstract Product）</li><li>具体产品（Concrete Product）</li></ol><h2 id="实现示例"><a href="#实现示例" class="headerlink" title="实现示例"></a>实现示例</h2><p>让我们通过一个电子产品生产的例子来理解抽象工厂模式。</p><h3 id="1-首先定义抽象产品"><a href="#1-首先定义抽象产品" class="headerlink" title="1. 首先定义抽象产品"></a>1. 首先定义抽象产品</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 手机接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 耳机接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Earphone</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">playMusic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-创建具体产品"><a href="#2-创建具体产品" class="headerlink" title="2. 创建具体产品"></a>2. 创建具体产品</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 苹果手机</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IPhone</span> <span class="token keyword">implements</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用iPhone打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 苹果耳机</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AirPods</span> <span class="token keyword">implements</span> <span class="token class-name">Earphone</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">playMusic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用AirPods播放音乐"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 小米手机</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MiPhone</span> <span class="token keyword">implements</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用小米手机打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 小米耳机</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MiEarphone</span> <span class="token keyword">implements</span> <span class="token class-name">Earphone</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">playMusic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用小米耳机播放音乐"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-定义抽象工厂"><a href="#3-定义抽象工厂" class="headerlink" title="3. 定义抽象工厂"></a>3. 定义抽象工厂</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ElectronicsFactory</span> <span class="token punctuation">{</span>    <span class="token class-name">Phone</span> <span class="token function">createPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Earphone</span> <span class="token function">createEarphone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-实现具体工厂"><a href="#4-实现具体工厂" class="headerlink" title="4. 实现具体工厂"></a>4. 实现具体工厂</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 苹果产品工厂</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppleFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ElectronicsFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Phone</span> <span class="token function">createPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">IPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Earphone</span> <span class="token function">createEarphone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AirPods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 小米产品工厂</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaomiFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ElectronicsFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Phone</span> <span class="token function">createPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Earphone</span> <span class="token function">createEarphone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MiEarphone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-客户端使用示例"><a href="#5-客户端使用示例" class="headerlink" title="5. 客户端使用示例"></a>5. 客户端使用示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建苹果工厂</span>        <span class="token class-name">ElectronicsFactory</span> appleFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppleFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Phone</span> iPhone <span class="token operator">=</span> appleFactory<span class="token punctuation">.</span><span class="token function">createPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Earphone</span> airPods <span class="token operator">=</span> appleFactory<span class="token punctuation">.</span><span class="token function">createEarphone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                iPhone<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 输出：使用iPhone打电话</span>        airPods<span class="token punctuation">.</span><span class="token function">playMusic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出：使用AirPods播放音乐</span>                <span class="token comment">// 创建小米工厂</span>        <span class="token class-name">ElectronicsFactory</span> xiaomiFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiaomiFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Phone</span> miPhone <span class="token operator">=</span> xiaomiFactory<span class="token punctuation">.</span><span class="token function">createPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Earphone</span> miEarphone <span class="token operator">=</span> xiaomiFactory<span class="token punctuation">.</span><span class="token function">createEarphone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                miPhone<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 输出：使用小米手机打电话</span>        miEarphone<span class="token punctuation">.</span><span class="token function">playMusic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：使用小米耳机播放音乐</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>分离接口和实现</li><li>使得切换产品族变得容易</li><li>保证了同一产品族中产品的一致性</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>产品族扩展困难</li><li>需要定义很多接口和类，增加系统复杂度</li></ol><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ol><li>系统需要独立于产品的创建、组合和表示时</li><li>系统要由多个产品系列中的一个来配置时</li><li>要强调一系列相关的产品对象的设计以便进行约束时</li></ol><h2 id="实际应用示例"><a href="#实际应用示例" class="headerlink" title="实际应用示例"></a>实际应用示例</h2><h3 id="数据库访问层实现"><a href="#数据库访问层实现" class="headerlink" title="数据库访问层实现"></a>数据库访问层实现</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 抽象工厂</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DatabaseFactory</span> <span class="token punctuation">{</span>    <span class="token class-name">Connection</span> <span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Command</span> <span class="token function">createCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Reader</span> <span class="token function">createReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// MySQL具体工厂</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySQLFactory</span> <span class="token keyword">implements</span> <span class="token class-name">DatabaseFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Connection</span> <span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MySQLConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Command</span> <span class="token function">createCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MySQLCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Reader</span> <span class="token function">createReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MySQLReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Oracle具体工厂</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OracleFactory</span> <span class="token keyword">implements</span> <span class="token class-name">DatabaseFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Connection</span> <span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OracleConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Command</span> <span class="token function">createCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OracleCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Reader</span> <span class="token function">createReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OracleReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h2><ol><li>工厂方法模式：通常用于创建单个产品</li><li>抽象工厂模式：用于创建一整族的相关产品</li><li>建造者模式：关注复杂对象的步骤化构建</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>抽象工厂模式提供了一种封装一组具有相同主题的工厂的方法。它特别适合于需要创建一系列相关对象的场景，能够确保这些对象之间的兼容性。在实际应用中，数据库访问、GUI组件创建等场景都是抽象工厂模式的典型应用场景。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《Design Patterns: Elements of Reusable Object-Oriented Software》</li><li>《Head First Design Patterns》</li><li>Spring Framework 源码</li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解Java中的抽象工厂模式。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解Java中的抽象工厂模式。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解Java中的抽象工厂模式。如果您有任何问题，欢迎在评论区讨论！ "></a>希望这篇文章能帮助您更好地理解Java中的抽象工厂模式。如果您有任何问题，欢迎在评论区讨论！ </h2>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式之单例模式详解</title>
      <link href="/archives/fc0d0894.html"/>
      <url>/archives/fc0d0894.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是单例模式？"><a href="#什么是单例模式？" class="headerlink" title="什么是单例模式？"></a>什么是单例模式？</h2><p>单例模式（Singleton Pattern）是最简单的设计模式之一，它保证一个类仅有一个实例，并提供一个访问它的全局访问点。单例模式属于创建型模式。</p><h2 id="为什么使用单例模式？"><a href="#为什么使用单例模式？" class="headerlink" title="为什么使用单例模式？"></a>为什么使用单例模式？</h2><ul><li>确保某个类只有一个实例</li><li>提供对该实例的全局访问点</li><li>控制共享资源的访问</li></ul><h2 id="单例模式的实现方式"><a href="#单例模式的实现方式" class="headerlink" title="单例模式的实现方式"></a>单例模式的实现方式</h2><h3 id="1-懒汉式（线程不安全）"><a href="#1-懒汉式（线程不安全）" class="headerlink" title="1. 懒汉式（线程不安全）"></a>1. 懒汉式（线程不安全）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式是最基本的实现方式，但它不是线程安全的。</p><h3 id="2-懒汉式（线程安全）"><a href="#2-懒汉式（线程安全）" class="headerlink" title="2. 懒汉式（线程安全）"></a>2. 懒汉式（线程安全）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过synchronized关键字实现线程安全，但效率较低。</p><h3 id="3-双重检查锁定（DCL）"><a href="#3-双重检查锁定（DCL）" class="headerlink" title="3. 双重检查锁定（DCL）"></a>3. 双重检查锁定（DCL）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式既保证了线程安全，又提高了效率。</p><h3 id="4-饿汉式"><a href="#4-饿汉式" class="headerlink" title="4. 饿汉式"></a>4. 饿汉式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方式是线程安全的，但会在类加载时就初始化实例。</p><h3 id="5-静态内部类"><a href="#5-静态内部类" class="headerlink" title="5. 静态内部类"></a>5. 静态内部类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是推荐的实现方式，既保证了线程安全，又实现了懒加载。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>配置管理器</li><li>数据库连接池</li><li>线程池</li><li>日志管理器</li><li>缓存管理器</li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>构造函数必须是私有的</li><li>考虑线程安全问题</li><li>注意序列化和反序列化问题</li><li>防止反射攻击</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>单例模式虽然简单，但实现时需要考虑多种因素。在实际开发中，建议使用静态内部类或枚举方式来实现单例模式，它们能够保证线程安全，并且实现简单。</p><h2 id="代码示例：实际应用中的单例模式"><a href="#代码示例：实际应用中的单例模式" class="headerlink" title="代码示例：实际应用中的单例模式"></a>代码示例：实际应用中的单例模式</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 配置管理器示例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigManager</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">ConfigManager</span> instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Properties</span> properties<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">ConfigManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"config.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ConfigManager</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">ConfigManager</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《设计模式：可复用面向对象软件的基础》</li><li>《Effective Java》第三版</li><li>Java API 文档</li></ul><hr><h2 id="希望这篇文章能帮助您更好地理解Java中的单例模式。如果您有任何问题，欢迎在评论区讨论！"><a href="#希望这篇文章能帮助您更好地理解Java中的单例模式。如果您有任何问题，欢迎在评论区讨论！" class="headerlink" title="希望这篇文章能帮助您更好地理解Java中的单例模式。如果您有任何问题，欢迎在评论区讨论！ "></a>希望这篇文章能帮助您更好地理解Java中的单例模式。如果您有任何问题，欢迎在评论区讨论！ </h2>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/archives/4a17b156.html"/>
      <url>/archives/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
